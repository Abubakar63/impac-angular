(function () {
var module;

module = angular.module('maestrano.analytics.chart', ['maestrano.assets']);

module.directive('dhbChart', [
  'TemplatePath', '$compile', '$timeout', function(TemplatePath, $compile, $timeout) {
    return {
      restrict: 'A',
      scope: {
        data: '='
      },
      templateUrl: TemplatePath['analytics/chart.html'],
      link: function(scope, elem, attr) {
        var myChart, options;
        options = {
          bezierCurve: true,
          pointDotRadius: 3,
          responsive: true,
          scaleShowLabels: true,
          scaleShowLabelBackdrop: true,
          scaleBeginAtZero: true,
          scaleShowGridLines: true
        };
        myChart = null;
        scope.draw = function() {
          var canvas, ctx, newWidth;
          if (!_.isEmpty(scope.data.options)) {
            angular.extend(options, scope.data.options);
          }
          if (myChart !== null) {
            myChart.destroy();
          }
          canvas = elem.children().get(0);
          ctx = canvas.getContext("2d");
          switch (scope.data.chartType) {
            case 'Bar':
              myChart = new Chart(ctx).Bar(scope.data.data, options);
              break;
            case 'Line':
              myChart = new Chart(ctx).Line(scope.data.data, options);
              break;
            case 'Pie':
              angular.extend(options, {
                tooltipFixed: true
              });
              myChart = new Chart(ctx).Pie(scope.data.data, options);
          }
          return newWidth = angular.element(canvas).parent().width();
        };
        return scope.$watch((function() {
          return scope.data;
        }), function(value) {
          if (value != null) {
            return $timeout((function() {
              return scope.draw();
            }), 100);
          }
        }, true);
      }
    };
  }
]);
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNoYXJ0LmpzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFBLE1BQUEsR0FBUyxPQUFPLENBQUMsTUFBUixDQUFlLDJCQUFmLEVBQTJDLENBQUMsa0JBQUQsQ0FBM0M7O0FBTVQsTUFBTSxDQUFDLFNBQVAsQ0FBaUIsVUFBakIsRUFBNkI7RUFBQyxjQUFELEVBQWdCLFVBQWhCLEVBQTRCLFVBQTVCLEVBQXdDLFNBQUMsWUFBRCxFQUFjLFFBQWQsRUFBd0IsUUFBeEI7QUFDbkUsV0FBTztNQUNILFFBQUEsRUFBVSxHQURQO01BRUgsS0FBQSxFQUFPO1FBQ0wsSUFBQSxFQUFNLEdBREQ7T0FGSjtNQUtILFdBQUEsRUFBYSxZQUFhLENBQUEsc0JBQUEsQ0FMdkI7TUFNSCxJQUFBLEVBQU0sU0FBQyxLQUFELEVBQU8sSUFBUCxFQUFZLElBQVo7QUFDSixZQUFBO1FBQUEsT0FBQSxHQUFVO1VBQ1IsV0FBQSxFQUFhLElBREw7VUFFUixjQUFBLEVBQWlCLENBRlQ7VUFHUixVQUFBLEVBQVksSUFISjtVQUlSLGVBQUEsRUFBa0IsSUFKVjtVQUtSLHNCQUFBLEVBQXlCLElBTGpCO1VBTVIsZ0JBQUEsRUFBa0IsSUFOVjtVQU9SLGtCQUFBLEVBQW9CLElBUFo7O1FBVVYsT0FBQSxHQUFVO1FBQ1YsS0FBSyxDQUFDLElBQU4sR0FBYSxTQUFBO0FBQ1gsY0FBQTtVQUFBLElBQUcsQ0FBQyxDQUFDLENBQUMsT0FBRixDQUFVLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBckIsQ0FBSjtZQUNFLE9BQU8sQ0FBQyxNQUFSLENBQWUsT0FBZixFQUF1QixLQUFLLENBQUMsSUFBSSxDQUFDLE9BQWxDLEVBREY7O1VBR0EsSUFBRyxPQUFBLEtBQVcsSUFBZDtZQUF3QixPQUFPLENBQUMsT0FBUixDQUFBLEVBQXhCOztVQUNBLE1BQUEsR0FBUyxJQUFJLENBQUMsUUFBTCxDQUFBLENBQWUsQ0FBQyxHQUFoQixDQUFvQixDQUFwQjtVQUNULEdBQUEsR0FBTSxNQUFNLENBQUMsVUFBUCxDQUFrQixJQUFsQjtBQUNOLGtCQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBbEI7QUFBQSxpQkFFTyxLQUZQO2NBRWtCLE9BQUEsR0FBYyxJQUFBLEtBQUEsQ0FBTSxHQUFOLENBQVUsQ0FBQyxHQUFYLENBQWUsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUExQixFQUErQixPQUEvQjtBQUF6QjtBQUZQLGlCQUdPLE1BSFA7Y0FHbUIsT0FBQSxHQUFjLElBQUEsS0FBQSxDQUFNLEdBQU4sQ0FBVSxDQUFDLElBQVgsQ0FBZ0IsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUEzQixFQUFnQyxPQUFoQztBQUExQjtBQUhQLGlCQUlPLEtBSlA7Y0FLSSxPQUFPLENBQUMsTUFBUixDQUFlLE9BQWYsRUFBd0I7Z0JBQUMsWUFBQSxFQUFjLElBQWY7ZUFBeEI7Y0FDQSxPQUFBLEdBQWMsSUFBQSxLQUFBLENBQU0sR0FBTixDQUFVLENBQUMsR0FBWCxDQUFlLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBMUIsRUFBK0IsT0FBL0I7QUFObEI7aUJBT0EsUUFBQSxHQUFXLE9BQU8sQ0FBQyxPQUFSLENBQWdCLE1BQWhCLENBQXVCLENBQUMsTUFBeEIsQ0FBQSxDQUFnQyxDQUFDLEtBQWpDLENBQUE7UUFkQTtlQWlCYixLQUFLLENBQUMsTUFBTixDQUFhLENBQUMsU0FBQTtpQkFBRyxLQUFLLENBQUM7UUFBVCxDQUFELENBQWIsRUFDRyxTQUFDLEtBQUQ7VUFDQyxJQUFHLGFBQUg7bUJBQ0UsUUFBQSxDQUFTLENBQUMsU0FBQTtxQkFBRyxLQUFLLENBQUMsSUFBTixDQUFBO1lBQUgsQ0FBRCxDQUFULEVBQTJCLEdBQTNCLEVBREY7O1FBREQsQ0FESCxFQUlDLElBSkQ7TUE3QkksQ0FOSDs7RUFENEQsQ0FBeEM7Q0FBN0IiLCJmaWxlIjoiY2hhcnQuanMuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnbWFlc3RyYW5vLmFuYWx5dGljcy5jaGFydCcsWydtYWVzdHJhbm8uYXNzZXRzJ10pXG5cbiM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuIyBDb21wb25lbnRcbiM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5tb2R1bGUuZGlyZWN0aXZlKCdkaGJDaGFydCcsIFsnVGVtcGxhdGVQYXRoJywnJGNvbXBpbGUnLCAnJHRpbWVvdXQnLCAoVGVtcGxhdGVQYXRoLCRjb21waWxlLCAkdGltZW91dCkgLT5cbiAgcmV0dXJuIHtcbiAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICBzY29wZToge1xuICAgICAgICBkYXRhOiAnPSdcbiAgICAgIH0sXG4gICAgICB0ZW1wbGF0ZVVybDogVGVtcGxhdGVQYXRoWydhbmFseXRpY3MvY2hhcnQuaHRtbCddLFxuICAgICAgbGluazogKHNjb3BlLGVsZW0sYXR0cikgLT5cbiAgICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgICBiZXppZXJDdXJ2ZTogdHJ1ZSxcbiAgICAgICAgICBwb2ludERvdFJhZGl1cyA6IDMsXG4gICAgICAgICAgcmVzcG9uc2l2ZTogdHJ1ZSxcbiAgICAgICAgICBzY2FsZVNob3dMYWJlbHMgOiB0cnVlLFxuICAgICAgICAgIHNjYWxlU2hvd0xhYmVsQmFja2Ryb3AgOiB0cnVlLFxuICAgICAgICAgIHNjYWxlQmVnaW5BdFplcm86IHRydWUsXG4gICAgICAgICAgc2NhbGVTaG93R3JpZExpbmVzOiB0cnVlLFxuICAgICAgICB9XG5cbiAgICAgICAgbXlDaGFydCA9IG51bGxcbiAgICAgICAgc2NvcGUuZHJhdyA9IC0+XG4gICAgICAgICAgaWYgIV8uaXNFbXB0eShzY29wZS5kYXRhLm9wdGlvbnMpXG4gICAgICAgICAgICBhbmd1bGFyLmV4dGVuZChvcHRpb25zLHNjb3BlLmRhdGEub3B0aW9ucylcblxuICAgICAgICAgIGlmIG15Q2hhcnQgIT0gbnVsbCB0aGVuIG15Q2hhcnQuZGVzdHJveSgpXG4gICAgICAgICAgY2FudmFzID0gZWxlbS5jaGlsZHJlbigpLmdldCgwKVxuICAgICAgICAgIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIilcbiAgICAgICAgICBzd2l0Y2ggc2NvcGUuZGF0YS5jaGFydFR5cGVcbiAgICAgICAgICAgICMgd2hlbiAnRG91Z2hudXQnIHRoZW4gbXlDaGFydCA9IG5ldyBDaGFydChjdHgpLkRvdWdobnV0KHNjb3BlLmRhdGEuZGF0YSxvcHRpb25zKVxuICAgICAgICAgICAgd2hlbiAnQmFyJyB0aGVuIG15Q2hhcnQgPSBuZXcgQ2hhcnQoY3R4KS5CYXIoc2NvcGUuZGF0YS5kYXRhLG9wdGlvbnMpXG4gICAgICAgICAgICB3aGVuICdMaW5lJyB0aGVuIG15Q2hhcnQgPSBuZXcgQ2hhcnQoY3R4KS5MaW5lKHNjb3BlLmRhdGEuZGF0YSxvcHRpb25zKVxuICAgICAgICAgICAgd2hlbiAnUGllJ1xuICAgICAgICAgICAgICBhbmd1bGFyLmV4dGVuZChvcHRpb25zLCB7dG9vbHRpcEZpeGVkOiB0cnVlfSlcbiAgICAgICAgICAgICAgbXlDaGFydCA9IG5ldyBDaGFydChjdHgpLlBpZShzY29wZS5kYXRhLmRhdGEsb3B0aW9ucylcbiAgICAgICAgICBuZXdXaWR0aCA9IGFuZ3VsYXIuZWxlbWVudChjYW52YXMpLnBhcmVudCgpLndpZHRoKClcblxuICAgICAgICAjIFJlZHJhdyB0aGUgY2hhcnQgd2hlbiBkYXRhIGNoYW5nZXNcbiAgICAgICAgc2NvcGUuJHdhdGNoKCgtPiBzY29wZS5kYXRhKVxuICAgICAgICAgICwodmFsdWUpIC0+XG4gICAgICAgICAgICBpZiB2YWx1ZT9cbiAgICAgICAgICAgICAgJHRpbWVvdXQoKC0+IHNjb3BlLmRyYXcoKSksMTAwKVxuICAgICAgICAsdHJ1ZSlcbiAgICB9XG5dKVxuIl19