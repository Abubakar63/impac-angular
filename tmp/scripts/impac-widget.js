(function () {
var module;

module = angular.module('maestrano.analytics.impac-widget', ['maestrano.assets']);

module.controller('ImpacWidgetCtrl', [
  '$scope', '$timeout', 'DhbAnalyticsSvc', 'TemplatePath', 'AssetPath', 'Utilities', function($scope, $timeout, DhbAnalyticsSvc, TemplatePath, AssetPath, Utilities) {
    var extendDeep, pushMetadata, w;
    $scope.loaderImage = AssetPath['loader-white-bg.gif'];
    extendDeep = function(dst, src) {
      return angular.forEach(src, function(value, key) {
        if (dst[key] && dst[key].constructor && dst[key].constructor === Object) {
          return extendDeep(dst[key], value);
        } else {
          return dst[key] = value;
        }
      });
    };
    w = $scope.widget || {};
    w.parentDashboard || (w.parentDashboard = $scope.parentDashboard);
    w.settings = [];
    w.isLoading = true;
    w.hasEditAbility = true;
    w.hasDeleteAbility = true;
    w.loadContent = function(refreshCache) {
      if (refreshCache == null) {
        refreshCache = false;
      }
      w.isLoading = true;
      return DhbAnalyticsSvc.widgets.show(w, refreshCache).then(function(success) {
        var updatedWidget;
        updatedWidget = success.data;
        updatedWidget.content || (updatedWidget.content = {});
        updatedWidget.originalName = updatedWidget.name;
        angular.extend(w, updatedWidget);
        w.initContext();
        w.initSettings();
        w.isLoading = false;
        if (angular.isDefined(w.format)) {
          return w.format();
        }
      }, function(errors) {
        w.errors = Utilities.processRailsError(errors);
        return w.isLoading = false;
      });
    };
    w.initSettings = function() {
      angular.forEach(w.settings, function(setting) {
        return setting.initialize();
      });
      w.isEditMode = false;
      return true;
    };
    w.updateSettings = function(needContentReload) {
      var meta;
      if (needContentReload == null) {
        needContentReload = true;
      }
      meta = {};
      angular.forEach(w.settings, function(setting) {
        return extendDeep(meta, setting.toMetadata());
      });
      if (!_.isEmpty(meta)) {
        pushMetadata(meta, needContentReload);
      }
      return true;
    };
    pushMetadata = function(newMetadata, needContentReload) {
      var data;
      if (needContentReload == null) {
        needContentReload = true;
      }
      if (_.isEmpty(newMetadata)) {
        return;
      }
      data = {
        metadata: newMetadata
      };
      if (needContentReload) {
        w.isLoading = true;
      }
      return DhbAnalyticsSvc.widgets.update(w, data).then(function(success) {
        angular.extend(w, success.data);
        if (needContentReload) {
          return w.loadContent();
        }
      }, function(errors) {
        w.errors = Utilities.processRailsError(errors);
        return w.isLoading = false;
      });
    };
    return w.getColClass = function() {
      return "col-md-" + w.width;
    };
  }
]);

module.directive('impacWidget', [
  'TemplatePath', '$templateCache', function(TemplatePath, $templateCache) {
    return {
      restrict: 'A',
      scope: {
        parentDashboard: '=',
        widget: '='
      },
      controller: 'ImpacWidgetCtrl',
      link: function(scope, element) {
        var splittedPath, templateElems;
        splittedPath = angular.copy(scope.widget.category).split("/");
        templateElems = ["analytics/widgets/widget"].concat(splittedPath.splice(0, 2));
        scope.templateUrl = TemplatePath[templateElems.join("-").replace(/_/g, "-").concat(".html")];
        return scope.isTemplateLoaded = function() {
          return !!$templateCache.get(scope.templateUrl);
        };
      },
      template: '<div ng-show="isTemplateLoaded()" ng-include="templateUrl"></div><div ng-hide="isTemplateLoaded()"><div class="top-line"><div common-top-buttons parent-widget="widget" /> <div common-editable-title parent-widget="widget" /></div><div class="content"><div class="loader" align="center"><img class="gif" ng-src="{{loaderImage}}"/></div></div></div>'
    };
  }
]);
})();
//# sourceMappingURL=data:application/json;base64,