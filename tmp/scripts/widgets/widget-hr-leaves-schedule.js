(function () {
var module;

module = angular.module('maestrano.analytics.widget-hr-leaves-schedule', ['maestrano.assets']);

module.controller('WidgetHrLeavesScheduleCtrl', [
  '$scope', 'DhbAnalyticsSvc', 'ChartFormatterSvc', function($scope, DhbAnalyticsSvc, ChartFormatterSvc) {
    var getSettingsCount, w;
    w = $scope.widget;
    $scope.eventSources = [];
    w.initContext = function() {
      var eventsArray;
      if ($scope.isDataFound = angular.isDefined(w.content) && !_.isEmpty(w.content.summary)) {
        eventsArray = [];
        angular.forEach(w.content.summary, function(leave) {
          return eventsArray.push({
            title: leave.employee_name + " - " + leave.title,
            start: leave.start_date,
            end: leave.end_date
          });
        });
        return $scope.eventSources = angular.copy(eventsArray);
      }
    };
    getSettingsCount = function() {
      if (w.settings != null) {
        return w.settings.length;
      } else {
        return 0;
      }
    };
    $scope.$watch(getSettingsCount, function(total) {
      if (total >= 1) {
        return w.loadContent();
      }
    });
    return w;
  }
]);

module.directive('widgetHrLeavesSchedule', function() {
  return {
    restrict: 'A',
    link: function(scope, element) {
      element.addClass("hr");
      return element.addClass("leaves-schedule");
    },
    controller: 'WidgetHrLeavesScheduleCtrl'
  };
});

module.directive('widgetComponentCalendar', function() {
  return {
    scope: {
      events: '=ngModel'
    },
    restrict: 'A',
    link: function(scope, element) {
      var calendarOptions, getEvents;
      calendarOptions = {
        header: {
          left: "prev",
          center: "title",
          right: "next"
        },
        contentHeight: 204
      };
      getEvents = function() {
        return scope.events;
      };
      return scope.$watch(getEvents, function(events) {
        if (events.length > 0) {
          element.fullCalendar('destroy');
          angular.extend(calendarOptions, {
            events: scope.events
          });
          return element.fullCalendar(calendarOptions);
        }
      }, true);
    }
  };
});
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndpZGdldHMvd2lkZ2V0LWhyLWxlYXZlcy1zY2hlZHVsZS5qcy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQTs7QUFBQSxNQUFBLEdBQVMsT0FBTyxDQUFDLE1BQVIsQ0FBZSwrQ0FBZixFQUErRCxDQUFDLGtCQUFELENBQS9EOztBQUVULE1BQU0sQ0FBQyxVQUFQLENBQWtCLDRCQUFsQixFQUErQztFQUM3QyxRQUQ2QyxFQUNuQyxpQkFEbUMsRUFDaEIsbUJBRGdCLEVBRTdDLFNBQUMsTUFBRCxFQUFTLGVBQVQsRUFBMEIsaUJBQTFCO0FBRUUsUUFBQTtJQUFBLENBQUEsR0FBSSxNQUFNLENBQUM7SUFDWCxNQUFNLENBQUMsWUFBUCxHQUFzQjtJQUV0QixDQUFDLENBQUMsV0FBRixHQUFnQixTQUFBO0FBQ2QsVUFBQTtNQUFBLElBQUcsTUFBTSxDQUFDLFdBQVAsR0FBcUIsT0FBTyxDQUFDLFNBQVIsQ0FBa0IsQ0FBQyxDQUFDLE9BQXBCLENBQUEsSUFBZ0MsQ0FBQyxDQUFDLENBQUMsT0FBRixDQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBcEIsQ0FBekQ7UUFFRSxXQUFBLEdBQWM7UUFDZCxPQUFPLENBQUMsT0FBUixDQUFnQixDQUFDLENBQUMsT0FBTyxDQUFDLE9BQTFCLEVBQW1DLFNBQUMsS0FBRDtpQkFDakMsV0FBVyxDQUFDLElBQVosQ0FDRTtZQUNFLEtBQUEsRUFBVSxLQUFLLENBQUMsYUFBUCxHQUFxQixLQUFyQixHQUEwQixLQUFLLENBQUMsS0FEM0M7WUFFRSxLQUFBLEVBQU8sS0FBSyxDQUFDLFVBRmY7WUFHRSxHQUFBLEVBQUssS0FBSyxDQUFDLFFBSGI7V0FERjtRQURpQyxDQUFuQztlQVNBLE1BQU0sQ0FBQyxZQUFQLEdBQXNCLE9BQU8sQ0FBQyxJQUFSLENBQWEsV0FBYixFQVp4Qjs7SUFEYztJQXdCaEIsZ0JBQUEsR0FBbUIsU0FBQTtNQUNqQixJQUFHLGtCQUFIO0FBQ0UsZUFBTyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BRHBCO09BQUEsTUFBQTtBQUdFLGVBQU8sRUFIVDs7SUFEaUI7SUFPbkIsTUFBTSxDQUFDLE1BQVAsQ0FBYyxnQkFBZCxFQUFnQyxTQUFDLEtBQUQ7TUFDOUIsSUFBbUIsS0FBQSxJQUFTLENBQTVCO2VBQUEsQ0FBQyxDQUFDLFdBQUYsQ0FBQSxFQUFBOztJQUQ4QixDQUFoQztBQUdBLFdBQU87RUF2Q1QsQ0FGNkM7Q0FBL0M7O0FBNENBLE1BQU0sQ0FBQyxTQUFQLENBQWlCLHdCQUFqQixFQUEyQyxTQUFBO0FBQ3pDLFNBQU87SUFDTCxRQUFBLEVBQVUsR0FETDtJQUVMLElBQUEsRUFBTSxTQUFDLEtBQUQsRUFBUSxPQUFSO01BQ0osT0FBTyxDQUFDLFFBQVIsQ0FBaUIsSUFBakI7YUFDQSxPQUFPLENBQUMsUUFBUixDQUFpQixpQkFBakI7SUFGSSxDQUZEO0lBS0osVUFBQSxFQUFZLDRCQUxSOztBQURrQyxDQUEzQzs7QUFVQSxNQUFNLENBQUMsU0FBUCxDQUFpQix5QkFBakIsRUFBNEMsU0FBQTtBQUMxQyxTQUFPO0lBQ0wsS0FBQSxFQUFPO01BQ0wsTUFBQSxFQUFRLFVBREg7S0FERjtJQUlMLFFBQUEsRUFBVSxHQUpMO0lBS0wsSUFBQSxFQUFNLFNBQUMsS0FBRCxFQUFRLE9BQVI7QUFDSixVQUFBO01BQUEsZUFBQSxHQUFrQjtRQUNoQixNQUFBLEVBQVE7VUFDTixJQUFBLEVBQU0sTUFEQTtVQUVOLE1BQUEsRUFBUSxPQUZGO1VBR04sS0FBQSxFQUFPLE1BSEQ7U0FEUTtRQU1oQixhQUFBLEVBQWUsR0FOQzs7TUFVbEIsU0FBQSxHQUFZLFNBQUE7QUFDVixlQUFPLEtBQUssQ0FBQztNQURIO2FBR1osS0FBSyxDQUFDLE1BQU4sQ0FBYSxTQUFiLEVBQXdCLFNBQUMsTUFBRDtRQUN0QixJQUFHLE1BQU0sQ0FBQyxNQUFQLEdBQWdCLENBQW5CO1VBQ0UsT0FBTyxDQUFDLFlBQVIsQ0FBcUIsU0FBckI7VUFDQSxPQUFPLENBQUMsTUFBUixDQUFlLGVBQWYsRUFBZ0M7WUFBQyxNQUFBLEVBQVEsS0FBSyxDQUFDLE1BQWY7V0FBaEM7aUJBQ0EsT0FBTyxDQUFDLFlBQVIsQ0FBcUIsZUFBckIsRUFIRjs7TUFEc0IsQ0FBeEIsRUFLQyxJQUxEO0lBZEksQ0FMRDs7QUFEbUMsQ0FBNUMiLCJmaWxlIjoid2lkZ2V0cy93aWRnZXQtaHItbGVhdmVzLXNjaGVkdWxlLmpzLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ21hZXN0cmFuby5hbmFseXRpY3Mud2lkZ2V0LWhyLWxlYXZlcy1zY2hlZHVsZScsWydtYWVzdHJhbm8uYXNzZXRzJ10pXG5cbm1vZHVsZS5jb250cm9sbGVyKCdXaWRnZXRIckxlYXZlc1NjaGVkdWxlQ3RybCcsW1xuICAnJHNjb3BlJywgJ0RoYkFuYWx5dGljc1N2YycsICdDaGFydEZvcm1hdHRlclN2YycsXG4gICgkc2NvcGUsIERoYkFuYWx5dGljc1N2YywgQ2hhcnRGb3JtYXR0ZXJTdmMpIC0+XG5cbiAgICB3ID0gJHNjb3BlLndpZGdldFxuICAgICRzY29wZS5ldmVudFNvdXJjZXMgPSBbXVxuXG4gICAgdy5pbml0Q29udGV4dCA9IC0+XG4gICAgICBpZiAkc2NvcGUuaXNEYXRhRm91bmQgPSBhbmd1bGFyLmlzRGVmaW5lZCh3LmNvbnRlbnQpICYmICFfLmlzRW1wdHkody5jb250ZW50LnN1bW1hcnkpXG4gICAgXG4gICAgICAgIGV2ZW50c0FycmF5ID0gW11cbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKHcuY29udGVudC5zdW1tYXJ5LCAobGVhdmUpIC0+XG4gICAgICAgICAgZXZlbnRzQXJyYXkucHVzaChcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdGl0bGU6IFwiI3tsZWF2ZS5lbXBsb3llZV9uYW1lfSAtICN7bGVhdmUudGl0bGV9XCIsXG4gICAgICAgICAgICAgIHN0YXJ0OiBsZWF2ZS5zdGFydF9kYXRlLFxuICAgICAgICAgICAgICBlbmQ6IGxlYXZlLmVuZF9kYXRlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgKSBcbiAgICAgICAgKVxuICAgICAgICAkc2NvcGUuZXZlbnRTb3VyY2VzID0gYW5ndWxhci5jb3B5KGV2ZW50c0FycmF5KVxuXG4gICAgIyAtLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgIyBUT0RPOiBSZWZhY3RvciBvbmNlIHdlIGhhdmUgdW5kZXJzdG9vZCBleGFjdGx5IGhvdyB0aGUgYW5ndWxhcmpzIGNvbXBpbGF0aW9uIHByb2Nlc3Mgd29ya3M6XG4gICAgIyBpbiB0aGlzIG9yZGVyLCB3ZSBzaG91bGQ6XG4gICAgIyAxLSBjb21waWxlIGltcGFjLXdpZGdldCBjb250cm9sbGVyXG4gICAgIyAyLSBjb21waWxlIHRoZSBzcGVjaWZpYyB3aWRnZXQgdGVtcGxhdGUvY29udHJvbGxlclxuICAgICMgMy0gY29tcGlsZSB0aGUgc2V0dGluZ3MgdGVtcGxhdGVzL2NvbnRyb2xsZXJzXG4gICAgIyA0LSBjYWxsIHdpZGdldC5sb2FkQ29udGVudCgpIChpZGVhbGx5LCBmcm9tIGltcGFjLXdpZGdldCwgb25jZSBhIGNhbGxiYWNrIFxuICAgICMgICAgIGFzc2Vzc2luZyB0aGF0IGV2ZXJ5dGhpbmcgaXMgY29tcGlsZWQgYW4gcmVhZHkgaXMgcmVjZWl2ZWQpXG4gICAgZ2V0U2V0dGluZ3NDb3VudCA9IC0+XG4gICAgICBpZiB3LnNldHRpbmdzP1xuICAgICAgICByZXR1cm4gdy5zZXR0aW5ncy5sZW5ndGhcbiAgICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIDBcblxuICAgICMgb3JnYW5pemF0aW9uX2lkc1xuICAgICRzY29wZS4kd2F0Y2ggZ2V0U2V0dGluZ3NDb3VudCwgKHRvdGFsKSAtPlxuICAgICAgdy5sb2FkQ29udGVudCgpIGlmIHRvdGFsID49IDFcblxuICAgIHJldHVybiB3XG5dKVxuXG5tb2R1bGUuZGlyZWN0aXZlKCd3aWRnZXRIckxlYXZlc1NjaGVkdWxlJywgLT5cbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIGxpbms6IChzY29wZSwgZWxlbWVudCkgLT5cbiAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoXCJoclwiKVxuICAgICAgZWxlbWVudC5hZGRDbGFzcyhcImxlYXZlcy1zY2hlZHVsZVwiKVxuICAgICxjb250cm9sbGVyOiAnV2lkZ2V0SHJMZWF2ZXNTY2hlZHVsZUN0cmwnXG4gIH1cbilcblxubW9kdWxlLmRpcmVjdGl2ZSgnd2lkZ2V0Q29tcG9uZW50Q2FsZW5kYXInLCAtPlxuICByZXR1cm4ge1xuICAgIHNjb3BlOiB7XG4gICAgICBldmVudHM6ICc9bmdNb2RlbCdcbiAgICB9XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBsaW5rOiAoc2NvcGUsIGVsZW1lbnQpIC0+XG4gICAgICBjYWxlbmRhck9wdGlvbnMgPSB7XG4gICAgICAgIGhlYWRlcjoge1xuICAgICAgICAgIGxlZnQ6IFwicHJldlwiLFxuICAgICAgICAgIGNlbnRlcjogXCJ0aXRsZVwiLFxuICAgICAgICAgIHJpZ2h0OiBcIm5leHRcIixcbiAgICAgICAgfSxcbiAgICAgICAgY29udGVudEhlaWdodDogMjA0LFxuICAgICAgICAjIGFzcGVjdFJhdGlvOiAzLFxuICAgICAgfVxuXG4gICAgICBnZXRFdmVudHMgPSAtPlxuICAgICAgICByZXR1cm4gc2NvcGUuZXZlbnRzXG5cbiAgICAgIHNjb3BlLiR3YXRjaCBnZXRFdmVudHMsIChldmVudHMpIC0+XG4gICAgICAgIGlmIGV2ZW50cy5sZW5ndGggPiAwXG4gICAgICAgICAgZWxlbWVudC5mdWxsQ2FsZW5kYXIoJ2Rlc3Ryb3knKVxuICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKGNhbGVuZGFyT3B0aW9ucywge2V2ZW50czogc2NvcGUuZXZlbnRzfSlcbiAgICAgICAgICBlbGVtZW50LmZ1bGxDYWxlbmRhcihjYWxlbmRhck9wdGlvbnMpXG4gICAgICAsdHJ1ZVxuICB9ICBcbikiXX0=