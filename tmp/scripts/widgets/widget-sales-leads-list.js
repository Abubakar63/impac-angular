(function () {
var module;

module = angular.module('maestrano.analytics.widget-sales-leads-list', ['maestrano.assets']);

module.controller('WidgetSalesLeadsListCtrl', [
  '$scope', 'DhbAnalyticsSvc', 'ChartFormatterSvc', '$filter', function($scope, DhbAnalyticsSvc, ChartFormatterSvc, $filter) {
    var getSettingsCount, w;
    w = $scope.widget;
    w.initContext = function() {
      return $scope.isDataFound = angular.isDefined(w.content) && !_.isEmpty(w.content.leads);
    };
    $scope.getLeadDescription = function(aLead) {
      var nameLineArray, tooltip;
      tooltip = [];
      nameLineArray = ["<strong>"];
      if (aLead.first_name) {
        nameLineArray.push($filter('titleize')(aLead.first_name));
      }
      if (aLead.last_name) {
        nameLineArray.push($filter('titleize')(aLead.last_name));
      }
      nameLineArray.push("</strong>");
      tooltip.push(nameLineArray.join(' '));
      tooltip.push("Status: " + ($filter('titleize')(aLead.lead_status)));
      if (aLead.organization) {
        tooltip.push("Organization: " + ($filter('titleize')(aLead.organization)));
      }
      if (aLead.opportunities) {
        tooltip.push("<strong>Opportunities:</strong>");
        angular.forEach(aLead.opportunities, function(opp) {
          var oppLineArray;
          oppLineArray = [];
          if (opp.code) {
            oppLineArray.push("#" + opp.code);
          }
          if (opp.name) {
            oppLineArray.push("" + opp.name);
          }
          if (opp.amount) {
            oppLineArray.push($filter('mnoCurrency')(opp.amount.total_amount, "USD", false));
          }
          if (opp.probability) {
            oppLineArray.push(opp.probability + "%");
          }
          if (opp.sales_stage) {
            oppLineArray.push("" + opp.sales_stage);
          }
          return tooltip.push(oppLineArray.join(' - '));
        });
      }
      return tooltip.join("<br />");
    };
    getSettingsCount = function() {
      if (w.settings != null) {
        return w.settings.length;
      } else {
        return 0;
      }
    };
    $scope.$watch(getSettingsCount, function(total) {
      if (total >= 1) {
        return w.loadContent();
      }
    });
    return w;
  }
]);

module.directive('widgetSalesLeadsList', function() {
  return {
    restrict: 'A',
    link: function(scope, element) {
      element.addClass("sales");
      return element.addClass("list");
    },
    controller: 'WidgetSalesLeadsListCtrl'
  };
});
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndpZGdldHMvd2lkZ2V0LXNhbGVzLWxlYWRzLWxpc3QuanMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUE7O0FBQUEsTUFBQSxHQUFTLE9BQU8sQ0FBQyxNQUFSLENBQWUsNkNBQWYsRUFBNkQsQ0FBQyxrQkFBRCxDQUE3RDs7QUFFVCxNQUFNLENBQUMsVUFBUCxDQUFrQiwwQkFBbEIsRUFBNkM7RUFDM0MsUUFEMkMsRUFDakMsaUJBRGlDLEVBQ2QsbUJBRGMsRUFDTyxTQURQLEVBRTNDLFNBQUMsTUFBRCxFQUFTLGVBQVQsRUFBMEIsaUJBQTFCLEVBQTZDLE9BQTdDO0FBRUUsUUFBQTtJQUFBLENBQUEsR0FBSSxNQUFNLENBQUM7SUFFWCxDQUFDLENBQUMsV0FBRixHQUFnQixTQUFBO2FBQ2QsTUFBTSxDQUFDLFdBQVAsR0FBcUIsT0FBTyxDQUFDLFNBQVIsQ0FBa0IsQ0FBQyxDQUFDLE9BQXBCLENBQUEsSUFBZ0MsQ0FBQyxDQUFDLENBQUMsT0FBRixDQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBcEI7SUFEeEM7SUFHaEIsTUFBTSxDQUFDLGtCQUFQLEdBQTRCLFNBQUMsS0FBRDtBQUMxQixVQUFBO01BQUEsT0FBQSxHQUFVO01BRVYsYUFBQSxHQUFnQixDQUFDLFVBQUQ7TUFDaEIsSUFBNkQsS0FBSyxDQUFDLFVBQW5FO1FBQUEsYUFBYSxDQUFDLElBQWQsQ0FBbUIsT0FBQSxDQUFRLFVBQVIsQ0FBQSxDQUFvQixLQUFLLENBQUMsVUFBMUIsQ0FBbkIsRUFBQTs7TUFDQSxJQUE0RCxLQUFLLENBQUMsU0FBbEU7UUFBQSxhQUFhLENBQUMsSUFBZCxDQUFtQixPQUFBLENBQVEsVUFBUixDQUFBLENBQW9CLEtBQUssQ0FBQyxTQUExQixDQUFuQixFQUFBOztNQUNBLGFBQWEsQ0FBQyxJQUFkLENBQW1CLFdBQW5CO01BRUEsT0FBTyxDQUFDLElBQVIsQ0FBYSxhQUFhLENBQUMsSUFBZCxDQUFtQixHQUFuQixDQUFiO01BQ0EsT0FBTyxDQUFDLElBQVIsQ0FBYSxVQUFBLEdBQVUsQ0FBQyxPQUFBLENBQVEsVUFBUixDQUFBLENBQW9CLEtBQUssQ0FBQyxXQUExQixDQUFELENBQXZCO01BQ0EsSUFBNEUsS0FBSyxDQUFDLFlBQWxGO1FBQUEsT0FBTyxDQUFDLElBQVIsQ0FBYSxnQkFBQSxHQUFnQixDQUFDLE9BQUEsQ0FBUSxVQUFSLENBQUEsQ0FBb0IsS0FBSyxDQUFDLFlBQTFCLENBQUQsQ0FBN0IsRUFBQTs7TUFFQSxJQUFHLEtBQUssQ0FBQyxhQUFUO1FBQ0UsT0FBTyxDQUFDLElBQVIsQ0FBYSxpQ0FBYjtRQUNBLE9BQU8sQ0FBQyxPQUFSLENBQWdCLEtBQUssQ0FBQyxhQUF0QixFQUFxQyxTQUFDLEdBQUQ7QUFDbkMsY0FBQTtVQUFBLFlBQUEsR0FBZTtVQUNmLElBQXFDLEdBQUcsQ0FBQyxJQUF6QztZQUFBLFlBQVksQ0FBQyxJQUFiLENBQWtCLEdBQUEsR0FBSSxHQUFHLENBQUMsSUFBMUIsRUFBQTs7VUFDQSxJQUFvQyxHQUFHLENBQUMsSUFBeEM7WUFBQSxZQUFZLENBQUMsSUFBYixDQUFrQixFQUFBLEdBQUcsR0FBRyxDQUFDLElBQXpCLEVBQUE7O1VBRUEsSUFBb0YsR0FBRyxDQUFDLE1BQXhGO1lBQUEsWUFBWSxDQUFDLElBQWIsQ0FBa0IsT0FBQSxDQUFRLGFBQVIsQ0FBQSxDQUF1QixHQUFHLENBQUMsTUFBTSxDQUFDLFlBQWxDLEVBQWdELEtBQWhELEVBQXVELEtBQXZELENBQWxCLEVBQUE7O1VBQ0EsSUFBNEMsR0FBRyxDQUFDLFdBQWhEO1lBQUEsWUFBWSxDQUFDLElBQWIsQ0FBcUIsR0FBRyxDQUFDLFdBQUwsR0FBaUIsR0FBckMsRUFBQTs7VUFDQSxJQUEyQyxHQUFHLENBQUMsV0FBL0M7WUFBQSxZQUFZLENBQUMsSUFBYixDQUFrQixFQUFBLEdBQUcsR0FBRyxDQUFDLFdBQXpCLEVBQUE7O2lCQUNBLE9BQU8sQ0FBQyxJQUFSLENBQWEsWUFBWSxDQUFDLElBQWIsQ0FBa0IsS0FBbEIsQ0FBYjtRQVJtQyxDQUFyQyxFQUZGOztBQVlBLGFBQU8sT0FBTyxDQUFDLElBQVIsQ0FBYSxRQUFiO0lBeEJtQjtJQW1DNUIsZ0JBQUEsR0FBbUIsU0FBQTtNQUNqQixJQUFHLGtCQUFIO0FBQ0UsZUFBTyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BRHBCO09BQUEsTUFBQTtBQUdFLGVBQU8sRUFIVDs7SUFEaUI7SUFPbkIsTUFBTSxDQUFDLE1BQVAsQ0FBYyxnQkFBZCxFQUFnQyxTQUFDLEtBQUQ7TUFDOUIsSUFBbUIsS0FBQSxJQUFTLENBQTVCO2VBQUEsQ0FBQyxDQUFDLFdBQUYsQ0FBQSxFQUFBOztJQUQ4QixDQUFoQztBQUdBLFdBQU87RUFwRFQsQ0FGMkM7Q0FBN0M7O0FBeURBLE1BQU0sQ0FBQyxTQUFQLENBQWlCLHNCQUFqQixFQUF5QyxTQUFBO0FBQ3ZDLFNBQU87SUFDTCxRQUFBLEVBQVUsR0FETDtJQUVMLElBQUEsRUFBTSxTQUFDLEtBQUQsRUFBUSxPQUFSO01BQ0osT0FBTyxDQUFDLFFBQVIsQ0FBaUIsT0FBakI7YUFDQSxPQUFPLENBQUMsUUFBUixDQUFpQixNQUFqQjtJQUZJLENBRkQ7SUFLSixVQUFBLEVBQVksMEJBTFI7O0FBRGdDLENBQXpDIiwiZmlsZSI6IndpZGdldHMvd2lkZ2V0LXNhbGVzLWxlYWRzLWxpc3QuanMuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnbWFlc3RyYW5vLmFuYWx5dGljcy53aWRnZXQtc2FsZXMtbGVhZHMtbGlzdCcsWydtYWVzdHJhbm8uYXNzZXRzJ10pXG5cbm1vZHVsZS5jb250cm9sbGVyKCdXaWRnZXRTYWxlc0xlYWRzTGlzdEN0cmwnLFtcbiAgJyRzY29wZScsICdEaGJBbmFseXRpY3NTdmMnLCAnQ2hhcnRGb3JtYXR0ZXJTdmMnLCAnJGZpbHRlcicsXG4gICgkc2NvcGUsIERoYkFuYWx5dGljc1N2YywgQ2hhcnRGb3JtYXR0ZXJTdmMsICRmaWx0ZXIpIC0+XG5cbiAgICB3ID0gJHNjb3BlLndpZGdldFxuXG4gICAgdy5pbml0Q29udGV4dCA9IC0+XG4gICAgICAkc2NvcGUuaXNEYXRhRm91bmQgPSBhbmd1bGFyLmlzRGVmaW5lZCh3LmNvbnRlbnQpICYmICFfLmlzRW1wdHkody5jb250ZW50LmxlYWRzKVxuXG4gICAgJHNjb3BlLmdldExlYWREZXNjcmlwdGlvbiA9IChhTGVhZCkgLT5cbiAgICAgIHRvb2x0aXAgPSBbXVxuXG4gICAgICBuYW1lTGluZUFycmF5ID0gW1wiPHN0cm9uZz5cIl1cbiAgICAgIG5hbWVMaW5lQXJyYXkucHVzaCgkZmlsdGVyKCd0aXRsZWl6ZScpKGFMZWFkLmZpcnN0X25hbWUpKSBpZiBhTGVhZC5maXJzdF9uYW1lXG4gICAgICBuYW1lTGluZUFycmF5LnB1c2goJGZpbHRlcigndGl0bGVpemUnKShhTGVhZC5sYXN0X25hbWUpKSBpZiBhTGVhZC5sYXN0X25hbWVcbiAgICAgIG5hbWVMaW5lQXJyYXkucHVzaChcIjwvc3Ryb25nPlwiKVxuICAgICAgXG4gICAgICB0b29sdGlwLnB1c2gobmFtZUxpbmVBcnJheS5qb2luKCcgJykpIFxuICAgICAgdG9vbHRpcC5wdXNoKFwiU3RhdHVzOiAjeyRmaWx0ZXIoJ3RpdGxlaXplJykoYUxlYWQubGVhZF9zdGF0dXMpfVwiKVxuICAgICAgdG9vbHRpcC5wdXNoKFwiT3JnYW5pemF0aW9uOiAjeyRmaWx0ZXIoJ3RpdGxlaXplJykoYUxlYWQub3JnYW5pemF0aW9uKX1cIikgaWYgYUxlYWQub3JnYW5pemF0aW9uXG4gICAgICBcbiAgICAgIGlmIGFMZWFkLm9wcG9ydHVuaXRpZXNcbiAgICAgICAgdG9vbHRpcC5wdXNoKFwiPHN0cm9uZz5PcHBvcnR1bml0aWVzOjwvc3Ryb25nPlwiKVxuICAgICAgICBhbmd1bGFyLmZvckVhY2ggYUxlYWQub3Bwb3J0dW5pdGllcywgKG9wcCkgLT5cbiAgICAgICAgICBvcHBMaW5lQXJyYXkgPSBbXVxuICAgICAgICAgIG9wcExpbmVBcnJheS5wdXNoKFwiIyN7b3BwLmNvZGV9XCIpIGlmIG9wcC5jb2RlXG4gICAgICAgICAgb3BwTGluZUFycmF5LnB1c2goXCIje29wcC5uYW1lfVwiKSBpZiBvcHAubmFtZVxuICAgICAgICAgICMgVE9ETyBjdXJyZW5jeVxuICAgICAgICAgIG9wcExpbmVBcnJheS5wdXNoKCRmaWx0ZXIoJ21ub0N1cnJlbmN5Jykob3BwLmFtb3VudC50b3RhbF9hbW91bnQsIFwiVVNEXCIsIGZhbHNlKSkgaWYgb3BwLmFtb3VudFxuICAgICAgICAgIG9wcExpbmVBcnJheS5wdXNoKFwiI3tvcHAucHJvYmFiaWxpdHl9JVwiKSBpZiBvcHAucHJvYmFiaWxpdHlcbiAgICAgICAgICBvcHBMaW5lQXJyYXkucHVzaChcIiN7b3BwLnNhbGVzX3N0YWdlfVwiKSBpZiBvcHAuc2FsZXNfc3RhZ2VcbiAgICAgICAgICB0b29sdGlwLnB1c2gob3BwTGluZUFycmF5LmpvaW4oJyAtICcpKVxuXG4gICAgICByZXR1cm4gdG9vbHRpcC5qb2luKFwiPGJyIC8+XCIpXG5cbiAgICAjIC0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAjIFRPRE86IFJlZmFjdG9yIG9uY2Ugd2UgaGF2ZSB1bmRlcnN0b29kIGV4YWN0bHkgaG93IHRoZSBhbmd1bGFyanMgY29tcGlsYXRpb24gcHJvY2VzcyB3b3JrczpcbiAgICAjIGluIHRoaXMgb3JkZXIsIHdlIHNob3VsZDpcbiAgICAjIDEtIGNvbXBpbGUgaW1wYWMtd2lkZ2V0IGNvbnRyb2xsZXJcbiAgICAjIDItIGNvbXBpbGUgdGhlIHNwZWNpZmljIHdpZGdldCB0ZW1wbGF0ZS9jb250cm9sbGVyXG4gICAgIyAzLSBjb21waWxlIHRoZSBzZXR0aW5ncyB0ZW1wbGF0ZXMvY29udHJvbGxlcnNcbiAgICAjIDQtIGNhbGwgd2lkZ2V0LmxvYWRDb250ZW50KCkgKGlkZWFsbHksIGZyb20gaW1wYWMtd2lkZ2V0LCBvbmNlIGEgY2FsbGJhY2sgXG4gICAgIyAgICAgYXNzZXNzaW5nIHRoYXQgZXZlcnl0aGluZyBpcyBjb21waWxlZCBhbiByZWFkeSBpcyByZWNlaXZlZClcbiAgICBnZXRTZXR0aW5nc0NvdW50ID0gLT5cbiAgICAgIGlmIHcuc2V0dGluZ3M/XG4gICAgICAgIHJldHVybiB3LnNldHRpbmdzLmxlbmd0aFxuICAgICAgZWxzZVxuICAgICAgICByZXR1cm4gMFxuXG4gICAgIyBvcmdhbml6YXRpb25faWRzXG4gICAgJHNjb3BlLiR3YXRjaCBnZXRTZXR0aW5nc0NvdW50LCAodG90YWwpIC0+XG4gICAgICB3LmxvYWRDb250ZW50KCkgaWYgdG90YWwgPj0gMVxuXG4gICAgcmV0dXJuIHdcbl0pXG5cbm1vZHVsZS5kaXJlY3RpdmUoJ3dpZGdldFNhbGVzTGVhZHNMaXN0JywgLT5cbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIGxpbms6IChzY29wZSwgZWxlbWVudCkgLT5cbiAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoXCJzYWxlc1wiKVxuICAgICAgZWxlbWVudC5hZGRDbGFzcyhcImxpc3RcIilcbiAgICAsY29udHJvbGxlcjogJ1dpZGdldFNhbGVzTGVhZHNMaXN0Q3RybCdcbiAgfVxuKSJdfQ==