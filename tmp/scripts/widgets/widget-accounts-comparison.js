(function () {
var module;

module = angular.module('maestrano.analytics.widget-accounts-comparison', ['maestrano.assets']);

module.controller('WidgetAccountsComparisonCtrl', [
  '$scope', 'DhbAnalyticsSvc', 'ChartFormatterSvc', '$filter', function($scope, DhbAnalyticsSvc, ChartFormatterSvc, $filter) {
    var getSettingsCount, w;
    w = $scope.widget;
    w.initContext = function() {
      $scope.isDataFound = (w.content != null) && !_.isEmpty(w.content.complete_list);
      return $scope.movedAccount = {};
    };
    w.format = function() {
      var inputData, options;
      inputData = {
        labels: [],
        values: []
      };
      _.map(w.selectedAccounts, function(account) {
        inputData.labels.push(account.name);
        return inputData.values.push(account.current_balance);
      });
      while (inputData.values.length < 15) {
        inputData.labels.push("");
        inputData.values.push(null);
      }
      options = {
        showTooltips: false,
        showXLabels: false,
        barDatasetSpacing: 9
      };
      return w.chart = ChartFormatterSvc.barChart(inputData, options);
    };
    $scope.hasAccountsSelected = function() {
      return w.selectedAccounts && w.selectedAccounts.length > 0;
    };
    $scope.getAccountColor = function(anAccount) {
      return ChartFormatterSvc.getColor(_.indexOf(w.selectedAccounts, anAccount));
    };
    $scope.addAccount = function(anAccount) {
      w.moveAccountToAnotherList(anAccount, w.remainingAccounts, w.selectedAccounts);
      return w.format();
    };
    $scope.removeAccount = function(anAccount) {
      w.moveAccountToAnotherList(anAccount, w.selectedAccounts, w.remainingAccounts);
      return w.format();
    };
    $scope.formatAmount = function(anAccount) {
      return $filter('mnoCurrency')(anAccount.current_balance, anAccount.currency);
    };
    getSettingsCount = function() {
      if (w.settings != null) {
        return w.settings.length;
      } else {
        return 0;
      }
    };
    $scope.$watch(getSettingsCount, function(total) {
      if (total >= 2) {
        return w.loadContent();
      }
    });
    return w;
  }
]);

module.directive('widgetAccountsComparison', function() {
  return {
    restrict: 'A',
    link: function(scope, element) {
      element.addClass("accounts");
      return element.addClass("comparison");
    },
    controller: 'WidgetAccountsComparisonCtrl'
  };
});
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndpZGdldHMvd2lkZ2V0LWFjY291bnRzLWNvbXBhcmlzb24uanMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUE7O0FBQUEsTUFBQSxHQUFTLE9BQU8sQ0FBQyxNQUFSLENBQWUsZ0RBQWYsRUFBZ0UsQ0FBQyxrQkFBRCxDQUFoRTs7QUFFVCxNQUFNLENBQUMsVUFBUCxDQUFrQiw4QkFBbEIsRUFBaUQ7RUFDL0MsUUFEK0MsRUFDckMsaUJBRHFDLEVBQ2xCLG1CQURrQixFQUNHLFNBREgsRUFFL0MsU0FBQyxNQUFELEVBQVMsZUFBVCxFQUEwQixpQkFBMUIsRUFBNkMsT0FBN0M7QUFFRSxRQUFBO0lBQUEsQ0FBQSxHQUFJLE1BQU0sQ0FBQztJQUVYLENBQUMsQ0FBQyxXQUFGLEdBQWdCLFNBQUE7TUFDZCxNQUFNLENBQUMsV0FBUCxHQUFxQixtQkFBQSxJQUFjLENBQUMsQ0FBQyxDQUFDLE9BQUYsQ0FBVSxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQXBCO2FBQ3BDLE1BQU0sQ0FBQyxZQUFQLEdBQXNCO0lBRlI7SUFJaEIsQ0FBQyxDQUFDLE1BQUYsR0FBVyxTQUFBO0FBQ1QsVUFBQTtNQUFBLFNBQUEsR0FBWTtRQUFDLE1BQUEsRUFBUSxFQUFUO1FBQWEsTUFBQSxFQUFRLEVBQXJCOztNQUNaLENBQUMsQ0FBQyxHQUFGLENBQU0sQ0FBQyxDQUFDLGdCQUFSLEVBQTBCLFNBQUMsT0FBRDtRQUN4QixTQUFTLENBQUMsTUFBTSxDQUFDLElBQWpCLENBQXNCLE9BQU8sQ0FBQyxJQUE5QjtlQUNBLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBakIsQ0FBc0IsT0FBTyxDQUFDLGVBQTlCO01BRndCLENBQTFCO0FBR0EsYUFBTSxTQUFTLENBQUMsTUFBTSxDQUFDLE1BQWpCLEdBQTBCLEVBQWhDO1FBQ0UsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFqQixDQUFzQixFQUF0QjtRQUNBLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBakIsQ0FBc0IsSUFBdEI7TUFGRjtNQUlBLE9BQUEsR0FBVTtRQUNSLFlBQUEsRUFBYyxLQUROO1FBRVIsV0FBQSxFQUFhLEtBRkw7UUFHUixpQkFBQSxFQUFtQixDQUhYOzthQUtWLENBQUMsQ0FBQyxLQUFGLEdBQVUsaUJBQWlCLENBQUMsUUFBbEIsQ0FBMkIsU0FBM0IsRUFBcUMsT0FBckM7SUFkRDtJQWdCWCxNQUFNLENBQUMsbUJBQVAsR0FBNkIsU0FBQTtBQUMzQixhQUFPLENBQUMsQ0FBQyxnQkFBRixJQUFzQixDQUFDLENBQUMsZ0JBQWdCLENBQUMsTUFBbkIsR0FBNEI7SUFEOUI7SUFHN0IsTUFBTSxDQUFDLGVBQVAsR0FBeUIsU0FBQyxTQUFEO2FBQ3ZCLGlCQUFpQixDQUFDLFFBQWxCLENBQTJCLENBQUMsQ0FBQyxPQUFGLENBQVUsQ0FBQyxDQUFDLGdCQUFaLEVBQThCLFNBQTlCLENBQTNCO0lBRHVCO0lBR3pCLE1BQU0sQ0FBQyxVQUFQLEdBQW9CLFNBQUMsU0FBRDtNQUNsQixDQUFDLENBQUMsd0JBQUYsQ0FBMkIsU0FBM0IsRUFBcUMsQ0FBQyxDQUFDLGlCQUF2QyxFQUF5RCxDQUFDLENBQUMsZ0JBQTNEO2FBQ0EsQ0FBQyxDQUFDLE1BQUYsQ0FBQTtJQUZrQjtJQUlwQixNQUFNLENBQUMsYUFBUCxHQUF1QixTQUFDLFNBQUQ7TUFDckIsQ0FBQyxDQUFDLHdCQUFGLENBQTJCLFNBQTNCLEVBQXFDLENBQUMsQ0FBQyxnQkFBdkMsRUFBd0QsQ0FBQyxDQUFDLGlCQUExRDthQUNBLENBQUMsQ0FBQyxNQUFGLENBQUE7SUFGcUI7SUFJdkIsTUFBTSxDQUFDLFlBQVAsR0FBc0IsU0FBQyxTQUFEO0FBQ3BCLGFBQU8sT0FBQSxDQUFRLGFBQVIsQ0FBQSxDQUF1QixTQUFTLENBQUMsZUFBakMsRUFBaUQsU0FBUyxDQUFDLFFBQTNEO0lBRGE7SUFXdEIsZ0JBQUEsR0FBbUIsU0FBQTtNQUNqQixJQUFHLGtCQUFIO0FBQ0UsZUFBTyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BRHBCO09BQUEsTUFBQTtBQUdFLGVBQU8sRUFIVDs7SUFEaUI7SUFNbkIsTUFBTSxDQUFDLE1BQVAsQ0FBYyxnQkFBZCxFQUFnQyxTQUFDLEtBQUQ7TUFDOUIsSUFBbUIsS0FBQSxJQUFTLENBQTVCO2VBQUEsQ0FBQyxDQUFDLFdBQUYsQ0FBQSxFQUFBOztJQUQ4QixDQUFoQztBQUdBLFdBQU87RUExRFQsQ0FGK0M7Q0FBakQ7O0FBZ0VBLE1BQU0sQ0FBQyxTQUFQLENBQWlCLDBCQUFqQixFQUE2QyxTQUFBO0FBQzNDLFNBQU87SUFDTCxRQUFBLEVBQVUsR0FETDtJQUVMLElBQUEsRUFBTSxTQUFDLEtBQUQsRUFBUSxPQUFSO01BQ0osT0FBTyxDQUFDLFFBQVIsQ0FBaUIsVUFBakI7YUFDQSxPQUFPLENBQUMsUUFBUixDQUFpQixZQUFqQjtJQUZJLENBRkQ7SUFLSixVQUFBLEVBQVksOEJBTFI7O0FBRG9DLENBQTdDIiwiZmlsZSI6IndpZGdldHMvd2lkZ2V0LWFjY291bnRzLWNvbXBhcmlzb24uanMuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnbWFlc3RyYW5vLmFuYWx5dGljcy53aWRnZXQtYWNjb3VudHMtY29tcGFyaXNvbicsWydtYWVzdHJhbm8uYXNzZXRzJ10pXG5cbm1vZHVsZS5jb250cm9sbGVyKCdXaWRnZXRBY2NvdW50c0NvbXBhcmlzb25DdHJsJyxbXG4gICckc2NvcGUnLCAnRGhiQW5hbHl0aWNzU3ZjJywgJ0NoYXJ0Rm9ybWF0dGVyU3ZjJywgJyRmaWx0ZXInLFxuICAoJHNjb3BlLCBEaGJBbmFseXRpY3NTdmMsIENoYXJ0Rm9ybWF0dGVyU3ZjLCAkZmlsdGVyKSAtPlxuXG4gICAgdyA9ICRzY29wZS53aWRnZXRcblxuICAgIHcuaW5pdENvbnRleHQgPSAtPlxuICAgICAgJHNjb3BlLmlzRGF0YUZvdW5kID0gdy5jb250ZW50PyAmJiAhXy5pc0VtcHR5KHcuY29udGVudC5jb21wbGV0ZV9saXN0KVxuICAgICAgJHNjb3BlLm1vdmVkQWNjb3VudCA9IHt9XG5cbiAgICB3LmZvcm1hdCA9IC0+XG4gICAgICBpbnB1dERhdGEgPSB7bGFiZWxzOiBbXSwgdmFsdWVzOiBbXX1cbiAgICAgIF8ubWFwIHcuc2VsZWN0ZWRBY2NvdW50cywgKGFjY291bnQpIC0+XG4gICAgICAgIGlucHV0RGF0YS5sYWJlbHMucHVzaCBhY2NvdW50Lm5hbWVcbiAgICAgICAgaW5wdXREYXRhLnZhbHVlcy5wdXNoIGFjY291bnQuY3VycmVudF9iYWxhbmNlXG4gICAgICB3aGlsZSBpbnB1dERhdGEudmFsdWVzLmxlbmd0aCA8IDE1XG4gICAgICAgIGlucHV0RGF0YS5sYWJlbHMucHVzaCBcIlwiXG4gICAgICAgIGlucHV0RGF0YS52YWx1ZXMucHVzaCBudWxsXG5cbiAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgIHNob3dUb29sdGlwczogZmFsc2UsXG4gICAgICAgIHNob3dYTGFiZWxzOiBmYWxzZSxcbiAgICAgICAgYmFyRGF0YXNldFNwYWNpbmc6IDksXG4gICAgICB9XG4gICAgICB3LmNoYXJ0ID0gQ2hhcnRGb3JtYXR0ZXJTdmMuYmFyQ2hhcnQoaW5wdXREYXRhLG9wdGlvbnMpXG5cbiAgICAkc2NvcGUuaGFzQWNjb3VudHNTZWxlY3RlZCA9IC0+XG4gICAgICByZXR1cm4gdy5zZWxlY3RlZEFjY291bnRzICYmIHcuc2VsZWN0ZWRBY2NvdW50cy5sZW5ndGggPiAwXG5cbiAgICAkc2NvcGUuZ2V0QWNjb3VudENvbG9yID0gKGFuQWNjb3VudCkgLT5cbiAgICAgIENoYXJ0Rm9ybWF0dGVyU3ZjLmdldENvbG9yKF8uaW5kZXhPZih3LnNlbGVjdGVkQWNjb3VudHMsIGFuQWNjb3VudCkpXG5cbiAgICAkc2NvcGUuYWRkQWNjb3VudCA9IChhbkFjY291bnQpIC0+XG4gICAgICB3Lm1vdmVBY2NvdW50VG9Bbm90aGVyTGlzdChhbkFjY291bnQsdy5yZW1haW5pbmdBY2NvdW50cyx3LnNlbGVjdGVkQWNjb3VudHMpXG4gICAgICB3LmZvcm1hdCgpXG5cbiAgICAkc2NvcGUucmVtb3ZlQWNjb3VudCA9IChhbkFjY291bnQpIC0+XG4gICAgICB3Lm1vdmVBY2NvdW50VG9Bbm90aGVyTGlzdChhbkFjY291bnQsdy5zZWxlY3RlZEFjY291bnRzLHcucmVtYWluaW5nQWNjb3VudHMpXG4gICAgICB3LmZvcm1hdCgpXG5cbiAgICAkc2NvcGUuZm9ybWF0QW1vdW50ID0gKGFuQWNjb3VudCkgLT5cbiAgICAgIHJldHVybiAkZmlsdGVyKCdtbm9DdXJyZW5jeScpKGFuQWNjb3VudC5jdXJyZW50X2JhbGFuY2UsYW5BY2NvdW50LmN1cnJlbmN5KVxuXG5cbiAgICAjIFRPRE86IFJlZmFjdG9yIG9uY2Ugd2UgaGF2ZSB1bmRlcnN0b29kIGV4YWN0bHkgaG93IHRoZSBhbmd1bGFyanMgY29tcGlsYXRpb24gcHJvY2VzcyB3b3JrczpcbiAgICAjIGluIHRoaXMgb3JkZXIsIHdlIHNob3VsZDpcbiAgICAjIDEtIGNvbXBpbGUgaW1wYWMtd2lkZ2V0IGNvbnRyb2xsZXJcbiAgICAjIDItIGNvbXBpbGUgdGhlIHNwZWNpZmljIHdpZGdldCB0ZW1wbGF0ZS9jb250cm9sbGVyXG4gICAgIyAzLSBjb21waWxlIHRoZSBzZXR0aW5ncyB0ZW1wbGF0ZXMvY29udHJvbGxlcnNcbiAgICAjIDQtIGNhbGwgd2lkZ2V0LmxvYWRDb250ZW50KCkgKGlkZWFsbHksIGZyb20gaW1wYWMtd2lkZ2V0LCBvbmNlIGEgY2FsbGJhY2sgXG4gICAgIyAgICAgYXNzZXNzaW5nIHRoYXQgZXZlcnl0aGluZyBpcyBjb21waWxlZCBhbiByZWFkeSBpcyByZWNlaXZlZClcbiAgICBnZXRTZXR0aW5nc0NvdW50ID0gLT5cbiAgICAgIGlmIHcuc2V0dGluZ3M/XG4gICAgICAgIHJldHVybiB3LnNldHRpbmdzLmxlbmd0aFxuICAgICAgZWxzZVxuICAgICAgICByZXR1cm4gMFxuXG4gICAgJHNjb3BlLiR3YXRjaCBnZXRTZXR0aW5nc0NvdW50LCAodG90YWwpIC0+XG4gICAgICB3LmxvYWRDb250ZW50KCkgaWYgdG90YWwgPj0gMlxuXG4gICAgcmV0dXJuIHdcblxuXSlcblxubW9kdWxlLmRpcmVjdGl2ZSgnd2lkZ2V0QWNjb3VudHNDb21wYXJpc29uJywgLT5cbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIGxpbms6IChzY29wZSwgZWxlbWVudCkgLT5cbiAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoXCJhY2NvdW50c1wiKVxuICAgICAgZWxlbWVudC5hZGRDbGFzcyhcImNvbXBhcmlzb25cIilcbiAgICAsY29udHJvbGxlcjogJ1dpZGdldEFjY291bnRzQ29tcGFyaXNvbkN0cmwnXG4gIH1cbikiXX0=