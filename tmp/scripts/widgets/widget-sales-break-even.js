(function () {
var module;

module = angular.module('maestrano.analytics.widget-sales-break-even', ['maestrano.assets']);

module.controller('WidgetSalesBreakEvenCtrl', [
  '$scope', 'DhbAnalyticsSvc', 'ChartFormatterSvc', '$filter', function($scope, DhbAnalyticsSvc, ChartFormatterSvc, $filter) {
    var getSettingsCount, thresholdSetting, w;
    w = $scope.widget;
    w.initContext = function() {
      $scope.isDataFound = angular.isDefined(w.content) && !_.isEmpty(w.content.sales);
      return $scope.threshold = w.metadata.threshold;
    };
    $scope.getProjectedDate = function() {
      var date;
      if ($scope.isDataFound && w.content.break_even) {
        if (("" + w.content.break_even.projected_date).match('After')) {
          date = angular.copy(w.content.break_even.projected_date).replace('After ', '');
          return "> " + ($filter('date')(date, 'd-MM-yy'));
        } else {
          return w.content.break_even.projected_date;
        }
      }
    };
    $scope.getOpportunitiesToClose = function() {
      var opps;
      if ($scope.isDataFound && w.content.break_even) {
        if (("" + w.content.break_even.opportunities_to_close).match('>')) {
          opps = angular.copy(w.content.break_even.opportunities_to_close).replace('>', '');
          return "> " + opps;
        } else {
          return w.content.break_even.opportunities_to_close;
        }
      }
    };
    $scope.isTargetMet = function() {
      if ($scope.isDataFound && w.content.break_even) {
        return w.content.break_even.variance < 0;
      }
    };
    $scope.getVariance = function() {
      if ($scope.isDataFound && w.content.break_even) {
        return Math.abs(w.content.break_even.variance);
      }
    };
    thresholdSetting = {};
    thresholdSetting.initialized = false;
    thresholdSetting.initialize = function() {
      return thresholdSetting.initialized = true;
    };
    thresholdSetting.toMetadata = function() {
      return {
        threshold: $scope.threshold
      };
    };
    w.settings.push(thresholdSetting);
    getSettingsCount = function() {
      if (w.settings != null) {
        return w.settings.length;
      } else {
        return 0;
      }
    };
    $scope.$watch(getSettingsCount, function(total) {
      if (total >= 3) {
        return w.loadContent();
      }
    });
    return w;
  }
]);

module.directive('widgetSalesBreakEven', function() {
  return {
    restrict: 'A',
    link: function(scope, element) {
      element.addClass("sales");
      return element.addClass("break-even");
    },
    controller: 'WidgetSalesBreakEvenCtrl'
  };
});
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndpZGdldHMvd2lkZ2V0LXNhbGVzLWJyZWFrLWV2ZW4uanMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUE7O0FBQUEsTUFBQSxHQUFTLE9BQU8sQ0FBQyxNQUFSLENBQWUsNkNBQWYsRUFBNkQsQ0FBQyxrQkFBRCxDQUE3RDs7QUFFVCxNQUFNLENBQUMsVUFBUCxDQUFrQiwwQkFBbEIsRUFBNkM7RUFDM0MsUUFEMkMsRUFDakMsaUJBRGlDLEVBQ2QsbUJBRGMsRUFDTyxTQURQLEVBRTNDLFNBQUMsTUFBRCxFQUFTLGVBQVQsRUFBMEIsaUJBQTFCLEVBQTZDLE9BQTdDO0FBRUUsUUFBQTtJQUFBLENBQUEsR0FBSSxNQUFNLENBQUM7SUFFWCxDQUFDLENBQUMsV0FBRixHQUFnQixTQUFBO01BQ2QsTUFBTSxDQUFDLFdBQVAsR0FBcUIsT0FBTyxDQUFDLFNBQVIsQ0FBa0IsQ0FBQyxDQUFDLE9BQXBCLENBQUEsSUFBZ0MsQ0FBQyxDQUFDLENBQUMsT0FBRixDQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBcEI7YUFDdEQsTUFBTSxDQUFDLFNBQVAsR0FBbUIsQ0FBQyxDQUFDLFFBQVEsQ0FBQztJQUZoQjtJQUloQixNQUFNLENBQUMsZ0JBQVAsR0FBMEIsU0FBQTtBQUN4QixVQUFBO01BQUEsSUFBRyxNQUFNLENBQUMsV0FBUCxJQUFzQixDQUFDLENBQUMsT0FBTyxDQUFDLFVBQW5DO1FBQ0UsSUFBRyxDQUFBLEVBQUEsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxjQUF4QixDQUF3QyxDQUFDLEtBQXpDLENBQStDLE9BQS9DLENBQUg7VUFDRSxJQUFBLEdBQU8sT0FBTyxDQUFDLElBQVIsQ0FBYSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxjQUFsQyxDQUFpRCxDQUFDLE9BQWxELENBQTBELFFBQTFELEVBQW9FLEVBQXBFO0FBQ1AsaUJBQU8sSUFBQSxHQUFJLENBQUMsT0FBQSxDQUFRLE1BQVIsQ0FBQSxDQUFnQixJQUFoQixFQUFzQixTQUF0QixDQUFELEVBRmI7U0FBQSxNQUFBO0FBSUUsaUJBQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsZUFKOUI7U0FERjs7SUFEd0I7SUFRMUIsTUFBTSxDQUFDLHVCQUFQLEdBQWlDLFNBQUE7QUFDL0IsVUFBQTtNQUFBLElBQUcsTUFBTSxDQUFDLFdBQVAsSUFBc0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFuQztRQUNFLElBQUcsQ0FBQSxFQUFBLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsc0JBQXhCLENBQWdELENBQUMsS0FBakQsQ0FBdUQsR0FBdkQsQ0FBSDtVQUNFLElBQUEsR0FBTyxPQUFPLENBQUMsSUFBUixDQUFhLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLHNCQUFsQyxDQUF5RCxDQUFDLE9BQTFELENBQWtFLEdBQWxFLEVBQXVFLEVBQXZFO0FBQ1AsaUJBQU8sSUFBQSxHQUFLLEtBRmQ7U0FBQSxNQUFBO0FBSUUsaUJBQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsdUJBSjlCO1NBREY7O0lBRCtCO0lBUWpDLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLFNBQUE7TUFDbkIsSUFBRyxNQUFNLENBQUMsV0FBUCxJQUFzQixDQUFDLENBQUMsT0FBTyxDQUFDLFVBQW5DO0FBQ0UsZUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxRQUFyQixHQUFnQyxFQUQxQzs7SUFEbUI7SUFJckIsTUFBTSxDQUFDLFdBQVAsR0FBcUIsU0FBQTtNQUNuQixJQUFHLE1BQU0sQ0FBQyxXQUFQLElBQXNCLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBbkM7QUFDRSxlQUFPLElBQUksQ0FBQyxHQUFMLENBQVMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsUUFBOUIsRUFEVDs7SUFEbUI7SUFNckIsZ0JBQUEsR0FBbUI7SUFDbkIsZ0JBQWdCLENBQUMsV0FBakIsR0FBK0I7SUFFL0IsZ0JBQWdCLENBQUMsVUFBakIsR0FBOEIsU0FBQTthQUM1QixnQkFBZ0IsQ0FBQyxXQUFqQixHQUErQjtJQURIO0lBRzlCLGdCQUFnQixDQUFDLFVBQWpCLEdBQThCLFNBQUE7YUFDNUI7UUFBQyxTQUFBLEVBQVcsTUFBTSxDQUFDLFNBQW5COztJQUQ0QjtJQUc5QixDQUFDLENBQUMsUUFBUSxDQUFDLElBQVgsQ0FBZ0IsZ0JBQWhCO0lBV0EsZ0JBQUEsR0FBbUIsU0FBQTtNQUNqQixJQUFHLGtCQUFIO0FBQ0UsZUFBTyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BRHBCO09BQUEsTUFBQTtBQUdFLGVBQU8sRUFIVDs7SUFEaUI7SUFPbkIsTUFBTSxDQUFDLE1BQVAsQ0FBYyxnQkFBZCxFQUFnQyxTQUFDLEtBQUQ7TUFDOUIsSUFBbUIsS0FBQSxJQUFTLENBQTVCO2VBQUEsQ0FBQyxDQUFDLFdBQUYsQ0FBQSxFQUFBOztJQUQ4QixDQUFoQztBQUdBLFdBQU87RUFoRVQsQ0FGMkM7Q0FBN0M7O0FBcUVBLE1BQU0sQ0FBQyxTQUFQLENBQWlCLHNCQUFqQixFQUF5QyxTQUFBO0FBQ3ZDLFNBQU87SUFDTCxRQUFBLEVBQVUsR0FETDtJQUVMLElBQUEsRUFBTSxTQUFDLEtBQUQsRUFBUSxPQUFSO01BQ0osT0FBTyxDQUFDLFFBQVIsQ0FBaUIsT0FBakI7YUFDQSxPQUFPLENBQUMsUUFBUixDQUFpQixZQUFqQjtJQUZJLENBRkQ7SUFLSixVQUFBLEVBQVksMEJBTFI7O0FBRGdDLENBQXpDIiwiZmlsZSI6IndpZGdldHMvd2lkZ2V0LXNhbGVzLWJyZWFrLWV2ZW4uanMuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnbWFlc3RyYW5vLmFuYWx5dGljcy53aWRnZXQtc2FsZXMtYnJlYWstZXZlbicsWydtYWVzdHJhbm8uYXNzZXRzJ10pXG5cbm1vZHVsZS5jb250cm9sbGVyKCdXaWRnZXRTYWxlc0JyZWFrRXZlbkN0cmwnLFtcbiAgJyRzY29wZScsICdEaGJBbmFseXRpY3NTdmMnLCAnQ2hhcnRGb3JtYXR0ZXJTdmMnLCAnJGZpbHRlcicsXG4gICgkc2NvcGUsIERoYkFuYWx5dGljc1N2YywgQ2hhcnRGb3JtYXR0ZXJTdmMsICRmaWx0ZXIpIC0+XG5cbiAgICB3ID0gJHNjb3BlLndpZGdldFxuXG4gICAgdy5pbml0Q29udGV4dCA9IC0+XG4gICAgICAkc2NvcGUuaXNEYXRhRm91bmQgPSBhbmd1bGFyLmlzRGVmaW5lZCh3LmNvbnRlbnQpICYmICFfLmlzRW1wdHkody5jb250ZW50LnNhbGVzKVxuICAgICAgJHNjb3BlLnRocmVzaG9sZCA9IHcubWV0YWRhdGEudGhyZXNob2xkXG5cbiAgICAkc2NvcGUuZ2V0UHJvamVjdGVkRGF0ZSA9IC0+XG4gICAgICBpZiAkc2NvcGUuaXNEYXRhRm91bmQgJiYgdy5jb250ZW50LmJyZWFrX2V2ZW5cbiAgICAgICAgaWYgXCIje3cuY29udGVudC5icmVha19ldmVuLnByb2plY3RlZF9kYXRlfVwiLm1hdGNoKCdBZnRlcicpXG4gICAgICAgICAgZGF0ZSA9IGFuZ3VsYXIuY29weSh3LmNvbnRlbnQuYnJlYWtfZXZlbi5wcm9qZWN0ZWRfZGF0ZSkucmVwbGFjZSgnQWZ0ZXIgJywgJycpXG4gICAgICAgICAgcmV0dXJuIFwiPiAjeyRmaWx0ZXIoJ2RhdGUnKShkYXRlLCAnZC1NTS15eScpfVwiXG4gICAgICAgIGVsc2VcbiAgICAgICAgICByZXR1cm4gdy5jb250ZW50LmJyZWFrX2V2ZW4ucHJvamVjdGVkX2RhdGVcblxuICAgICRzY29wZS5nZXRPcHBvcnR1bml0aWVzVG9DbG9zZSA9IC0+XG4gICAgICBpZiAkc2NvcGUuaXNEYXRhRm91bmQgJiYgdy5jb250ZW50LmJyZWFrX2V2ZW5cbiAgICAgICAgaWYgXCIje3cuY29udGVudC5icmVha19ldmVuLm9wcG9ydHVuaXRpZXNfdG9fY2xvc2V9XCIubWF0Y2goJz4nKVxuICAgICAgICAgIG9wcHMgPSBhbmd1bGFyLmNvcHkody5jb250ZW50LmJyZWFrX2V2ZW4ub3Bwb3J0dW5pdGllc190b19jbG9zZSkucmVwbGFjZSgnPicsICcnKVxuICAgICAgICAgIHJldHVybiBcIj4gI3tvcHBzfVwiXG4gICAgICAgIGVsc2VcbiAgICAgICAgICByZXR1cm4gdy5jb250ZW50LmJyZWFrX2V2ZW4ub3Bwb3J0dW5pdGllc190b19jbG9zZVxuXG4gICAgJHNjb3BlLmlzVGFyZ2V0TWV0ID0gLT5cbiAgICAgIGlmICRzY29wZS5pc0RhdGFGb3VuZCAmJiB3LmNvbnRlbnQuYnJlYWtfZXZlblxuICAgICAgICByZXR1cm4gKHcuY29udGVudC5icmVha19ldmVuLnZhcmlhbmNlIDwgMClcblxuICAgICRzY29wZS5nZXRWYXJpYW5jZSA9IC0+XG4gICAgICBpZiAkc2NvcGUuaXNEYXRhRm91bmQgJiYgdy5jb250ZW50LmJyZWFrX2V2ZW5cbiAgICAgICAgcmV0dXJuIE1hdGguYWJzKHcuY29udGVudC5icmVha19ldmVuLnZhcmlhbmNlKVxuXG4gICAgIyAtLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgdGhyZXNob2xkU2V0dGluZyA9IHt9XG4gICAgdGhyZXNob2xkU2V0dGluZy5pbml0aWFsaXplZCA9IGZhbHNlXG4gICAgXG4gICAgdGhyZXNob2xkU2V0dGluZy5pbml0aWFsaXplID0gLT5cbiAgICAgIHRocmVzaG9sZFNldHRpbmcuaW5pdGlhbGl6ZWQgPSB0cnVlXG5cbiAgICB0aHJlc2hvbGRTZXR0aW5nLnRvTWV0YWRhdGEgPSAtPlxuICAgICAge3RocmVzaG9sZDogJHNjb3BlLnRocmVzaG9sZH1cblxuICAgIHcuc2V0dGluZ3MucHVzaCh0aHJlc2hvbGRTZXR0aW5nKVxuXG4gICAgIyAtLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgIyBUT0RPOiBSZWZhY3RvciBvbmNlIHdlIGhhdmUgdW5kZXJzdG9vZCBleGFjdGx5IGhvdyB0aGUgYW5ndWxhcmpzIGNvbXBpbGF0aW9uIHByb2Nlc3Mgd29ya3M6XG4gICAgIyBpbiB0aGlzIG9yZGVyLCB3ZSBzaG91bGQ6XG4gICAgIyAxLSBjb21waWxlIGltcGFjLXdpZGdldCBjb250cm9sbGVyXG4gICAgIyAyLSBjb21waWxlIHRoZSBzcGVjaWZpYyB3aWRnZXQgdGVtcGxhdGUvY29udHJvbGxlclxuICAgICMgMy0gY29tcGlsZSB0aGUgc2V0dGluZ3MgdGVtcGxhdGVzL2NvbnRyb2xsZXJzXG4gICAgIyA0LSBjYWxsIHdpZGdldC5sb2FkQ29udGVudCgpIChpZGVhbGx5LCBmcm9tIGltcGFjLXdpZGdldCwgb25jZSBhIGNhbGxiYWNrIFxuICAgICMgICAgIGFzc2Vzc2luZyB0aGF0IGV2ZXJ5dGhpbmcgaXMgY29tcGlsZWQgYW4gcmVhZHkgaXMgcmVjZWl2ZWQpXG4gICAgZ2V0U2V0dGluZ3NDb3VudCA9IC0+XG4gICAgICBpZiB3LnNldHRpbmdzP1xuICAgICAgICByZXR1cm4gdy5zZXR0aW5ncy5sZW5ndGhcbiAgICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIDBcblxuICAgICMgb3JnYW5pemF0aW9uX2lkcyArIHRpbWUgcmFuZ2UgKyB0aHJlc2hvbGRcbiAgICAkc2NvcGUuJHdhdGNoIGdldFNldHRpbmdzQ291bnQsICh0b3RhbCkgLT5cbiAgICAgIHcubG9hZENvbnRlbnQoKSBpZiB0b3RhbCA+PSAzXG5cbiAgICByZXR1cm4gd1xuXSlcblxubW9kdWxlLmRpcmVjdGl2ZSgnd2lkZ2V0U2FsZXNCcmVha0V2ZW4nLCAtPlxuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgbGluazogKHNjb3BlLCBlbGVtZW50KSAtPlxuICAgICAgZWxlbWVudC5hZGRDbGFzcyhcInNhbGVzXCIpXG4gICAgICBlbGVtZW50LmFkZENsYXNzKFwiYnJlYWstZXZlblwiKVxuICAgICxjb250cm9sbGVyOiAnV2lkZ2V0U2FsZXNCcmVha0V2ZW5DdHJsJ1xuICB9XG4pIl19