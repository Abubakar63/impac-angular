(function () {
var module;

module = angular.module('maestrano.analytics.widget-accounts-custom-calculation', ['maestrano.assets']);

module.controller('WidgetAccountsCustomCalculationCtrl', [
  '$scope', '$timeout', '$modal', 'DhbAnalyticsSvc', 'TemplatePath', 'AssetPath', function($scope, $timeout, $modal, DhbAnalyticsSvc, TemplatePath, AssetPath) {
    var getSettingsCount, w;
    w = $scope.widget;
    $scope.loaderImage = AssetPath['loader-white-bg.gif'];
    w.initContext = function() {
      $scope.movedAccount = {};
      return $scope.isDataFound = (w.content != null) && !_.isEmpty(w.content.complete_list);
    };
    $scope.addAccountToFormula = function(account) {
      if (w.selectedAccounts.length > 0) {
        w.formula += " + {" + (w.selectedAccounts.length + 1) + "}";
      } else {
        w.formula = "{1}";
      }
      return w.moveAccountToAnotherList(account, w.remainingAccounts, w.selectedAccounts, false);
    };
    $scope.removeAccountFromFormula = function(account) {
      var diffAccountIndex, diffAccountUid, i, indexPattern, newFormula, nextUids, prevUids, removePattern;
      prevUids = _.map(w.selectedAccounts, function(e) {
        return e.uid;
      });
      nextUids = _.reject(prevUids, function(e) {
        return e === account.uid;
      });
      diffAccountUid = _.first(_.difference(prevUids, nextUids));
      diffAccountIndex = _.indexOf(prevUids, diffAccountUid) + 1;
      if (diffAccountIndex === 1) {
        removePattern = "{" + diffAccountIndex + "\\}\\s*(-|\\*|\\/|\\+)*\\s*";
      } else {
        removePattern = "\\s*(-|\\*|\\/|\\+)*\\s*\\{" + diffAccountIndex + "\\}";
      }
      newFormula = angular.copy(w.formula).replace(new RegExp(removePattern, 'g'), '');
      i = diffAccountIndex + 1;
      while (i <= prevUids.length) {
        indexPattern = "\\{" + i + "\\}";
        newFormula = newFormula.replace(new RegExp(indexPattern, 'g'), "{" + (i - 1) + "}");
        i++;
      }
      w.formula = angular.copy(newFormula);
      return w.moveAccountToAnotherList(account, w.selectedAccounts, w.remainingAccounts, false);
    };
    $scope.formulaModal = {};
    $scope.formulaModal.config = {
      instance: {
        backdrop: 'static',
        templateUrl: TemplatePath['analytics/modals/formula-modal.html'],
        size: 'lg',
        scope: $scope,
        keyboard: false
      }
    };
    $scope.formulaModal.open = function() {
      var self;
      w.settings = angular.copy(_.reject(w.settings, function(elem) {
        return elem.key === "organizations";
      }));
      self = $scope.formulaModal;
      self.$instance = $modal.open(self.config.instance);
      return $timeout(function() {
        return w.initSettings();
      }, 200);
    };
    $scope.$watch((function() {
      return w.selectedOrganizations;
    }), function(result) {
      if (!_.isEmpty(result)) {
        return w.updateSettings();
      }
    }, true);
    $scope.formulaModal.cancel = function() {
      w.initSettings();
      return $scope.formulaModal.close();
    };
    $scope.formulaModal.proceed = function() {
      w.updateSettings(false);
      return $scope.formulaModal.close();
    };
    $scope.formulaModal.close = function() {
      return $scope.formulaModal.$instance.close();
    };
    $scope.$watch((function() {
      return w.isEditMode;
    }), function(result, prev) {
      if (result && !prev) {
        return $scope.formulaModal.open();
      }
    });
    getSettingsCount = function() {
      if (w.settings != null) {
        return w.settings.length;
      } else {
        return 0;
      }
    };
    $scope.$watch(getSettingsCount, function(total) {
      if (total === 3 && !$scope.blockLoadContent) {
        w.loadContent();
        return $scope.blockLoadContent = true;
      }
    });
    return w;
  }
]);

module.directive('widgetAccountsCustomCalculation', function() {
  return {
    restrict: 'A',
    link: function(scope, element) {
      element.addClass("accounts");
      return element.addClass("custom-calculation");
    },
    controller: 'WidgetAccountsCustomCalculationCtrl'
  };
});
})();
//# sourceMappingURL=data:application/json;base64,