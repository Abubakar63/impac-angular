(function () {
var module;

module = angular.module('maestrano.analytics.widget-accounts-profit-and-loss', ['maestrano.assets']);

module.controller('WidgetAccountsProfitAndLossCtrl', [
  '$scope', 'DhbAnalyticsSvc', 'ChartFormatterSvc', '$filter', function($scope, DhbAnalyticsSvc, ChartFormatterSvc, $filter) {
    var getSettingsCount, selectedElementsSetting, unCollapsedSetting, w;
    w = $scope.widget;
    w.initContext = function() {
      if ($scope.isDataFound = angular.isDefined(w.content) && !_.isEmpty(w.content.summary) && !_.isEmpty(w.content.dates)) {
        $scope.dates = w.content.dates;
        $scope.unCollapsed = w.metadata.unCollapsed || [];
        if (w.metadata.selectedElements) {
          $scope.selectedElements = [];
          angular.forEach(w.metadata.selectedElements, function(sElem) {
            var foundElem;
            foundElem = _.find(w.content.summary, function(statement) {
              return statement.name === sElem.name;
            });
            if (!foundElem) {
              angular.forEach(w.content.summary, function(statement) {
                if (statement.accounts != null) {
                  return foundElem || (foundElem = _.find(statement.accounts, function(account) {
                    return sElem.id === account.id;
                  }));
                }
              });
            }
            if (foundElem) {
              return $scope.selectedElements.push(foundElem);
            }
          });
        }
        if (!(($scope.selectedElements != null) && $scope.selectedElements.length > 0)) {
          return w.width = 6;
        }
      }
    };
    w.format = function() {
      var all_values_are_positive, inputData, options;
      if ($scope.isDataFound && ($scope.selectedElements != null) && $scope.selectedElements.length > 0) {
        all_values_are_positive = true;
        inputData = [];
        angular.forEach($scope.selectedElements, function(sElem) {
          var data, labels;
          data = angular.copy(sElem);
          labels = _.map(w.content.dates, function(date) {
            if (w.metadata.hist_parameters && w.metadata.hist_parameters.period === "YEARLY") {
              return $filter('date')(date, 'yyyy');
            } else if (w.metadata.hist_parameters && w.metadata.hist_parameters.period === "QUARTERLY") {
              return $filter('date')(date, 'MMM-yy');
            } else if (w.metadata.hist_parameters && (w.metadata.hist_parameters.period === "WEEKLY" || w.metadata.hist_parameters.period === "DAILY")) {
              return $filter('date')(date, 'dd-MMM');
            } else {
              return $filter('date')(date, 'MMM');
            }
          });
          inputData.push({
            title: data.name,
            labels: labels,
            values: data.totals
          });
          return angular.forEach(data.totals, function(value) {
            return all_values_are_positive && (all_values_are_positive = value >= 0);
          });
        });
        options = {
          scaleBeginAtZero: all_values_are_positive,
          showXLabels: true,
          datasetFill: $scope.selectedElements.length === 1,
          pointDot: $scope.selectedElements.length === 1
        };
        return w.chart = ChartFormatterSvc.lineChart(inputData, options);
      }
    };
    $scope.getElementChartColor = function(index) {
      return ChartFormatterSvc.getColor(index);
    };
    $scope.getLastDate = function() {
      if ($scope.dates != null) {
        return _.last($scope.dates);
      }
    };
    $scope.getLastValue = function(element) {
      if (element.totals != null) {
        return _.last(element.totals);
      }
    };
    $scope.getClassColor = function(aTotal) {
      if (parseInt(aTotal) > 0) {
        return 'positive';
      } else if (parseInt(aTotal) < 0) {
        return 'negative';
      } else {
        return null;
      }
    };
    $scope.getName = function(element) {
      if ((element != null) && (element.name != null)) {
        return element.name.replace(/_/g, " ");
      }
    };
    $scope.toogleSelectedElement = function(element) {
      if ($scope.isSelected(element)) {
        $scope.selectedElements = _.reject($scope.selectedElements, function(sElem) {
          if (element.id) {
            return sElem.id === element.id;
          } else {
            return sElem.name === element.name;
          }
        });
        w.format();
        if (w.isExpanded() && $scope.selectedElements.length === 0) {
          return w.toogleExpanded();
        } else {
          return w.updateSettings(false);
        }
      } else {
        $scope.selectedElements || ($scope.selectedElements = []);
        $scope.selectedElements.push(element);
        w.format();
        if (!w.isExpanded()) {
          return w.toogleExpanded();
        } else {
          return w.updateSettings(false);
        }
      }
    };
    $scope.isSelected = function(element) {
      if ((element != null) && ($scope.selectedElements != null)) {
        if (_.find($scope.selectedElements, function(sElem) {
          if (element.id) {
            return sElem.id === element.id;
          } else {
            return sElem.name === element.name;
          }
        })) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    };
    $scope.toogleCollapsed = function(element) {
      if ((element != null) && (element.name != null)) {
        if (_.find($scope.unCollapsed, (function(name) {
          return element.name === name;
        }))) {
          $scope.unCollapsed = _.reject($scope.unCollapsed, function(name) {
            return name === element.name;
          });
        } else {
          $scope.unCollapsed.push(element.name);
        }
        return w.updateSettings(false);
      }
    };
    $scope.isCollapsed = function(element) {
      if ((element != null) && (element.name != null)) {
        if (_.find($scope.unCollapsed, (function(name) {
          return element.name === name;
        }))) {
          return false;
        } else {
          return true;
        }
      }
    };
    unCollapsedSetting = {};
    unCollapsedSetting.initialized = false;
    unCollapsedSetting.initialize = function() {
      return unCollapsedSetting.initialized = true;
    };
    unCollapsedSetting.toMetadata = function() {
      return {
        unCollapsed: $scope.unCollapsed
      };
    };
    w.settings.push(unCollapsedSetting);
    selectedElementsSetting = {};
    selectedElementsSetting.initialized = false;
    selectedElementsSetting.initialize = function() {
      return selectedElementsSetting.initialized = true;
    };
    selectedElementsSetting.toMetadata = function() {
      return {
        selectedElements: $scope.selectedElements
      };
    };
    w.settings.push(selectedElementsSetting);
    getSettingsCount = function() {
      if (w.settings != null) {
        return w.settings.length;
      } else {
        return 0;
      }
    };
    $scope.$watch(getSettingsCount, function(total) {
      if (total >= 5) {
        return w.loadContent();
      }
    });
    return w;
  }
]);

module.directive('widgetAccountsProfitAndLoss', function() {
  return {
    restrict: 'A',
    link: function(scope, element) {
      element.addClass("accounts");
      return element.addClass("profit-and-loss");
    },
    controller: 'WidgetAccountsProfitAndLossCtrl'
  };
});
})();
//# sourceMappingURL=data:application/json;base64,