(function () {
var module;

module = angular.module('maestrano.analytics.widget-hr-workforce-summary', ['maestrano.assets']);

module.controller('WidgetHrWorkforceSummaryCtrl', [
  '$scope', 'DhbAnalyticsSvc', 'ChartFormatterSvc', '$filter', function($scope, DhbAnalyticsSvc, ChartFormatterSvc, $filter) {
    var getSettingsCount, w;
    w = $scope.widget;
    w.initContext = function() {
      if ($scope.isDataFound = (w.content.summary != null) && !_.isEmpty(w.content.summary.data)) {
        $scope.periodOptions = [
          {
            label: 'Yearly',
            value: 'yearly'
          }, {
            label: 'Monthly',
            value: 'monthly'
          }, {
            label: 'Weekly',
            value: 'weekly'
          }, {
            label: 'Hourly',
            value: 'hourly'
          }
        ];
        $scope.period = _.find($scope.periodOptions, function(o) {
          return o.value === w.content.total.period.toLowerCase();
        }) || $scope.periodOptions[0];
        $scope.filterOptions = [
          {
            label: 'Gender',
            value: 'gender'
          }, {
            label: 'Age Range',
            value: 'age_range'
          }, {
            label: 'Salary Range',
            value: 'salary_range'
          }, {
            label: 'Job Title',
            value: 'job_title'
          }
        ];
        return $scope.filter = _.find($scope.filterOptions, function(o) {
          return o.value === w.content.summary.filter;
        }) || $scope.filterOptions[0];
      }
    };
    w.format = function() {
      var barData, barOptions, pieData, pieOptions;
      if ($scope.isDataFound) {
        if ($scope.filter.value === 'salary_range') {
          barData = {
            labels: _.map(w.content.summary.data, function(elem) {
              return $scope.formatSalaryRange(elem);
            }),
            values: _.map(w.content.summary.data, function(elem) {
              return elem.value;
            })
          };
          barOptions = {
            showTooltips: false,
            showXLabels: false,
            barDatasetSpacing: 15
          };
          return w.chart = ChartFormatterSvc.barChart(barData, barOptions);
        } else {
          pieData = _.map(w.content.summary.data, function(elem) {
            return {
              label: elem.label,
              value: elem.value
            };
          });
          pieOptions = {
            showTooltips: true,
            percentageInnerCutout: 50,
            tooltipFontSize: 12
          };
          return w.chart = ChartFormatterSvc.pieChart(pieData, pieOptions);
        }
      }
    };
    $scope.getTotalWorkforce = function() {
      if ($scope.isDataFound) {
        return w.content.total.amount;
      }
    };
    $scope.getNumberOfEmployees = function() {
      if ($scope.isDataFound) {
        return w.content.total.employees;
      }
    };
    $scope.getCurrency = function() {
      if ($scope.isDataFound) {
        return w.content.total.currency;
      }
    };
    $scope.formatSalaryRange = function(aRange) {
      var range1, range2;
      range1 = $filter('mnoCurrency')(aRange.label.split('-')[0], aRange.currency, false);
      range2 = $filter('mnoCurrency')(aRange.label.split('-')[1], aRange.currency, false);
      return [range1, range2].join(" - ");
    };
    $scope.getColorByIndex = function(index) {
      return ChartFormatterSvc.getColor(index);
    };
    getSettingsCount = function() {
      if (w.settings != null) {
        return w.settings.length;
      } else {
        return 0;
      }
    };
    $scope.$watch(getSettingsCount, function(total) {
      if (total === 4) {
        return w.loadContent();
      }
    });
    return w;
  }
]);

module.directive('widgetHrWorkforceSummary', function() {
  return {
    restrict: 'A',
    link: function(scope, element) {
      element.addClass("hr");
      return element.addClass("workforce-summary");
    },
    controller: 'WidgetHrWorkforceSummaryCtrl'
  };
});
})();
//# sourceMappingURL=data:application/json;base64,