(function () {
var module;

module = angular.module('maestrano.analytics.widget-hr-superannuation-accruals', ['maestrano.assets']);

module.controller('WidgetHrSuperannuationAccrualsCtrl', [
  '$scope', 'DhbAnalyticsSvc', 'Utilities', function($scope, DhbAnalyticsSvc, Utilities) {
    var getSettingsCount, w;
    w = $scope.widget;
    w.initContext = function() {
      if ($scope.isDataFound = !_.isEmpty(w.content.employees) && !_.isEmpty(w.content.dates)) {
        $scope.employeesOptions = _.map(w.content.employees, function(e) {
          return {
            value: e.id,
            label: e.lastname + " " + e.firstname
          };
        });
        return $scope.selectedEmployee = {
          value: $scope.getEmployee().id,
          label: ($scope.getEmployee().lastname) + " " + ($scope.getEmployee().firstname)
        };
      }
    };
    $scope.getEmployee = function() {
      if (!$scope.isDataFound) {
        return false;
      }
      if (w.metadata && w.metadata.employee_id) {
        return _.find(w.content.employees, function(e) {
          return e.id === w.metadata.employee_id;
        }) || w.content.employees[0];
      } else {
        return w.content.employees[0];
      }
    };
    getSettingsCount = function() {
      if (w.settings != null) {
        return w.settings.length;
      } else {
        return 0;
      }
    };
    $scope.$watch(getSettingsCount, function(total) {
      if (total >= 3) {
        return w.loadContent();
      }
    });
    return w;
  }
]);

module.directive('widgetHrSuperannuationAccruals', function() {
  return {
    restrict: 'A',
    link: function(scope, element) {
      element.addClass("hr");
      return element.addClass("superannuation-accruals");
    },
    controller: 'WidgetHrSuperannuationAccrualsCtrl'
  };
});
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndpZGdldHMvd2lkZ2V0LWhyLXN1cGVyYW5udWF0aW9uLWFjY3J1YWxzLmpzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFBLE1BQUEsR0FBUyxPQUFPLENBQUMsTUFBUixDQUFlLHVEQUFmLEVBQXVFLENBQUMsa0JBQUQsQ0FBdkU7O0FBRVQsTUFBTSxDQUFDLFVBQVAsQ0FBa0Isb0NBQWxCLEVBQXVEO0VBQ3JELFFBRHFELEVBQzNDLGlCQUQyQyxFQUN4QixXQUR3QixFQUVyRCxTQUFDLE1BQUQsRUFBUyxlQUFULEVBQTBCLFNBQTFCO0FBRUUsUUFBQTtJQUFBLENBQUEsR0FBSSxNQUFNLENBQUM7SUFFWCxDQUFDLENBQUMsV0FBRixHQUFnQixTQUFBO01BQ2QsSUFBRyxNQUFNLENBQUMsV0FBUCxHQUFxQixDQUFDLENBQUMsQ0FBQyxPQUFGLENBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFwQixDQUFELElBQW1DLENBQUMsQ0FBQyxDQUFDLE9BQUYsQ0FBVSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQXBCLENBQTVEO1FBQ0UsTUFBTSxDQUFDLGdCQUFQLEdBQTBCLENBQUMsQ0FBQyxHQUFGLENBQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFoQixFQUEyQixTQUFDLENBQUQ7aUJBQ25EO1lBQ0UsS0FBQSxFQUFPLENBQUMsQ0FBQyxFQURYO1lBRUUsS0FBQSxFQUFVLENBQUMsQ0FBQyxRQUFILEdBQVksR0FBWixHQUFlLENBQUMsQ0FBQyxTQUY1Qjs7UUFEbUQsQ0FBM0I7ZUFNMUIsTUFBTSxDQUFDLGdCQUFQLEdBQTBCO1VBQ3hCLEtBQUEsRUFBTyxNQUFNLENBQUMsV0FBUCxDQUFBLENBQW9CLENBQUMsRUFESjtVQUV4QixLQUFBLEVBQVMsQ0FBQyxNQUFNLENBQUMsV0FBUCxDQUFBLENBQW9CLENBQUMsUUFBdEIsQ0FBQSxHQUErQixHQUEvQixHQUFpQyxDQUFDLE1BQU0sQ0FBQyxXQUFQLENBQUEsQ0FBb0IsQ0FBQyxTQUF0QixDQUZsQjtVQVA1Qjs7SUFEYztJQWFoQixNQUFNLENBQUMsV0FBUCxHQUFxQixTQUFBO01BQ25CLElBQUEsQ0FBb0IsTUFBTSxDQUFDLFdBQTNCO0FBQUEsZUFBTyxNQUFQOztNQUVBLElBQUcsQ0FBQyxDQUFDLFFBQUYsSUFBYyxDQUFDLENBQUMsUUFBUSxDQUFDLFdBQTVCO0FBQ0UsZUFBTyxDQUFDLENBQUMsSUFBRixDQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBakIsRUFBNEIsU0FBQyxDQUFEO2lCQUNqQyxDQUFDLENBQUMsRUFBRixLQUFRLENBQUMsQ0FBQyxRQUFRLENBQUM7UUFEYyxDQUE1QixDQUFBLElBRUYsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFVLENBQUEsQ0FBQSxFQUgzQjtPQUFBLE1BQUE7QUFLRSxlQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBVSxDQUFBLENBQUEsRUFMN0I7O0lBSG1CO0lBa0JyQixnQkFBQSxHQUFtQixTQUFBO01BQ2pCLElBQUcsa0JBQUg7QUFDRSxlQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FEcEI7T0FBQSxNQUFBO0FBR0UsZUFBTyxFQUhUOztJQURpQjtJQU9uQixNQUFNLENBQUMsTUFBUCxDQUFjLGdCQUFkLEVBQWdDLFNBQUMsS0FBRDtNQUM5QixJQUFtQixLQUFBLElBQVMsQ0FBNUI7ZUFBQSxDQUFDLENBQUMsV0FBRixDQUFBLEVBQUE7O0lBRDhCLENBQWhDO0FBR0EsV0FBTztFQTdDVCxDQUZxRDtDQUF2RDs7QUFtREEsTUFBTSxDQUFDLFNBQVAsQ0FBaUIsZ0NBQWpCLEVBQW1ELFNBQUE7QUFDakQsU0FBTztJQUNMLFFBQUEsRUFBVSxHQURMO0lBRUwsSUFBQSxFQUFNLFNBQUMsS0FBRCxFQUFRLE9BQVI7TUFDSixPQUFPLENBQUMsUUFBUixDQUFpQixJQUFqQjthQUNBLE9BQU8sQ0FBQyxRQUFSLENBQWlCLHlCQUFqQjtJQUZJLENBRkQ7SUFLSixVQUFBLEVBQVksb0NBTFI7O0FBRDBDLENBQW5EIiwiZmlsZSI6IndpZGdldHMvd2lkZ2V0LWhyLXN1cGVyYW5udWF0aW9uLWFjY3J1YWxzLmpzLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ21hZXN0cmFuby5hbmFseXRpY3Mud2lkZ2V0LWhyLXN1cGVyYW5udWF0aW9uLWFjY3J1YWxzJyxbJ21hZXN0cmFuby5hc3NldHMnXSlcblxubW9kdWxlLmNvbnRyb2xsZXIoJ1dpZGdldEhyU3VwZXJhbm51YXRpb25BY2NydWFsc0N0cmwnLFtcbiAgJyRzY29wZScsICdEaGJBbmFseXRpY3NTdmMnLCAnVXRpbGl0aWVzJyxcbiAgKCRzY29wZSwgRGhiQW5hbHl0aWNzU3ZjLCBVdGlsaXRpZXMpIC0+XG5cbiAgICB3ID0gJHNjb3BlLndpZGdldFxuXG4gICAgdy5pbml0Q29udGV4dCA9IC0+XG4gICAgICBpZiAkc2NvcGUuaXNEYXRhRm91bmQgPSAhXy5pc0VtcHR5KHcuY29udGVudC5lbXBsb3llZXMpICYmICFfLmlzRW1wdHkody5jb250ZW50LmRhdGVzKVxuICAgICAgICAkc2NvcGUuZW1wbG95ZWVzT3B0aW9ucyA9IF8ubWFwKHcuY29udGVudC5lbXBsb3llZXMsIChlKSAtPlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHZhbHVlOiBlLmlkLFxuICAgICAgICAgICAgbGFiZWw6IFwiI3tlLmxhc3RuYW1lfSAje2UuZmlyc3RuYW1lfVwiLFxuICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgICAkc2NvcGUuc2VsZWN0ZWRFbXBsb3llZSA9IHtcbiAgICAgICAgICB2YWx1ZTogJHNjb3BlLmdldEVtcGxveWVlKCkuaWQsXG4gICAgICAgICAgbGFiZWw6IFwiI3skc2NvcGUuZ2V0RW1wbG95ZWUoKS5sYXN0bmFtZX0gI3skc2NvcGUuZ2V0RW1wbG95ZWUoKS5maXJzdG5hbWV9XCIsXG4gICAgICAgIH1cblxuICAgICRzY29wZS5nZXRFbXBsb3llZSA9IC0+XG4gICAgICByZXR1cm4gZmFsc2UgdW5sZXNzICRzY29wZS5pc0RhdGFGb3VuZFxuXG4gICAgICBpZiB3Lm1ldGFkYXRhICYmIHcubWV0YWRhdGEuZW1wbG95ZWVfaWRcbiAgICAgICAgcmV0dXJuIF8uZmluZCh3LmNvbnRlbnQuZW1wbG95ZWVzLCAoZSkgLT5cbiAgICAgICAgICBlLmlkID09IHcubWV0YWRhdGEuZW1wbG95ZWVfaWRcbiAgICAgICAgKSB8fCB3LmNvbnRlbnQuZW1wbG95ZWVzWzBdXG4gICAgICBlbHNlXG4gICAgICAgIHJldHVybiB3LmNvbnRlbnQuZW1wbG95ZWVzWzBdXG5cblxuICAgICMgVE9ETzogUmVmYWN0b3Igb25jZSB3ZSBoYXZlIHVuZGVyc3Rvb2QgZXhhY3RseSBob3cgdGhlIGFuZ3VsYXJqcyBjb21waWxhdGlvbiBwcm9jZXNzIHdvcmtzOlxuICAgICMgaW4gdGhpcyBvcmRlciwgd2Ugc2hvdWxkOlxuICAgICMgMS0gY29tcGlsZSBpbXBhYy13aWRnZXQgY29udHJvbGxlclxuICAgICMgMi0gY29tcGlsZSB0aGUgc3BlY2lmaWMgd2lkZ2V0IHRlbXBsYXRlL2NvbnRyb2xsZXJcbiAgICAjIDMtIGNvbXBpbGUgdGhlIHNldHRpbmdzIHRlbXBsYXRlcy9jb250cm9sbGVyc1xuICAgICMgNC0gY2FsbCB3aWRnZXQubG9hZENvbnRlbnQoKSAoaWRlYWxseSwgZnJvbSBpbXBhYy13aWRnZXQsIG9uY2UgYSBjYWxsYmFjayBcbiAgICAjICAgICBhc3Nlc3NpbmcgdGhhdCBldmVyeXRoaW5nIGlzIGNvbXBpbGVkIGFuIHJlYWR5IGlzIHJlY2VpdmVkKVxuICAgIGdldFNldHRpbmdzQ291bnQgPSAtPlxuICAgICAgaWYgdy5zZXR0aW5ncz9cbiAgICAgICAgcmV0dXJuIHcuc2V0dGluZ3MubGVuZ3RoXG4gICAgICBlbHNlXG4gICAgICAgIHJldHVybiAwXG5cbiAgICAjIFNldHRpbmdzOiBvcmdhbml6YXRpb25zICsgeDEgcGFyYW0gc2VsZWN0b3IgKyB0aW1lIHJhbmdlXG4gICAgJHNjb3BlLiR3YXRjaCBnZXRTZXR0aW5nc0NvdW50LCAodG90YWwpIC0+XG4gICAgICB3LmxvYWRDb250ZW50KCkgaWYgdG90YWwgPj0gM1xuXG4gICAgcmV0dXJuIHdcblxuXSlcblxubW9kdWxlLmRpcmVjdGl2ZSgnd2lkZ2V0SHJTdXBlcmFubnVhdGlvbkFjY3J1YWxzJywgLT5cbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIGxpbms6IChzY29wZSwgZWxlbWVudCkgLT5cbiAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoXCJoclwiKVxuICAgICAgZWxlbWVudC5hZGRDbGFzcyhcInN1cGVyYW5udWF0aW9uLWFjY3J1YWxzXCIpXG4gICAgLGNvbnRyb2xsZXI6ICdXaWRnZXRIclN1cGVyYW5udWF0aW9uQWNjcnVhbHNDdHJsJ1xuICB9XG4pIl19