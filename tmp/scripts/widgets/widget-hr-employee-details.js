(function () {
var module;

module = angular.module('maestrano.analytics.widget-hr-employee-details', ['maestrano.assets']);

module.controller('WidgetHrEmployeeDetailsCtrl', [
  '$scope', 'DhbAnalyticsSvc', 'Utilities', '$filter', function($scope, DhbAnalyticsSvc, Utilities, $filter) {
    var getSettingsCount, w;
    w = $scope.widget;
    w.initContext = function() {
      if ($scope.isDataFound = !_.isEmpty(w.content.employees)) {
        $scope.periodOptions = [
          {
            label: 'Yearly',
            value: 'yearly'
          }, {
            label: 'Monthly',
            value: 'monthly'
          }, {
            label: 'Weekly',
            value: 'weekly'
          }, {
            label: 'Hourly',
            value: 'hourly'
          }
        ];
        if (w.metadata && w.metadata.period) {
          $scope.period = _.find($scope.periodOptions, function(o) {
            return o.value === w.metadata.period.toLowerCase();
          }) || $scope.periodOptions[0];
        } else {
          $scope.period = $scope.periodOptions[0];
        }
        $scope.employeesOptions = _.map(w.content.employees, function(e) {
          return {
            value: e.uid,
            label: e.lastname + " " + e.firstname
          };
        });
        return $scope.selectedEmployee = {
          value: $scope.getEmployee().uid,
          label: ($scope.getEmployee().lastname) + " " + ($scope.getEmployee().firstname)
        };
      }
    };
    $scope.getSingleCompanyName = function() {
      var org, orgUid;
      if (w.content && w.content.organizations) {
        orgUid = w.content.organizations[0];
        org = _.find(w.parentDashboard.data_sources, function(o) {
          return o.uid === orgUid;
        });
        return org.label;
      }
    };
    $scope.getEmployee = function() {
      var employee;
      if (!$scope.isDataFound) {
        return false;
      }
      if (w.metadata && w.metadata.employee_uid) {
        employee = angular.copy(_.find(w.content.employees, function(e) {
          return e.uid === w.metadata.employee_uid;
        }) || w.content.employees[0]);
      } else {
        employee = angular.copy(w.content.employees[0]);
      }
      employee.salary && (employee.salary = $filter('mnoCurrency')(employee.salary.amount, employee.salary.currency));
      return employee;
    };
    $scope.formatAddress = function(anAddress) {
      if (angular.isDefined(anAddress)) {
        return anAddress.replace(/, /g, ',\n');
      }
    };
    getSettingsCount = function() {
      if (w.settings != null) {
        return w.settings.length;
      } else {
        return 0;
      }
    };
    $scope.$watch(getSettingsCount, function(total) {
      if (total >= 4) {
        return w.loadContent();
      }
    });
    return w;
  }
]);

module.directive('widgetHrEmployeeDetails', function() {
  return {
    restrict: 'A',
    link: function(scope, element) {
      element.addClass("hr");
      return element.addClass("employee-details");
    },
    controller: 'WidgetHrEmployeeDetailsCtrl'
  };
});
})();
//# sourceMappingURL=data:application/json;base64,