(function () {
var module;

module = angular.module('maestrano.analytics.widget-sales-aged', ['maestrano.assets']);

module.controller('WidgetSalesAgedCtrl', [
  '$scope', 'DhbAnalyticsSvc', 'ChartFormatterSvc', '$filter', function($scope, DhbAnalyticsSvc, ChartFormatterSvc, $filter) {
    var getSettingsCount, w;
    w = $scope.widget;
    w.initContext = function() {
      if ($scope.isDataFound = angular.isDefined(w.content) && !_.isEmpty(w.content.aged_sales) && !_.isEmpty(w.content.dates)) {
        $scope.filterOptions = [
          {
            label: 'value sold (incl. taxes)',
            value: 'gross_value_sold'
          }, {
            label: 'value sold (excl. taxes)',
            value: 'net_value_sold'
          }, {
            label: 'quantity sold',
            value: 'quantity_sold'
          }
        ];
        return $scope.filter = _.find($scope.filterOptions, function(o) {
          return w.metadata && w.metadata.filter === o.value;
        }) || $scope.filterOptions[0];
      }
    };
    w.format = function() {
      var all_values_are_positive, inputData, options, values;
      if ($scope.isDataFound) {
        all_values_are_positive = true;
        inputData = [];
        values = w.content.aged_sales[$scope.filter.value];
        $scope.formattedDates = _.map(w.content.dates, function(date) {
          if (w.metadata && w.metadata.hist_parameters && w.metadata.hist_parameters.period === "YEARLY") {
            return $filter('date')(date, 'yyyy');
          } else if (w.metadata && w.metadata.hist_parameters && w.metadata.hist_parameters.period === "QUARTERLY") {
            return $filter('date')(date, 'MMM-yy');
          } else if (w.metadata && w.metadata.hist_parameters && (w.metadata.hist_parameters.period === "WEEKLY" || w.metadata.hist_parameters.period === "DAILY")) {
            return $filter('date')(date, 'dd-MMM');
          } else {
            return $filter('date')(date, 'MMM');
          }
        });
        inputData.push({
          title: $scope.filter.label,
          labels: $scope.formattedDates,
          values: values
        });
        angular.forEach(values, function(value) {
          return all_values_are_positive && (all_values_are_positive = value >= 0);
        });
        options = {
          scaleBeginAtZero: all_values_are_positive,
          showXLabels: true,
          datasetFill: true,
          pointDot: true
        };
        return w.chart = ChartFormatterSvc.lineChart(inputData, options);
      }
    };
    $scope.$watch((function() {
      return $scope.filter;
    }), function(filter) {
      return w.format();
    }, true);
    $scope.getTotal = function(anIndex) {
      if ($scope.isDataFound && anIndex >= 0 && anIndex < w.content.aged_sales[$scope.filter.value].length) {
        return w.content.aged_sales[$scope.filter.value][anIndex];
      }
    };
    $scope.getLastDate = function() {
      if ($scope.isDataFound) {
        return _.last(w.content.dates);
      }
    };
    $scope.getClassColor = function(prev, value) {
      if (value < prev) {
        return 'negative';
      } else if (value > prev) {
        return 'positive';
      } else {
        return null;
      }
    };
    getSettingsCount = function() {
      if (w.settings != null) {
        return w.settings.length;
      } else {
        return 0;
      }
    };
    $scope.$watch(getSettingsCount, function(total) {
      if (total >= 3) {
        return w.loadContent();
      }
    });
    return w;
  }
]);

module.directive('widgetSalesAged', function() {
  return {
    restrict: 'A',
    link: function(scope, element) {
      element.addClass("sales");
      return element.addClass("aged");
    },
    controller: 'WidgetSalesAgedCtrl'
  };
});
})();
//# sourceMappingURL=data:application/json;base64,