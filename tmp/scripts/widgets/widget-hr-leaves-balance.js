(function () {
var module;

module = angular.module('maestrano.analytics.widget-hr-leaves-balance', ['maestrano.assets']);

module.controller('WidgetHrLeavesBalanceCtrl', [
  '$scope', 'DhbAnalyticsSvc', 'Utilities', function($scope, DhbAnalyticsSvc, Utilities) {
    var getSettingsCount, w;
    w = $scope.widget;
    w.initContext = function() {
      if ($scope.isDataFound = !_.isEmpty(w.content.employees) && !_.isEmpty(w.content.dates)) {
        $scope.employeesOptions = _.map(w.content.employees, function(e) {
          return {
            value: e.id,
            label: e.lastname + " " + e.firstname
          };
        });
        return $scope.selectedEmployee = {
          value: $scope.getEmployee().id,
          label: ($scope.getEmployee().lastname) + " " + ($scope.getEmployee().firstname)
        };
      }
    };
    $scope.getEmployee = function() {
      if (!$scope.isDataFound) {
        return false;
      }
      if (w.metadata && w.metadata.employee_id) {
        return _.find(w.content.employees, function(e) {
          return e.id === w.metadata.employee_id;
        }) || w.content.employees[0];
      } else {
        return w.content.employees[0];
      }
    };
    getSettingsCount = function() {
      if (w.settings != null) {
        return w.settings.length;
      } else {
        return 0;
      }
    };
    $scope.$watch(getSettingsCount, function(total) {
      if (total >= 3) {
        return w.loadContent();
      }
    });
    return w;
  }
]);

module.directive('widgetHrLeavesBalance', function() {
  return {
    restrict: 'A',
    link: function(scope, element) {
      element.addClass("hr");
      return element.addClass("leaves-balance");
    },
    controller: 'WidgetHrLeavesBalanceCtrl'
  };
});
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndpZGdldHMvd2lkZ2V0LWhyLWxlYXZlcy1iYWxhbmNlLmpzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxJQUFBOztBQUFBLE1BQUEsR0FBUyxPQUFPLENBQUMsTUFBUixDQUFlLDhDQUFmLEVBQThELENBQUMsa0JBQUQsQ0FBOUQ7O0FBRVQsTUFBTSxDQUFDLFVBQVAsQ0FBa0IsMkJBQWxCLEVBQThDO0VBQzVDLFFBRDRDLEVBQ2xDLGlCQURrQyxFQUNmLFdBRGUsRUFFNUMsU0FBQyxNQUFELEVBQVMsZUFBVCxFQUEwQixTQUExQjtBQUVFLFFBQUE7SUFBQSxDQUFBLEdBQUksTUFBTSxDQUFDO0lBRVgsQ0FBQyxDQUFDLFdBQUYsR0FBZ0IsU0FBQTtNQUNkLElBQUcsTUFBTSxDQUFDLFdBQVAsR0FBcUIsQ0FBQyxDQUFDLENBQUMsT0FBRixDQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBcEIsQ0FBRCxJQUFtQyxDQUFDLENBQUMsQ0FBQyxPQUFGLENBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFwQixDQUE1RDtRQUNFLE1BQU0sQ0FBQyxnQkFBUCxHQUEwQixDQUFDLENBQUMsR0FBRixDQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBaEIsRUFBMkIsU0FBQyxDQUFEO2lCQUNuRDtZQUNFLEtBQUEsRUFBTyxDQUFDLENBQUMsRUFEWDtZQUVFLEtBQUEsRUFBVSxDQUFDLENBQUMsUUFBSCxHQUFZLEdBQVosR0FBZSxDQUFDLENBQUMsU0FGNUI7O1FBRG1ELENBQTNCO2VBTTFCLE1BQU0sQ0FBQyxnQkFBUCxHQUEwQjtVQUN4QixLQUFBLEVBQU8sTUFBTSxDQUFDLFdBQVAsQ0FBQSxDQUFvQixDQUFDLEVBREo7VUFFeEIsS0FBQSxFQUFTLENBQUMsTUFBTSxDQUFDLFdBQVAsQ0FBQSxDQUFvQixDQUFDLFFBQXRCLENBQUEsR0FBK0IsR0FBL0IsR0FBaUMsQ0FBQyxNQUFNLENBQUMsV0FBUCxDQUFBLENBQW9CLENBQUMsU0FBdEIsQ0FGbEI7VUFQNUI7O0lBRGM7SUFhaEIsTUFBTSxDQUFDLFdBQVAsR0FBcUIsU0FBQTtNQUNuQixJQUFBLENBQW9CLE1BQU0sQ0FBQyxXQUEzQjtBQUFBLGVBQU8sTUFBUDs7TUFFQSxJQUFHLENBQUMsQ0FBQyxRQUFGLElBQWMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxXQUE1QjtBQUNFLGVBQU8sQ0FBQyxDQUFDLElBQUYsQ0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQWpCLEVBQTRCLFNBQUMsQ0FBRDtpQkFDakMsQ0FBQyxDQUFDLEVBQUYsS0FBUSxDQUFDLENBQUMsUUFBUSxDQUFDO1FBRGMsQ0FBNUIsQ0FBQSxJQUVGLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBVSxDQUFBLENBQUEsRUFIM0I7T0FBQSxNQUFBO0FBS0UsZUFBTyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVUsQ0FBQSxDQUFBLEVBTDdCOztJQUhtQjtJQWtCckIsZ0JBQUEsR0FBbUIsU0FBQTtNQUNqQixJQUFHLGtCQUFIO0FBQ0UsZUFBTyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BRHBCO09BQUEsTUFBQTtBQUdFLGVBQU8sRUFIVDs7SUFEaUI7SUFPbkIsTUFBTSxDQUFDLE1BQVAsQ0FBYyxnQkFBZCxFQUFnQyxTQUFDLEtBQUQ7TUFDOUIsSUFBbUIsS0FBQSxJQUFTLENBQTVCO2VBQUEsQ0FBQyxDQUFDLFdBQUYsQ0FBQSxFQUFBOztJQUQ4QixDQUFoQztBQUdBLFdBQU87RUE3Q1QsQ0FGNEM7Q0FBOUM7O0FBbURBLE1BQU0sQ0FBQyxTQUFQLENBQWlCLHVCQUFqQixFQUEwQyxTQUFBO0FBQ3hDLFNBQU87SUFDTCxRQUFBLEVBQVUsR0FETDtJQUVMLElBQUEsRUFBTSxTQUFDLEtBQUQsRUFBUSxPQUFSO01BQ0osT0FBTyxDQUFDLFFBQVIsQ0FBaUIsSUFBakI7YUFDQSxPQUFPLENBQUMsUUFBUixDQUFpQixnQkFBakI7SUFGSSxDQUZEO0lBS0osVUFBQSxFQUFZLDJCQUxSOztBQURpQyxDQUExQyIsImZpbGUiOiJ3aWRnZXRzL3dpZGdldC1oci1sZWF2ZXMtYmFsYW5jZS5qcy5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIiMgVE9ETzogZmFjdG9yIHdpdGggc3VwZXJhbm51YXRpb24gYWNjcnVhbHMgKGV4YWN0IHNhbWUgY29udHJvbGxlcilcblxubW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ21hZXN0cmFuby5hbmFseXRpY3Mud2lkZ2V0LWhyLWxlYXZlcy1iYWxhbmNlJyxbJ21hZXN0cmFuby5hc3NldHMnXSlcblxubW9kdWxlLmNvbnRyb2xsZXIoJ1dpZGdldEhyTGVhdmVzQmFsYW5jZUN0cmwnLFtcbiAgJyRzY29wZScsICdEaGJBbmFseXRpY3NTdmMnLCAnVXRpbGl0aWVzJyxcbiAgKCRzY29wZSwgRGhiQW5hbHl0aWNzU3ZjLCBVdGlsaXRpZXMpIC0+XG5cbiAgICB3ID0gJHNjb3BlLndpZGdldFxuXG4gICAgdy5pbml0Q29udGV4dCA9IC0+XG4gICAgICBpZiAkc2NvcGUuaXNEYXRhRm91bmQgPSAhXy5pc0VtcHR5KHcuY29udGVudC5lbXBsb3llZXMpICYmICFfLmlzRW1wdHkody5jb250ZW50LmRhdGVzKVxuICAgICAgICAkc2NvcGUuZW1wbG95ZWVzT3B0aW9ucyA9IF8ubWFwKHcuY29udGVudC5lbXBsb3llZXMsIChlKSAtPlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHZhbHVlOiBlLmlkLFxuICAgICAgICAgICAgbGFiZWw6IFwiI3tlLmxhc3RuYW1lfSAje2UuZmlyc3RuYW1lfVwiLFxuICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgICAkc2NvcGUuc2VsZWN0ZWRFbXBsb3llZSA9IHtcbiAgICAgICAgICB2YWx1ZTogJHNjb3BlLmdldEVtcGxveWVlKCkuaWQsXG4gICAgICAgICAgbGFiZWw6IFwiI3skc2NvcGUuZ2V0RW1wbG95ZWUoKS5sYXN0bmFtZX0gI3skc2NvcGUuZ2V0RW1wbG95ZWUoKS5maXJzdG5hbWV9XCIsXG4gICAgICAgIH1cblxuICAgICRzY29wZS5nZXRFbXBsb3llZSA9IC0+XG4gICAgICByZXR1cm4gZmFsc2UgdW5sZXNzICRzY29wZS5pc0RhdGFGb3VuZFxuXG4gICAgICBpZiB3Lm1ldGFkYXRhICYmIHcubWV0YWRhdGEuZW1wbG95ZWVfaWRcbiAgICAgICAgcmV0dXJuIF8uZmluZCh3LmNvbnRlbnQuZW1wbG95ZWVzLCAoZSkgLT5cbiAgICAgICAgICBlLmlkID09IHcubWV0YWRhdGEuZW1wbG95ZWVfaWRcbiAgICAgICAgKSB8fCB3LmNvbnRlbnQuZW1wbG95ZWVzWzBdXG4gICAgICBlbHNlXG4gICAgICAgIHJldHVybiB3LmNvbnRlbnQuZW1wbG95ZWVzWzBdXG5cblxuICAgICMgVE9ETzogUmVmYWN0b3Igb25jZSB3ZSBoYXZlIHVuZGVyc3Rvb2QgZXhhY3RseSBob3cgdGhlIGFuZ3VsYXJqcyBjb21waWxhdGlvbiBwcm9jZXNzIHdvcmtzOlxuICAgICMgaW4gdGhpcyBvcmRlciwgd2Ugc2hvdWxkOlxuICAgICMgMS0gY29tcGlsZSBpbXBhYy13aWRnZXQgY29udHJvbGxlclxuICAgICMgMi0gY29tcGlsZSB0aGUgc3BlY2lmaWMgd2lkZ2V0IHRlbXBsYXRlL2NvbnRyb2xsZXJcbiAgICAjIDMtIGNvbXBpbGUgdGhlIHNldHRpbmdzIHRlbXBsYXRlcy9jb250cm9sbGVyc1xuICAgICMgNC0gY2FsbCB3aWRnZXQubG9hZENvbnRlbnQoKSAoaWRlYWxseSwgZnJvbSBpbXBhYy13aWRnZXQsIG9uY2UgYSBjYWxsYmFjayBcbiAgICAjICAgICBhc3Nlc3NpbmcgdGhhdCBldmVyeXRoaW5nIGlzIGNvbXBpbGVkIGFuIHJlYWR5IGlzIHJlY2VpdmVkKVxuICAgIGdldFNldHRpbmdzQ291bnQgPSAtPlxuICAgICAgaWYgdy5zZXR0aW5ncz9cbiAgICAgICAgcmV0dXJuIHcuc2V0dGluZ3MubGVuZ3RoXG4gICAgICBlbHNlXG4gICAgICAgIHJldHVybiAwXG5cbiAgICAjIFNldHRpbmdzOiBvcmdhbml6YXRpb25zICsgeDEgcGFyYW0gc2VsZWN0b3IgKyB0aW1lIHJhbmdlXG4gICAgJHNjb3BlLiR3YXRjaCBnZXRTZXR0aW5nc0NvdW50LCAodG90YWwpIC0+XG4gICAgICB3LmxvYWRDb250ZW50KCkgaWYgdG90YWwgPj0gM1xuXG4gICAgcmV0dXJuIHdcblxuXSlcblxubW9kdWxlLmRpcmVjdGl2ZSgnd2lkZ2V0SHJMZWF2ZXNCYWxhbmNlJywgLT5cbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIGxpbms6IChzY29wZSwgZWxlbWVudCkgLT5cbiAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoXCJoclwiKVxuICAgICAgZWxlbWVudC5hZGRDbGFzcyhcImxlYXZlcy1iYWxhbmNlXCIpXG4gICAgLGNvbnRyb2xsZXI6ICdXaWRnZXRIckxlYXZlc0JhbGFuY2VDdHJsJ1xuICB9XG4pIl19