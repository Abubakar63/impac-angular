(function () {
var module;

module = angular.module('maestrano.analytics.impac-widget-template-admin', ['maestrano.assets']);

module.controller('ImpacWidgetTemplateAdminCtrl', [
  '$scope', 'WidgetTemplateSvc', '$http', 'AssetPath', function($scope, WidgetTemplateSvc, $http, AssetPath) {
    var addCategory, create, dataURItoBlob, destroy, index, update, updateCategory;
    $scope.activatedCat = false;
    $scope.cat = {};
    $scope.loaderImage = AssetPath['loader-white-bg.gif'];
    $scope.activateCat = function(cat) {
      if (cat === $scope.activatedCat) {
        $scope.activatedCat = false;
        return $scope.cat[cat] = false;
      } else {
        $scope.cat[cat] = true;
        if ($scope.activatedCat) {
          $scope.cat[$scope.activatedCat] = false;
        }
        return $scope.activatedCat = cat;
      }
    };
    $scope.create = create = {};
    create.successMsg = false;
    create.errorMsg = false;
    create.errors = '';
    create.inProgress = false;
    create.generatePdf = true;
    create.screenshot = {};
    create.model = {};
    create.endpoints = [];
    create.resetEndpoints = function() {
      return _.each(create.endpoints, function(ep) {
        return ep.checked = false;
      });
    };
    create.reset = function() {
      create.model = {};
      create.model['active'] = true;
      create.model.screenshot = "";
      create.screenshot = {};
      return create.resetEndpoints();
    };
    create.save = function() {
      create.errors = '';
      create.successMsg = false;
      create.errorMsg = false;
      create.inProgress = true;
      create.model.endpoints = create.endpoints;
      return WidgetTemplateSvc.create(create).then(function(response) {
        if (response.status === 400) {
          create.errorMsg = true;
          create.errors = response.data;
          return create.inProgress = false;
        }
      });
    };
    create.saveCatalogueImg = function() {
      return $scope.renderTemplateImg(false);
    };
    create.afterSave = function() {
      create.successMsg = true;
      create.reset();
      index.get();
      create.inProgress = false;
      if (create.generatePdf) {
        return WidgetTemplateSvc.generatePdf();
      }
    };
    $scope.update = update = {};
    update.selected = false;
    update.inProgress = false;
    update.successMsg = false;
    update.errorMsg = false;
    update.errors = '';
    update.generatePdf = true;
    update.model = {};
    update.endpoints = [];
    update.save = function() {
      update.successMsg = false;
      update.errorMsg = false;
      update.inProgress = true;
      update.model.endpoints = update.endpoints;
      return WidgetTemplateSvc.update(update).then(function(response) {
        if (response.status === 400) {
          update.errorMsg = true;
          update.errors = response.data;
          return update.inProgress = false;
        }
      });
    };
    update.saveCatalogueImg = function() {
      return $scope.renderTemplateImg(true);
    };
    update.afterSave = function() {
      update.successMsg = true;
      update.inProgress = false;
      if (update.generatePdf) {
        return WidgetTemplateSvc.generatePdf();
      }
    };
    update.selectEndpoints = function(wt) {
      return _.each(update.endpoints, function(ep) {
        ep.checked = false;
        return _.each(wt.endpoints, function(wt_ep) {
          if (wt_ep.shared_entity_id === ep.id) {
            return ep.checked = true;
          }
        });
      });
    };
    $scope.$watch('update.selected', function() {
      if (update.selected) {
        _.each(index.model, function(wt) {
          if (wt.id === update.selected.id) {
            update.model = wt;
            update.model.category_id = wt.category_id;
            update.selectEndpoints(wt);
          }
        });
      } else {
        update.model = {};
      }
      return $scope.$apply;
    });
    $scope.destroy = destroy = {};
    destroy.selected = false;
    destroy.inProgress = false;
    destroy.generatePdf = true;
    destroy.destroy = function() {
      destroy.inProgress = true;
      return WidgetTemplateSvc.destroy(destroy.selected.id).then(destroy.inProgress = false, destroy.selected = false, destroy.confirm = "", index.get(), destroy.generatePdf ? WidgetTemplateSvc.generatePdf() : void 0);
    };
    $scope.addCategory = addCategory = {};
    addCategory.model = {};
    addCategory.save = function() {
      return WidgetTemplateSvc.createCategory(addCategory.model).then(addCategory.model = {}, index.getCategories());
    };
    $scope.updateCategory = updateCategory = {};
    updateCategory.selected = false;
    updateCategory.inProgress = false;
    updateCategory.model = {};
    updateCategory.successMsg = false;
    updateCategory.errorMsg = false;
    updateCategory.errors = '';
    updateCategory.save = function() {
      updateCategory.successMsg = false;
      updateCategory.errorMsg = false;
      updateCategory.inProgress = true;
      return WidgetTemplateSvc.updateCategory(updateCategory.model).then(function(success) {
        updateCategory.successMsg = true;
        return index.getCategories();
      }, function(failure) {
        updateCategory.errorMsg = true;
        return updateCategory.errors = failure.data;
      }, updateCategory.inProgress = false);
    };
    $scope.$watch('updateCategory.selected', function() {
      if (updateCategory.selected) {
        _.each(index.categories, function(cat) {
          if (cat.id === updateCategory.selected.id) {
            updateCategory.model = cat;
          }
        });
      } else {
        updateCategory.model = {};
      }
      return $scope.$apply;
    });
    $scope.index = index = {};
    index.inProgress = false;
    index.model = {};
    index.categories = {};
    index.sharedEntities = {};
    index.lastUpdate = "";
    index.initEndpoints = function(array) {
      return _.each(index.sharedEntities, function(se) {
        return array.push({
          id: se.id,
          name: se.name,
          checked: false
        });
      });
    };
    index.get = function() {
      index.inProgress = true;
      return WidgetTemplateSvc.index().then(function(widget_templates) {
        index.model = widget_templates;
        return index.inProgress = false;
      });
    };
    index.getCategories = function() {
      index.inProgress = true;
      return WidgetTemplateSvc.categories().then(function(categories) {
        index.categories = categories;
        return index.inProgress = false;
      });
    };
    index.getSharedEntities = function() {
      index.inProgress = true;
      return $http.get('/js_api/v1/connec_entities').then(function(success) {
        index.sharedEntities = success.data.shared_entities;
        index.initEndpoints(create.endpoints);
        index.initEndpoints(update.endpoints);
        return index.inProgress = false;
      });
    };
    index.getLastUpdate = function() {
      index.inProgress = true;
      return WidgetTemplateSvc.lastUpdate().then(function(last_update) {
        index.lastUpdate = last_update;
        return index.inProgress = false;
      });
    };
    $scope.saveCatalogueImg = function(aCat, catalogueImgFile) {
      return WidgetTemplateSvc.updateImg(aCat, catalogueImgFile, false);
    };
    $scope.getSettings = function(aModel) {
      if ((aModel.settings != null) && _.isArray(aModel.settings)) {
        return aModel.settings.slice(0, 6);
      } else if ((aModel.settings != null) && _.isString(aModel.settings)) {
        if (aModel.settings === "") {
          return [];
        } else {
          return aModel.settings.split(',').slice(0, 6);
        }
      }
    };
    $scope.getCompatibleApps = function(element) {
      if (element.endpoints != null) {
        return WidgetTemplateSvc.previewApps(element);
      }
    };
    dataURItoBlob = function(dataURI) {
      var ab, bb, byteString, i, ia, j, mimeString, ref;
      byteString = atob(dataURI.split(',')[1]);
      mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];
      ab = new ArrayBuffer(byteString.length);
      ia = new Uint8Array(ab);
      for (i = j = 0, ref = byteString.length; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        ia[i] = byteString.charCodeAt(i);
      }
      bb = new Blob([ab]);
      return bb;
    };
    $scope.renderTemplateImg = function(isUpdate) {
      var contentElem;
      if (isUpdate == null) {
        isUpdate = true;
      }
      if (isUpdate) {
        contentElem = angular.element('#preview_update');
      } else {
        contentElem = angular.element('#preview_create');
      }
      return html2canvas(contentElem, {
        onrendered: function(canvas) {
          var blob, imageData;
          imageData = canvas.toDataURL('image/png');
          blob = dataURItoBlob(imageData);
          if (isUpdate) {
            return $scope.saveCatalogueImg(update, blob);
          } else {
            return $scope.saveCatalogueImg(create, blob);
          }
        }
      });
    };
    $scope.init = function() {
      _.each($scope.catList, function(cat) {
        return $scope.cat[cat] = false;
      });
      create.reset();
      index.get();
      index.getCategories();
      index.getSharedEntities();
      return index.getLastUpdate();
    };
    return $scope.init();
  }
]);

module.directive('impacWidgetTemplateAdmin', [
  'TemplatePath', function(TemplatePath) {
    return {
      restrict: 'A',
      scope: {},
      templateUrl: TemplatePath['impac/widget_template_admin.html'],
      controller: 'ImpacWidgetTemplateAdminCtrl'
    };
  }
]);
})();
//# sourceMappingURL=data:application/json;base64,