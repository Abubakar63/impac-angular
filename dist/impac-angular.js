(function() {
'use strict';

/*                                                                        **
**                      MAESTRANO IMPAC-ANGULAR LIBRARY                   **
**                                                                        */
//*************************************************************************/
//* Create all modules and define dependencies.
//*************************************************************************/
angular.module('maestrano.impac',
  [
    'impac.config',
    'impac.services',
    'impac.filters',
    'impac.components',
    // EXTERNAL DEPENDENCIES //
    'ui.sortable',
    'ui.bootstrap',
    'emguo.poller'
  ]);

/*
** COMPONENTS
*/
angular.module('impac.components',
  [
    'impac.components.dashboard',
    'impac.components.dashboard-selector',
    'impac.components.dashboard-settings',
    'impac.components.kpis-bar',
    'impac.components.kpi',
    'impac.components.chart',
    'impac.components.widget',
    'impac.components.widgets',
    'impac.components.widgets-settings',
    'impac.components.widgets-common',
    'impac.components.templates'
  ]
);
angular.module('impac.components.widgets',
  [
    'impac.components.widgets.accounts-accounting-values',
    'impac.components.widgets.accounts-assets-summary',
    'impac.components.widgets.accounts-assets-liability-summary',
    'impac.components.widgets.accounts-balance-sheet',
    'impac.components.widgets.accounts-balance',
    'impac.components.widgets.accounts-cash-summary',
    'impac.components.widgets.accounts-comparison',
    'impac.components.widgets.accounts-custom-calculation',
    'impac.components.widgets.accounts-expenses-revenue',
    'impac.components.widgets.accounts-payable-receivable',
    'impac.components.widgets.accounts-profit-and-loss',
    'impac.components.widgets.accounts-class-comparison',
    'impac.components.widgets.accounts-expense-weight',
    'impac.components.widgets.accounts-assets-vs-liabilities',
    'impac.components.widgets.accounts-detailed-classifications',
    'impac.components.widgets.hr-employee-details',
    'impac.components.widgets.hr-employees-list',
    'impac.components.widgets.hr-leaves-balance',
    'impac.components.widgets.hr-leaves-schedule',
    'impac.components.widgets.hr-payroll-summary',
    'impac.components.widgets.hr-payroll-taxes',
    'impac.components.widgets.hr-salaries-summary',
    'impac.components.widgets.hr-superannuation-accruals',
    'impac.components.widgets.hr-timesheets',
    'impac.components.widgets.hr-workforce-summary',
    'impac.components.widgets.invoices-aged-payables-receivables',
    'impac.components.widgets.invoices-list',
    'impac.components.widgets.invoices-summary',
    'impac.components.widgets.sales-aged',
    'impac.components.widgets.sales-break-even',
    'impac.components.widgets.sales-comparison',
    'impac.components.widgets.sales-customer-details',
    'impac.components.widgets.sales-cycle',
    'impac.components.widgets.sales-forecast',
    'impac.components.widgets.sales-growth',
    'impac.components.widgets.sales-leads-funnel',
    'impac.components.widgets.sales-leads-list',
    'impac.components.widgets.sales-list',
    'impac.components.widgets.sales-margin',
    'impac.components.widgets.sales-number-of-leads',
    'impac.components.widgets.sales-opportunities-funnel',
    'impac.components.widgets.sales-performance',
    'impac.components.widgets.sales-segmented-turnover',
    'impac.components.widgets.sales-summary',
    'impac.components.widgets.sales-top-opportunities'
  ]
);
angular.module('impac.components.widgets-settings',
  [
    'impac.components.widgets-settings.account',
    'impac.components.widgets-settings.accounts-list',
    'impac.components.widgets-settings.chart-filters',
    'impac.components.widgets-settings.dates-picker',
    'impac.components.widgets-settings.formula',
    'impac.components.widgets-settings.hist-mode',
    'impac.components.widgets-settings.limit-entries',
    'impac.components.widgets-settings.organizations',
    'impac.components.widgets-settings.param-selector',
    'impac.components.widgets-settings.params-picker',
    'impac.components.widgets-settings.params-checkboxes',
    'impac.components.widgets-settings.time-range',
    'impac.components.widgets-settings.width'
  ]
);
angular.module('impac.components.dashboard-settings',
  [
    'impac.components.dashboard-settings.currency',
    'impac.components.dashboard-settings.sync-apps',
  ]
);
angular.module('impac.components.widgets-common',
  [
    'impac.components.widgets-common.top-buttons',
    'impac.components.widgets-common.data-not-found',
    'impac.components.widgets-common.editable-title'
  ]
);
/*
** SERVICES
*/
angular.module('impac.services',
  [
    'impac.services.routes',
    'impac.services.linking',
    'impac.services.theming',
    'impac.services.assets',
    'impac.services.chart-formatter',
    'impac.services.message-bus',
    'impac.services.utilities',
    'impac.services.main',
    'impac.services.kpis',
    'impac.services.dashboards',
    'impac.services.widgets',
  ]
);
/*
** FILTERS
*/
angular.module('impac.filters',
  [
    'impac.filters.titleize',
    'impac.filters.truncate',
    'impac.filters.mno-currency',
    'impac.filters.mno-date'
  ]
);
/*
** CONFIG
*/
angular.module('impac.config', []).config(['$httpProvider',
  function ($httpProvider) {
    $httpProvider.defaults.headers.common['Accept'] = 'application/json';
    $httpProvider.defaults.headers.common['Content-Type'] = 'application/json';
  }
]);



angular.module("impac.components.templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("dashboard/create.modal.html","<div class=\"modal-header\"> <div class=\"close\" type=\"button\" ng-click=\"instance.close()\">×</div> <h3>Create New Dashboard</h3> </div> <div class=\"modal-body\"> <div class=\"row\"> <div class=\"col-sm-12\"> <div class=\"alert alert-error\" ng-show=\"errors\"> <button class=\"close\" ng-click=\"errors=\'\'\">×</button> <ul> <li ng-repeat=\"error in errors\">{{error}}</li> </ul> </div> </div> </div>  <div class=\"row dashboard-form\"> <div class=\"col-sm-10 col-sm-offset-1\"> <form class=\"form-horizontal\" role=\"form\"> <div class=\"form-group\"> <label class=\"col-sm-2 control-label\">Name</label> <div class=\"col-sm-10\"> <input type=\"text\" class=\"form-control\" ng-model=\"model.name\" placeholder=\"E.g: Cash Accounts Monitoring\" required=\"\"> </div> </div> <div class=\"form-group\" ng-show=\"isMultiCompanyAvailable()\"> <label class=\"col-sm-2 control-label\">Type</label> <div class=\"col-sm-10\"> <div class=\"btn-group\" role=\"group\"> <button type=\"button\" ng-click=\"selectMode(\'single\')\" ng-class=\"btnBlassFor(\'single\')\">Current Company</button> <button type=\"button\" ng-click=\"selectMode(\'multi\')\" ng-class=\"btnBlassFor(\'multi\')\">Multi Company</button> </div> </div> </div>  <div class=\"form-group\" ng-show=\"isCurrentOrganizationShown()\"> <div ng-show=\"!canAccessAnalyticsForCurrentOrganization()\" class=\"text-center text-purple\"> <div class=\"spacer1\"></div> <p> Oops! Only Admins and Super Admins can create dashboards for company {{currentOrganization.name}}. <span ng-show=\"isMultiCompanyAvailable()\">Please select a \"Multi Company\" dashboard to select data from other companies.</span> </p> </div> </div>  <div class=\"form-group\" ng-show=\"isSelectOrganizationShown()\"> <label class=\"col-sm-2 control-label\">Companies</label> <div class=\"col-sm-10\"> <ul class=\"list-unstyled\"> <li ng-repeat=\"organization in organizations\"> <input type=\"checkbox\" ng-model=\"organization.$selected\" ng-disabled=\"!canAccessAnalyticsData(organization)\"> {{organization.name}} <span ng-show=\"organization.is_customer_account\">(customer)</span> <span ng-show=\"!canAccessAnalyticsData(organization)\"> <em><small> &nbsp; &nbsp; <i class=\"fa fa-exclamation-circle text-danger\" tooltip=\"Only Admins and Super Admins can access analytics data for this company\"></i> </small></em> </span> </li> </ul> </div> </div> </form>  </div>  </div> </div> <div class=\"modal-footer\"> <div class=\"row\"> <div class=\"col-sm-12\"> <button class=\"btn btn-shaded\" ng-click=\"instance.dismiss()\" ng-hide=\"isLoading\">Cancel</button> <button class=\"btn btn-primary\" ng-click=\"proceed()\" ng-disabled=\"isProceedDisabled()\"> <i class=\"fa fa-spinner fa-pulse loader\" ng-if=\"isLoading\"></i> Add </button> </div> </div> </div> ");
$templateCache.put("dashboard/dashboard.tmpl.html"," <div class=\"analytics\" ng-hide=\"(isLoading || forceLoad)\" ng-class=\"{\'hide-dhb\': (isLoading || forceLoad), \'show-dhb\': !(isLoading || forceLoad)}\"> <div mno-star-wizard=\"true\" modal-open=\"starWizardModal.value\"></div>  <div id=\"head-title\"> <div class=\"row\" ng-if=\"showDhbHeading\"> <div class=\"col-md-6 col-sm-12\" id=\"dashboard-heading\"> <img ng-src=\"{{impacTitleLogo}}\"> <h2> {{dhbHeadingText}} </h2> </div> </div>  <kpis-bar ng-if=\"showKpisBar\" kpis=\"currentDhb.kpis\"></kpis-bar>  <dashboard-selector id=\"module__dashboard-selector\" is-widget-selector-shown=\"showWidgetSelector()\" on-create-dashboard=\"createDashboardModal.open()\" on-display-widget-selector=\"displayWidgetSelector()\" on-select-dashboard=\"activateTimer()\"></dashboard-selector> </div> <div id=\"sub-menu\" collapse=\"!showSubMenu\"> <i class=\"fa fa-times\" ng-click=\"hideSubMenu()\">  <div id=\"myob-message\" ng-if=\"hasMyobEssentialsOnly && myobMessageConfig.show\" class=\"alert alert-warning\"> <h3>It looks like you are using MYOB Essentials...</h3> <p>Unfortunately, all the information required by Impac! is not exposed by MYOB Essentials API <strong>yet</strong>. Consequently, most of the accounting widgets provided by Impac! won\'t find a valid source of data to display their content.</p> <p>Maybe you should consider switching to <a href=\"http://myob.com.au/products/small-business/accounting-software/myob-accountright-1422735752948\" target=\"_blank\">MYOB AccountRight</a>, the other MYOB accounting solution?</p> <p align=\"right\" ng-if=\"myobMessageConfig.appLink.show\"><a ng-href=\"{{myobMessageConfig.appLink.url}}\" target=\"_blank\">{{myobMessageConfig.appLink.text}}</a></p> </div> </i></div>  <div id=\"widget-selector\" collapse=\"!showWidgetSelector()\" ng-if=\"!customWidgetSelector.path\"> <div class=\"title\"> <i class=\"fa fa-times-circle\" ng-if=\"showCloseWidgetSelectorButton()\" ng-click=\"displayWidgetSelector(false)\"> <span class=\"badge confirmation\">Widget added!</span> Select the widgets you want to add to your dashboard. </i></div> <div class=\"row top-container\"> <div class=\"col-md-3 categories\"> <div class=\"row header\"> All categories </div> <div class=\"row lines\"> <div class=\"col-md-12\" style=\"padding: 3px 12px;\"> <p ng-click=\"selectCategory(\'accounts\')\" ng-class=\"isCategorySelected(\'accounts\') ? \'selected\' : none\">Accounting</p> <p ng-click=\"selectCategory(\'invoices\')\" ng-class=\"isCategorySelected(\'invoices\') ? \'selected\' : none\">Invoicing</p> <p ng-click=\"selectCategory(\'hr\')\" ng-class=\"isCategorySelected(\'hr\') ? \'selected\' : none\">HR / Payroll</p> <p ng-click=\"selectCategory(\'sales\')\" ng-class=\"isCategorySelected(\'sales\') ? \'selected\' : none\">Sales</p> </div> </div> <div class=\"arrow\" ng-style=\"getSelectedCategoryTop()\"> <div class=\"square\"></div> <i class=\"fa fa-caret-right\"></i> </div> </div> <div class=\"col-md-9 widgets\"> <div class=\"row header\"> {{getSelectedCategoryName() | titleize}} </div> <div class=\"row lines\"> <div class=\"col-md-4\" ng-repeat=\"widgetPattern in getWidgetsForSelectedCategory()\" style=\"padding: 0px 8px;\"> <p ng-click=\"addWidget(widgetPattern.path, widgetPattern.metadata)\" tooltip=\"{{widgetPattern.desc}}\" tooltip-placement=\"{{$index < 9 ? \'bottom\' : \'top\'}}\" tooltip-animation=\"false\" tooltip-append-to-body=\"true\" tooltip-class=\"impac-widget-selector-tooltip\"><i class=\"fa fa-{{widgetPattern.icon}}\"> {{widgetPattern.name}} <i class=\"fa fa-plus-circle\"></i></i></p> </div> </div> </div> </div> <div class=\"bottom\" ng-if=\"widgetSuggestionModal.config.apiPath\"> <span class=\"suggestion\"> Can\'t find the widget you\'re looking for? <a ng-click=\"widgetSuggestionModal.open()\">Give us your suggestions here!</a> </span> </div> </div>  <div id=\"custom-widget-selector\" ng-if=\"customWidgetSelector.path\" ng-include=\"customWidgetSelector.path\" ng-hide=\"showChooseDhbMsg()\"></div>  <div id=\"dashboard-settings-panel\" ng-if=\"!dhbSettingsConfig.inWidgetsContainer && !showChooseDhbMsg()\" class=\"row text-right\"> <div dashboard-setting-sync-apps=\"\" ng-if=\"dhbSettingsConfig.showSyncApps()\"> <div dashboard-setting-currency=\"\" currency=\"currentDhb.currency\"> </div>  <div class=\"alert alert-error\" ng-show=\"errors\"> <button class=\"close\" ng-click=\"errors=\'\'\">×</button> <ul> <li ng-repeat=\"error in errors\">{{error}}</li> </ul> </div> <div id=\"no-widgets-container\" class=\"row text-center ng-hide\" ng-show=\"(showChooseDhbMsg() || showNoWidgetsMsg())\"> <img ng-src=\"{{impacDashboardBackground}}\" class=\"bg\"> <div class=\"impac-info-message\">  <div class=\"ng-hide\" ng-show=\"showChooseDhbMsg()\"> <div class=\"hidden-xs\"> <div class=\"spacer4\"></div> <div class=\"row\"> <div class=\"col-md-8 col-md-offset-2\"> <div class=\"testimonial promo-dark\"> <p><b>{{dhbErrorsConfig.firstTimeCreated.first}}</b></p> <p>{{dhbErrorsConfig.firstTimeCreated.second}}</p> </div> </div> </div> <div class=\"spacer2\"></div> </div> <div class=\"align-center\"> <button ng-click=\"createDashboardModal.open()\" class=\"btn btn-lg btn-warning\"><span class=\"fa fa-plus\"></span> Create a Dashboard!</button> </div> </div>  <div class=\"ng-hide\" ng-show=\"showNoWidgetsMsg()\"> <div class=\"hidden-xs\"> <div class=\"spacer4\"></div> <div class=\"row\"> <div class=\"col-md-8 col-md-offset-2\"> <div class=\"testimonial promo-dark\"> <p><b>{{dhbErrorsConfig.empty.first}}</b></p> <p>{{dhbErrorsConfig.empty.second}}</p> </div> </div> </div> <div class=\"spacer2\"></div> </div> <div class=\"align-center\"> <button ng-disabled=\"showWidgetSelector()\" ng-click=\"displayWidgetSelector()\" class=\"btn btn-lg btn-warning\"><span class=\"fa fa-plus\"></span> Add a new Widget</button> </div> </div> </div> </div>  <div class=\"row text-center\" ng-show=\"showChooseDhbMsg()\"> <div class=\"spacer2 hidden-xs\"></div> <div class=\"col-md-8 col-md-offset-2\"> <p class=\"text-muted\"><small><em>{{dhbErrorsConfig.firstTimeCreated.note}}</em></small></p> </div> </div>  <div class=\"row\" id=\"widgets-section\" ng-hide=\"showNoWidgetsMsg() || showChooseDhbMsg()\">  <div id=\"dashboard-settings-panel\" ng-if=\"dhbSettingsConfig.inWidgetsContainer && !showChooseDhbMsg()\" class=\"text-right col-md-12 in-widgets-container\"> <div dashboard-setting-sync-apps=\"\" ng-if=\"dhbSettingsConfig.showSyncApps()\"> <div dashboard-setting-currency=\"\" currency=\"currentDhb.currency\"> </div> <div class=\"col-md-12\"> <div id=\"widgets-container\" ui-sortable=\"sortableOptions\" ng-model=\"currentDhb.widgets\" class=\"row\">  <div impac-widget=\"\" widget=\"widget\" is-accessibility=\"accessibility\" parent-dashboard=\"currentDhb\" ng-repeat=\"widget in currentDhb.widgets\" class=\"widget-item\" ng-class=\"widget.getColClass()\" on-display-alerts=\"displaySubMenu()\">  <div ng-if=\"isAddChartEnabled\" class=\"unsortable\" ng-click=\"addChartTileOnClick()\"> <div class=\"col-md-6 widget-item add-chart\"> <div class=\"a-content\">+ chart</div> </div> </div> </div> </div> </div> </div> <div class=\"analytics\" ng-show=\"(isLoading || forceLoad)\"> <div class=\"row\"> <div class=\"col-md-12 loader-container text-center\" style=\"margin-top: 200px;\"> <i class=\"fa fa-refresh fa-spin\" style=\"font-size: 250px; opacity: 0.7;\"> </i></div> </div> </div> </div></div></div></div></div>");
$templateCache.put("dashboard/widget-suggestion.modal.html","<div class=\"modal-header\"> <div class=\"close\" type=\"button\" ng-click=\"instance.close()\">×</div> <h3>Suggest a widget</h3> </div> <div class=\"modal-body\"> <div class=\"row\"> <div class=\"col-md-6\"> <label>What would you name your widget?</label><br> <input type=\"text\" ng-model=\"widgetDetails.name\" ng-disabled=\"isLoading\"> </div> <div class=\"col-md-6\"> <label>In which category?</label><br> <input type=\"text\" ng-model=\"widgetDetails.category\" ng-disabled=\"isLoading\"> </div> </div> <div class=\"spacer1\"> <div class=\"row\"> <div class=\"col-md-12\"> <label>What kind of information would your widget display?</label><br> <textarea ng-model=\"widgetDetails.description\" ng-disabled=\"isLoading\">\n    </textarea></div> </div> <div class=\"spacer1\" ng-show=\"isLoading\"> <div class=\"row\" collapse=\"!onSuccess\"> <div class=\"col-md-12 text-center\"> <h3 class=\"thanks-message\">{{userName | titleize}}, thanks a lot for helping us improve Impac!&trade;</h3> </div> </div> <div class=\"row\" ng-show=\"error\"> <div class=\"col-md-12 text-center\"> <h5 style=\"color: red;\"> Unable to send suggestions request, please try again or contact technical support. </h5> </div> </div> </div> <div class=\"modal-footer\"> <div class=\"row\"> <div class=\"col-sm-12\"> <button class=\"btn btn-shaded\" ng-click=\"instance.dismiss()\" ng-hide=\"isLoading\">Cancel</button> <button class=\"btn btn-info\" ng-click=\"proceed()\" ng-disabled=\"!(widgetDetails.name && widgetDetails.category && widgetDetails.description) || isLoading\"> <i class=\"fa fa-spinner fa-pulse loader\" ng-show=\"isLoading\"></i> Send your suggestion </button> </div> </div> </div> </div></div>");
$templateCache.put("dashboard-selector/bootstrap-tabs.tmpl.html","<div class=\"row buttons-bar-row\"> <div class=\"buttons-bar col-sm-8\" ng-show=\"isThereADashboard()\"> <tabset type=\"{{selectorType}}\"> <tab ng-repeat=\"dhb in dashboardsList\" ng-click=\"selectDashboard(dhb.id)\" active=\"dhb.active\"> <tab-heading> {{dhb.full_name}} <a href=\"\" class=\"close-link\" ng-if=\"isDeleteDhbEnabled\"> <i class=\"fa fa-times\" ng-click=\"deleteDashboardModal.open()\"></i> </a> </tab-heading> </tab> <tab ng-if=\"isAccessibilityEnabled\" ng-click=\"toggleAccessibilityMode()\"> <tab-heading> <a href=\"\"><i class=\"fa fa-wheelchair\"></i></a> </tab-heading> </tab> <tab ng-if=\"isAddDhbEnabled\" ng-click=\"onCreateDashboard()\"> <tab-heading> <a href=\"\">+</a> </tab-heading> </tab> </tabset> </div> <div class=\"buttons-bar col-sm-4\"> <div class=\"actions-panel\"> <button ng-if=\"isAccessibilityEnabled\" ng-click=\"toggleAccessibilityMode()\" class=\"btn btn-info\" ng-disabled=\"isWidgetSelectorShown()\"><span class=\"fa fa-wheelchair\"></span></button> <button ng-if=\"isAddWidgetEnabled && isThereADashboard()\" ng-click=\"onDisplayWidgetSelector()\" class=\"btn btn-warning\" ng-disabled=\"isWidgetSelectorShown()\"><span class=\"fa fa-plus\"></span> Add Widget</button>  </div> </div> </div> ");
$templateCache.put("dashboard-selector/delete.modal.html","<div class=\"modal-header\"> <div class=\"close\" type=\"button\" ng-click=\"instance.close()\">×</div> <h3>Delete Dashboard</h3> </div> <div class=\"modal-body\"> <div class=\"row\"> <div class=\"col-sm-12\"> <div class=\"alert alert-error\" ng-show=\"errors\"> <button class=\"close\" ng-click=\"errors=\'\'\">×</button> <ul> <li ng-repeat=\"error in errors\">{{error}}</li> </ul> </div> </div> </div>  <p>Are you sure you want to delete this analytics dashboard?</p> </div> <div class=\"modal-footer\"> <div class=\"row\"> <div class=\"col-sm-12\"> <button class=\"btn btn-shaded\" ng-click=\"instance.dismiss()\" ng-hide=\"isLoading\" ng-disabled=\"isLoading\">Cancel</button> <button class=\"btn btn-danger\" ng-click=\"proceed()\" ng-disabled=\"isLoading\"> <i class=\"fa fa-spinner fa-pulse loader\" ng-if=\"isLoading\"></i> Delete </button> </div> </div> </div> ");
$templateCache.put("dashboard-selector/dropdown.tmpl.html","<div class=\"row buttons-bar-row buttons-bar\"> <div class=\"col-md-6 dropdown-container\" ng-hide=\"isLoading\"> <div ng-if=\"isThereADashboard()\"> <h4 class=\"dashboard-title\"> <div style=\"display: inline-block;\" ng-click=\"toggleShowDashboardsDropdown()\"> {{currentDhb.full_name}} <i class=\"fa fa-chevron-down\" style=\"font-size: 18px;\"></i> </div> <i ng-hide=\"showChangeDashboardNameBox\" class=\"fa fa-pencil\" tooltip=\"Change name\" tooltip-animation=\"false\" tooltip-append-to-body=\"true\" ng-click=\"toggleChangeDashboardNameBox(currentDhb)\"></i> </h4> <div ng-show=\"showDashboardsDropdown\" class=\"dashboard-select\"> <div ng-hide=\"dhb.id == currentDhb.id\" class=\"option\" ng-repeat=\"dhb in dashboardsList\"> <span class=\"name\" ng-click=\"selectDashboard(dhb.id)\">{{dhb.full_name}}</span> <i ng-hide=\"showChangeDashboardNameBox\" class=\"fa fa-pencil\" tooltip=\"Change name\" tooltip-animation=\"false\" tooltip-append-to-body=\"true\" ng-click=\"toggleChangeDashboardNameBox(dhb)\"> </i></div> <div ng-show=\"showCreateDashboardButton\" class=\"option create\" ng-click=\"onCreateDashboard()\"><i class=\"fa fa-plus\"> Create Dashboard</i></div> </div> <div ng-if=\"showChangeDashboardNameBox\" class=\"change-name\"> <p>Change dashboard name:</p> <input type=\"text\" class=\"form-control\" id=\"changeDhbNameInput\" ng-model=\"dashboardToChange.name\" ng-keyup=\"checkAndUpdateDashboardName($event)\"> <button class=\"btn btn-sm btn-default\" ng-click=\"hideChangeDashboardNameBox()\">Cancel</button> <button class=\"btn btn-sm btn-success\" style=\"margin-left: 10px\" ng-click=\"updateDashboardName()\">Confirm</button> </div> <p class=\"data-source-label\"> <small><b>Source:</b> {{organizationsNames()}}</small> </p> </div> </div> <div class=\"col-md-6 loader-container\" ng-show=\"isLoading\"> <i class=\"fa fa-spinner fa-pulse fa-4x loading-spinner\"> </i></div> <div class=\"col-md-6 actions-panel\"> <button ng-if=\"isAccessibilityEnabled\" ng-click=\"toggleAccessibilityMode()\" class=\"btn btn-info\" ng-disabled=\"showWidgetSelector\"><span class=\"fa fa-wheelchair\"></span></button> <button ng-if=\"isAddWidgetEnabled && isThereADashboard()\" ng-click=\"onDisplayWidgetSelector()\" class=\"btn btn-warning\" ng-disabled=\"isWidgetSelectorShown()\"><span class=\"fa fa-plus\"></span> Add Widget</button> <button ng-if=\"isAddDhbEnabled\" ng-click=\"onCreateDashboard()\" class=\"btn btn-warning\" ng-show=\"showCreateDashboardButton\"><span class=\"fa fa-pencil-square-o\"></span> Create Dashboard</button>  <button ng-if=\"isDeleteDhbEnabled\" ng-click=\"deleteDashboardModal.open()\" class=\"btn btn-danger hidden-xs\" ng-show=\"isThereADashboard()\" tooltip=\"Delete Dashboard\"><span class=\"fa fa-trash-o\"></span> </button> </div> </div> ");
$templateCache.put("kpi/kpi.tmpl.html","<div class=\"tile kpi\" ng-class=\"{ \'static\': kpi.static }\"> <div class=\"kpi-show\" ng-hide=\"showEditSettings\"> <small class=\"kpi-title\" ng-if=\"::kpi.static\">{{::kpi.name}}</small> <small class=\"kpi-title\" ng-if=\"::!kpi.static\" editable-text=\"kpi.name\" buttons=\"yes\" onaftersave=\"updateName()\">{{kpi.name}}</small> <div class=\"kpi-watch\" ng-if=\"::!kpi.static\">({{::kpi.element_watched}})</div> <span class=\"kpi-value\">{{kpi.data.value | mnoCurrency : kpi.data.unit}}</span>  <div class=\"kpi-alert\" ng-repeat=\"target in kpi.targets track by $index\" ng-hide=\"editMode || kpi.data.results[$index]\"> <span ng-show=\"target.max\">over {{target.max | mnoCurrency : kpi.data.unit}}</span> <span ng-show=\"target.min\">below {{target.min | mnoCurrency : kpi.data.unit}}</span> </div> <div class=\"kpi-alert\" ng-show=\"editMode\" ng-click=\"displayEditSettings()\">Edit</div> <div class=\"kpi-alert kpi-close\" ng-show=\"editMode\" ng-click=\"deleteKpi()\">x</div> </div> <div class=\"kpi-edit\" ng-show=\"showEditSettings\"> <span class=\"param-name\">KPI target:</span>  <div class=\"clearfix edit-limit align\"> <select class=\"pull-left select-limit-mode form-control input-sm\" ng-model=\"kpi.limit.mode\" ng-options=\"option.mode as option.label for option in possibleTargets\"> </select> <div class=\"pull-right input-limit-value form-group has-feedback\"> <input type=\"text\" class=\"form-control input-sm\" ng-model=\"kpi.limit.value\"> <span class=\"form-control-feedback\" aria-hidden=\"true\">{{kpi.data.unit}}</span> </div> </div> <div class=\"extra-params\" ng-repeat=\"(param, paramValues) in kpi.possibleExtraParams track by $index\"> <span class=\"param-name\">Select {{param | titleize}}:</span> <select class=\"form-control input-sm\" ng-model=\"kpi.extra_params[param]\" ng-options=\"value.id as value.label for value in paramValues\"> </select> </div> <button class=\"btn btn-xs btn-default\" ng-click=\"hideEditSettings()\">Cancel</button> <button class=\"btn btn-xs btn-success\" ng-click=\"updateSettings()\">Save</button> </div> </div> ");
$templateCache.put("kpis-bar/kpis-bar.tmpl.html","<div class=\"row kpis\"> <div class=\"title-actions col-xs-4 col-sm-2\"> <div ng-click=\"toggleAvailableKpis()\"><a href=\"\"><i class=\"fa fa-plus\"></i> Attach KPI</a></div> <div class=\"available-kpis-container\" collapse=\"hideAvailableKpis\"> <div ng-repeat=\"kpi in availableKpis\" class=\"available-kpi\" ng-init=\"kpi.element_watched = kpi.watchables[0]\"> <span class=\"kpi-name\">{{formatKpiName(kpi.endpoint)}}</span> <button class=\"btn btn-sm btn-info\" ng-click=\"addKpi(kpi)\">+ Attach</button> <select class=\"form-control-static input-sm\" ng-model=\"kpi.element_watched\" ng-options=\"watchable for watchable in kpi.watchables\"></select> </div> </div> <div ng-click=\"toggleEditMode()\"><a href=\"\"><i class=\"fa fa-cog\"></i> Edit KPI Settings</a></div> </div> <impac-kpi class=\"col-xs-4 col-sm-2\" kpi=\"kpi\" on-delete=\"removeKpi(kpi.id)\" edit-mode=\"showEditMode\" available-kpis=\"availableKpis\" ng-repeat=\"kpi in kpis track by $index\"></impac-kpi> <div ng-show=\"isAddingKPI\" class=\"col-xs-2 kpi-loader\"> <i class=\"fa fa-2x fa-spin fa-refresh\"></i> </div> </div> ");
$templateCache.put("widget/widget.tmpl.html","<div class=\"top-line\"> <div common-top-buttons=\"\" parent-widget=\"widget\" on-refresh=\"showWidget\"> <div common-editable-title=\"\" parent-widget=\"widget\"> </div> <div class=\"content\" ng-class=\"templateName\"> <div ng-show=\"widget.isLoading\" class=\"loader\" align=\"center\"> <div> <i class=\"fa fa-spinner fa-pulse fa-3x\"></i> <p>Your data is being retrieved...</p> </div> </div> <div ng-hide=\"widget.isLoading\" ng-include=\"widgetContentTemplate()\"> </div> </div></div></div>");
$templateCache.put("dashboard-settings/currency.tmpl.html","<div class=\"dashboard-settings currency\"> <select ng-options=\"cur for cur in currencies\" ng-model=\"currency\" ng-change=\"massAssignCurrency()\" ng-disabled=\"locked\"> <option ng-if=\"!currency\" value=\"\" disabled=\"\">Choose currency...</option> </select> </div> ");
$templateCache.put("dashboard-settings/sync-apps.tmpl.html"," <div class=\"dashboard-settings sync-apps\" ng-show=\"lastConnector\"> <span ng-show=\"isSyncing\">Syncing...</span> <span ng-if=\"otherConnectors.length == 0\" ng-hide=\"isSyncing\"> {{ formatStatus(lastConnector) }} </span> <span ng-if=\"otherConnectors.length > 0\" ng-hide=\"isSyncing\" popover-template=\"\'connectors.tmpl.html\'\" popover-trigger=\"mouseenter\" popover-placement=\"bottom\"> {{ formatStatus(lastConnector) }} </span> <button id=\"sync\" class=\"btn btn-primary\" ng-click=\"synchronize()\" tooltip=\"Sync data and refresh dashboard\" ng-disabled=\"isSyncing\"> <i class=\"fa fa-refresh\" ng-class=\"{ \'fa-spin\': isSyncing }\"></i> </button> </div>  <script type=\"text/ng-template\" id=\"connectors.tmpl.html\"> <div ng-repeat=\"connector in otherConnectors track by $index\"> <span>{{ formatStatus(connector) }}</span> </div> <div style=\"border-bottom: 1px solid #ccc; width: 100%; height: 2px; margin: 5px 0;\"></div> <p>All other applications are synced in real-time.</p> </script>  <script type=\"text/ng-template\" id=\"alerts.tmpl.html\"> <div class=\"modal-header\"> <h4 class=\"modal-title\">Synchronization alerts</h4> </div> <div class=\"modal-body\"> <div ng-repeat=\"connector in failedConnectors track by $index\"> {{connector.name}} - Synchronization failed. Please retry later. </div> <div ng-repeat=\"connector in disconnectedConnectors track by $index\"> {{connector.name}} is disconnected. Please reconnect to synchronize. </div> </div> <div class=\"modal-footer\"> <button class=\"btn btn-primary\" type=\"button\" ng-click=\"ok()\">OK</button> </div> </script> ");
$templateCache.put("widgets/accounts-accounting-values.tmpl.html","<div widget-accounts-accounting-values=\"\"> <div ng-show=\"widget.isEditMode\" class=\"edit\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div setting-time-range=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::timeRangeDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div ng-hide=\"widget.isEditMode\"> <div ng-show=\"(isDataFound==true)\"> <div setting-hist-mode=\"\" parent-widget=\"widget\" deferred=\"::histModeDeferred\"> <div ng-hide=\"widget.isHistoryMode\" class=\"current\"> <div class=\"price\"> {{ getCurrentPrice() | mnoCurrency : getCurrency() : false }} </div> <div class=\"currency\">{{getCurrency()}}</div> <div class=\"legend\">{{getLegend()}}</div> </div> <div class=\"history chart-container\" ng-class=\"{\'invisible\': !widget.isHistoryMode}\"> <div impac-chart=\"\" draw-trigger=\"::drawTrigger.promise\" deferred=\"::chartDeferred\"></div> <div class=\"legend\">{{getLegend()}}</div> </div> </div> <div ng-show=\"(isDataFound==false)\" common-data-not-found=\"\" on-display-alerts=\"onDisplayAlerts()\" widget-engine=\"::widget.category\"> </div> </div></div></div></div></div>");
$templateCache.put("widgets/accounts-assets-liability-summary.tmpl.html","<div widget-accounts-assets-liability-summary=\"\"> <div ng-show=\"widget.isEditMode\" class=\"edit\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div ng-hide=\"widget.isEditMode\"> <div ng-show=\"(isDataFound==true)\" class=\"chart-container\">  <div setting-param-selector=\"\" parent-widget=\"widget\" param=\"classification\" options=\"accountsOptions\" selected=\"selectedAccountsOption\" class=\"row param-selector\" deferred=\"::paramSelectorDeferred\">  <div impac-chart=\"\" draw-trigger=\"::drawTrigger.promise\" deferred=\"::chartDeferred\"></div> <div class=\"legend\"> <div class=\"title\" ng-show=\"widget.metadata.organization_ids.length==1\">{{widget.content.summary[0].company}} {{classification}}</div> <div class=\"title\" ng-hide=\"widget.metadata.organization_ids.length==1\">{{classification}} repartition</div> <span ng-repeat=\"valuePair in dataSource\"> <span style=\"font-weight: bold; color: {{getAccountColor(valuePair)}};\">{{valuePair.label}}</span>: {{valuePair.total | mnoCurrency : getCurrency()}} <br> </span> </div> </div> <div ng-show=\"(isDataFound==false)\" common-data-not-found=\"\" on-display-alerts=\"onDisplayAlerts()\" widget-engine=\"::widget.category\"> </div> </div> </div></div></div>");
$templateCache.put("widgets/accounts-assets-summary.tmpl.html","<div widget-accounts-assets-summary=\"\"> <div ng-show=\"widget.isEditMode\" class=\"edit\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div ng-hide=\"widget.isEditMode\"> <div ng-show=\"(isDataFound==true)\" class=\"chart-container\"> <div impac-chart=\"\" draw-trigger=\"::drawTrigger.promise\" deferred=\"::chartDeferred\"></div> <div class=\"legend\"> <div class=\"title\" ng-show=\"widget.metadata.organization_ids.length==1\">{{widget.content.summary[0].company}} {{classification}}</div> <div class=\"title\" ng-hide=\"widget.metadata.organization_ids.length==1\">{{classification}} repartition</div> <span ng-repeat=\"valuePair in dataSource\"> <span style=\"font-weight: bold; color: {{getAccountColor(valuePair)}};\">{{valuePair.label}}</span>: {{valuePair.total | mnoCurrency : getCurrency()}} <br> </span> </div> </div> <div ng-show=\"(isDataFound==false)\" common-data-not-found=\"\" on-display-alerts=\"onDisplayAlerts()\" widget-engine=\"::widget.category\"> </div> </div></div></div>");
$templateCache.put("widgets/accounts-assets-vs-liabilities.tmpl.html","<div widget-accounts-assets-vs-liabilities=\"\"> <div ng-show=\"widget.isEditMode\" class=\"edit\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div ng-hide=\"widget.isEditMode\"> <div ng-show=\"(isDataFound==true)\" class=\"chart-container\"> <div impac-chart=\"\" draw-trigger=\"::drawTrigger.promise\" deferred=\"::chartDeferred\"></div> <div class=\"legend\" style=\"max-height: 115px;\"> <div class=\"title\"> <i class=\"fa fa-circle\" style=\"color: {{assetsColor}};\"> Assets</i> | <i class=\"fa fa-circle\" style=\"color: {{liabilitiesColor}};\"> Liabilities</i> </div> <div class=\"row\"> <div ng-repeat=\"data in companiesList\" ng-class=\"{\'col-md-6\': (widget.content.companies.length > 1), \'col-md-12\': (widget.content.companies.length == 1)}\"> <span>{{ data.company }}</span><br> <span style=\"color: {{assetsColor}};\"> {{ data.assets | mnoCurrency : data.currency }}</span> <br> <span style=\"color: {{liabilitiesColor}};\"> {{ data.liabilities | mnoCurrency : data.currency }}</span> </div> </div> </div> </div> <div ng-show=\"(isDataFound==false)\" common-data-not-found=\"\" on-display-alerts=\"onDisplayAlerts()\" widget-engine=\"::widget.category\"> </div> </div></div></div>");
$templateCache.put("widgets/accounts-balance.tmpl.html","<div widget-accounts-balance=\"\"> <div ng-show=\"widget.isEditMode\" class=\"edit\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div setting-account=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::accountBackDeferred\"> <div setting-time-range=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::timeRangeDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div ng-hide=\"widget.isEditMode\"> <div ng-show=\"(isDataFound==true)\">  <div setting-account=\"\" ng-hide=\"widget.selectedAccount\" parent-widget=\"widget\" label=\"Select an account to monitor\" on-account-selected=\"displayAccount()\" deferred=\"::accountFrontDeferred\">  <div ng-show=\"widget.selectedAccount\"> <div setting-hist-mode=\"\" parent-widget=\"widget\" deferred=\"::histModeDeferred\"> <div ng-hide=\"widget.isHistoryMode\"> <h3>{{getName()}}</h3> <div class=\"price\"> {{ getCurrentBalance() | mnoCurrency : getCurrency() : false }} </div> <div class=\"currency\">{{getCurrency()}}</div> </div> <div class=\"chart-container\" ng-class=\"{\'invisible\': !widget.isHistoryMode}\"> <div impac-chart=\"\" draw-trigger=\"::drawTrigger.promise\" deferred=\"::chartDeferred\"></div> <div class=\"legend\">{{getName()}}</div> </div> </div> </div> <div ng-show=\"(isDataFound==false)\" common-data-not-found=\"\" on-display-alerts=\"onDisplayAlerts()\" widget-engine=\"::widget.category\"> </div> </div></div></div></div></div></div></div>");
$templateCache.put("widgets/accounts-balance-sheet.tmpl.html","<div widget-accounts-balance-sheet=\"\"> <div class=\"edit\" ng-show=\"widget.isEditMode\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div ng-hide=\"widget.isEditMode\"> <div class=\"no-data-block\" ng-show=\"(isDataFound==false)\"> No balance sheet can be generated between this {{period.label.toLowerCase()}} and the previous {{period.label.toLowerCase()}}. <br> Maybe try selecting a longer period? <br> <span setting-param-selector=\"\" parent-widget=\"widget\" param=\"period\" options=\"periodOptions\" selected=\"period\" deferred=\"::paramSelectorFrontDeferred\"> </span></div> <div ng-show=\"(isDataFound==true)\" class=\"widget-lines-container\">  <div class=\"row widget-line header\"> <div class=\"col-sm-6 col-xs-12 text-left\">Compare with previous: <span setting-param-selector=\"\" parent-widget=\"widget\" param=\"period\" options=\"periodOptions\" selected=\"period\" deferred=\"::paramSelectorBackDeferred\"></span></div> <div class=\"col-sm-3 col-xs-6 text-right\">{{widget.content.dates[0] | mnoDate : widget.metadata.period}}</div> <div class=\"col-sm-3 col-xs-6 text-right\">{{widget.content.dates[1] | mnoDate : widget.metadata.period}}</div> </div>  <div class=\"row lines-group\" ng-repeat=\"category in categories\"> <div class=\"col-xs-12\">  <div class=\"row widget-line total\"> <div class=\"col-xs-1\" ng-click=\"toggleCollapsed(category)\" style=\"cursor: pointer;\"> <i class=\"fa\" ng-class=\"isCollapsed(category) ? \'fa-plus-square-o\' : \'fa-minus-square-o\'\"> </i></div> <div class=\"col-sm-5 col-xs-11 text-left\"> <strong>{{category | titleize}}</strong> </div> <div class=\"col-sm-3 col-xs-6 text-right\"> <strong>{{widget.content.summary[category].totals[0] | mnoCurrency : widget.content.summary[category].currency}}</strong> </div> <div class=\"col-sm-3 col-xs-6 text-right\"> <strong>{{widget.content.summary[category].totals[1] | mnoCurrency : widget.content.summary[category].currency}}</strong> </div> </div>  <div class=\"row\" collapse=\"isCollapsed(category)\"> <div class=\"col-xs-12\"> <div class=\"row widget-line\" ng-repeat=\"account in widget.content.summary[category].accounts\"> <div class=\"col-sm-6 col-xs-12 text-left\"> {{account.name | titleize}} </div> <div class=\"col-sm-3 col-xs-6 text-right\"> {{account.totals[0] | mnoCurrency : account.currency}} </div> <div class=\"col-sm-3 col-xs-6 text-right\"> {{account.totals[1] | mnoCurrency : account.currency}} </div> </div> </div> </div> </div> </div> </div> </div> </div> </div>");
$templateCache.put("widgets/accounts-cash-summary.tmpl.html","<div widget-accounts-cash-summary=\"\"> <div class=\"edit\" ng-show=\"widget.isEditMode\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div setting-time-range=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::timeRangeDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div ng-hide=\"widget.isEditMode\"> <div ng-show=\"(isDataFound==true)\" class=\"row\"> <div ng-class=\"widget.isExpanded() ? \'col-md-6\' : \'col-md-12\'\"> <div setting-width=\"\" parent-widget=\"widget\" min=\"6\" max=\"12\" class=\"settings width\" deferred=\"::widthDeferred\"> <div class=\"widget-lines-container\">  <div class=\"row widget-line header\"> <div class=\"col-xs-5 col-xs-offset-1\">Cash flow</div> <div class=\"col-xs-3 text-right\">{{getLastDate() | mnoDate : widget.metadata.hist_parameters.period}}</div> <div class=\"col-xs-3 text-right\">vs {{getPrevDate() | mnoDate : widget.metadata.hist_parameters.period}}</div> </div>  <div class=\"row lines-group\" ng-repeat=\"statement in widget.content.summary\" ng-class=\"{cash: statement.name.indexOf(\'cash\')>0}\"> <div class=\"col-xs-12\">  <div class=\"row widget-line\" ng-class=\"{selected: isSelected(statement)}\"> <div class=\"col-xs-1\" ng-click=\"toggleCollapsed(statement)\"> <i ng-show=\"(statement.accounts && statement.accounts.length)\" class=\"fa\" ng-class=\"isCollapsed(statement) ? \'fa-plus-square-o\' : \'fa-minus-square-o\'\"> </i></div> <div class=\"col-xs-5\" ng-click=\"toggleSelectedElement(statement)\"> <strong>{{getName(statement) | titleize}}</strong> </div> <div class=\"col-xs-3 text-right\" ng-click=\"toggleSelectedElement(statement)\"> <strong>{{getLastValue(statement) | mnoCurrency : statement.currency : false}}</strong> </div> <div class=\"col-xs-3 text-right\" ng-click=\"toggleSelectedElement(statement)\" ng-class=\"getVarianceClassColor(getLastVariance(statement))\"> <strong>{{getLastVariance(statement)}}</strong> </div> </div>  <div class=\"row\" collapse=\"isCollapsed(statement)\"> <div class=\"col-xs-12\"> <div class=\"row widget-line\" ng-click=\"toggleSelectedElement(account)\" ng-repeat=\"account in statement.accounts\" ng-class=\"{selected: isSelected(account)}\"> <div class=\"col-xs-5 col-xs-offset-1\"> {{account.name}} </div> <div class=\"col-xs-3 text-right\"> {{getLastValue(account) | mnoCurrency : account.currency : false }} </div> <div class=\"col-xs-3 text-right\" ng-class=\"getVarianceClassColor(getLastVariance(account))\"> {{getLastVariance(account)}} </div> </div> </div> </div> </div> </div> </div> </div> <div class=\"col-md-6 right-panel text-center\" ng-show=\"widget.isExpanded()\"> <div ng-show=\"selectedElement\"> <h4>{{getName(selectedElement) | titleize}}</h4> <div class=\"chart-container\"> <div impac-chart=\"\" draw-trigger=\"::drawTrigger.promise\" deferred=\"::chartDeferred\"></div> <div class=\"legend\">{{(widget.metadata.hist_parameters.period || \"Monthly\") | titleize}} Cash Flow</div> </div> <div class=\"widget-lines-container\">  <div class=\"row\"> <span ng-repeat=\"date in dates track by $index\" class=\"hidden-xs\">  <div ng-if=\"$index % 4 == 0 && $index > 0\" class=\"clearfix dashed\"></div> <div class=\"col-sm-3 text-center\">  <div class=\"row widget-line\"> <div class=\"col-sm-12\"> {{date | mnoDate : widget.metadata.hist_parameters.period}} </div> </div>  <div class=\"row widget-line\"> <div class=\"col-sm-12\"> {{selectedElement.cash_flows[$index] | mnoCurrency : selectedElement.currency }} </div> </div>  <div class=\"row widget-line\"> <div class=\"col-sm-12\" ng-class=\"getVarianceClassColor(selectedElement.variances[$index])\"> {{formatVariance(selectedElement.variances[$index])}} </div> </div> </div> </span> </div>  <div ng-repeat=\"date in dates track by $index\" class=\"row widget-line visible-xs\">  <div class=\"col-xs-4\"> {{date | mnoDate : widget.metadata.hist_parameters.period}} </div>  <div class=\"col-xs-4 text-right\"> {{selectedElement.cash_flows[$index] | mnoCurrency : selectedElement.currency }} </div>  <div class=\"col-xs-4 text-right\" ng-class=\"getVarianceClassColor(selectedElement.variances[$index])\"> {{formatVariance(selectedElement.variances[$index])}} </div> </div> </div> </div> <div ng-hide=\"selectedElement\" class=\"no-element\"> Select an account or an account type to display the corresponding cash evolution. </div> </div> </div> <div ng-show=\"(isDataFound==false)\" common-data-not-found=\"\" on-display-alerts=\"onDisplayAlerts()\" widget-engine=\"::widget.category\"> </div> </div> </div></div></div></div>");
$templateCache.put("widgets/accounts-class-comparison.tmpl.html","<div widget-accounts-class-comparison=\"\"> <div ng-show=\"widget.isEditMode\" class=\"edit\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div ng-hide=\"widget.isEditMode\"> <div ng-show=\"(isDataFound==true)\">  <div setting-param-selector=\"\" parent-widget=\"widget\" param=\"classification\" options=\"classifications\" selected=\"selectedClassification\" class=\"row param-selector\" deferred=\"::paramSelectorDeferred\" on-select=\"widget.format()\" no-reload=\"\">  <div class=\"row\"> <div class=\"col-md-12 chart-container\"> <div impac-chart=\"\" draw-trigger=\"::drawTrigger.promise\" deferred=\"::chartDeferred\"></div> </div> </div> <div class=\"row\"> <div class=\"col-md-12 widget-lines-container\"> <div class=\"row\" ng-repeat=\"entity in widget.content.companies track by $index\"> <div class=\"col-xs-6 text-left\"> <i class=\"fa fa-circle\" style=\"margin: 0px 8px; color: {{getAccountColor(entity)}}\"> {{entity}} </i></div> <div class=\"col-xs-6 text-right\"> <i>{{getAmount($index)}}</i> </div> </div> </div> </div> </div> <div ng-show=\"(isDataFound==false)\" common-data-not-found=\"\" on-display-alerts=\"onDisplayAlerts()\" widget-engine=\"::widget.category\"> </div> </div> </div></div></div>");
$templateCache.put("widgets/accounts-comparison.tmpl.html","<div widget-accounts-comparison=\"\"> <div setting-accounts-list=\"\" parent-widget=\"widget\" deferred=\"::accountsListDeferred\"> <div ng-show=\"widget.isEditMode\" class=\"edit\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div ng-hide=\"widget.isEditMode\"> <div ng-show=\"(isDataFound==true)\">  <div ng-show=\"widget.metadata.organization_ids.length > 1 && canSelectComparisonMode || isComparisonMode()\"> <div setting-params-checkboxes=\"\" options=\"comparisonModeOptions\" param=\"comparison_mode\" parent-widget=\"widget\" deferred=\"::paramsCheckboxesDeferred\"> </div>  <div ng-hide=\"hasAccountsSelected() || noComparableAccounts\" class=\"row\"> <div class=\"col-xs-12\"> <h5>Select the accounts you wish to compare.</h5> </div> <div class=\"col-md-6\"> <div class=\"input-group\"> <select ng-model=\"movedAccount\" ng-options=\"account.name + \' (\' + formatAmount(account) + \')\' for account in widget.remainingAccounts\" class=\"form-control\" ng-show=\"widget.hasEditAbility\" ng-change=\"addAccount(movedAccount)\"></select> </div> </div> </div>  <div ng-show=\"isComparisonMode() && noComparableAccounts\" class=\"row comparable-error\"> <div class=\"col-xs-12\"><h5>No comparable accounts found.</h5></div> </div> <div class=\"row\" ng-show=\"hasAccountsSelected()\"> <div class=\"col-xs-12 chart-container\"> <div impac-chart=\"\" draw-trigger=\"::drawTrigger.promise\" deferred=\"::chartDeferred\"></div> </div> </div> <div class=\"row\" ng-show=\"hasAccountsSelected()\"> <div class=\"col-xs-12 widget-lines-container\"> <div class=\"row\" ng-class=\"{\'lines-group\': isComparisonMode(), \'widget-line\': !isComparisonMode()}\" ng-repeat=\"account in widget.selectedAccounts track by $index\">  <div class=\"col-xs-12\" ng-if=\"isComparisonMode()\"> <div class=\"row widget-line\" ng-repeat=\"groupedAccount in account.accounts track by $index\"> <div class=\"col-xs-1\"> <i class=\"fa fa-circle\" style=\"color: {{getAccountColor(groupedAccount)}}\"> </i></div> <div class=\"col-xs-6\"> {{groupedAccount.name}} </div> <div class=\"col-xs-4 text-right\"> <i>{{formatAmount(groupedAccount)}}</i> </div> <div class=\"col-xs-1 text-right\"> <button class=\"close\" ng-click=\"removeAccount(account)\" ng-show=\"widget.hasDeleteAbility\">x</button> </div> </div> </div>  <div ng-if=\"!isComparisonMode()\" class=\"col-xs-1\"> <i class=\"fa fa-circle\" style=\"color: {{getAccountColor(account)}}\"> </i></div> <div ng-if=\"!isComparisonMode()\" class=\"col-xs-6\"> {{account.name}} </div> <div ng-if=\"!isComparisonMode()\" class=\"col-xs-4 text-right\"> <i>{{formatAmount(account)}}</i> </div> <div ng-if=\"!isComparisonMode()\" class=\"col-xs-1 text-right\"> <button class=\"close\" ng-click=\"removeAccount(account)\" ng-show=\"widget.hasDeleteAbility\">x</button> </div> </div> </div> </div> <div class=\"row\" ng-show=\"hasAccountsSelected()\"> <div class=\"col-xs-12 input-group add-account\"> <select ng-model=\"movedAccount\" ng-options=\"account.name + \' (\' + formatAmount(account) + \')\' for account in widget.remainingAccounts track by account.uid\" class=\"form-control\" ng-show=\"widget.hasDeleteAbility\" ng-change=\"addAccount(movedAccount)\" ng-disabled=\"widget.selectedAccounts.length >= 15 || widget.remainingAccounts.length == 0 || isComparisonMode()\"> <option value=\"\" disabled=\"\" selected=\"\">+ ADD ACCOUNT</option> </select> </div> </div> </div> <div ng-show=\"(isDataFound==false)\" common-data-not-found=\"\" on-display-alerts=\"onDisplayAlerts()\" widget-engine=\"::widget.category\"> </div> </div> </div></div></div></div>");
$templateCache.put("widgets/accounts-custom-calculation.tmpl.html","<div widget-accounts-custom-calculation=\"\"> <div setting-organizations=\"\" parent-widget=\"widget\" ng-hide=\"true\" deferred=\"::orgDeferred\"> <div setting-accounts-list=\"\" parent-widget=\"widget\" deferred=\"::accountsListDeferred\"> <div setting-formula=\"\" parent-widget=\"widget\" deferred=\"::formulaDeferred\"> <h3 ng-show=\"widget.hasEditAbility && !widget.isFormulaCorrect\"> <a href=\"\" ng-click=\"formulaModal.open()\">Create a custom calculation</a> </h3> <div class=\"price\" ng-show=\"widget.isFormulaCorrect\"> {{widget.evaluatedFormula}} </div> <div class=\"legend\" ng-show=\"widget.isFormulaCorrect\"> {{widget.legend}} </div> </div></div></div></div>");
$templateCache.put("widgets/accounts-custom-calculation/formula.modal.html","<div class=\"analytics modal-custom-calculation\"> <div class=\"modal-header\"> <div class=\"close\" type=\"button\" ng-click=\"cancel()\">×</div> <h3>Custom Calculation</h3> </div> <div class=\"modal-body\"> <div class=\"row\"> <div class=\"col-sm-12\"> <div class=\"alert alert-error\" ng-show=\"errors\"> <button class=\"close\" ng-click=\"errors=\'\'\">×</button> <ul> <li ng-repeat=\"error in errors\">{{error}}</li> </ul> </div> </div> </div> <div class=\"edit\"> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::modalOrgDeferred\"> </div> <p>Make a custom equation with your accounts, and save it as a widget. To create an equation, simply select your accounts in the list, and use the classical operators (example: ({1} + {2}) / {3})</p> <div class=\"row\"> <div ng-show=\"widget.isLoading\" class=\"col-md-6 loader\" align=\"center\"> <div> <i class=\"fa fa-spinner fa-pulse fa-3x\"></i> <p>Your data is being retrieved...</p> </div> </div> <div ng-hide=\"widget.isLoading\" class=\"col-md-6\"> <div class=\"widget-line\" ng-repeat=\"account in widget.selectedAccounts track by $index\"> <div class=\"row\"> <div class=\"col-md-6\"> {{$index+1}} - {{account.name}} </div> <div class=\"col-md-6\"> {{account.current_balance | mnoCurrency : account.currency}} <button class=\"close\" ng-click=\"removeAccountFromFormula(account)\" ng-show=\"widget.hasEditAbility\"><span class=\"fa fa-times-circle\"></span></button> </div> </div> </div> <div class=\"input-group\" ng-show=\"widget.hasEditAbility\"> <select ng-model=\"movedAccount\" ng-options=\"account.name + \' (\' + widget.formatAmount(account) + \')\' for account in widget.remainingAccounts\" class=\"form-control\" ng-change=\"addAccountToFormula(movedAccount)\"></select><select> </select></div> </div> <div ng-hide=\"widget.isLoading\" class=\"col-md-6\"> <p>Type your formula just below:</p> <input class=\"form-control\" ng-model=\"widget.formula\"> <p>Result: {{widget.evaluatedFormula}}</p> <p>Legend: {{widget.legend}}</p> </div> </div> </div> <div class=\"modal-footer\"> <div class=\"row\"> <div class=\"col-sm-12\"> <button class=\"btn btn-gray\" ng-click=\"cancel()\" ng-hide=\"widget.isLoading\" ng-disabled=\"isLoading\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"proceed()\" ng-hide=\"widget.isLoading\" ng-disabled=\"!widget.isFormulaCorrect || widget.isLoading\"> <i class=\"fa fa-spinner fa-pulse loader\" ng-show=\"isLoading\"></i> Save </button> </div> </div> </div> </div> </div>");
$templateCache.put("widgets/accounts-detailed-classifications.tmpl.html","<div widget-accounts-detailed-classifications=\"\"> <div ng-show=\"widget.isEditMode\" class=\"edit\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div ng-hide=\"widget.isEditMode\"> <div ng-show=\"(isDataFound==true)\" class=\"widget-lines-container\">  <div ng-hide=\"multiEntity\" class=\"row widget-line header\"> <div class=\"col-md-11 col-md-offset-1 text-left\"> {{widget.content.companies[0].name}} - Accounts classifications </div> </div>  <div class=\"row lines-group\" ng-repeat=\"source in dataSource track by source.label\"> <div class=\"col-xs-12\">  <div class=\"row widget-line\"> <div class=\"col-xs-1\" ng-click=\"toggleCollapsed(source.label)\" style=\"cursor: pointer;\"> <i class=\"fa\" ng-class=\"isCollapsed(source.label) ? \'fa-plus-square-o\' : \'fa-minus-square-o\'\"> </i></div> <div class=\"col-xs-5 text-left\"> <strong>{{source.label | titleize}}</strong> </div> <div class=\"col-xs-6 text-right\"> <strong>{{source.value | mnoCurrency : source.currency}}</strong> </div> </div>  <div class=\"row\" collapse=\"isCollapsed(source.label)\"> <div class=\"col-xs-12\"> <div class=\"row widget-line\" ng-repeat=\"entry in source.entries\"> <div class=\"col-xs-5 col-xs-offset-1 text-left\"> {{entry.label | titleize}} </div> <div class=\"col-xs-6 text-right\"> {{entry.value | mnoCurrency : entry.currency}} </div> </div> </div> </div> </div> </div> </div> <div ng-show=\"(isDataFound==false)\" common-data-not-found=\"\" on-display-alerts=\"onDisplayAlerts()\" widget-engine=\"::widget.category\"> </div> </div> </div></div>");
$templateCache.put("widgets/accounts-expense-weight.tmpl.html","<div widget-accounts-expense-weight=\"\"> <div ng-show=\"widget.isEditMode\" class=\"edit\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div setting-account=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::accountBackDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div ng-hide=\"widget.isEditMode\"> <div ng-show=\"(isDataFound==true)\">  <div setting-account=\"\" ng-hide=\"widget.selectedAccount\" parent-widget=\"widget\" label=\"Select an expense account\" on-account-selected=\"updateSettings()\" deferred=\"::accountFrontDeferred\">  <div class=\"chart-container\" ng-show=\"widget.selectedAccount\"> <div impac-chart=\"\" draw-trigger=\"::drawTrigger.promise\" deferred=\"::chartDeferred\"></div> <div class=\"legend\"> <div class=\"title\"> {{getName()}} to {{getComparator() | titleize}} <span ng-if=\"widget.metadata.organization_ids.length==1\"><br><strong>{{widget.content.summary[0].ratio | mnoCurrency : \'%\'}}</strong></span> </div> <span ng-repeat=\"sum in widget.content.summary\" ng-if=\"widget.metadata.organization_ids.length>1\"> <span style=\"font-weight: bold;\">{{sum.company}}: {{sum.ratio | mnoCurrency : \'%\'}}</span> <br> </span> </div> </div> </div> <div ng-show=\"(isDataFound==false)\" common-data-not-found=\"\" on-display-alerts=\"onDisplayAlerts()\" widget-engine=\"::widget.category\"> </div> </div></div></div></div></div>");
$templateCache.put("widgets/accounts-expenses-revenue.tmpl.html","<div widget-accounts-expenses-revenue=\"\"> <div ng-show=\"widget.isEditMode\" class=\"edit\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div setting-time-range=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::timeRangeDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div ng-hide=\"widget.isEditMode\"> <div ng-show=\"(isDataFound==true)\"> <div setting-hist-mode=\"\" parent-widget=\"widget\" deferred=\"::histModeDeferred\" on-toggle=\"widget.format()\"> <div class=\"chart-container\"> <div impac-chart=\"\" draw-trigger=\"::drawTrigger.promise\" deferred=\"::chartDeferred\"></div> <div class=\"legend\" ng-if=\"widget.isHistoryMode\"> <span ng-hide=\"isNetProfitDisplayed\"> <span class=\"negative2\">Expenses</span> - <span class=\"positive2\">Revenue</span> </span> <span ng-show=\"isNetProfitDisplayed\"> <strong>Net Profit</strong> </span> </div> <div ng-show=\"widget.isHistoryMode\" setting-params-checkboxes=\"\" options=\"displayOptions\" param=\"display\" parent-widget=\"widget\" deferred=\"::paramsCheckboxesDeferred\"> <div class=\"legend\" ng-if=\"!widget.isHistoryMode\"> <span class=\"negative2\">Expenses: {{getCurrentExpenses() | mnoCurrency : getCurrency()}}</span> <br> <span class=\"positive2\">Revenue: {{getCurrentRevenue() | mnoCurrency : getCurrency()}}</span> </div> </div> </div> <div ng-show=\"(isDataFound==false)\" common-data-not-found=\"\" on-display-alerts=\"onDisplayAlerts()\" widget-engine=\"::widget.category\"> </div> </div></div></div></div></div></div>");
$templateCache.put("widgets/accounts-payable-receivable.tmpl.html","<div widget-accounts-payable-receivable=\"\"> <div ng-show=\"widget.isEditMode\" class=\"edit\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div setting-time-range=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::timeRangeDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div ng-hide=\"widget.isEditMode\"> <div ng-show=\"(isDataFound==true)\"> <div setting-hist-mode=\"\" parent-widget=\"widget\" deferred=\"::histModeDeferred\"> <div ng-hide=\"widget.isHistoryMode\"> <div class=\"receivable\"> <h3>Accounts Receivable</h3> <div class=\"price positive2\"> {{getCurrentReceivable() | mnoCurrency : getCurrency() : false}} </div> <div class=\"currency\">{{getCurrency()}}</div> </div> <div class=\"payable\"> <h3>Accounts Payable</h3> <div class=\"price negative2\"> {{getCurrentPayable() | mnoCurrency : getCurrency() : false}} </div> <div class=\"currency\">{{getCurrency()}}</div> </div> </div> <div class=\"chart-container\" ng-class=\"{\'invisible\': !widget.isHistoryMode}\"> <div impac-chart=\"\" draw-trigger=\"drawTrigger.promise\" deferred=\"chartDeferred\"></div> <div class=\"legend\"> <span class=\"negative2\">Payable</span> - <span class=\"positive2\">Receivable</span> </div> </div> </div> <div ng-show=\"(isDataFound==false)\" common-data-not-found=\"\" on-display-alerts=\"onDisplayAlerts()\" widget-engine=\"::widget.category\"> </div> </div></div></div></div></div>");
$templateCache.put("widgets/accounts-profit-and-loss.tmpl.html","<div widget-accounts-profit-and-loss=\"\"> <div class=\"edit\" ng-show=\"widget.isEditMode\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div setting-time-range=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::timeRangeDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div ng-hide=\"widget.isEditMode\"> <div ng-show=\"(isDataFound==true)\" class=\"row\"> <div ng-class=\"widget.isExpanded() ? \'col-md-6\' : \'col-md-12\'\"> <div setting-width=\"\" parent-widget=\"widget\" min=\"6\" max=\"12\" class=\"settings width\" deferred=\"::widthDeferred\"> <div class=\"widget-lines-container\">  <div class=\"row widget-line header\"> <div class=\"col-xs-4 col-xs-offset-8 text-right\"> {{getLastDate() | mnoDate : widget.metadata.hist_parameters.period}} </div> </div>  <div class=\"row lines-group\" ng-repeat=\"statement in widget.content.summary\" ng-class=\"{profit: statement.name.indexOf(\'profit\')>0}\"> <div class=\"col-xs-12\">  <div class=\"row widget-line\" ng-class=\"{selected: isSelected(statement)}\"> <div class=\"col-xs-1\" ng-click=\"toggleCollapsed(statement)\"> <i ng-show=\"(statement.accounts && statement.accounts.length)\" class=\"fa\" ng-class=\"isCollapsed(statement) ? \'fa-plus-square-o\' : \'fa-minus-square-o\'\"> </i></div> <div class=\"col-xs-7\" ng-click=\"toggleSelectedElement(statement)\"> <strong>{{getName(statement) | titleize}}</strong> </div> <div class=\"col-xs-4 text-right\" ng-class=\"getClassColor(getLastValue(statement))\" ng-click=\"toggleSelectedElement(statement)\"> <strong>{{getLastValue(statement) | mnoCurrency : statement.currency}}</strong> </div> </div>  <div class=\"row\" collapse=\"isCollapsed(statement)\"> <div class=\"col-xs-12\"> <div class=\"row widget-line\" ng-click=\"toggleSelectedElement(account)\" ng-repeat=\"account in statement.accounts\" ng-class=\"{selected: isSelected(account)}\"> <div class=\"col-xs-7 col-xs-offset-1\"> {{account.name}} </div> <div class=\"col-xs-4 text-right\" ng-class=\"getClassColor(getLastValue(account))\"> {{getLastValue(account) | mnoCurrency : account.currency}} </div> </div> </div> </div> </div> </div> </div> </div> <div class=\"col-md-6 right-panel text-center\" ng-show=\"widget.isExpanded()\"> <div ng-show=\"hasElements()\"> <h4>{{(widget.metadata.hist_parameters.period || \"Monthly\") | titleize}} Profit and Loss</h4> <div ng-show=\"selectedElements.length < 2\" class=\"legend\">{{getName(selectedElements[0]) | titleize}}</div> <div class=\"chart-container\"> <div impac-chart=\"\" draw-trigger=\"::drawTrigger.promise\" deferred=\"::chartDeferred\"></div> </div> <div ng-show=\"selectedElements.length < 2\" class=\"widget-lines-container\">  <div class=\"row\"> <span ng-repeat=\"date in dates track by $index\" class=\"hidden-xs\">  <div ng-if=\"$index % 4 == 0 && $index > 0\" class=\"clearfix dashed\"></div> <div class=\"col-sm-3 text-center\">  <div class=\"row widget-line\"> <div class=\"col-sm-12\"> {{date | mnoDate : widget.metadata.hist_parameters.period}} </div> </div>  <div class=\"row widget-line\"> <div class=\"col-sm-12\" ng-class=\"getClassColor(selectedElements[0].totals[$index])\"> {{selectedElements[0].totals[$index] | mnoCurrency : selectedElements[0].currency}} </div> </div> </div> </span> </div>  <div ng-repeat=\"date in dates track by $index\" class=\"row widget-line visible-xs\">  <div class=\"col-xs-6\"> {{date | mnoDate : widget.metadata.hist_parameters.period}} </div>  <div class=\"col-xs-6 text-right\" ng-class=\"getClassColor(selectedElements[0].totals[$index])\"> {{selectedElements[0].totals[$index] | mnoCurrency : selectedElements[0].currency}} </div> </div> </div> <div ng-hide=\"selectedElements.length < 2\" class=\"widget-lines-container\"> <div class=\"row widget-line\" ng-repeat=\"element in selectedElements\"> <div class=\"col-xs-7 text-left\"> <i class=\"fa fa-circle\" style=\"margin: 0px 8px; color: {{getElementChartColor($index)}}\"> {{getName(element) | titleize}} </i></div> <div class=\"col-xs-5 text-right\"> <i ng-class=\"getClassColor(getLastValue(element))\"> {{getLastValue(element) | mnoCurrency : element.currency}} </i> </div> </div> </div> </div> <div ng-hide=\"hasElements()\" class=\"no-element\"> Select one or several account(s) or account(s) type(s) to display the corresponding PnL. </div> </div> </div> <div ng-show=\"(isDataFound==false)\" common-data-not-found=\"\" on-display-alerts=\"onDisplayAlerts()\" widget-engine=\"::widget.category\"> </div> </div> </div></div></div></div>");
$templateCache.put("widgets/hr-employee-details.tmpl.html","<div widget-hr-employee-details=\"\"> <div class=\"edit\" ng-show=\"widget.isEditMode\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div ng-hide=\"widget.isEditMode\"> <div ng-show=\"(isDataFound==true)\" class=\"row\"> <div ng-class=\"widget.isExpanded() ? \'col-md-6\' : \'col-md-12\'\"> <div setting-width=\"\" parent-widget=\"widget\" min=\"3\" max=\"6\" class=\"settings width\" deferred=\"::widthDeferred\"> <div setting-param-selector=\"\" parent-widget=\"widget\" param=\"employee_uid\" options=\"employeesOptions\" selected=\"selectedEmployee\" class=\"row title\" deferred=\"::paramSelectorDeferred1\"> <div class=\"details-container\"> <div class=\"row\"> <div class=\"col-md-4\"><label>Job Title</label></div> <div class=\"col-md-8\"><pre>{{getEmployee().job_title || \"-\" }}</pre></div> </div> <div class=\"row\"> <div class=\"col-md-4\"><label>Company</label></div> <div class=\"col-md-8\"><pre>{{getEmployee().company || getSingleCompanyName()}}</pre></div> </div> <div class=\"row\"> <div class=\"col-md-4\"><label>Phone</label></div> <div class=\"col-md-8\"><pre>{{getEmployee().phone || \"-\" }}</pre></div> </div> <div class=\"row\"> <div class=\"col-md-4\"><label>Email</label></div> <div class=\"col-md-8\"><pre>{{getEmployee().email || \"-\" }}</pre></div> </div> <div class=\"row\"> <div class=\"col-md-4\"><label>Date of birth</label></div> <div class=\"col-md-8\"><pre>{{getEmployee().dob || \"-\" }}</pre></div> </div> <div class=\"row\"> <div class=\"col-md-4\"><label>Gender</label></div> <div class=\"col-md-8\"><pre>{{getEmployee().gender || \"-\" }}</pre></div> </div> </div> </div> <div class=\"col-md-6 right-panel\" ng-show=\"widget.isExpanded()\"> <div class=\"legend\">Salary calculation period: <span setting-param-selector=\"\" parent-widget=\"widget\" param=\"period\" options=\"periodOptions\" selected=\"period\" deferred=\"::paramSelectorDeferred2\"></span></div> <div class=\"details-container\"> <div class=\"row\"> <div class=\"col-md-4\"><label>Salary</label></div> <div class=\"col-md-8\"><pre>{{getEmployee().salary || \"-\" }}</pre></div> </div> <div class=\"row\"> <div class=\"col-md-4\"><label>Address</label></div> <div class=\"col-md-8\"><pre>{{formatAddress(getEmployee().address) || \"-\" }}</pre></div> </div> <div class=\"row\"> <div class=\"col-md-4\"><label>Job location</label></div> <div class=\"col-md-8\"><pre>{{getEmployee().location || \"-\" }}</pre></div> </div> <div class=\"row\"> <div class=\"col-md-4\"><label>Supervisor</label></div> <div class=\"col-md-8\"><pre>{{getEmployee().supervisor || \"-\" }}</pre></div> </div> <div class=\"row\"> <div class=\"col-md-4\"><label>Status</label></div> <div class=\"col-md-8\"><pre>{{getEmployee().employment_status || \"-\" }}</pre></div> </div> <div class=\"row\"> <div class=\"col-md-4\"><label>Note</label></div> <div class=\"col-md-8\"><pre>{{getEmployee().note || \"-\" }}</pre></div> </div> </div> </div> </div> <div ng-show=\"(isDataFound==false)\" common-data-not-found=\"\" widget-engine=\"::widget.category\"> </div> </div></div></div></div></div>");
$templateCache.put("widgets/hr-employees-list.tmpl.html","<div widget-hr-employees-list=\"\"> <div class=\"edit\" ng-show=\"widget.isEditMode\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div ng-hide=\"widget.isEditMode\"> <div ng-show=\"(isDataFound==true)\"> <div class=\"legend\"> <strong>{{widget.content.total.employees}}</strong> employee{{widget.content.total.employees > 1 ? \"s\" : null}} - Average salary rate (<span setting-param-selector=\"\" parent-widget=\"widget\" param=\"period\" options=\"periodOptions\" selected=\"period\" deferred=\"::paramSelectorDeferred\">): <strong>{{widget.content.total.average_rate | mnoCurrency : widget.content.total.currency}}</strong> </span></div> <div class=\"widget-lines-container\"> <div class=\"row widget-line header\"> <div class=\"col-sm-2\">Company</div> <div class=\"col-sm-3\">Employee</div> <div class=\"col-sm-2\">Title</div> <div class=\"col-sm-3\">Phone</div> <div class=\"col-sm-2\">Salary</div> </div> <div class=\"row widget-line\" ng-repeat=\"employee in widget.content.employees\"> <div class=\"col-sm-2\">{{employee.company || getSingleCompanyName()}}</div> <div class=\"col-sm-3\">{{employee.lastname}} {{employee.firstname}}</div> <div class=\"col-sm-2\"><i>{{employee.job_title}}</i></div> <div class=\"col-sm-3\">{{employee.phone}}</div> <div class=\"col-sm-2\"><i>{{getEmployeeSalary(employee)}}</i></div> </div> </div> </div> <div ng-show=\"(isDataFound==false)\" common-data-not-found=\"\" widget-engine=\"::widget.category\"> </div> </div></div></div>");
$templateCache.put("widgets/hr-leaves-balance.tmpl.html","<div widget-hr-leaves-balance=\"\"> <div class=\"edit\" ng-show=\"widget.isEditMode\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div ng-hide=\"widget.isEditMode\"> <div ng-show=\"(isDataFound==true)\"> <div setting-param-selector=\"\" parent-widget=\"widget\" param=\"employee_id\" options=\"employeesOptions\" selected=\"selectedEmployee\" class=\"employee-name\" deferred=\"::paramSelectorDeferred\"> <h3>{{getEmployee().leaves[0].name || \'Vacation leaves\'}} balance</h3> <div class=\"balance\">{{(getEmployee().leaves[0].units || 0) | mnoCurrency : (getEmployee().leaves[0].type_of_units || \'h\')}}</div> <h3>{{getEmployee().leaves[1].name || \'Sick leaves\'}} balance</h3> <div class=\"balance\">{{(getEmployee().leaves[1].units || 0) | mnoCurrency : (getEmployee().leaves[1].type_of_units || \'h\')}}</div> </div> <div ng-show=\"(isDataFound==false)\" common-data-not-found=\"\" widget-engine=\"::widget.category\"> </div> </div></div></div></div>");
$templateCache.put("widgets/hr-leaves-schedule.tmpl.html","<div widget-hr-leaves-schedule=\"\"> <div class=\"edit\" ng-show=\"widget.isEditMode\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div ng-hide=\"widget.isEditMode\"> <div ng-show=\"(isDataFound==true)\"> <div widget-component-calendar=\"\" ng-model=\"eventSources\"></div> </div> <div ng-show=\"(isDataFound==false)\" common-data-not-found=\"\" widget-engine=\"widget.category\"> </div> </div></div></div>");
$templateCache.put("widgets/hr-payroll-summary.tmpl.html","<div widget-hr-payroll-summary=\"\"> <div class=\"edit\" ng-show=\"widget.isEditMode\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div setting-time-range=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::timeRangeDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div ng-hide=\"widget.isEditMode\"> <div ng-show=\"(isDataFound==true)\" class=\"row\"> <div ng-class=\"widget.isExpanded() ? \'col-md-6\' : \'col-md-12\'\"> <div setting-width=\"\" parent-widget=\"widget\" min=\"6\" max=\"12\" class=\"settings width\" deferred=\"::widthDeferred\"> <div class=\"widget-lines-container\">  <div class=\"row widget-line header\"> <div class=\"col-xs-11 col-xs-offset-1\">Payroll Summary - {{widget.metadata.hist_parameters.period}}</div> </div>  <div class=\"row lines-group\" ng-repeat=\"statement in widget.content.summary\"> <div class=\"col-xs-12\">  <div class=\"row widget-line\" ng-class=\"{selected: isSelected(statement)}\"> <div class=\"col-xs-1\" ng-click=\"toggleCollapsed(statement)\"> <i ng-show=\"(statement.employees && statement.employees.length)\" class=\"fa\" ng-class=\"isCollapsed(statement) ? \'fa-plus-square-o\' : \'fa-minus-square-o\'\"> </i></div> <div class=\"col-xs-7\" ng-click=\"toggleSelectedElement(statement)\"> <strong>{{getName(statement) | titleize}}</strong> </div> <div class=\"col-xs-4 text-right\" ng-click=\"toggleSelectedElement(statement)\"> <strong>{{getLastValue(statement) | mnoCurrency : statement.currency}}</strong> </div> </div>  <div class=\"row\" collapse=\"isCollapsed(statement)\"> <div class=\"col-xs-12\"> <div class=\"row widget-line\" ng-click=\"toggleSelectedElement(employee)\" ng-repeat=\"employee in statement.employees\" ng-class=\"{selected: isSelected(account)}\"> <div class=\"col-xs-7 col-xs-offset-1\"> {{employee.name}} </div> <div class=\"col-xs-4 text-right\"> {{getLastValue(employee) | mnoCurrency : employee.currency}} </div> </div> </div> </div> </div> </div> </div> </div> <div class=\"col-md-6 right-panel text-center\" ng-show=\"widget.isExpanded()\"> <div ng-show=\"hasElements()\"> <h4>{{(widget.content.hist_parameters.period || \"Monthly\") | titleize}} Payroll Summary</h4> <div setting-hist-mode=\"\" parent-widget=\"widget\" deferred=\"::histModeDeferred\" on-toggle=\"widget.format()\"> <div class=\"chart-container\"> <div impac-chart=\"\" draw-trigger=\"::drawTrigger.promise\" deferred=\"::chartDeferred\"></div> <div ng-show=\"selectedElements.length < 2\" class=\"legend\">{{getName(selectedElements[0]) | titleize}}</div> </div> <div ng-show=\"selectedElements.length < 2\" class=\"widget-lines-container\"> <div ng-show=\"getTrackedField()\" class=\"row widget-line header\"> <div class=\"col-xs-12\">{{getTrackedField()}}</div> </div>  <div class=\"row\"> <span ng-repeat=\"date in widget.content.dates track by $index\" class=\"hidden-xs\">  <div ng-if=\"$index % 4 == 0 && $index > 0\" class=\"clearfix dashed\"></div> <div class=\"col-sm-3 text-center\">  <div class=\"row widget-line\"> <div class=\"col-sm-12\"> {{formatDate(date)}} </div> </div>  <div class=\"row widget-line\"> <div class=\"col-sm-12\" ng-class=\"getClassColor(selectedElements[0].totals[$index])\"> {{selectedElements[0].totals[$index] | mnoCurrency : selectedElements[0].currency }} </div> </div> </div> </span> </div>  <div ng-repeat=\"date in widget.content.dates track by $index\" class=\"row widget-line visible-xs\">  <div class=\"col-xs-6\"> {{formatDate(date)}} </div>  <div class=\"col-xs-6 text-right\" ng-class=\"getClassColor(selectedElements[0].totals[$index])\"> {{selectedElements[0].totals[$index] | mnoCurrency : selectedElements[0].currency}} </div> </div> </div> <div ng-hide=\"selectedElements.length < 2\" class=\"widget-lines-container\"> <div class=\"row widget-line header\"> <div class=\"col-md-12\"> <span ng-if=\"getTrackedField()\"> {{getTrackedField()}} - </span> <span ng-if=\"widget.isHistoryMode\"> From {{widget.content.dates[0] | date : \"MMM-d\"}} to {{widget.content.dates[widget.content.dates.length - 1] | date : \"MMM-d\"}} </span> <span ng-if=\"!widget.isHistoryMode\"> {{getPeriod()}} </span> </div> </div> <div class=\"row widget-line\" ng-repeat=\"element in selectedElements\"> <div class=\"col-xs-7\"> <i class=\"fa fa-circle\" style=\"margin: 0px 8px; color: {{getElementChartColor($index)}}\"> {{getName(element) | titleize}} </i></div> <div class=\"col-xs-5 text-right\"> <span ng-if=\"widget.isHistoryMode\">{{getTotalSum(element) | mnoCurrency : element.currency}}</span> <span ng-if=\"!widget.isHistoryMode\">{{getLastValue(element) | mnoCurrency : element.currency}}</span> </div> </div> </div> </div> <div ng-hide=\"hasElements()\" class=\"no-element\"> Select one or several employee(s) or category(ies) to display the corresponding summary. </div> </div> </div> <div ng-show=\"(isDataFound==false)\" common-data-not-found=\"\" widget-engine=\"widget.category\"> </div> </div> </div></div></div></div></div>");
$templateCache.put("widgets/hr-payroll-taxes.tmpl.html","<div widget-hr-payroll-taxes=\"\"> <div ng-show=\"widget.isEditMode\" class=\"edit\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div setting-time-range=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::timeRangeDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div ng-hide=\"widget.isEditMode\"> <div ng-show=\"(isDataFound==true)\"> <div setting-hist-mode=\"\" parent-widget=\"widget\" deferred=\"::histModeDeferred\"> <div ng-hide=\"widget.isHistoryMode\" class=\"current\"> <div class=\"price\">{{getCurrentPrice() | mnoCurrency : getCurrency() : false}}</div> <div class=\"currency\">{{getCurrency()}}</div> <div class=\"legend\">Taxes upon workforce costs<br>{{getPeriod()}}</div> </div> <div class=\"history chart-container\" ng-class=\"{\'invisible\': !widget.isHistoryMode}\"> <div impac-chart=\"\" draw-trigger=\"::drawTrigger.promise\" deferred=\"::chartDeferred\"></div> <div class=\"legend\">Taxes upon workforce costs</div> </div> </div> <div ng-show=\"(isDataFound==false)\" common-data-not-found=\"\" widget-engine=\"::widget.category\"> </div> </div> </div></div></div></div>");
$templateCache.put("widgets/hr-salaries-summary.tmpl.html","<div widget-hr-salaries-summary=\"\"> <div class=\"edit\" ng-show=\"widget.isEditMode\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div align=\"center\" ng-hide=\"widget.isEditMode\"> <div ng-show=\"(isDataFound==true)\" class=\"row\"> <div ng-class=\"widget.isExpanded() ? \'col-md-6\' : \'col-md-12\'\"> <div setting-width=\"\" parent-widget=\"widget\" min=\"3\" max=\"6\" class=\"settings width\" deferred=\"::widthDeferred\"> <h3 class=\"left\">Average Salary Rate</h3> <div class=\"price\"> {{widget.content.total.average_rate | mnoCurrency : widget.content.total.currency}} </div> <div class=\"currency\" setting-param-selector=\"\" parent-widget=\"widget\" param=\"period\" options=\"periodOptions\" selected=\"period\" deferred=\"::paramSelectorDeferred1\"> <div class=\"legend\"> <span>({{widget.content.total.employees}} employee{{widget.content.total.employees > 1 ? \"s\" : null}} with known salary)</span> </div> </div> <div class=\"right-panel\" ng-class=\"{\'col-md-12 invisible\': !widget.isExpanded(), \'col-md-6\': widget.isExpanded()}\"> <h3 class=\"right\">Filter: <span setting-param-selector=\"\" parent-widget=\"widget\" param=\"filter\" options=\"filterOptions\" selected=\"filter\" deferred=\"::paramSelectorDeferred2\"></span></h3> <div class=\"chart-container\"> <div impac-chart=\"\" draw-trigger=\"::drawTrigger.promise\" deferred=\"::chartDeferred\"></div> </div> <div class=\"widget-lines-container\"> <div class=\"row widget-line\" ng-repeat=\"data in widget.content.summary.data\"> <div class=\"col-xs-2\"> <i ng-hide=\"widget.content.summary.filter==\'age_range\'\" class=\"fa fa-circle\" style=\"color: {{getColorByIndex($index)}}\"> </i></div> <div class=\"col-xs-5\"> {{data.label}} </div> <div class=\"col-xs-5 text-right\"> <i>{{data.value | mnoCurrency : widget.content.total.currency}} (av.)</i> </div> </div> </div> </div> </div> <div ng-show=\"(isDataFound==false)\" common-data-not-found=\"\" widget-engine=\"::widget.category\"> </div> </div> </div></div></div></div>");
$templateCache.put("widgets/hr-superannuation-accruals.tmpl.html","<div widget-hr-superannuation-accruals=\"\"> <div class=\"edit\" ng-show=\"widget.isEditMode\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div ng-hide=\"widget.isEditMode\"> <div ng-show=\"(isDataFound==true)\" class=\"row\"> <div setting-param-selector=\"\" parent-widget=\"widget\" param=\"employee_id\" options=\"employeesOptions\" selected=\"selectedEmployee\" class=\"currency\" deferred=\"::paramSelectorDeferred\"> <h3>Superannuation Balance</h3> <div class=\"price\">{{(getEmployee().total_super || 0) | mnoCurrency : getEmployee().currency}}</div> </div> <div ng-show=\"(isDataFound==false)\" common-data-not-found=\"\" widget-engine=\"::widget.category\"> </div> </div></div></div></div>");
$templateCache.put("widgets/hr-timesheets.tmpl.html","<div widget-hr-timesheets=\"\"> <div class=\"edit\" ng-show=\"widget.isEditMode\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div setting-time-range=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::timeRangeDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div ng-hide=\"widget.isEditMode\"> <div ng-show=\"(isDataFound==true)\"> <div setting-param-selector=\"\" parent-widget=\"widget\" param=\"employee_id\" options=\"employeesOptions\" selected=\"selectedEmployee\" class=\"currency\" deferred=\"::paramSelectorDeferred\"> <div class=\"widget-lines-container\">  <div class=\"row widget-line header\"> <div class=\"col-sm-12\"> From {{widget.content.dates[0] | date : \'MMM-d\'}} to {{widget.content.dates[widget.content.dates.length - 1] | date : \'MMM-d\'}} </div> </div>  <div class=\"row lines-group\"> <div class=\"col-xs-12\">  <div class=\"row widget-line\"> <div class=\"col-xs-1\" ng-click=\"toggleCollapsed(\'total_time_worked\')\" style=\"cursor: pointer;\"> <i class=\"fa\" ng-class=\"isCollapsed(\'total_time_worked\') ? \'fa-plus-square-o\' : \'fa-minus-square-o\'\"> </i></div> <div class=\"col-xs-7\"> <strong>Total Time Worked</strong> </div> <div class=\"col-xs-4 text-right\"> <strong>{{getEmployeeTimeWorked()}} h</strong> </div> </div>  <div class=\"row\" collapse=\"isCollapsed(\'total_time_worked\')\"> <div class=\"col-xs-12\"> <div class=\"row widget-line\"> <div class=\"col-xs-11 col-xs-offset-1\"> <i>Activities detail not found</i> </div> </div> </div> </div> </div> </div>  <div class=\"row lines-group\"> <div class=\"col-xs-12\">  <div class=\"row widget-line\"> <div class=\"col-xs-1\" ng-click=\"toggleCollapsed(\'total_time_of\')\" style=\"cursor: pointer;\"> <i class=\"fa\" ng-class=\"isCollapsed(\'total_time_of\') ? \'fa-plus-square-o\' : \'fa-minus-square-o\'\"> </i></div> <div class=\"col-xs-7\"> <strong>Total Time Off</strong> </div> <div class=\"col-xs-4 text-right\"> <strong>{{getEmployeeTimeOff()}} h</strong> </div> </div>  <div class=\"row\" collapse=\"isCollapsed(\'total_time_of\')\"> <div class=\"col-xs-12\"> <div class=\"row widget-line\"> <div class=\"col-xs-7 col-xs-offset-1\">PTO</div> <div class=\"col-xs-4 text-right\">0 h</div> </div> <div class=\"row widget-line\"> <div class=\"col-xs-7 col-xs-offset-1\">Vacation</div> <div class=\"col-xs-4 text-right\">0 h</div> </div> </div> </div> </div> </div> </div> </div> <div ng-show=\"(isDataFound==false)\" common-data-not-found=\"\" widget-engine=\"::widget.category\"> </div> </div> </div></div></div></div>");
$templateCache.put("widgets/hr-workforce-summary.tmpl.html","<div widget-hr-workforce-summary=\"\"> <div class=\"edit\" ng-show=\"widget.isEditMode\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div align=\"center\" ng-hide=\"widget.isEditMode\"> <div ng-show=\"(isDataFound==true)\" class=\"row\"> <div ng-class=\"widget.isExpanded() ? \'col-md-6\' : \'col-md-12\'\"> <div setting-width=\"\" parent-widget=\"widget\" min=\"3\" max=\"6\" class=\"settings width\" deferred=\"::widthDeferred\"> <h3 class=\"left\">Total Workforce</h3> <div class=\"price\"> {{getTotalWorkforce() | mnoCurrency : getCurrency()}} </div> <div class=\"currency\" setting-param-selector=\"\" parent-widget=\"widget\" param=\"period\" options=\"periodOptions\" selected=\"period\" deferred=\"::paramSelectorDeferred1\"> <div class=\"legend\"> <span>({{getNumberOfEmployees()}} employee{{getNumberOfEmployees() > 1 ? \'s\' : null}} with known salary)</span> </div> </div> <div class=\"right-panel\" ng-class=\"{\'col-md-12 invisible\': !widget.isExpanded(), \'col-md-6\': widget.isExpanded()}\"> <h3 class=\"right\">Filter: <span setting-param-selector=\"\" parent-widget=\"widget\" param=\"filter\" options=\"filterOptions\" selected=\"filter\" deferred=\"::paramSelectorDeferred2\"></span></h3> <div class=\"chart-container\"> <div impac-chart=\"\" draw-trigger=\"::drawTrigger.promise\" deferred=\"::chartDeferred\"></div> </div> <div class=\"widget-lines-container\"> <div class=\"row widget-line\" ng-repeat=\"data in widget.content.summary.data\"> <div class=\"col-xs-2\"> <i class=\"fa fa-circle\" style=\"color: {{getColorByIndex($index)}}\"> </i></div> <div class=\"col-xs-7\"> {{widget.content.summary.filter == \"salary_range\" ? formatSalaryRange(data) : data.label}} </div> <div class=\"col-xs-3 text-right\"> <i>{{((data.value / widget.content.total.amount)*100).toFixed()}}%</i> </div> </div> </div> </div> </div> <div ng-show=\"(isDataFound==false)\" common-data-not-found=\"\" widget-engine=\"::widget.category\"> </div> </div> </div></div></div></div>");
$templateCache.put("widgets/invoices-aged-payables-receivables.tmpl.html","<div widget-invoices-aged-payables-receivables=\"\"> <div class=\"edit\" ng-show=\"widget.isEditMode\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div setting-time-range=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::timeRangeDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div ng-hide=\"widget.isEditMode\"> <div ng-show=\"(isDataFound==true)\" class=\"row\"> <div ng-class=\"widget.isExpanded() ? \'col-md-6\' : \'col-md-12\'\"> <div setting-width=\"\" parent-widget=\"widget\" min=\"6\" max=\"12\" class=\"settings width\" deferred=\"::widthDeferred\"> <div class=\"widget-lines-container\"> <div class=\"row widget-line header\"> <div class=\"col-xs-8\">Aged Payables & Receivables</div> <div class=\"col-xs-4 text-right\">Total</div> </div>  <div class=\"row lines-group\"> <div class=\"col-xs-12\"> <div class=\"row widget-line\" ng-class=\"{selected: isSelected(widget.content.payables)}\"> <div class=\"col-xs-1\" ng-click=\"toggleCollapsed(widget.content.payables)\"> <i ng-show=\"(widget.content.payables.suppliers && widget.content.payables.suppliers.length)\" class=\"fa\" ng-class=\"isCollapsed(widget.content.payables) ? \'fa-plus-square-o\' : \'fa-minus-square-o\'\"> </i></div> <div class=\"col-xs-7\" ng-click=\"toggleSelectedElement(widget.content.payables)\"> <strong>Aged Payables</strong> </div> <div class=\"col-xs-4 text-right\" ng-click=\"toggleSelectedElement(widget.content.payables)\"> <strong>{{getTotalSum(widget.content.payables) | mnoCurrency : widget.content.payables.currency}}</strong> </div> </div> <div class=\"row\" ng-hide=\"isCollapsed(widget.content.payables)\"> <div class=\"col-xs-12\"> <div class=\"row widget-line\" ng-click=\"toggleSelectedElement(supplier)\" ng-repeat=\"supplier in widget.content.payables.suppliers\" ng-class=\"isSelected(supplier) ? \'selected\' : null\"> <div class=\"col-xs-7 col-xs-offset-1\"> {{supplier.name}} </div> <div class=\"col-xs-4 text-right\"> {{getTotalSum(supplier) | mnoCurrency : supplier.currency}} </div> </div> </div> </div> </div> </div>  <div class=\"row lines-group\"> <div class=\"col-xs-12\"> <div class=\"row widget-line\" ng-class=\"{selected: isSelected(widget.content.receivables)}\"> <div class=\"col-xs-1\" ng-click=\"toggleCollapsed(widget.content.receivables)\"> <i ng-show=\"(widget.content.receivables.customers && widget.content.receivables.customers.length)\" class=\"fa\" ng-class=\"isCollapsed(widget.content.receivables) ? \'fa-plus-square-o\' : \'fa-minus-square-o\'\"> </i></div> <div class=\"col-xs-7\" ng-click=\"toggleSelectedElement(widget.content.receivables)\"> <strong>Aged Receivables</strong> </div> <div class=\"col-xs-4 text-right\" ng-click=\"toggleSelectedElement(widget.content.receivables)\"> <strong>{{getTotalSum(widget.content.receivables) | mnoCurrency : widget.content.receivables.currency}}</strong> </div> </div> <div class=\"row\" ng-hide=\"isCollapsed(widget.content.receivables)\"> <div class=\"col-xs-12\"> <div class=\"row widget-line\" ng-click=\"toggleSelectedElement(customer)\" ng-repeat=\"customer in widget.content.receivables.customers\" ng-class=\"isSelected(customer) ? \'selected\' : null\"> <div class=\"col-xs-7 col-xs-offset-1\"> {{customer.name}} </div> <div class=\"col-xs-4 text-right\"> <span>{{getTotalSum(customer) | mnoCurrency : customer.currency}}</span> </div> </div> </div> </div> </div> </div> </div> </div> <div class=\"right-panel text-center\" ng-class=\"{\'col-md-6\': widget.isExpanded(), \'col-md-12 invisible\': !widget.isExpanded()}\"> <div ng-show=\"hasElements()\"> <h4>{{(widget.content.hist_parameters.period || \"Monthly\") | titleize}} Aged Payables and Receivables</h4> <div ng-show=\"selectedElements.length < 2\" class=\"legend\">{{getName(selectedElements[0]) | titleize}}</div> <div class=\"chart-container\"> <div impac-chart=\"\" draw-trigger=\"::drawTrigger.promise\" deferred=\"::chartDeferred\"></div> </div> <div ng-show=\"selectedElements.length < 2\" class=\"widget-lines-container\">  <div class=\"row\"> <span ng-repeat=\"date in widget.content.dates track by $index\" class=\"hidden-xs\">  <div ng-if=\"$index % 4 == 0 && $index > 0\" class=\"clearfix dashed\"></div> <div class=\"col-sm-3 text-center\">  <div class=\"row widget-line\"> <div class=\"col-sm-12\"> {{date | mnoDate : widget.metadata.hist_parameters.period}} </div> </div>  <div class=\"row widget-line\"> <div class=\"col-sm-12\" ng-class=\"getClassColor(selectedElements[0].totals[$index])\"> {{selectedElements[0].totals[$index] | mnoCurrency : selectedElements[0].currency}} </div> </div> </div> </span> </div>  <div ng-repeat=\"date in widget.content.dates track by $index\" class=\"row widget-line visible-xs\">  <div class=\"col-xs-6\"> {{date | mnoDate : widget.metadata.hist_parameters.period}} </div>  <div class=\"col-xs-6 text-right\" ng-class=\"getClassColor(selectedElements[0].totals[$index])\"> {{selectedElements[0].totals[$index] | mnoCurrency : selectedElements[0].currency}} </div> </div> <div class=\"row astericks-info\"> <div class=\"col-xs-12\"> <p><i>* Your opening-balance of receivables and/or payables for this period.</i></p> </div> </div> </div> <div ng-hide=\"selectedElements.length < 2\" class=\"widget-lines-container\"> <div class=\"row widget-line header\"> <div class=\"col-xs-4 col-xs-offset-8 text-right\">Totals</div> </div> <div class=\"row widget-line\" ng-repeat=\"element in selectedElements\"> <div class=\"col-xs-2\"> <i class=\"fa fa-circle\" style=\"margin: 0px 8px; color: {{getElementChartColor($index)}}\"> </i></div> <div class=\"col-xs-6\"> {{getName(element) | titleize}} </div> <div class=\"col-xs-4 text-right\"> <i>{{getTotalSum(element) | mnoCurrency : element.currency}}</i> </div> </div> <div class=\"row astericks-info\"> <div class=\"col-xs-12\"> <p><i>* Your opening-balance of receivables and/or payables for this period.</i></p> </div> </div> </div> </div> <div ng-hide=\"hasElements()\" class=\"no-element\"> Select one or several account(s) or category(ies) to display the payables/receivables evolution(s). </div> </div> </div> <div ng-show=\"(isDataFound==false)\" common-data-not-found=\"\" widget-engine=\"::widget.category\"> </div> </div> </div></div></div></div>");
$templateCache.put("widgets/invoices-list.accessible.tmpl.html","<div widget-invoices-list=\"\"> <div class=\"edit\" ng-show=\"widget.isEditMode\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <table class=\"table widget-lines-container\" ng-hide=\"widget.isEditMode\">  <tr class=\"widget-line header\"> <td>{{entityTypeCap}}</td> <td>Paid</td> <td>Due</td> <td>Invoiced</td> </tr>  <tr class=\"widget-line\" ng-show=\"(isDataFound==false)\"> <td>No {{orderBy}}invoice found for your {{entityType}}</td> </tr>  <tr class=\"widget-line\" ng-show=\"(isDataFound==true)\" ng-repeat=\"entity in widget.content.entities\"> <td>{{entity.name}}</td> <td><i>{{entity.total_paid | mnoCurrency : entity.currency}}</i></td> <td><i>{{entity.total_due | mnoCurrency : entity.currency}}</i></td> <td><i>{{entity.total_invoiced | mnoCurrency : entity.currency}}</i></td> </tr> </table> </div> </div>");
$templateCache.put("widgets/invoices-list.tmpl.html","<div widget-invoices-list=\"\"> <div class=\"edit\" ng-show=\"widget.isEditMode\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div setting-dates-picker=\"\" parent-widget=\"widget\" class=\"part\" from=\"(widget.metadata.hist_parameters.from || defaultFrom)\" to=\"(widget.metadata.hist_parameters.to || defaultTo)\" keep-today=\"widget.metadata.hist_parameters.keep_today\" deferred=\"::datesPickerDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div ng-hide=\"widget.isEditMode\" class=\"widget-lines-container\"> <div ng-show=\"(isDataFound==true)\" setting-limit-entries=\"\" parent-widget=\"widget\" deferred=\"::limitEntriesDeferred\" selected=\"limitEntriesSelected\" max=\"widget.content.entities.length\" entries-label=\"limitEntriesLabel\">   <div ng-if=\"widget.width > 3\" class=\"row widget-line header\"> <div class=\"col-sm-4\">{{entityTypeCap}}</div> <div class=\"col-sm-7\"> <div class=\"row\"> <div class=\"col-xs-4\">Paid</div> <div class=\"col-xs-4\">Due</div> <div class=\"col-xs-4\">Invoiced</div> </div> </div> </div>  <div ng-if=\"widget.width > 3\" class=\"row widget-line\" ng-show=\"(isDataFound==true)\" ng-repeat=\"entity in widget.content.entities | limitTo:limitEntriesSelected\" tooltip-placement=\"top\" tooltip-html-unsafe=\"{{getInvoices(entity)}}\" tooltip-animation=\"false\" tooltip-append-to-body=\"true\" tooltip-class=\"impac-widgets-tooltip\"> <div class=\"col-sm-4\"><b>{{entity.name}}</b></div> <div class=\"col-sm-7\"> <div class=\"row\"> <div class=\"col-xs-4\"><i>{{entity.total_paid | mnoCurrency : entity.currency}}</i></div> <div class=\"col-xs-4\"><i>{{entity.total_due | mnoCurrency : entity.currency}}</i></div> <div class=\"col-xs-4\"><i>{{entity.total_invoiced | mnoCurrency : entity.currency}}</i></div> </div> </div> <div class=\"col-sm-1 text-right\"><i class=\"fa fa-info-circle\"></i></div> </div>   <div ng-if=\"widget.width <= 3\" class=\"row widget-line header\"> <div class=\"col-xs-12\" ng-show=\"orderBy == \'paid \'\">{{entityTypeCap}} - Total paid</div> <div class=\"col-xs-12\" ng-show=\"orderBy == \'due \'\">{{entityTypeCap}} - Total due</div> <div class=\"col-xs-12\" ng-hide=\"orderBy == \'paid \' || orderBy == \'due \'\">{{entityTypeCap}} - Total invoiced</div> </div>  <div ng-if=\"widget.width <= 3\" class=\"row widget-line\" ng-show=\"(isDataFound==true)\" ng-repeat=\"entity in widget.content.entities | limitTo:limitEntriesSelected\" tooltip-placement=\"top\" tooltip-html-unsafe=\"{{getInvoices(entity)}}\" tooltip-animation=\"false\" tooltip-append-to-body=\"true\" tooltip-class=\"impac-widgets-tooltip\"> <div class=\"col-xs-12\"><b>{{entity.name}}</b></div> <div class=\"col-xs-8\" ng-show=\"orderBy == \'paid \'\"><i>{{entity.total_paid | mnoCurrency : entity.currency}}</i></div> <div class=\"col-xs-8\" ng-show=\"orderBy == \'due \'\"><i>{{entity.total_due | mnoCurrency : entity.currency}}</i></div> <div class=\"col-xs-8\" ng-hide=\"orderBy == \'paid \' || orderBy == \'due \'\"><i>{{entity.total_invoiced | mnoCurrency : entity.currency}}</i></div> <div class=\"col-xs-4 text-right\"><i class=\"fa fa-info-circle\"></i></div> </div>  <div class=\"row widget-line\" ng-show=\"(isDataFound==false)\"> <div class=\"col-xs-12\">No {{orderBy}}invoice found for your {{entityType}}</div> </div> </div> </div> </div></div></div>");
$templateCache.put("widgets/invoices-summary.tmpl.html","<div widget-invoices-summary=\"\"> <div class=\"edit\" ng-show=\"widget.isEditMode\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div setting-dates-picker=\"\" parent-widget=\"widget\" class=\"part\" from=\"(widget.metadata.hist_parameters.from || defaultFrom)\" to=\"widget.metadata.hist_parameters.to\" keep-today=\"widget.metadata.hist_parameters.keep_today\" deferred=\"::datesPickerDeferred\"> <div setting-chart-filters=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::chartFiltersDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div align=\"center\" ng-hide=\"widget.isEditMode\"> <div ng-show=\"(isDataFound==true)\" class=\"chart-container\"> <div impac-chart=\"\" draw-trigger=\"::drawTrigger.promise\" deferred=\"::chartDeferred\"></div> <div class=\"legend\"> <span>{{widget.content.legend}}</span> </div> </div> <div ng-show=\"(isDataFound==false)\" common-data-not-found=\"\" widget-engine=\"::widget.category\"> </div> </div></div></div></div></div>");
$templateCache.put("widgets/sales-aged.tmpl.html","<div widget-sales-aged=\"\"> <div class=\"edit\" ng-show=\"widget.isEditMode\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div setting-time-range=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::timeRangeDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div ng-hide=\"widget.isEditMode\"> <div ng-show=\"(isDataFound==true)\" class=\"center\"> <div setting-param-selector=\"\" parent-widget=\"widget\" param=\"filter\" options=\"filterOptions\" selected=\"filter\" no-reload=\"\" truncate-no=\"60\" on-select=\"widget.format()\" style=\"text-align: center;\" deferred=\"::paramSelectorDeferred\"> <div class=\"chart-container\"> <div impac-chart=\"\" draw-trigger=\"::drawTrigger.promise\" deferred=\"::chartDeferred\"></div> </div> <div class=\"legend\">From {{widget.content.dates[0] | mnoDate : widget.metadata.hist_parameters.period}} to {{getLastDate() | mnoDate : widget.metadata.hist_parameters.period}}</div> <div class=\"widget-lines-container\">  <div class=\"row\"> <span ng-repeat=\"date in formattedDates track by $index\" class=\"hidden-xs\">  <div ng-if=\"$index % 4 == 0 && $index > 0\" class=\"clearfix dashed\"></div> <div class=\"col-sm-3 text-center\">  <div class=\"row widget-line\"> <div class=\"col-xs-12\"> {{date}} </div> </div>  <div class=\"row widget-line\"> <div ng-hide=\"filter.value == \'quantity_sold\'\" class=\"col-xs-12\" ng-class=\"getClassColor(getTotal($index - 1),getTotal($index))\"> {{getTotal($index) | mnoCurrency : widget.content.currency}} </div> <div ng-show=\"filter.value == \'quantity_sold\'\" class=\"col-xs-12\" ng-class=\"getClassColor(getTotal($index - 1),getTotal($index))\"> {{getTotal($index)}} </div> </div> </div> </span> </div>  <div ng-repeat=\"date in formattedDates track by $index\" class=\"row widget-line visible-xs\">  <div class=\"col-xs-6\"> {{date}} </div>  <div ng-hide=\"filter.value == \'quantity_sold\'\" class=\"col-xs-6 text-right\" ng-class=\"getClassColor(getTotal($index - 1),getTotal($index))\"> {{getTotal($index) | mnoCurrency : widget.content.currency}} </div> <div ng-show=\"filter.value == \'quantity_sold\'\" class=\"col-xs-6 text-right\" ng-class=\"getClassColor(getTotal($index - 1),getTotal($index))\"> {{getTotal($index)}} </div> </div> </div> </div> <div ng-show=\"(isDataFound==false)\" common-data-not-found=\"\" widget-engine=\"::widget.category\"> </div> </div> </div></div></div></div>");
$templateCache.put("widgets/sales-break-even.tmpl.html","<div widget-sales-break-even=\"\"> <div class=\"edit\" ng-show=\"widget.isEditMode\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div setting-time-range=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::timeRangeDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div ng-hide=\"widget.isEditMode\"> <div ng-show=\"(isDataFound==true)\" class=\"align-center\"> <div class=\"legend\">From {{widget.content.period.from | date : \'d MMM yyyy\'}} to {{widget.content.period.to | date : \'d MMM yyyy\'}}</div> <div class=\"block to-date\"> <div class=\"title\">Sales to Date</div> <div class=\"price\">{{widget.content.sales.to_date | mnoCurrency : widget.content.currency : false}}</div> Target: <span class=\"edit-target\" style=\"float: right;\" editable-text=\"threshold\" buttons=\"no\" onaftersave=\"updateSettings()\"> {{threshold | mnoCurrency : widget.content.currency : false}} </span> </div> <div ng-show=\"widget.content.break_even\" class=\"block to-breakeven\"> <div class=\"title\">Projection to Break-Even</div> <span ng-show=\"isTargetMet()\">Your sales already exceed your target by:</span> <div class=\"price\">{{getVariance() | mnoCurrency : widget.content.currency : false}}</div> <span ng-hide=\"isTargetMet()\"> Projected date: <span style=\"float: right;\">{{getProjectedDate() | date : \'d-MM-yy\'}}</span> <br> Opportunities to close: <span style=\"float: right;\">{{getOpportunitiesToClose()}}</span> </span> </div> <div ng-show=\"widget.content.break_even\" class=\"legend\">{{widget.content.break_even.eligible_opportunities}} eligible opportunities</div> <div ng-hide=\"widget.content.break_even\" class=\"block to-breakeven\"> <span class=\"edit-target\" editable-text=\"threshold\" buttons=\"no\" onaftersave=\"updateSettings()\"> <div class=\"define-text\">Click to define your sales target</div> </span> </div> </div> <div ng-show=\"(isDataFound==false)\" common-data-not-found=\"\" widget-engine=\"widget.category\"> </div> </div></div></div></div>");
$templateCache.put("widgets/sales-comparison.tmpl.html","<div widget-sales-comparison=\"\"> <div class=\"edit\" ng-show=\"widget.isEditMode\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div setting-time-range=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::timeRangeDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div ng-hide=\"widget.isEditMode\"> <div ng-show=\"(isDataFound==true)\" class=\"row\"> <div ng-class=\"widget.isExpanded() ? \'col-md-6\' : \'col-md-12\'\"> <div setting-width=\"\" parent-widget=\"widget\" min=\"6\" max=\"12\" class=\"settings width\" deferred=\"::widthDeferred\"> <div class=\"row legend center\"> Compare by: <div setting-param-selector=\"\" parent-widget=\"widget\" style=\"display: inline;\" param=\"criteria\" options=\"criteriaOptions\" selected=\"criteria\" truncate-no=\"30\" deferred=\"::paramSelectorDeferred1\"> | See: <div setting-param-selector=\"\" parent-widget=\"widget\" style=\"display: inline;\" param=\"filter\" options=\"filterOptions\" selected=\"filter\" truncate-no=\"30\" on-select=\"widget.format()\" no-reload=\"\" deferred=\"::paramSelectorDeferred2\"> </div> <div class=\"widget-lines-container\"> <div class=\"row widget-line header\"> <div class=\"col-xs-12\"> Total sales from {{widget.content.dates[0] | mnoDate : widget.metadata.hist_parameters.period}} to {{getLastDate() | mnoDate : widget.metadata.hist_parameters.period}} </div> </div> <div class=\"row lines-group\" ng-repeat=\"statement in widget.content.sales_comparison\"> <div class=\"col-xs-12\"> <div class=\"row widget-line\" ng-class=\"{selected: isSelected(statement)}\"> <div class=\"col-xs-1\" ng-click=\"toggleCollapsed(statement)\"> <i ng-show=\"(statement.sales && statement.sales.length)\" class=\"fa\" ng-class=\"isCollapsed(statement) ? \'fa-plus-square-o\' : \'fa-minus-square-o\'\"> </i></div> <div class=\"col-xs-7\" ng-click=\"toggleSelectedElement(statement)\"> <strong>{{statement.name | titleize}}</strong> </div> <div ng-show=\"filter.value == \'quantity_sold\'\" class=\"col-xs-4 text-right\" ng-click=\"toggleSelectedElement(statement)\"> <strong>{{getTotalForPeriod(statement)}}</strong> </div> <div ng-hide=\"filter.value == \'quantity_sold\'\" class=\"col-xs-4 text-right\" ng-click=\"toggleSelectedElement(statement)\"> <strong>{{getTotalForPeriod(statement) | mnoCurrency : statement.currency}}</strong> </div> </div> <div class=\"row\" collapse=\"isCollapsed(statement)\"> <div class=\"col-xs-12\"> <div class=\"row widget-line\" ng-click=\"toggleSelectedElement(sale)\" ng-repeat=\"sale in statement.sales\" ng-class=\"{selected: isSelected(sale)}\"> <div class=\"col-xs-7 col-xs-offset-1\"> {{sale.name}} </div> <div ng-show=\"filter.value == \'quantity_sold\'\" class=\"col-xs-4 text-right\"> {{getTotalForPeriod(sale)}} </div> <div ng-hide=\"filter.value == \'quantity_sold\'\" class=\"col-xs-4 text-right\"> {{getTotalForPeriod(sale) | mnoCurrency : sale.currency}} </div> </div> </div> </div> </div> </div> </div> </div> <div class=\"col-md-6 right-panel text-center\" ng-show=\"widget.isExpanded()\"> <div ng-show=\"hasElements()\"> <div class=\"chart-container\"> <div impac-chart=\"\" draw-trigger=\"::drawTrigger.promise\" deferred=\"::chartDeferred\"></div> </div> <div class=\"widget-lines-container\"> <div class=\"row widget-line header\"> <div class=\"col-xs-12\"> Total sales from {{widget.content.dates[0] | mnoDate : widget.metadata.hist_parameters.period}} to {{getLastDate() | mnoDate : widget.metadata.hist_parameters.period}} </div> </div> <div class=\"row widget-line\" ng-repeat=\"element in selectedElements\"> <div class=\"col-xs-1\"> <i class=\"fa fa-circle\" style=\"color: {{getElementChartColor($index)}}\"> </i></div> <div class=\"col-xs-7\"> {{element.name | titleize}} </div> <div class=\"col-xs-4 text-right\"> <i ng-show=\"filter.value == \'quantity_sold\'\">{{getTotalForPeriod(element)}}</i> <i ng-hide=\"filter.value == \'quantity_sold\'\">{{getTotalForPeriod(element) | mnoCurrency : element.currency}}</i> </div> </div> </div> </div> <div ng-hide=\"hasElements()\" class=\"no-element\"> Select one or several sales category(ies) to display the corresponding comparison. </div> </div> </div> <div ng-show=\"(isDataFound==false)\" common-data-not-found=\"\" widget-engine=\"::widget.category\"> </div> </div> </div></div></div></div></div></div>");
$templateCache.put("widgets/sales-customer-details.tmpl.html","<div widget-sales-customer-details=\"\"> <div class=\"edit\" ng-show=\"widget.isEditMode\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div setting-time-range=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::timeRangeDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div ng-hide=\"widget.isEditMode\"> <div ng-show=\"(isDataFound==true)\" class=\"row\"> <div ng-class=\"widget.isExpanded() ? \'col-md-6\' : \'col-md-12\'\"> <div setting-width=\"\" parent-widget=\"widget\" min=\"3\" max=\"6\" class=\"settings width\" deferred=\"::widthDeferred\"> <div setting-param-selector=\"\" parent-widget=\"widget\" param=\"customer_uid\" options=\"customersOptions\" selected=\"selectedCustomer\" class=\"row title\" deferred=\"::paramSelectorDeferred\"> <div class=\"details-container\"> <div class=\"row\"> <div class=\"col-md-4\"><label>Email</label></div> <div class=\"col-md-8\"><pre>{{getCustomer().email}}</pre></div> </div> <div class=\"row\"> <div class=\"col-md-4\"><label>Phone</label></div> <div class=\"col-md-8\"><pre>{{getCustomer().phone}}</pre></div> </div> <div class=\"row\"> <div class=\"col-md-4\"><label>Website</label></div> <div class=\"col-md-8\"><pre>{{getCustomer().website}}</pre></div> </div> <div class=\"row\"> <div class=\"col-md-4\"><label>Contact</label></div> <div class=\"col-md-8\"><pre>{{getCustomer().contact}}</pre></div> </div> <div class=\"row\"> <div class=\"col-md-4\"><label>City</label></div> <div class=\"col-md-8\"><pre>{{getCustomer().city}}</pre></div> </div> <div class=\"row\"> <div class=\"col-md-4\"><label>Country</label></div> <div class=\"col-md-8\"><pre>{{getCustomer().country}}</pre></div> </div> </div> </div> <div class=\"col-md-6 right-panel\" ng-show=\"widget.isExpanded()\"> <div class=\"details-container\"> <div class=\"row\" style=\"border-bottom: solid 1px #e6e6e6; margin-bottom: 10px; padding-bottom: 5px;\"> <div class=\"col-md-3\"><label>Address</label></div> <div class=\"col-md-9\"><pre>{{formatAddress(getCustomer().full_address)}}</pre></div> </div> <div class=\"row\"> <div class=\"col-md-12 center legend\">From {{getFromDate() | date : \'d MMM yyyy\'}} to {{getToDate() | date : \'d MMM yyyy\'}}:</div> </div> <div class=\"row\"> <div class=\"col-md-5\"><label>Total invoiced</label></div> <div class=\"col-md-7\"><pre>{{getCustomer().total_invoiced | mnoCurrency : getCustomer().currency}}</pre></div> </div> <div class=\"row\"> <div class=\"col-md-5\"><label>Total paid</label></div> <div class=\"col-md-7\"><pre>{{getCustomer().total_paid | mnoCurrency : getCustomer().currency}}</pre></div> </div> <div class=\"row\"> <div class=\"col-md-5\"><label>Total due</label></div> <div class=\"col-md-7\"><pre>{{getCustomer().total_due | mnoCurrency : getCustomer().currency}}</pre></div> </div> </div> </div> </div> <div ng-show=\"(isDataFound==false)\" common-data-not-found=\"\" widget-engine=\"::widget.category\"> </div> </div></div></div></div></div></div>");
$templateCache.put("widgets/sales-cycle.tmpl.html","<div widget-sales-cycle=\"\"> <div class=\"edit\" ng-show=\"widget.isEditMode\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div setting-params-picker=\"\" options=\"statusOptions\" param=\"status_selection\" parent-widget=\"widget\" class=\"part\" deferred=\"::paramsPickerDeferred\"> <div setting-time-range=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::timeRangeDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div align=\"center\" ng-hide=\"widget.isEditMode\"> <div ng-show=\"(isDataFound==true)\" class=\"chart-container\"> <div impac-chart=\"\" draw-trigger=\"::drawTrigger.promise\" deferred=\"::chartDeferred\"></div> <div class=\"legend\"> <span>Your sales cycle represents how much time your leads stay set to each status</span> </div> </div> <div ng-show=\"(isDataFound==false)\" common-data-not-found=\"\" widget-engine=\"::widget.category\"> </div> </div></div></div></div></div>");
$templateCache.put("widgets/sales-forecast.tmpl.html","<div widget-sales-forecast=\"\"> <div class=\"edit\" ng-show=\"widget.isEditMode\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div ng-hide=\"widget.isEditMode\"> <div ng-show=\"(isDataFound==true)\"> <div class=\"chart-container\"> <div impac-chart=\"\" draw-trigger=\"::drawTrigger.promise\" deferred=\"::chartDeferred\"></div> </div> <div class=\"widget-lines-container\"> <div class=\"row widget-line header\"> <div class=\"col-xs-12\">Projection on the next 6 months</div> </div> <div class=\"row lines-group\" ng-repeat=\"date in widget.content.dates.slice(6) track by $index\" ng-init=\"collapsed = true\"> <div class=\"col-xs-12\"> <div class=\"row widget-line\" ng-class=\"{main: widget.content.opportunities.slice(6)[$index].length > 0}\" ng-click=\"collapsed = !collapsed\"> <div class=\"col-xs-6\"> {{date | mnoDate : widget.metadata.hist_parameters.period}} </div> <div class=\"col-xs-6 text-right\"> <strong>{{widget.content.totals.slice(6)[$index] | mnoCurrency : widget.content.currency}}</strong> </div> </div> <div class=\"row\" collapse=\"collapsed\"> <div class=\"col-xs-12\"> <div class=\"row widget-line\" ng-repeat=\"opp in widget.content.opportunities.slice(6)[$index]\"> <div class=\"col-xs-6\"> {{opp.name}} </div> <div class=\"col-xs-6 text-right\"> {{getOpportunityAmount(opp) | mnoCurrency : getOpportunityCurrency(opp)}} </div> </div> </div> </div> </div> </div> </div> </div> <div ng-show=\"(isDataFound==false)\" common-data-not-found=\"\" widget-engine=\"::widget.category\"> </div> </div> </div></div>");
$templateCache.put("widgets/sales-growth.tmpl.html","<div widget-sales-growth=\"\"> <div class=\"edit\" ng-show=\"widget.isEditMode\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div setting-time-range=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::timeRangeDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div ng-hide=\"widget.isEditMode\"> <div ng-show=\"(isDataFound==true)\"> <div class=\"selector\"> <div setting-param-selector=\"\" parent-widget=\"widget\" param=\"product\" options=\"productOptions\" selected=\"product\" no-reload=\"\" on-select=\"widget.format()\" deferred=\"::paramSelectorDeferred1\"> <div ng-show=\"product.value != -1\" setting-param-selector=\"\" parent-widget=\"widget\" param=\"filter\" options=\"filterOptions\" selected=\"filter\" deferred=\"::paramSelectorDeferred2\"> </div> <div class=\"chart-container\" ng-class=\"{\'invisible\': product.value==-1}\"> <div impac-chart=\"\" draw-trigger=\"::drawTrigger.promise\" deferred=\"::chartDeferred\"></div> </div> <div ng-show=\"product.value != -1\" class=\"legend text-center\">{{getSelectedProduct().name}}</div> <div class=\"price text-center\" ng-hide=\"isDataQuantity || product.value == -1\" tooltip=\"total for last period\">{{getCurrentValue() | mnoCurrency : getSelectedProduct().currency}}</div> <div class=\"price text-center\" ng-show=\"isDataQuantity && product.value != -1\" tooltip=\"total for last period\">{{getCurrentValue()}}</div> </div> <div ng-show=\"(isDataFound==false)\" common-data-not-found=\"\" widget-engine=\"::widget.category\"> </div> </div></div></div></div></div></div>");
$templateCache.put("widgets/sales-leads-funnel.tmpl.html","<div widget-sales-leads-funnel=\"\"> <div class=\"edit\" ng-show=\"widget.isEditMode\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div setting-params-picker=\"\" options=\"statusOptions\" param=\"status_selection\" parent-widget=\"widget\" class=\"part\" deferred=\"::paramsPickerDeferred\"> <div setting-time-range=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::timeRangeDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div ng-hide=\"widget.isEditMode\"> <div ng-show=\"(isDataFound==true)\" class=\"row\"> <div ng-class=\"widget.isExpanded() ? \'col-md-6\' : \'col-md-12\'\"> <div setting-width=\"\" parent-widget=\"widget\" min=\"6\" max=\"12\" class=\"settings width\" deferred=\"::widthDeferred\"> <div class=\"legend\">Your leads sales funnel from {{widget.content.from | date : \'d MMM yyyy\'}} to {{widget.content.to | date : \'d MMM yyyy\'}}</div> <div class=\"funnel-container\"> <div class=\"tile\" ng-repeat=\"elem in funnel\" ng-click=\"toggleSelectStatus(elem.status)\"> <div class=\"colored-area\" ng-style=\"elem.coloredWidth\" ng-class=\"isSelected(elem.status) ? \'selected\' : \'\'\">{{elem.number}}</div> <div class=\"main-text\" ng-style=\"elem.statusWidth\">{{elem.status | titleize}}</div> </div> </div> </div> <div class=\"col-md-6 right-panel text-center\" ng-show=\"widget.isExpanded()\"> <div ng-hide=\"selectedStatus\" class=\"currency\"> Select a status to display a list of the corresponding leads </div> <div ng-show=\"selectedStatus\" class=\"widget-lines-container\"> <div class=\"row lines-group widget-line\" ng-repeat=\"lead in getSelectedLeads()\" tooltip-trigger=\"mouseenter\" tooltip-placement=\"top\" tooltip-html-unsafe=\"{{getLeadDescription(lead)}}\" tooltip-animation=\"false\" tooltip-append-to-body=\"true\" tooltip-class=\"impac-widgets-tooltip\"> <div class=\"col-sm-7\"> {{lead.first_name | titleize}} {{lead.last_name | titleize}} <span ng-show=\"lead.organization\">({{lead.organization}})</span> </div> <div class=\"col-sm-5 text-right\"> <strong>{{lead.lead_status | titleize}}</strong> </div> </div> </div> </div> </div> <div ng-show=\"(isDataFound==false)\" common-data-not-found=\"\" widget-engine=\"::widget.category\"> </div> </div> </div></div></div></div></div>");
$templateCache.put("widgets/sales-leads-list.tmpl.html","<div widget-sales-leads-list=\"\"> <div class=\"edit\" ng-show=\"widget.isEditMode\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div ng-hide=\"widget.isEditMode\"> <div ng-show=\"(isDataFound==true)\"> <div class=\"widget-lines-container\"> <div class=\"row lines-group widget-line\" ng-repeat=\"lead in widget.content.leads\" tooltip-trigger=\"mouseenter\" tooltip-placement=\"top\" tooltip-html-unsafe=\"{{getLeadDescription(lead)}}\" tooltip-animation=\"false\" tooltip-append-to-body=\"true\" tooltip-class=\"impac-widgets-tooltip\"> <div class=\"col-sm-7\"> {{lead.first_name | titleize}} {{lead.last_name | titleize}} <span ng-show=\"lead.organization\">({{lead.organization}})</span> </div> <div class=\"col-sm-5 text-right\"> <strong>{{lead.lead_status | titleize}}</strong> </div> </div> </div> </div> <div ng-show=\"(isDataFound==false)\" common-data-not-found=\"\" widget-engine=\"::widget.category\"> </div> </div> </div></div>");
$templateCache.put("widgets/sales-list.tmpl.html","<div widget-sales-list=\"\"> <div class=\"edit\" ng-show=\"widget.isEditMode\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div ng-hide=\"widget.isEditMode\"> <div class=\"selector\"> <span setting-param-selector=\"\" parent-widget=\"widget\" param=\"filter\" options=\"filterOptions\" selected=\"filter\" deferred=\"::paramSelectorDeferred\"> <span setting-dates-picker=\"\" parent-widget=\"widget\" from=\"widget.metadata.hist_parameters.from\" to=\"widget.metadata.hist_parameters.to\" keep-today=\"widget.metadata.hist_parameters.keep_today\" deferred=\"::datesPickerDeferred\"> </span></span></div> <div class=\"widget-lines-container\" ng-show=\"(isDataFound==true)\"> <div class=\"row lines-group\" ng-repeat=\"company in widget.content.summary\"> <div class=\"col-xs-12\"> <div class=\"row widget-line\"> <div class=\"col-xs-1\" ng-click=\"toggleCollapsed(company.name)\" style=\"cursor: pointer;\"> <i class=\"fa\" ng-class=\"isCollapsed(company.name) ? \'fa-plus-square-o\' : \'fa-minus-square-o\'\"> </i></div> <div class=\"col-xs-7\"> <strong>{{company.name | titleize}}</strong> </div> <div class=\"col-xs-4 text-right\" ng-show=\"{{filter.value.match(\'quantity\')}}\"> <strong>{{company.total}}</strong> </div> <div class=\"col-xs-4 text-right\" ng-hide=\"{{filter.value.match(\'quantity\')}}\"> <strong>{{company.total | mnoCurrency : company.currency}}</strong> </div> </div> <div class=\"row\" collapse=\"isCollapsed(company.name)\"> <div class=\"col-xs-12\"> <div class=\"row widget-line\" ng-repeat=\"product in company.products\"> <div class=\"col-xs-7 col-xs-offset-1\"> {{product.name | titleize}} </div> <div class=\"col-xs-4 text-right\" ng-show=\"{{filter.value.match(\'quantity\')}}\"> <strong>{{product.total}}</strong> </div> <div class=\"col-xs-4 text-right\" ng-hide=\"{{filter.value.match(\'quantity\')}}\"> <strong>{{product.total | mnoCurrency : product.currency}}</strong> </div> </div> </div> </div> </div> </div> <div class=\"data-not-found\" ng-show=\"(isDataFound==false)\"> <div class=\"message\">No data found for this time range<br> Please select another one</div> </div> </div> </div> </div></div>");
$templateCache.put("widgets/sales-margin.tmpl.html","<div widget-sales-margin=\"\"> <div ng-show=\"widget.isEditMode\" class=\"edit\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div setting-time-range=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::timeRangeDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div ng-hide=\"widget.isEditMode\"> <div ng-show=\"(isDataFound==true)\"> <div setting-hist-mode=\"\" parent-widget=\"widget\" deferred=\"::histModeDeferred\"> <div ng-hide=\"widget.isHistoryMode\" class=\"current\"> <div class=\"price\"> {{ getTotalMargin() | mnoCurrency : getCurrency()}} </div> <div class=\"legend\"> Total sold - Total purchased <br> {{getTimeSpan()}} <br> <div setting-param-selector=\"\" parent-widget=\"widget\" param=\"filter\" options=\"filterOptions\" selected=\"filter\" no-reload=\"\" on-select=\"widget.format()\" deferred=\"::paramSelectorDeferred\"> </div> </div> <div class=\"history chart-container\" ng-class=\"{\'invisible\': !widget.isHistoryMode}\"> <div impac-chart=\"\" draw-trigger=\"::drawTrigger.promise\" deferred=\"::chartDeferred\"></div> <div class=\"legend\">Total sold - Total purchased</div> </div> </div> <div ng-show=\"(isDataFound==false)\" common-data-not-found=\"\" widget-engine=\"::widget.category\"> </div> </div> </div></div></div></div></div>");
$templateCache.put("widgets/sales-number-of-leads.tmpl.html","<div widget-sales-number-of-leads=\"\"> <div class=\"edit\" ng-show=\"widget.isEditMode\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div ng-hide=\"widget.isEditMode\"> <div ng-show=\"(isDataFound==true)\" class=\"align-center\"> <div class=\"selector\"> Leads for this <span setting-param-selector=\"\" parent-widget=\"widget\" param=\"period\" options=\"periodOptions\" selected=\"period\" deferred=\"::paramSelectorDeferred\"> </span></div> <div class=\"stats\"> <div class=\"stat row align-left\" ng-repeat=\"carac in [\'new\', \'converted\', \'lost\']\"> <div class=\"col-md-6 title\" style=\"padding: 0px;\">{{carac | titleize}}</div> <div class=\"col-md-6\" style=\"padding: 0px;\"> <span class=\"variation\" ng-class=\"formatNumberOfLeads(carac).color\">{{formatNumberOfLeads(carac).variation}}</span> <span class=\"nominal\">{{formatNumberOfLeads(carac).nominal}}</span> </div> </div> </div> <div class=\"legend\"> {{widget.content.number_of_leads.total[1]}} leads in total </div> </div> <div ng-show=\"(isDataFound==false)\" common-data-not-found=\"\" widget-engine=\"::widget.category\"> </div> </div></div></div>");
$templateCache.put("widgets/sales-opportunities-funnel.tmpl.html","<div widget-sales-opportunities-funnel=\"\"> <div class=\"edit\" ng-show=\"widget.isEditMode\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div setting-params-picker=\"\" options=\"statusOptions\" param=\"sales_stage_selection\" parent-widget=\"widget\" class=\"part\" deferred=\"::paramsPickerDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div ng-hide=\"widget.isEditMode\"> <div ng-show=\"(isDataFound==true)\" class=\"row\"> <div ng-class=\"widget.isExpanded() ? \'col-md-6\': \'col-md-12\'\"> <div setting-width=\"\" parent-widget=\"widget\" min=\"6\" max=\"12\" class=\"settings width\" deferred=\"::widthDeferred\"> <div class=\"legend\">Your opportunities, sorted by sales stage</div> <div class=\"funnel-container\"> <div class=\"tile\" ng-repeat=\"elem in funnel\" ng-click=\"toggleSelectStatus(elem.status)\"> <div class=\"colored-area\" ng-style=\"elem.coloredWidth\" ng-class=\"isSelected(elem.status) ? \'selected\' : \'\'\">{{elem.number}}</div> <div class=\"main-text\" ng-style=\"elem.statusWidth\">{{elem.status | titleize}}</div> </div> </div> </div> <div class=\"col-md-6 right-panel text-center\" ng-show=\"widget.isExpanded()\"> <div ng-hide=\"selectedStatus\" class=\"currency\"> Select a sales stage to display a list of the corresponding opportunities </div> <div ng-show=\"selectedStatus\" class=\"widget-lines-container\"> <div class=\"row lines-group widget-line\" ng-repeat=\"opp in getSelectedOpportunities()\"> <div class=\"col-xs-6\"> {{opp.name | titleize}} </div> <div class=\"col-xs-6 text-right\"><strong>{{getOppDetails(opp)}}</strong></div> </div> </div> </div> </div> <div ng-show=\"(isDataFound==false)\" common-data-not-found=\"\" widget-engine=\"::widget.category\"> </div> </div> </div></div></div></div>");
$templateCache.put("widgets/sales-performance.tmpl.html","<div widget-sales-performance=\"\"> <div class=\"edit\" ng-show=\"widget.isEditMode\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div ng-hide=\"widget.isEditMode\"> <div ng-show=\"(isDataFound==true)\" class=\"row\"> <div ng-class=\"widget.isExpanded() ? \'col-md-6\' : \'col-md-12\'\"> <div setting-width=\"\" parent-widget=\"widget\" min=\"6\" max=\"12\" class=\"settings width\" deferred=\"::widthDeferred\"> <div class=\"widget-lines-container\"> <div class=\"row widget-line header\"> <div class=\"col-xs-5\"> from {{widget.content.dates[0] | mnoDate : widget.metadata.hist_parameters.period}} to {{widget.content.dates[widget.content.dates.length - 1] | mnoDate : widget.metadata.hist_parameters.period}} </div> <div class=\"col-xs-3 text-right\"> Win ratio </div> <div class=\"col-xs-4 text-right\"> Total won </div> </div> <div class=\"row lines-group\" ng-repeat=\"assignee in widget.content.assignees\" ng-click=\"toggleSelectedElement(assignee)\"> <div class=\"col-xs-12\"> <div class=\"row widget-line\" ng-class=\"{\'selected\': isSelected(assignee)}\"> <div class=\"col-xs-5\">{{assignee.name | titleize}}</div> <div class=\"col-xs-3 text-right\">{{assignee.win_ratio | mnoCurrency : \'%\'}}</div> <div class=\"col-xs-4 text-right\">{{assignee.total_won | mnoCurrency}}</div> </div> </div> </div> </div> </div> <div class=\"col-md-6 right-panel text-center\" ng-show=\"widget.isExpanded()\"> <div ng-show=\"selectedElement\"> <h4>{{selectedElement.name | titleize}}</h4> <div class=\"chart-container\"> <div impac-chart=\"\" draw-trigger=\"::drawTrigger.promise\" deferred=\"::chartDeferred\"></div> <div class=\"legend\">Total won (last 12 months): {{selectedElement.total_won | mnoCurrency}}</div> </div> <div class=\"widget-lines-container\"> <div class=\"row lines-group\" ng-init=\"collapsedWon=false\"> <div class=\"col-xs-12\"> <div class=\"row widget-line\" ng-click=\"collapsedWon=!collapsedWon\"> <div class=\"col-xs-10\"> <strong>Closed Won</strong> </div> <div class=\"col-xs-2 text-right\"> <strong>{{getWonOpportunities(selectedElement).length}}</strong> </div> </div> <div class=\"row\" collapse=\"collapsedWon\"> <div class=\"col-xs-12\"> <div class=\"row widget-line no-select\" ng-repeat=\"opp in getWonOpportunities(selectedElement)\"> <div class=\"col-xs-6\">{{opp.name}}</div> <div class=\"col-xs-3 text-right\">{{getCloseDate(opp)}}</div> <div class=\"col-xs-3 text-right\">{{opp.amount.amount | mnoCurrency}}</div> </div> </div> </div> </div> </div> <div class=\"row lines-group\" ng-init=\"collapsedLost=false\"> <div class=\"col-xs-12\"> <div class=\"row widget-line\" ng-click=\"collapsedLost=!collapsedLost\"> <div class=\"col-xs-10\"> <strong>Closed Lost</strong> </div> <div class=\"col-xs-2 text-right\"> <strong>{{getLostOpportunities(selectedElement).length}}</strong> </div> </div> <div class=\"row\" collapse=\"collapsedLost\"> <div class=\"col-xs-12\"> <div class=\"row widget-line no-select\" ng-repeat=\"opp in getLostOpportunities(selectedElement)\"> <div class=\"col-xs-6\">{{opp.name}}</div> <div class=\"col-xs-3 text-right\">{{getCloseDate(opp)}}</div> <div class=\"col-xs-3 text-right\">{{opp.amount.amount | mnoCurrency}}</div> </div> </div> </div> </div> </div> </div> </div> <div ng-hide=\"selectedElement\" class=\"no-element\"> Select an employee or team to display the corresponding opportunities won/lost. </div> </div> </div> <div ng-show=\"(isDataFound==false)\" common-data-not-found=\"\" widget-engine=\"::widget.category\"> </div> </div> </div></div></div>");
$templateCache.put("widgets/sales-segmented-turnover.tmpl.html","<div widget-sales-segmented-turnover=\"\"> <div class=\"edit\" ng-show=\"widget.isEditMode\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div setting-time-range=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::timeRangeDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div align=\"center\" ng-hide=\"widget.isEditMode\"> <div ng-show=\"(isDataFound==true)\" class=\"row\"> <div ng-class=\"widget.isExpanded() ? \'col-md-6\' : \'col-md-12\'\"> <div setting-width=\"\" parent-widget=\"widget\" min=\"3\" max=\"6\" class=\"settings width\" deferred=\"::widthDeferred\"></div> <div class=\"selector\">Filter: <span setting-param-selector=\"\" parent-widget=\"widget\" param=\"filter\" options=\"filterOptions\" selected=\"filter\" deferred=\"::paramSelectorDeferred\"></span></div> <div class=\"chart-container\"> <div impac-chart=\"\" draw-trigger=\"::drawTrigger.promise\" deferred=\"::chartDeferred\"></div> </div> <div class=\"widget-lines-container\"> <div class=\"row widget-line header\"> <div class=\"col-xs-12\">Average price range</div> </div> <div class=\"row widget-line\" ng-repeat=\"range in widget.content.ranges\"> <div class=\"col-xs-2\"> <i class=\"fa fa-circle\" style=\"color: {{getColorByIndex($index)}}\"> </i></div> <div class=\"col-xs-6\"> {{getRangeLabel(range.label)}} </div> <div class=\"col-xs-4 text-right\"> <i>{{range.percentage}}%</i> </div> </div> </div> </div> <div class=\"col-md-6 right-panel\" ng-show=\"widget.isExpanded()\"> <i class=\"fa fa-info-circle\" style=\"float: left;\" tooltip=\"This widget segments your revenue by products average price range and propose an analysis of its composition\"> <h3 style=\"margin: 25px 10px; text-align: center;\">{{getMaxRange().percentage.toFixed()}}% of your revenue comes from products sold at an average price between {{getMaxRange().label.split(\'-\')[0] | mnoCurrency : widget.content.currency}} and {{getMaxRange().label.split(\'-\')[1] | mnoCurrency : widget.content.currency}}.</h3> <div class=\"analysis hidden-md\">{{getAnalysis()}}</div> </i></div> </div> <div ng-show=\"(isDataFound==false)\" common-data-not-found=\"\" widget-engine=\"::widget.category\"> </div> </div> </div></div></div>");
$templateCache.put("widgets/sales-summary.tmpl.html","<div widget-sales-summary=\"\"> <div class=\"edit\" ng-show=\"widget.isEditMode\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div setting-chart-filters=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::chartFiltersDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div align=\"center\" ng-hide=\"widget.isEditMode\"> <div class=\"selector\"> <span setting-param-selector=\"\" parent-widget=\"widget\" param=\"filter\" options=\"filterOptions\" selected=\"filter\" deferred=\"::paramSelectorDeferred\"> <span setting-dates-picker=\"\" parent-widget=\"widget\" from=\"widget.metadata.hist_parameters.from\" to=\"widget.metadata.hist_parameters.to\" keep-today=\"widget.metadata.hist_parameters.keep_today\" deferred=\"::datesPickerDeferred\"> </span></span></div> <div class=\"chart-container\" ng-show=\"(isDataFound==true)\"> <div impac-chart=\"\" draw-trigger=\"::drawTrigger.promise\" deferred=\"::chartDeferred\"></div> </div> <div class=\"data-not-found\" ng-show=\"(isDataFound==false)\"> <div class=\"message\">No data found for this time range<br> Please select another one</div> </div> </div> </div></div></div>");
$templateCache.put("widgets/sales-top-opportunities.tmpl.html","<div widget-sales-top-opportunities=\"\"> <div class=\"edit\" ng-show=\"widget.isEditMode\"> <h4>Widget settings</h4> <div setting-organizations=\"\" parent-widget=\"widget\" class=\"part\" deferred=\"::orgDeferred\"> <div class=\"bottom-buttons\" align=\"right\"> <button class=\"btn btn-default\" ng-click=\"initSettings()\">Cancel</button> <button class=\"btn btn-warning\" ng-click=\"updateSettings()\">Save</button> </div> </div> <div ng-hide=\"widget.isEditMode\"> <div ng-show=\"(isDataFound==true)\"> <div class=\"legend\"> Total potential: <b>{{widget.content.total_potential | mnoCurrency : widget.content.currency || \"AUD\"}}</b> - <b>{{widget.content.eligible_opportunities}}</b> eligible opportunities </div> <div class=\"opps-container\"> <div class=\"tile\" ng-repeat=\"opp in widget.content.opportunities track by $index\" ng-class=\"getOppClass($index)\"> <div class=\"colored-area\">{{$index +1 }}</div> <div class=\"main-text\"> {{opp.name | titleize}} <br> <i style=\"font-size: 13px;\">{{getOppDetails(opp)}}</i> </div> </div> </div> </div> <div ng-show=\"(isDataFound==false)\" common-data-not-found=\"\" widget-engine=\"::widget.category\"> </div> </div></div></div>");
$templateCache.put("widgets-common/data-not-found.tmpl.html","<div class=\"data-not-found\"> <img id=\"not-found-bg\"> <div class=\"message\"> {{content.mainMessage}} <a ng-show=\"showAlertsTrigger\" ng-click=\"onDisplayAlerts()\"> <i class=\"fa fa-warning\"> Find out why </i></a> <a ng-if=\"hasCallbackUrl\" ng-hide=\"showAlertsTrigger\" ng-click=\"content.linkUrlCallback()\"> {{content.linkMessage}} </a> <a ng-if=\"!hasCallbackUrl\" ng-hide=\"showAlertsTrigger\" ng-href=\"{{content.linkUrl}}\" target=\"{{content.linkTarget}}\"> {{content.linkMessage}} </a> </div> </div> ");
$templateCache.put("widgets-common/editable-title.tmpl.html","<div class=\"visible-lg title-wrapper\" ng-if=\"parentWidget.width >= 3 && parentWidget.width < 6\"> <div ng-show=\"parentWidget.hasEditAbility\" class=\"title\" editable-text=\"parentWidget.name\" onaftersave=\"updateName()\"> {{parentWidget.name | truncate:19:\".\"}} </div> <div ng-hide=\"parentWidget.hasEditAbility\" class=\"title\"> {{parentWidget.name | truncate:19:\".\"}} </div> </div> <div class=\"visible-lg title-wrapper\" ng-if=\"parentWidget.width >= 6\"> <div ng-show=\"parentWidget.hasEditAbility\" class=\"title\" editable-text=\"parentWidget.name\" onaftersave=\"updateName()\"> {{parentWidget.name | truncate:80:\".\"}} </div> <div ng-hide=\"parentWidget.hasEditAbility\" class=\"title\"> {{parentWidget.name | truncate:80:\".\"}} </div> </div> <div class=\"visible-md visible-sm title-wrapper\" ng-if=\"parentWidget.width == 3 && parentWidget.width < 6\"> <div ng-show=\"parentWidget.hasEditAbility\" class=\"title\" editable-text=\"parentWidget.name\" onaftersave=\"updateName()\"> {{parentWidget.name | truncate:13:\".\"}} </div> <div ng-hide=\"parentWidget.hasEditAbility\" class=\"title\"> {{parentWidget.name | truncate:13:\".\"}} </div> </div> <div class=\"visible-md visible-sm title-wrapper\" ng-if=\"parentWidget.width >= 6\"> <div ng-show=\"parentWidget.hasEditAbility\" class=\"title\" editable-text=\"parentWidget.name\" onaftersave=\"updateName()\"> {{parentWidget.name | truncate:60:\".\"}} </div> <div ng-hide=\"parentWidget.hasEditAbility\" class=\"title\"> {{parentWidget.name | truncate:60:\".\"}} </div> </div> <div class=\"visible-xs title-wrapper\">  <div class=\"title\"> {{parentWidget.name | truncate:25:\".\"}} </div> </div> ");
$templateCache.put("widgets-common/top-buttons.tmpl.html","<div id=\"module__top-buttons\"> <div class=\"top-buttons-wrapper\"> <button class=\"btn top-button btn-refresh\" ng-click=\"onRefresh({refreshCache: true})\"> <i class=\"fa fa-refresh\"></i> <span class=\"text-hide\">Refresh widget</span> </button> <button class=\"btn top-button btn-edit\" ng-click=\"toggleEditMode()\" ng-show=\"parentWidget.hasEditAbility\" ng-class=\"{\'edit-mode\': parentWidget.isEditMode}\"> <i class=\"fa fa-cog fa-lg\"></i> <span class=\"text-hide\">Edit widget</span> </button> <button class=\"btn top-button btn-close\" ng-click=\"showConfirmDelete = !showConfirmDelete\" ng-show=\"parentWidget.hasDeleteAbility\"> <i class=\"fa fa-times-circle-o fa-lg\"></i> <span class=\"text-hide\">Delete widget</span> </button> </div> <div class=\"confirm-delete-popover\" ng-show=\"showConfirmDelete\"> <h4>Are you sure you want to delete this widget ?</h4> <p>(it will not erase your data)</p> <div ng-hide=\"isDeletePopoverLoading\"> <button ng-click=\"showConfirmDelete = false\" class=\"btn btn-sm btn-default\">Cancel</button> <button ng-click=\"deleteWidget()\" class=\"btn btn-sm btn-danger\" style=\"margin-left: 10px;\">Delete</button> </div> <div ng-show=\"isDeletePopoverLoading\" class=\"loader\" align=\"center\"> <div> <i class=\"fa fa-spinner fa-pulse fa-4x\"></i> </div> </div> </div> </div> ");
$templateCache.put("widgets-settings/account.tmpl.html","<h5 ng-if=\"showLabel\">{{label}}</h5> <div class=\"input-group settings select-account\"> <select ng-model=\"parentWidget.selectedAccount\" ng-change=\"onAccountSelected()\" ng-options=\"formatLabel(account) for account in parentWidget.content.account_list track by account.uid\" class=\"form-control\"> </select></div> ");
$templateCache.put("widgets-settings/chart-filters.tmpl.html","<div class=\"settings chart-filters\"> <h5>Chart filters</h5> <div class=\"row\"> <div class=\"col-md-6\"> <input type=\"radio\" ng-model=\"filterCriteria\" value=\"number\"> <label for=\"number\" ng-click=\"filterCriteria = \'number\'\">Top {{filterValueNumber}} {{entityType}}</label> </div> <div class=\"col-md-6\"> <input type=\"range\" ng-model=\"filterValueNumber\" ng-change=\"filterCriteria = \'number\'\" min=\"3\" max=\"{{maxEntities}}\" step=\"1\"> </div> </div> <div class=\"row\"> <div class=\"col-md-6\"> <input type=\"radio\" ng-model=\"filterCriteria\" value=\"percentage\"> <label for=\"percentage\" ng-click=\"filterCriteria = \'percentage\'\">Top {{filterValuePercentage}}% {{filterLabel}}</label> </div> <div class=\"col-md-6\"> <input type=\"range\" ng-model=\"filterValuePercentage\" ng-change=\"filterCriteria = \'percentage\'\" min=\"20\" max=\"100\" step=\"5\"> </div> </div> </div> ");
$templateCache.put("widgets-settings/dates-picker.tmpl.html","<span class=\"settings dates-picker\"> <h5>Time range</h5> <span class=\"buttons\"> <button class=\"btn btn-sm btn-default\" ng-click=\"calendarFrom.toggle()\" datepicker-popup=\"\" ng-model=\"calendarFrom.value\" is-open=\"calendarFrom.opened\" ng-change=\"showApplyButton()\" max-date=\"calendarTo.value\"> {{ calendarFrom.value | date : \'yyyy-MM-dd\' }} </button> to <button class=\"btn btn-sm btn-default\" ng-click=\"calendarTo.toggle()\" datepicker-popup=\"\" ng-model=\"calendarTo.value\" is-open=\"calendarTo.opened\" ng-change=\"showApplyButton()\" min-date=\"calendarFrom.value\" on-open-focus=\"false\"> {{ calendarTo.value | date : \'yyyy-MM-dd\' }} </button> <button class=\"btn btn-sm btn-success\" tooltip=\"Apply changes\" ng-show=\"changed && !parentWidget.isEditMode\" ng-click=\"applyChanges()\"> <i class=\"fa fa-check\"> </i></button> </span> </span>");
$templateCache.put("widgets-settings/hist-mode.tmpl.html","<div class=\"settings hist-mode-choser\"> <div align=\"center\" class=\"options\"> <a ng-click=\"toggleHistMode(\'current\')\" ng-class=\"!parentWidget.isHistoryMode ? \'active\' : \'inactive\'\">current</a> | <a ng-click=\"toggleHistMode(\'history\')\" ng-class=\"parentWidget.isHistoryMode ? \'active\' : \'inactive\'\">history</a> </div> <div class=\"{{parentWidget.isHistoryMode ? \'arrow-container right\' : \'arrow-container left\'}}\"> <div class=\"arrow\"> <div class=\"arrow-border\"> </div> </div></div></div>");
$templateCache.put("widgets-settings/limit-entries.tmpl.html","<div class=\"settings limit-entries\"> {{ entriesLabel ? \'Top\' : \'Display\' }} <span ng-repeat=\"option in options | filter:isOptionValid:option track by $index\"> {{ $index!=0 ? \' |\' : \'\' }} <a target=\"#\" ng-click=\"selectOption(option)\" class=\"option\" ng-class=\"{badge: option==selected}\">{{ option }}</a> </span> <span ng-if=\"max\"> | <a target=\"#\" ng-click=\"selectOption(max)\" class=\"option\" ng-class=\"{badge: (!selected || selected==max)}\">{{ max }}</a> </span> {{entriesLabel || \'entries\'}} </div>");
$templateCache.put("widgets-settings/organizations.tmpl.html","<div class=\"settings organizations\"> <h5>Select Companies</h5> <div class=\"widget-lines-container\"> <div class=\"widget-line\" ng-repeat=\"org in dashboardOrganizations\"> {{org.label}} <i ng-class=\"isOrganizationSelected(org.uid) ? \'fa fa-toggle-on\' : \'fa fa-toggle-off\'\" ng-click=\"toggleSelectOrganization(org.uid)\" tooltip=\"{{isOrganizationSelected(org.uid) ? \'disable\' : \'enable\'}}\" tooltip-append-to-body=\"true\"> </i></div> </div> </div>");
$templateCache.put("widgets-settings/param-selector.tmpl.html","<span class=\"settings param-selector\"> <a ng-click=\"toggleShowOptions()\">{{selected.label | titleize | truncate : getTruncateValue() : \"...\" : false}} <i class=\"fa fa-chevron-down\"></i></a> <div class=\"options-container\" collapse=\"!showOptions\"> <div ng-repeat=\"option in options\" ng-click=\"selectOption(option)\"> {{option.label | titleize}} </div> </div> </span>");
$templateCache.put("widgets-settings/params-checkboxes.tmpl.html","<div ng-repeat=\"parameter in options track by $index\" class=\"settings params-checkboxes\"> <label> <input type=\"checkbox\" ng-model=\"parameter.value\" ng-change=\"parameter.onChangeCallback()\"> <span>{{parameter.label}}</span> </label> </div> ");
$templateCache.put("widgets-settings/params-picker.tmpl.html","<h5>{{formattedParam | titleize}}</h5> <div class=\"settings params-picker\"> <div style=\"margin-bottom: 8px;\"> The selected criteria will be displayed in this order (drag/drop to modify): </div> <div ui:sortable=\"sortableOptions\" ng-model=\"options\" class=\"input-group\"> <span ng-repeat=\"parameter in options track by $index\" class=\"parameter\" ng-class=\"!parameter.selected ? \'unchecked\' : \'\'\"> <span class=\"badge\">{{$index + 1}}</span> {{parameter.label | titleize}} <input type=\"checkbox\" ng-model=\"parameter.selected\"> </span> </div> </div>");
$templateCache.put("widgets-settings/time-range.tmpl.html","<h5>Time range</h5> <div class=\"settings time-range\"> <div class=\"row\"> <div class=\"col-md-12\"> Show last {{numberOfPeriods}} {{periodToUnit()}} </div> </div> <div class=\"row input-group\" align=\"center\" style=\"margin: 0; margin-top: 3px;\"> <div class=\"col-xs-6\" style=\"padding: 0; padding-right: 5px;\"> <select ng-model=\"selectedPeriod\" ng-options=\"period.toLowerCase() for period in PERIODS track by period\" class=\"form-control\" style=\"height: 22px; margin-top: 0; padding: 0; padding-left: 1px; padding-bottom: 1px;\"></select> </div> <div class=\"col-xs-6\" style=\"padding: 0;\"> <input type=\"range\" ng-model=\"numberOfPeriods\" min=\"1\" max=\"12\" step=\"1\"> </div> </div> </div>");
$templateCache.put("widgets-settings/width.tmpl.html","<i class=\"fa fa-angle-double-left reduce\" ng-show=\"expanded\" ng-click=\"parentWidget.toggleExpanded()\" tooltip=\"reduce\"> <i class=\"fa fa-angle-double-right expand\" ng-hide=\"expanded\" ng-click=\"parentWidget.toggleExpanded()\" tooltip=\"expand\"></i></i>");}]);
}());
(function() {
  angular.module('impac.filters.mno-currency', []).filter('mnoCurrency', [
    "$filter", function($filter) {
      return function(amount, currency, showName) {
        var s;
        if (showName == null) {
          showName = true;
        }
        if (amount == null) {
          return "";
        }
        s = $filter('currency')(amount);
        s = s.replace('(', '-');
        s = s.replace(')', '');
        if (currency == null) {
          return s;
        }
        if (currency[currency.length - 1].toLowerCase() === 'd') {
          if (showName) {
            return s + " " + currency;
          } else {
            return s;
          }
        } else if (currency === "EUR") {
          s = s.replace('$', '');
          s = s.replace(',', ' ');
          s = s.replace('.', ',');
          return s + " €";
        } else {
          s = s.replace('$', '');
          if (!currency.match(/[A-Z]{3}/) && currency !== '%' && currency !== '(ratio)') {
            s = parseInt(s);
          }
          if (showName) {
            return s + " " + currency;
          } else {
            return s;
          }
        }
      };
    }
  ]);

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbHRlcnMvbW5vLWN1cnJlbmN5LmpzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLQTtFQUFBLE9BQU8sQ0FBQyxNQUFSLENBQWUsNEJBQWYsRUFBNkMsRUFBN0MsQ0FBZ0QsQ0FBQyxNQUFqRCxDQUF3RCxhQUF4RCxFQUF1RTtJQUFDLFNBQUQsRUFBWSxTQUFDLE9BQUQ7YUFDakYsU0FBQyxNQUFELEVBQVMsUUFBVCxFQUFtQixRQUFuQjtBQUVFLFlBQUE7O1VBRmlCLFdBQVM7O1FBRTFCLElBQWlCLGNBQWpCO0FBQUEsaUJBQU8sR0FBUDs7UUFFQSxDQUFBLEdBQUksT0FBQSxDQUFRLFVBQVIsQ0FBQSxDQUFvQixNQUFwQjtRQUdKLENBQUEsR0FBSSxDQUFDLENBQUMsT0FBRixDQUFVLEdBQVYsRUFBYyxHQUFkO1FBQ0osQ0FBQSxHQUFJLENBQUMsQ0FBQyxPQUFGLENBQVUsR0FBVixFQUFjLEVBQWQ7UUFFSixJQUFnQixnQkFBaEI7QUFBQSxpQkFBTyxFQUFQOztRQUdBLElBQUcsUUFBUyxDQUFBLFFBQVEsQ0FBQyxNQUFULEdBQWtCLENBQWxCLENBQW9CLENBQUMsV0FBOUIsQ0FBQSxDQUFBLEtBQStDLEdBQWxEO1VBQ1MsSUFBRyxRQUFIO21CQUFvQixDQUFELEdBQUcsR0FBSCxHQUFNLFNBQXpCO1dBQUEsTUFBQTttQkFBeUMsRUFBekM7V0FEVDtTQUFBLE1BRUssSUFBRyxRQUFBLEtBQVksS0FBZjtVQUVILENBQUEsR0FBSSxDQUFDLENBQUMsT0FBRixDQUFVLEdBQVYsRUFBYyxFQUFkO1VBQ0osQ0FBQSxHQUFJLENBQUMsQ0FBQyxPQUFGLENBQVUsR0FBVixFQUFlLEdBQWY7VUFDSixDQUFBLEdBQUksQ0FBQyxDQUFDLE9BQUYsQ0FBVSxHQUFWLEVBQWUsR0FBZjtBQUNKLGlCQUFVLENBQUQsR0FBRyxLQUxUO1NBQUEsTUFBQTtVQVNILENBQUEsR0FBSSxDQUFDLENBQUMsT0FBRixDQUFVLEdBQVYsRUFBYyxFQUFkO1VBRUosSUFBRyxDQUFDLFFBQVEsQ0FBQyxLQUFULENBQWUsVUFBZixDQUFELElBQStCLFFBQUEsS0FBWSxHQUEzQyxJQUFrRCxRQUFBLEtBQVksU0FBakU7WUFDRSxDQUFBLEdBQUksUUFBQSxDQUFTLENBQVQsRUFETjs7VUFFTyxJQUFHLFFBQUg7bUJBQW9CLENBQUQsR0FBRyxHQUFILEdBQU0sU0FBekI7V0FBQSxNQUFBO21CQUF5QyxFQUF6QztXQWJKOztNQWZQO0lBRGlGLENBQVo7R0FBdkU7QUFBQSIsImZpbGUiOiJmaWx0ZXJzL21uby1jdXJyZW5jeS5qcy5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIiMgaW4gdGVtcGxhdGU6XG4jIHt7IFthbW91bnRdIHwgbW5vQ3VycmVuY3kgOiBbY3VycmVuY3ldIDogKFt0cnVlfGZhbHNlXSkgfX1cbiMgb3IgaW4ganMgZmlsZTpcbiMgJGZpbHRlcignbW5vQ3VycmVuY3knKShhbW91bnQsY3VycmVuY3ksW3RydWV8ZmFsc2VdKVxuI1xuYW5ndWxhci5tb2R1bGUoJ2ltcGFjLmZpbHRlcnMubW5vLWN1cnJlbmN5JywgW10pLmZpbHRlcignbW5vQ3VycmVuY3knLCBbXCIkZmlsdGVyXCIsICgkZmlsdGVyKSAtPlxuICAoYW1vdW50LCBjdXJyZW5jeSwgc2hvd05hbWU9dHJ1ZSkgLT5cblxuICAgIHJldHVybiBcIlwiIHVubGVzcyBhbW91bnQ/XG5cbiAgICBzID0gJGZpbHRlcignY3VycmVuY3knKShhbW91bnQpXG5cbiAgICAjIG9mZmljaWFsIGFjY291bnRpbmcgbm90YXRpb246IHJlcGxhY2UgJygxNSknIGJ5OiAnLTE1J1xuICAgIHMgPSBzLnJlcGxhY2UoJygnLCctJylcbiAgICBzID0gcy5yZXBsYWNlKCcpJywnJylcblxuICAgIHJldHVybiBzIHVubGVzcyBjdXJyZW5jeT9cblxuICAgICMgZm9yIGFsbCBEb2xsYXIgYmFzZWQgY3VycmVuY2llc1xuICAgIGlmIGN1cnJlbmN5W2N1cnJlbmN5Lmxlbmd0aCAtIDFdLnRvTG93ZXJDYXNlKCkgPT0gJ2QnXG4gICAgICByZXR1cm4gaWYgc2hvd05hbWUgdGhlbiBcIiN7c30gI3tjdXJyZW5jeX1cIiBlbHNlIHNcbiAgICBlbHNlIGlmIGN1cnJlbmN5ID09IFwiRVVSXCJcbiAgICAgICMgZm9yIEV1cm9zLCB3ZSByZW1vdmUgdGhlICQgc2lnbiBhbmQgY2hhbmdlIFwiLFwiIGludG8gd2hpdGUgc3BhY2VzIGFuZCBcIi5cIiBpbnRvIFwiLFwiXG4gICAgICBzID0gcy5yZXBsYWNlKCckJywnJylcbiAgICAgIHMgPSBzLnJlcGxhY2UoJywnLCAnICcpXG4gICAgICBzID0gcy5yZXBsYWNlKCcuJywgJywnKVxuICAgICAgcmV0dXJuIFwiI3tzfSDigqxcIlxuICAgICMgYWxsIG90aGVyIGN1cnJlbmNpZXNcbiAgICBlbHNlXG4gICAgICAjIGZvciBvdGhlciB0aGFuIEFVRCBhbmQgVVNELCB3ZSBqdXN0IHJlbW92ZSB0aGUgJCBzaWduXG4gICAgICBzID0gcy5yZXBsYWNlKCckJywnJylcbiAgICAgICMgd2hlbiBjdXJyZW5jeSBpcy4uLiBub3QgYSBwcm9wZXIgY3VycmVuY3kgbm9yIGEgJSwgd2UgZGlzcGxheSBhbiBpbnRlZ2VyIHZhbHVlICgxNi4xNiA9PiAxNilcbiAgICAgIGlmICFjdXJyZW5jeS5tYXRjaCgvW0EtWl17M30vKSAmJiBjdXJyZW5jeSAhPSAnJScgJiYgY3VycmVuY3kgIT0gJyhyYXRpbyknXG4gICAgICAgIHMgPSBwYXJzZUludChzKVxuICAgICAgcmV0dXJuIGlmIHNob3dOYW1lIHRoZW4gXCIje3N9ICN7Y3VycmVuY3l9XCIgZWxzZSBzXG5dKVxuIl19

(function() {
  angular.module('impac.filters.mno-date', []).filter('mnoDate', [
    "$filter", function($filter) {
      return function(date_string, period) {
        var PERIODS;
        PERIODS = ['DAILY', 'WEEKLY', 'MONTHLY', 'QUARTERLY', 'YEARLY'];
        if (date_string != null) {
          if (!((period != null) && _.includes(PERIODS, period.toUpperCase()))) {
            period = 'MONTHLY';
          }
          switch (period.toUpperCase()) {
            case 'DAILY':
              return $filter('date')(date_string, 'dd MMM');
            case 'WEEKLY':
              return $filter('date')(date_string, 'dd MMM');
            case 'MONTHLY':
              return $filter('date')(date_string, 'MMM yyyy');
            case 'QUARTERLY':
              return $filter('date')(date_string, 'MMM yyyy');
            case 'YEARLY':
              return $filter('date')(date_string, 'yyyy');
          }
        } else {
          return "";
        }
      };
    }
  ]);

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbHRlcnMvbW5vLWRhdGUuanMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQUEsT0FBTyxDQUFDLE1BQVIsQ0FBZSx3QkFBZixFQUF5QyxFQUF6QyxDQUE0QyxDQUFDLE1BQTdDLENBQW9ELFNBQXBELEVBQStEO0lBQUMsU0FBRCxFQUFZLFNBQUMsT0FBRDthQUN6RSxTQUFDLFdBQUQsRUFBYyxNQUFkO0FBRUUsWUFBQTtRQUFBLE9BQUEsR0FBVSxDQUFDLE9BQUQsRUFBVSxRQUFWLEVBQW9CLFNBQXBCLEVBQStCLFdBQS9CLEVBQTRDLFFBQTVDO1FBQ1YsSUFBRyxtQkFBSDtVQUNFLElBQUEsQ0FBQSxDQUFPLGdCQUFBLElBQVcsQ0FBQyxDQUFDLFFBQUYsQ0FBVyxPQUFYLEVBQW9CLE1BQU0sQ0FBQyxXQUFQLENBQUEsQ0FBcEIsQ0FBbEIsQ0FBQTtZQUNFLE1BQUEsR0FBUyxVQURYOztBQUdBLGtCQUFPLE1BQU0sQ0FBQyxXQUFQLENBQUEsQ0FBUDtBQUFBLGlCQUNPLE9BRFA7QUFFSSxxQkFBTyxPQUFBLENBQVEsTUFBUixDQUFBLENBQWdCLFdBQWhCLEVBQTZCLFFBQTdCO0FBRlgsaUJBR08sUUFIUDtBQUlJLHFCQUFPLE9BQUEsQ0FBUSxNQUFSLENBQUEsQ0FBZ0IsV0FBaEIsRUFBNkIsUUFBN0I7QUFKWCxpQkFLTyxTQUxQO0FBTUkscUJBQU8sT0FBQSxDQUFRLE1BQVIsQ0FBQSxDQUFnQixXQUFoQixFQUE2QixVQUE3QjtBQU5YLGlCQU9PLFdBUFA7QUFRSSxxQkFBTyxPQUFBLENBQVEsTUFBUixDQUFBLENBQWdCLFdBQWhCLEVBQTZCLFVBQTdCO0FBUlgsaUJBU08sUUFUUDtBQVVJLHFCQUFPLE9BQUEsQ0FBUSxNQUFSLENBQUEsQ0FBZ0IsV0FBaEIsRUFBNkIsTUFBN0I7QUFWWCxXQUpGO1NBQUEsTUFBQTtBQWlCRSxpQkFBTyxHQWpCVDs7TUFIRjtJQUR5RSxDQUFaO0dBQS9EO0FBQUEiLCJmaWxlIjoiZmlsdGVycy9tbm8tZGF0ZS5qcy5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbImFuZ3VsYXIubW9kdWxlKCdpbXBhYy5maWx0ZXJzLm1uby1kYXRlJywgW10pLmZpbHRlcignbW5vRGF0ZScsIFtcIiRmaWx0ZXJcIiwgKCRmaWx0ZXIpIC0+XG4gIChkYXRlX3N0cmluZywgcGVyaW9kKSAtPlxuXG4gICAgUEVSSU9EUyA9IFsnREFJTFknLCAnV0VFS0xZJywgJ01PTlRITFknLCAnUVVBUlRFUkxZJywgJ1lFQVJMWSddXG4gICAgaWYgZGF0ZV9zdHJpbmc/XG4gICAgICB1bmxlc3MgcGVyaW9kPyAmJiBfLmluY2x1ZGVzKFBFUklPRFMsIHBlcmlvZC50b1VwcGVyQ2FzZSgpKVxuICAgICAgICBwZXJpb2QgPSAnTU9OVEhMWSdcblxuICAgICAgc3dpdGNoIHBlcmlvZC50b1VwcGVyQ2FzZSgpXG4gICAgICAgIHdoZW4gJ0RBSUxZJ1xuICAgICAgICAgIHJldHVybiAkZmlsdGVyKCdkYXRlJykoZGF0ZV9zdHJpbmcsICdkZCBNTU0nKVxuICAgICAgICB3aGVuICdXRUVLTFknXG4gICAgICAgICAgcmV0dXJuICRmaWx0ZXIoJ2RhdGUnKShkYXRlX3N0cmluZywgJ2RkIE1NTScpXG4gICAgICAgIHdoZW4gJ01PTlRITFknXG4gICAgICAgICAgcmV0dXJuICRmaWx0ZXIoJ2RhdGUnKShkYXRlX3N0cmluZywgJ01NTSB5eXl5JylcbiAgICAgICAgd2hlbiAnUVVBUlRFUkxZJ1xuICAgICAgICAgIHJldHVybiAkZmlsdGVyKCdkYXRlJykoZGF0ZV9zdHJpbmcsICdNTU0geXl5eScpXG4gICAgICAgIHdoZW4gJ1lFQVJMWSdcbiAgICAgICAgICByZXR1cm4gJGZpbHRlcignZGF0ZScpKGRhdGVfc3RyaW5nLCAneXl5eScpXG5cbiAgICBlbHNlXG4gICAgICByZXR1cm4gXCJcIlxuXG5dKVxuIl19

(function() {
  angular.module('impac.filters.titleize', []).filter('titleize', function() {
    return function(s) {
      s = s === void 0 || s === null ? '' : s;
      return s.toString().toLowerCase().replace(/\b([a-z])/g, function(ch) {
        return ch.toUpperCase();
      });
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbHRlcnMvdGl0bGVpemUuanMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQUEsT0FBTyxDQUFDLE1BQVIsQ0FBZSx3QkFBZixFQUF5QyxFQUF6QyxDQUE0QyxDQUFDLE1BQTdDLENBQW9ELFVBQXBELEVBQWdFLFNBQUE7QUFDOUQsV0FBTyxTQUFDLENBQUQ7TUFDTCxDQUFBLEdBQVEsQ0FBQSxLQUFLLE1BQUwsSUFBa0IsQ0FBQSxLQUFLLElBQTNCLEdBQXNDLEVBQXRDLEdBQThDO0FBQ2xELGFBQU8sQ0FBQyxDQUFDLFFBQUYsQ0FBQSxDQUFZLENBQUMsV0FBYixDQUFBLENBQTBCLENBQUMsT0FBM0IsQ0FBb0MsWUFBcEMsRUFBa0QsU0FBQyxFQUFEO0FBQ3ZELGVBQU8sRUFBRSxDQUFDLFdBQUgsQ0FBQTtNQURnRCxDQUFsRDtJQUZGO0VBRHVELENBQWhFO0FBQUEiLCJmaWxlIjoiZmlsdGVycy90aXRsZWl6ZS5qcy5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbImFuZ3VsYXIubW9kdWxlKCdpbXBhYy5maWx0ZXJzLnRpdGxlaXplJywgW10pLmZpbHRlcigndGl0bGVpemUnLCAtPlxuICByZXR1cm4gKHMpIC0+XG4gICAgcyA9IGlmIChzID09IHVuZGVmaW5lZCB8fCBzID09IG51bGwpIHRoZW4gJycgZWxzZSBzXG4gICAgcmV0dXJuIHMudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoIC9cXGIoW2Etel0pL2csIChjaCkgLT5cbiAgICAgIHJldHVybiBjaC50b1VwcGVyQ2FzZSgpXG4gICAgKVxuKVxuIl19

(function() {
  angular.module("impac.filters.truncate", []).filter("truncate", function() {
    return function(value, max, tail, wordwise) {
      var lastspace;
      if (!value) {
        return "";
      }
      max = parseInt(max, 10);
      if (!max) {
        return value;
      }
      if (value.length <= max) {
        return value;
      }
      value = value.substr(0, max);
      if (wordwise) {
        lastspace = value.lastIndexOf(" ");
        if (lastspace !== -1) {
          value = value.substr(0, lastspace);
        }
      }
      return value + (tail || "…");
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbHRlcnMvdHJ1bmNhdGUuanMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BO0VBQUEsT0FBTyxDQUFDLE1BQVIsQ0FBZSx3QkFBZixFQUF3QyxFQUF4QyxDQUEyQyxDQUFDLE1BQTVDLENBQW1ELFVBQW5ELEVBQStELFNBQUE7V0FDN0QsU0FBQyxLQUFELEVBQVEsR0FBUixFQUFhLElBQWIsRUFBa0IsUUFBbEI7QUFDRSxVQUFBO01BQUEsSUFBQSxDQUFrQixLQUFsQjtBQUFBLGVBQU8sR0FBUDs7TUFFQSxHQUFBLEdBQU0sUUFBQSxDQUFTLEdBQVQsRUFBYyxFQUFkO01BRU4sSUFBQSxDQUFxQixHQUFyQjtBQUFBLGVBQU8sTUFBUDs7TUFDQSxJQUFpQixLQUFLLENBQUMsTUFBTixJQUFnQixHQUFqQztBQUFBLGVBQU8sTUFBUDs7TUFFQSxLQUFBLEdBQVEsS0FBSyxDQUFDLE1BQU4sQ0FBYSxDQUFiLEVBQWdCLEdBQWhCO01BRVIsSUFBRyxRQUFIO1FBQ0UsU0FBQSxHQUFZLEtBQUssQ0FBQyxXQUFOLENBQWtCLEdBQWxCO1FBQ1osSUFBMkMsU0FBQSxLQUFhLENBQUMsQ0FBekQ7VUFBQSxLQUFBLEdBQVEsS0FBSyxDQUFDLE1BQU4sQ0FBYSxDQUFiLEVBQWdCLFNBQWhCLEVBQVI7U0FGRjs7QUFJQSxhQUFPLEtBQUEsR0FBUSxDQUFDLElBQUEsSUFBUSxHQUFUO0lBZGpCO0VBRDZELENBQS9EO0FBQUEiLCJmaWxlIjoiZmlsdGVycy90cnVuY2F0ZS5qcy5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIiMgVXNhZ2U6XG4jIHt7c29tZV90ZXh0IHwgdHJ1bmNhdGU6MTAwOicuLi4nOnRydWV9fVxuI1xuIyBPcHRpb25zOlxuIyBtYXggKGludGVnZXIpIC0gbWF4IGxlbmd0aCBvZiB0aGUgdGV4dCwgY3V0IHRvIHRoaXMgbnVtYmVyIG9mIGNoYXJzLFxuIyB0YWlsIChzdHJpbmcsIGRlZmF1bHQ6ICcg4oCmJykgLSBhZGQgdGhpcyBzdHJpbmcgdG8gdGhlIGlucHV0IHN0cmluZyBpZiB0aGUgc3RyaW5nIHdhcyBjdXQuXG4jIHdvcmR3aXNlIChib29sZWFuKSAtIGlmIHRydWUsIGN1dCBvbmx5IGJ5IHdvcmRzIGJvdW5kcyxcbmFuZ3VsYXIubW9kdWxlKFwiaW1wYWMuZmlsdGVycy50cnVuY2F0ZVwiLFtdKS5maWx0ZXIoXCJ0cnVuY2F0ZVwiLCAtPlxuICAodmFsdWUsIG1heCwgdGFpbCx3b3Jkd2lzZSkgLT5cbiAgICByZXR1cm4gXCJcIiAgdW5sZXNzIHZhbHVlXG4gICAgXG4gICAgbWF4ID0gcGFyc2VJbnQobWF4LCAxMClcbiAgICBcbiAgICByZXR1cm4gdmFsdWUgIHVubGVzcyBtYXhcbiAgICByZXR1cm4gdmFsdWUgIGlmIHZhbHVlLmxlbmd0aCA8PSBtYXhcbiAgICBcbiAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cigwLCBtYXgpXG4gICAgXG4gICAgaWYgd29yZHdpc2VcbiAgICAgIGxhc3RzcGFjZSA9IHZhbHVlLmxhc3RJbmRleE9mKFwiIFwiKVxuICAgICAgdmFsdWUgPSB2YWx1ZS5zdWJzdHIoMCwgbGFzdHNwYWNlKSAgdW5sZXNzIGxhc3RzcGFjZSBpcyAtMVxuICAgIFxuICAgIHJldHVybiB2YWx1ZSArICh0YWlsIG9yIFwi4oCmXCIpXG4pXG4iXX0=

(function() {
  angular.module('impac.components.chart', []).directive('impacChart', function($log, $window) {
    return {
      restrict: 'A',
      scope: {
        drawTrigger: '=',
        deferred: '='
      },
      link: function(scope, elem, attr) {
        scope.draw = function(chartData) {
          var canvas, ctx;
          if ((chartData.options.showXLabels != null) && !chartData.options.showXLabels) {
            angular.merge(chartData.options, {
              scales: {
                xAxes: [
                  {
                    display: false
                  }
                ]
              }
            });
          }
          if (elem.children().length > 0) {
            elem.children().remove(0);
          }
          elem.append('<canvas></canvas>');
          canvas = elem.children()[0];
          ctx = canvas.getContext("2d");
          return new Chart(ctx, chartData);
        };
        scope.drawTrigger.then(function(success) {
          return $log.warn('chart promise has been resolved: use notify instead');
        }, function(error) {
          return $log.error(error);
        }, function(chartData) {
          var isSafari, timeoutUntilVisible, userAgent;
          userAgent = $window.navigator.userAgent;
          isSafari = (userAgent.indexOf('Safari') !== -1) && !(userAgent.indexOf('Chrome') !== -1);
          if (isSafari) {
            timeoutUntilVisible = function() {
              var visible;
              visible = $(elem).is(':visible');
              if (visible) {
                return scope.draw(chartData);
              } else {
                return setTimeout(function() {
                  return timeoutUntilVisible();
                }, 100);
              }
            };
            return timeoutUntilVisible();
          } else {
            return scope.draw(chartData);
          }
        });
        return scope.deferred.resolve('chart ready');
      }
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvY2hhcnQvY2hhcnQuZGlyZWN0aXZlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQTtFQUFBLE9BQ0UsQ0FBQyxNQURILENBQ1Usd0JBRFYsRUFDbUMsRUFEbkMsQ0FFRSxDQUFDLFNBRkgsQ0FFYSxZQUZiLEVBRTJCLFNBQUMsSUFBRCxFQUFPLE9BQVA7QUFDdkIsV0FBTztNQUNMLFFBQUEsRUFBVSxHQURMO01BRUwsS0FBQSxFQUFPO1FBQ0wsV0FBQSxFQUFhLEdBRFI7UUFFTCxRQUFBLEVBQVUsR0FGTDtPQUZGO01BTUwsSUFBQSxFQUFNLFNBQUMsS0FBRCxFQUFPLElBQVAsRUFBWSxJQUFaO1FBSUosS0FBSyxDQUFDLElBQU4sR0FBYSxTQUFDLFNBQUQ7QUFDWCxjQUFBO1VBQUEsSUFBRyx1Q0FBQSxJQUFrQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsV0FBeEQ7WUFDRSxPQUFPLENBQUMsS0FBUixDQUFjLFNBQVMsQ0FBQyxPQUF4QixFQUFpQztjQUMvQixNQUFBLEVBQVE7Z0JBQ04sS0FBQSxFQUFPO2tCQUFDO29CQUNOLE9BQUEsRUFBUyxLQURIO21CQUFEO2lCQUREO2VBRHVCO2FBQWpDLEVBREY7O1VBVUEsSUFBRyxJQUFJLENBQUMsUUFBTCxDQUFBLENBQWUsQ0FBQyxNQUFoQixHQUF5QixDQUE1QjtZQUNFLElBQUksQ0FBQyxRQUFMLENBQUEsQ0FBZSxDQUFDLE1BQWhCLENBQXVCLENBQXZCLEVBREY7O1VBT0EsSUFBSSxDQUFDLE1BQUwsQ0FBWSxtQkFBWjtVQUNBLE1BQUEsR0FBUyxJQUFJLENBQUMsUUFBTCxDQUFBLENBQWdCLENBQUEsQ0FBQTtVQUN6QixHQUFBLEdBQU0sTUFBTSxDQUFDLFVBQVAsQ0FBa0IsSUFBbEI7aUJBRUYsSUFBQSxLQUFBLENBQU0sR0FBTixFQUFXLFNBQVg7UUF0Qk87UUEyQmIsS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFsQixDQUNFLFNBQUMsT0FBRDtpQkFDRSxJQUFJLENBQUMsSUFBTCxDQUFVLHFEQUFWO1FBREYsQ0FERixFQUdFLFNBQUMsS0FBRDtpQkFDRSxJQUFJLENBQUMsS0FBTCxDQUFXLEtBQVg7UUFERixDQUhGLEVBS0UsU0FBQyxTQUFEO0FBQ0UsY0FBQTtVQUFBLFNBQUEsR0FBWSxPQUFPLENBQUMsU0FBUyxDQUFDO1VBQzlCLFFBQUEsR0FBWSxDQUFDLFNBQVMsQ0FBQyxPQUFWLENBQWtCLFFBQWxCLENBQUEsS0FBK0IsQ0FBQyxDQUFqQyxDQUFBLElBQXVDLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBVixDQUFrQixRQUFsQixDQUFBLEtBQStCLENBQUMsQ0FBakM7VUFHcEQsSUFBRyxRQUFIO1lBQ0UsbUJBQUEsR0FBc0IsU0FBQTtBQUVwQixrQkFBQTtjQUFBLE9BQUEsR0FBVSxDQUFBLENBQUUsSUFBRixDQUFPLENBQUMsRUFBUixDQUFXLFVBQVg7Y0FDVixJQUFHLE9BQUg7dUJBR0UsS0FBSyxDQUFDLElBQU4sQ0FBVyxTQUFYLEVBSEY7ZUFBQSxNQUFBO3VCQUtFLFVBQUEsQ0FBVyxTQUFBO3lCQUdULG1CQUFBLENBQUE7Z0JBSFMsQ0FBWCxFQUlFLEdBSkYsRUFMRjs7WUFIb0I7bUJBY3RCLG1CQUFBLENBQUEsRUFmRjtXQUFBLE1BQUE7bUJBaUJFLEtBQUssQ0FBQyxJQUFOLENBQVcsU0FBWCxFQWpCRjs7UUFMRixDQUxGO2VBZ0NBLEtBQUssQ0FBQyxRQUFRLENBQUMsT0FBZixDQUF1QixhQUF2QjtNQS9ESSxDQU5EOztFQURnQixDQUYzQjtBQUFBIiwiZmlsZSI6ImNvbXBvbmVudHMvY2hhcnQvY2hhcnQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiIyBjaGFydC5qcyBjaGFydGluZyBhdHRyaWJ1dGUgZGlyZWN0aXZlLlxuYW5ndWxhclxuICAubW9kdWxlKCdpbXBhYy5jb21wb25lbnRzLmNoYXJ0JyxbXSlcbiAgLmRpcmVjdGl2ZSgnaW1wYWNDaGFydCcsICgkbG9nLCAkd2luZG93KSAtPlxuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgc2NvcGU6IHtcbiAgICAgICAgZHJhd1RyaWdnZXI6ICc9J1xuICAgICAgICBkZWZlcnJlZDogJz0nXG4gICAgICB9LFxuICAgICAgbGluazogKHNjb3BlLGVsZW0sYXR0cikgLT5cbiAgICAgICAgIyBEcmF3IGEgY2hhcnQgaW4gdGhlIGNhbnZhc1xuICAgICAgICAjIChDaGFydEpzIHdheSBvZiBkcmF3aW5nIGEgY2hhcnQgaXMgdG8gY3JlYXRlIGEgbmV3IENoYXJ0KCkgZWxlbWVudCBpbiB0aGUgY2FudmFzIGNvbnRleHQpXG4gICAgICAgICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIHNjb3BlLmRyYXcgPSAoY2hhcnREYXRhKSAtPlxuICAgICAgICAgIGlmIGNoYXJ0RGF0YS5vcHRpb25zLnNob3dYTGFiZWxzPyAmJiAhY2hhcnREYXRhLm9wdGlvbnMuc2hvd1hMYWJlbHNcbiAgICAgICAgICAgIGFuZ3VsYXIubWVyZ2UoY2hhcnREYXRhLm9wdGlvbnMsIHtcbiAgICAgICAgICAgICAgc2NhbGVzOiB7XG4gICAgICAgICAgICAgICAgeEF4ZXM6IFt7XG4gICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmYWxzZVxuICAgICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAjIGNhbnZhcyBoYXMgdG8gYmUgcmVtb3ZlZC9hcHBlbmRlZCB0byBiZSByZWRyYXduZWQgd2l0aG91dCBzdXBlcnBvc2l0aW9uXG4gICAgICAgICAgaWYgZWxlbS5jaGlsZHJlbigpLmxlbmd0aCA+IDBcbiAgICAgICAgICAgIGVsZW0uY2hpbGRyZW4oKS5yZW1vdmUoMClcbiAgICAgICAgICAgICMgT24gZGFzaGJvYXJkIGxvYWQsIHRoZXJlIHdpbGwgYmUgbm8gYW5pbWF0aW9uIHRvIGF2b2lkIHRoZSBjYW52YXMgdG8gYmUgb25seSBwYXJ0aWFsbHkgZHJhd25cbiAgICAgICAgICAgICMgVGh1cywgd2Ugc2V0IHJlc3BvbnNpdmVBbmltYXRpb25EdXJhdGlvbiBvbmx5IHdoZW4gYSBjaGFydCB3YXMgYWxyZWFkeSBkZWZpbmVkIGJlZm9yZVxuICAgICAgICAgICAgIyBSRU1PVkVEIC8gU09NRVRJTUVTIENIQVJUIElTIE5PVCBEUkFXTiBDT01QTEVURUxZLi4uXG4gICAgICAgICAgICAjIGNoYXJ0RGF0YS5vcHRpb25zLnJlc3BvbnNpdmVBbmltYXRpb25EdXJhdGlvbiA9IDEwMDBcblxuICAgICAgICAgIGVsZW0uYXBwZW5kKCc8Y2FudmFzPjwvY2FudmFzPicpXG4gICAgICAgICAgY2FudmFzID0gZWxlbS5jaGlsZHJlbigpWzBdXG4gICAgICAgICAgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKVxuXG4gICAgICAgICAgbmV3IENoYXJ0KGN0eCwgY2hhcnREYXRhKVxuXG5cbiAgICAgICAgIyBUcmlnZ2VyZWQgYnkgd2lkZ2V0LmZvcm1hdCgpXG4gICAgICAgICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIHNjb3BlLmRyYXdUcmlnZ2VyLnRoZW4oXG4gICAgICAgICAgKHN1Y2Nlc3MpIC0+XG4gICAgICAgICAgICAkbG9nLndhcm4oJ2NoYXJ0IHByb21pc2UgaGFzIGJlZW4gcmVzb2x2ZWQ6IHVzZSBub3RpZnkgaW5zdGVhZCcpXG4gICAgICAgICAgKGVycm9yKSAtPlxuICAgICAgICAgICAgJGxvZy5lcnJvcihlcnJvcilcbiAgICAgICAgICAoY2hhcnREYXRhKSAtPlxuICAgICAgICAgICAgdXNlckFnZW50ID0gJHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50XG4gICAgICAgICAgICBpc1NhZmFyaSA9ICgodXNlckFnZW50LmluZGV4T2YoJ1NhZmFyaScpICE9IC0xKSAmJiAhKHVzZXJBZ2VudC5pbmRleE9mKCdDaHJvbWUnKSAhPSAtMSkpXG5cbiAgICAgICAgICAgICMgQ2hhcnQuanNcbiAgICAgICAgICAgIGlmIGlzU2FmYXJpXG4gICAgICAgICAgICAgIHRpbWVvdXRVbnRpbFZpc2libGUgPSAoKSAtPlxuICAgICAgICAgICAgICAgICMgVXNlIGpxdWVyeSBmdW5jdGlvbiB0byBkZXRlY3QgaWYgdGhlIGNhbnZhcyBjb250YWluZXIgaXMgdmlzaWJsZVxuICAgICAgICAgICAgICAgIHZpc2libGUgPSAkKGVsZW0pLmlzKCc6dmlzaWJsZScpXG4gICAgICAgICAgICAgICAgaWYgdmlzaWJsZVxuICAgICAgICAgICAgICAgICAgIyBDb250YWluZXIgaXMgdmlzaWJsZSAtPiBkcmF3IHRoZSBjYW52YXNcbiAgICAgICAgICAgICAgICAgICMgY29uc29sZS5sb2cgJ0NIQVJUIFZJU0lCTEU6IGRyYXcgdGhlIGNhbnZhcydcbiAgICAgICAgICAgICAgICAgIHNjb3BlLmRyYXcoY2hhcnREYXRhKVxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQgLT5cbiAgICAgICAgICAgICAgICAgICAgIyBkZWJ1Z2dlclxuICAgICAgICAgICAgICAgICAgICAjIGNvbnNvbGUubG9nICdDSEFSVCBOT1QgVklTSUJMRTogd2FpdGluZyB1bnRpbCBjb250YWluZXIgaXMgdmlzaWJsZSdcbiAgICAgICAgICAgICAgICAgICAgdGltZW91dFVudGlsVmlzaWJsZSgpXG4gICAgICAgICAgICAgICAgICAsIDEwMCAjIEFuIG9wdGltaXplZCBkaWdlc3QgY3ljbGUgaXMgbGVzcyB0aGFuIDI1bXNcblxuICAgICAgICAgICAgICB0aW1lb3V0VW50aWxWaXNpYmxlKClcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgc2NvcGUuZHJhdyhjaGFydERhdGEpXG4gICAgICAgIClcblxuICAgICAgICAjIENoYXJ0IGlzIHJlYWR5OiB0cmlnZ2VyIGxvYWQgY29udGVudFxuICAgICAgICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICBzY29wZS5kZWZlcnJlZC5yZXNvbHZlKCdjaGFydCByZWFkeScpXG4gICAgfVxuICApXG4iXX0=

(function() {
  var module;

  module = angular.module('impac.components.dashboard', []);

  module.controller('ImpacDashboardCtrl', function($scope, $http, $q, $filter, $modal, $log, $timeout, $templateCache, MsgBus, ImpacUtilities, ImpacAssets, ImpacTheming, ImpacRoutes, ImpacMainSvc, ImpacDashboardsSvc, ImpacWidgetsSvc) {
    var saveDashboard, updatePlaceHolderSize;
    $scope.currentDhb = ImpacDashboardsSvc.getCurrentDashboard();
    $scope.widgetsList = ImpacDashboardsSvc.getWidgetsTemplates();
    $scope.impacTitleLogo = ImpacAssets.get('impacTitleLogo');
    $scope.impacDashboardBackground = ImpacAssets.get('impacDashboardBackground');
    $scope.showDhbHeading = ImpacTheming.get().dhbConfig.showDhbHeading;
    $scope.dhbHeadingText = ImpacTheming.get().dhbConfig.dhbHeadingText;
    $scope.dhbErrorsConfig = ImpacTheming.get().dhbErrorsConfig;
    $scope.dhbSettingsConfig = ImpacTheming.get().dhbSettings;
    $scope.showKpisBar = ImpacTheming.get().dhbKpisConfig.enableKpis;
    $scope.showChooseDhbMsg = function() {
      return !ImpacDashboardsSvc.isThereADashboard();
    };
    $scope.showNoWidgetsMsg = function() {
      return ImpacDashboardsSvc.isCurrentDashboardEmpty() && ImpacTheming.get().showNoWidgetMsg;
    };
    $scope.starWizardModal = {
      value: false
    };
    MsgBus.publish('starWizardModal', $scope.starWizardModal);
    $scope.openStarWizard = function() {
      return $scope.starWizardModal.value = true;
    };
    $scope.marketplaceMyobLink = ImpacTheming.get().dhbSubMenuConfig.marketplaceMyobLink;
    $scope.showSubMenu = false;
    $scope.displaySubMenu = function() {
      return $scope.showSubMenu = true;
    };
    $scope.hideSubMenu = function() {
      return $scope.showSubMenu = false;
    };
    $scope.myobMessageConfig = ImpacTheming.get().dhbSubMenuConfig.myobMessage;
    $scope.isLoading = true;
    ImpacDashboardsSvc.load(true).then(function(success) {
      $scope.activateTimer();
      return $scope.hasMyobEssentialsOnly = ImpacMainSvc.config.currentOrganization.has_myob_essentials_only;
    }, function(error) {
      return $scope.isLoading = false;
    });
    $scope.activateTimer = function() {
      var timer, w;
      $scope.isLoading || ($scope.isLoading = true);
      w = $scope.currentDhb.widgets;
      if (w != null) {
        timer = Math.max(100 * w.length, 500);
      } else {
        timer = 500;
      }
      return $timeout(function() {
        return $scope.isLoading = false;
      }, timer);
    };
    $scope.createDashboardModal = $scope.$new();
    $scope.createDashboardModal.config = {
      backdrop: 'static',
      template: $templateCache.get('dashboard/create.modal.html'),
      size: 'md',
      windowClass: 'inverse',
      scope: $scope.createDashboardModal
    };
    $scope.createDashboardModal.open = function() {
      var self;
      self = $scope.createDashboardModal;
      if (self.locked) {
        return;
      }
      self.model = {
        name: ''
      };
      self.errors = '';
      self.isLoading = false;
      self.instance = $modal.open(self.config);
      self.instance.rendered.then(function(onRender) {
        return self.locked = true;
      });
      self.instance.result.then(function(onClose) {
        return self.locked = false;
      }, function(onDismiss) {
        return self.locked = false;
      });
      return ImpacMainSvc.loadOrganizations().then(function(config) {
        self.organizations = config.organizations;
        self.currentOrganization = config.currentOrganization;
        return self.selectMode('single');
      });
    };
    $scope.createDashboardModal.proceed = function() {
      var dashboard, organizations, self;
      self = $scope.createDashboardModal;
      self.isLoading = true;
      dashboard = {
        name: self.model.name
      };
      organizations = [];
      if (self.mode === 'multi') {
        organizations = _.select(self.organizations, function(o) {
          return o.$selected;
        });
      } else {
        organizations = [
          {
            id: ImpacMainSvc.config.currentOrganization.id
          }
        ];
      }
      if (organizations.length > 0) {
        dashboard.organization_ids = _.pluck(organizations, 'id');
      }
      return ImpacDashboardsSvc.create(dashboard).then(function(dashboard) {
        self.errors = '';
        return self.instance.close();
      }, function(errors) {
        self.isLoading = false;
        return self.errors = ImpacUtilities.processRailsError(errors);
      });
    };
    $scope.createDashboardModal.isProceedDisabled = function() {
      var additional_condition, selectedCompanies, self;
      self = $scope.createDashboardModal;
      selectedCompanies = _.select(self.organizations, function(o) {
        return o.$selected;
      });
      additional_condition = _.isEmpty(self.model.name);
      additional_condition || (additional_condition = selectedCompanies.length === 0);
      additional_condition || (additional_condition = _.select(selectedCompanies, function(o) {
        return self.canAccessAnalyticsData(o);
      }).length === 0);
      return self.isLoading || additional_condition;
    };
    $scope.createDashboardModal.btnBlassFor = function(mode) {
      var self;
      self = $scope.createDashboardModal;
      if (mode === self.mode) {
        return "btn btn-sm btn-warning active";
      } else {
        return "btn btn-sm btn-default";
      }
    };
    $scope.createDashboardModal.selectMode = function(mode) {
      var self;
      self = $scope.createDashboardModal;
      _.each(self.organizations, function(o) {
        return o.$selected = false;
      });
      self.currentOrganization.$selected = mode === 'single';
      return self.mode = mode;
    };
    $scope.createDashboardModal.isSelectOrganizationShown = function() {
      return $scope.createDashboardModal.mode === 'multi';
    };
    $scope.createDashboardModal.isCurrentOrganizationShown = function() {
      return $scope.createDashboardModal.mode === 'single';
    };
    $scope.createDashboardModal.canAccessAnalyticsForCurrentOrganization = function() {
      var self;
      self = $scope.createDashboardModal;
      return self.canAccessAnalyticsData(self.currentOrganization);
    };
    $scope.createDashboardModal.isMultiCompanyAvailable = function() {
      return $scope.createDashboardModal.organizations.length > 1 && $scope.createDashboardModal.multiOrganizationReporting;
    };
    $scope.createDashboardModal.canAccessAnalyticsData = function(organization) {
      return organization.current_user_role && (organization.current_user_role === "Super Admin" || organization.current_user_role === "Admin");
    };
    $scope.customWidgetSelector = ImpacTheming.get().widgetSelectorConfig;
    $scope.forceShowWidgetSelector = false;
    $scope.showCloseWidgetSelectorButton = function() {
      return !ImpacDashboardsSvc.isCurrentDashboardEmpty();
    };
    $scope.displayWidgetSelector = function(value) {
      if (value == null) {
        value = true;
      }
      return $scope.forceShowWidgetSelector = value;
    };
    $scope.showWidgetSelector = function() {
      return $scope.forceShowWidgetSelector || (ImpacDashboardsSvc.isCurrentDashboardEmpty() && !$scope.customWidgetSelector.path);
    };
    $scope.isAddChartEnabled = ImpacTheming.get().addChartTile.show;
    $scope.addChartTileOnClick = function() {
      var triggers;
      triggers = ImpacTheming.get().addChartTile.onClickOptions.triggers;
      return _.forEach(triggers, function(trigger) {
        switch (trigger.type) {
          case 'objectProperty':
            return $scope[trigger.target][trigger.property] = trigger.value;
        }
      });
    };
    $scope.selectedCategory = 'accounts';
    $scope.isCategorySelected = function(aCatName) {
      if (($scope.selectedCategory != null) && (aCatName != null)) {
        return $scope.selectedCategory === aCatName;
      } else {
        return false;
      }
    };
    $scope.selectCategory = function(aCatName) {
      return $scope.selectedCategory = aCatName;
    };
    $scope.getSelectedCategoryName = function() {
      if ($scope.selectedCategory != null) {
        switch ($scope.selectedCategory) {
          case 'accounts':
            return 'Accounting';
          case 'invoices':
            return 'Invoicing';
          case 'hr':
            return 'HR / Payroll';
          case 'sales':
            return 'Sales';
          default:
            return false;
        }
      } else {
        return false;
      }
    };
    $scope.getSelectedCategoryTop = function() {
      if ($scope.selectedCategory != null) {
        switch ($scope.selectedCategory) {
          case 'accounts':
            return {
              top: '33px'
            };
          case 'invoices':
            return {
              top: '64px'
            };
          case 'hr':
            return {
              top: '95px'
            };
          case 'sales':
            return {
              top: '126px'
            };
          default:
            return {
              top: '9999999px'
            };
        }
      } else {
        return false;
      }
    };
    $scope.getWidgetsForSelectedCategory = function() {
      if (($scope.selectedCategory != null) && ($scope.widgetsList != null)) {
        return _.select($scope.widgetsList, function(aWidgetTemplate) {
          return aWidgetTemplate.path.split('/')[0] === $scope.selectedCategory;
        });
      } else {
        return [];
      }
    };
    $scope.addWidget = function(widgetPath, widgetMetadata) {
      var params;
      if (widgetMetadata == null) {
        widgetMetadata = null;
      }
      params = {
        widget_category: widgetPath
      };
      if (widgetMetadata != null) {
        angular.extend(params, {
          metadata: widgetMetadata
        });
      }
      angular.element('#widget-selector').css('cursor', 'progress');
      angular.element('#widget-selector .top-container .row.lines p').css('cursor', 'progress');
      return ImpacWidgetsSvc.create(params).then(function() {
        $scope.errors = '';
        angular.element('#widget-selector').css('cursor', 'auto');
        angular.element('#widget-selector .top-container .row.lines p').css('cursor', 'pointer');
        angular.element('#widget-selector .badge.confirmation').fadeTo(250, 1);
        return $timeout(function() {
          return angular.element('#widget-selector .badge.confirmation').fadeTo(700, 0);
        }, 4000);
      }, function(errors) {
        $scope.errors = ImpacUtilities.processRailsError(errors);
        angular.element('#widget-selector').css('cursor', 'auto');
        return angular.element('#widget-selector .top-container .row.lines p').css('cursor', 'pointer');
      });
    };
    $scope.widgetSuggestionModal = $scope.$new();
    $scope.widgetSuggestionModal.widgetDetails = {};
    $scope.widgetSuggestionModal.error = false;
    $scope.widgetSuggestionModal.onSuccess = false;
    $scope.widgetSuggestionModal.config = {
      backdrop: 'static',
      template: $templateCache.get('dashboard/widget-suggestion.modal.html'),
      size: 'md',
      windowClass: 'inverse impac-widget-suggestion',
      scope: $scope.widgetSuggestionModal,
      apiPath: ImpacRoutes.widgets.suggest()
    };
    $scope.widgetSuggestionModal.open = function() {
      var self;
      self = $scope.widgetSuggestionModal;
      if (self.locked) {
        return;
      }
      ImpacMainSvc.loadUserData().then(function(user) {
        return self.userName = user.name;
      });
      self.instance = $modal.open(self.config);
      self.instance.rendered.then(function(onRender) {
        return self.locked = true;
      });
      self.instance.result.then(function(onClose) {
        return self.locked = false;
      }, function(onDismiss) {
        return self.locked = false;
      });
      return self.isLoading = false;
    };
    $scope.widgetSuggestionModal.proceed = function() {
      var data, self;
      self = $scope.widgetSuggestionModal;
      self.isLoading = true;
      data = {
        widget_name: self.widgetDetails.name,
        widget_category: self.widgetDetails.category,
        widget_description: self.widgetDetails.description
      };
      if (self.config.apiPath != null) {
        return $http.post(self.config.apiPath, {
          template: 'widget_suggestion',
          opts: data
        }).then(function() {
          self.onSuccess = true;
          return $timeout(function() {
            self.instance.close();
            self.widgetDetails = {};
            self.isLoading = false;
            return self.onSuccess = false;
          }, 3000);
        }, function(err) {
          self.isLoading = false;
          self.error = true;
          return $log.error('impac-angular ERROR: Unable to POST widget_suggestion mailer: ', err);
        });
      }
    };
    return $scope.sortableOptions = {
      stop: saveDashboard = function() {
        var data;
        data = {
          widgets_order: _.pluck($scope.currentDhb.widgets, 'id')
        };
        return ImpacDashboardsSvc.update($scope.currentDhb.id, data);
      },
      start: updatePlaceHolderSize = function(e, widget) {
        widget.placeholder.css("width", widget.item.width() - 1);
        return widget.placeholder.css("height", widget.item.height());
      },
      cursorAt: {
        left: 100,
        top: 20
      },
      opacity: 0.5,
      delay: 150,
      tolerance: 'pointer',
      placeholder: "placeHolderBox",
      cursor: "move",
      revert: 250,
      cancel: ".unsortable",
      handle: ".top-line"
    };
  });

  module.directive('impacDashboard', function($templateCache) {
    return {
      restrict: 'EA',
      scope: {
        forceLoad: '=load'
      },
      template: $templateCache.get('dashboard/dashboard.tmpl.html'),
      controller: 'ImpacDashboardCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

(function() {
  angular.module('impac.components.dashboard-selector', []).directive('dashboardSelector', function($log, $compile, $templateCache, $http, $timeout, $modal, ImpacTheming, ImpacDashboardsSvc, ImpacMainSvc, ImpacUtilities) {
    return {
      restrict: 'E',
      scope: {
        onCreateDashboard: '&',
        isWidgetSelectorShown: '&',
        onDisplayWidgetSelector: '&',
        onSelectDashboard: '&'
      },
      controller: function($scope) {
        $scope.organizationsNames = function() {
          return _.pluck($scope.currentDhb.data_sources, 'label').join(", ");
        };
        $scope.toggleShowDashboardsDropdown = function() {
          if ($scope.showChangeDashboardNameBox) {
            return;
          }
          if (ImpacDashboardsSvc.areThereSeveralDashboards() || $scope.showCreateDashboardButton) {
            return $scope.showDashboardsDropdown = !$scope.showDashboardsDropdown;
          } else {
            return $scope.showDashboardsDropdown = false;
          }
        };
        $scope.selectDashboard = function(dhbId) {
          if ($scope.currentDhb.id === dhbId) {
            return;
          }
          $scope.isLoading = true;
          $scope.showDashboardsDropdown = false;
          return $timeout(function() {
            return $scope.$apply(function() {
              ImpacDashboardsSvc.setCurrentDashboard(dhbId);
              $scope.onSelectDashboard();
              return $scope.isLoading = false;
            });
          }, 50);
        };
        $scope.toggleChangeDashboardNameBox = function(dhb) {
          var tmpDhbCpy;
          tmpDhbCpy = angular.copy(dhb);
          $scope.dashboardToChange = {};
          $scope.dashboardToChange.id = tmpDhbCpy.id;
          $scope.dashboardToChange.name = tmpDhbCpy.full_name;
          $scope.showChangeDashboardNameBox = !$scope.showChangeDashboardNameBox;
          return $timeout(function() {
            var elem;
            elem = $('#changeDhbNameInput');
            elem.select();
            return elem.focus();
          }, 100);
        };
        $scope.hideChangeDashboardNameBox = function() {
          return $scope.showChangeDashboardNameBox = false;
        };
        $scope.checkAndUpdateDashboardName = function(event) {
          if (event.keyCode === 13) {
            $scope.updateDashboardName();
          }
          if (event.keyCode === 27) {
            return $scope.showChangeDashboardNameBox = false;
          }
        };
        $scope.updateDashboardName = function() {
          if (($scope.dashboardToChange == null) || _.isEmpty($scope.dashboardToChange.name)) {
            return;
          }
          return ImpacDashboardsSvc.update($scope.dashboardToChange.id, {
            name: $scope.dashboardToChange.name
          }).then(function(success) {
            return $scope.showChangeDashboardNameBox = false;
          });
        };
        $scope.toggleAccessibilityMode = function() {
          $scope.accessibilityMode = !$scope.accessibilityMode;
          return angular.forEach($scope.currentDhb.widgets, function(w) {
            return w.loadContent();
          });
        };
        $scope.deleteDashboardModal = $scope.$new();
        $scope.deleteDashboardModal.config = {
          backdrop: 'static',
          template: $templateCache.get('dashboard-selector/delete.modal.html'),
          size: 'md',
          windowClass: 'inverse',
          scope: $scope.deleteDashboardModal
        };
        $scope.deleteDashboardModal.open = function() {
          var self;
          self = $scope.deleteDashboardModal;
          if (self.locked) {
            return;
          }
          self.errors = '';
          self.isLoading = false;
          self.instance = $modal.open(self.config);
          self.instance.rendered.then(function(onRender) {
            return self.locked = true;
          });
          return self.instance.result.then(function(onClose) {
            return self.locked = false;
          }, function(onDismiss) {
            return self.locked = false;
          });
        };
        $scope.deleteDashboardModal.proceed = function() {
          var self;
          self = $scope.deleteDashboardModal;
          self.isLoading = true;
          return ImpacDashboardsSvc["delete"]($scope.currentDhb.id).then(function() {
            self.errors = '';
            return self.instance.close();
          }, function(errors) {
            self.errors = ImpacUtilities.processRailsError(errors);
            return self.isLoading = false;
          });
        };
        return $scope;
      },
      link: function(scope, element, attrs) {
        var _compile, customUrl, getCustomTemplate, getTemplate, options, selectorTemplate, setTemplate;
        scope.currentDhb = ImpacDashboardsSvc.getCurrentDashboard();
        scope.dashboardsList = ImpacDashboardsSvc.getDashboards();
        scope.isThereADashboard = function() {
          return ImpacDashboardsSvc.isThereADashboard();
        };
        options = ImpacTheming.get().dhbSelectorConfig;
        scope.isAccessibilityEnabled = options.accessibilityEnabled;
        scope.isAddWidgetEnabled = options.addWidgetEnabled;
        scope.isAddDhbEnabled = options.addDhbEnabled;
        scope.isDeleteDhbEnabled = options.deleteDhbEnabled;
        scope.showCreateDashboardButton = true;
        scope.showDashboardsDropdown = false;
        scope.showChangeDashboardNameBox = false;
        scope.accessibilityMode = false;
        if (!!options.customTmplPath) {
          customUrl = options.customTmplPath;
        } else {
          scope.selectorType = options.selectorType;
        }
        selectorTemplate = null;
        setTemplate = function(path) {
          return selectorTemplate = path;
        };
        switch (scope.selectorType) {
          case 'dropdown':
            setTemplate('dashboard-selector/dropdown.tmpl.html');
            break;
          case 'tabs':
            setTemplate('dashboard-selector/bootstrap-tabs.tmpl.html');
            break;
          case 'pills':
            setTemplate('dashboard-selector/bootstrap-tabs.tmpl.html');
            break;
          default:
            setTemplate(customUrl);
        }
        getCustomTemplate = function() {
          return $http.get(selectorTemplate, {
            cache: $templateCache
          }).then(function(tmplContent) {
            if (!tmplContent || !tmplContent.data || !tmplContent.data.length) {
              $log.warn('dashboardSelector custom template: no content found');
            }
            return _compile(tmplContent.data);
          }, function(err) {
            return $log.error('Error retrieving custom template: ', err);
          });
        };
        getTemplate = function() {
          return _compile($templateCache.get(selectorTemplate));
        };
        _compile = function(htmlString) {
          element.html(htmlString).show();
          return $compile(element.contents())(scope);
        };
        if (customUrl) {
          return getCustomTemplate();
        } else {
          return getTemplate();
        }
      }
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

(function() {
  angular.module('impac.components.kpi', []).directive('impacKpi', function($log, ImpacKpisSvc) {
    return {
      restrict: 'EA',
      scope: {
        onDelete: '&',
        kpi: '=',
        editMode: '='
      },
      templateUrl: 'kpi/kpi.tmpl.html',
      controller: function($scope) {
        $scope.showEditSettings = false;
        $scope.kpiTemplates = ImpacKpisSvc.getKpisTemplates();
        $scope.possibleExtraParams = [];
        $scope.limit = {};
        $scope.possibleTargets = [
          {
            label: 'over',
            mode: 'min'
          }, {
            label: 'below',
            mode: 'max'
          }
        ];
        if (!$scope.kpi["static"]) {
          ImpacKpisSvc.show($scope.kpi).then(function(success) {
            var base, kpiTemplate;
            kpiTemplate = _.find($scope.kpiTemplates, function(aKpi) {
              return aKpi.endpoint === $scope.kpi.endpoint;
            });
            if ((kpiTemplate != null) && (kpiTemplate.extra_params != null)) {
              $scope.kpi.possibleExtraParams = kpiTemplate.extra_params;
            }
            (base = $scope.kpi).targets || (base.targets = []);
            if (!_.isEmpty($scope.kpi.targets[0])) {
              if ($scope.kpi.limit == null) {
                $scope.kpi.limit = {};
              }
              $scope.kpi.limit.mode = _.keys($scope.kpi.targets[0])[0];
              return $scope.kpi.limit.value = _.values($scope.kpi.targets[0])[0];
            }
          });
        }
        $scope.displayEditSettings = function() {
          return $scope.showEditSettings = true;
        };
        $scope.hideEditSettings = function() {
          return $scope.showEditSettings = false;
        };
        $scope.updateName = function() {
          if (_.isEmpty($scope.kpi.name)) {
            return;
          }
          return ImpacKpisSvc.update($scope.kpi, {
            name: $scope.kpi.name
          });
        };
        $scope.updateSettings = function() {
          var params, target0;
          params = {};
          if (!(_.isEmpty($scope.kpi.limit.value || _.isEmpty($scope.kpi.limit.mode)))) {
            target0 = {};
            target0[$scope.kpi.limit.mode] = $scope.kpi.limit.value;
            params.targets = [target0];
          }
          if (!_.isEmpty($scope.kpi.extra_params)) {
            params.extra_params = $scope.kpi.extra_params;
          }
          if (!_.isEmpty(params)) {
            ImpacKpisSvc.update($scope.kpi, params);
          }
          return $scope.hideEditSettings();
        };
        return $scope.deleteKpi = function() {
          if ($scope.kpi["static"]) {
            return;
          }
          return ImpacKpisSvc["delete"]($scope.kpi).then((function(success) {
            return $scope.onDelete();
          }));
        };
      }
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMva3BpL2twaS5kaXJlY3RpdmUuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQUEsT0FDRSxDQUFDLE1BREgsQ0FDVSxzQkFEVixFQUNrQyxFQURsQyxDQUVFLENBQUMsU0FGSCxDQUVhLFVBRmIsRUFFeUIsU0FBQyxJQUFELEVBQU8sWUFBUDtBQUNyQixXQUFPO01BQ0wsUUFBQSxFQUFVLElBREw7TUFFTCxLQUFBLEVBQU87UUFDTCxRQUFBLEVBQVUsR0FETDtRQUVMLEdBQUEsRUFBSyxHQUZBO1FBR0wsUUFBQSxFQUFVLEdBSEw7T0FGRjtNQU9MLFdBQUEsRUFBYSxtQkFQUjtNQVNMLFVBQUEsRUFBWSxTQUFDLE1BQUQ7UUFDVixNQUFNLENBQUMsZ0JBQVAsR0FBMEI7UUFFMUIsTUFBTSxDQUFDLFlBQVAsR0FBc0IsWUFBWSxDQUFDLGdCQUFiLENBQUE7UUFDdEIsTUFBTSxDQUFDLG1CQUFQLEdBQTZCO1FBQzdCLE1BQU0sQ0FBQyxLQUFQLEdBQWU7UUFDZixNQUFNLENBQUMsZUFBUCxHQUF5QjtVQUN2QjtZQUFFLEtBQUEsRUFBTyxNQUFUO1lBQWlCLElBQUEsRUFBTSxLQUF2QjtXQUR1QixFQUV2QjtZQUFFLEtBQUEsRUFBTyxPQUFUO1lBQWtCLElBQUEsRUFBTSxLQUF4QjtXQUZ1Qjs7UUFLekIsSUFBQSxDQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBRCxDQUFqQjtVQUNFLFlBQVksQ0FBQyxJQUFiLENBQWtCLE1BQU0sQ0FBQyxHQUF6QixDQUE2QixDQUFDLElBQTlCLENBQ0UsU0FBQyxPQUFEO0FBRUUsZ0JBQUE7WUFBQSxXQUFBLEdBQWMsQ0FBQyxDQUFDLElBQUYsQ0FBTyxNQUFNLENBQUMsWUFBZCxFQUE0QixTQUFDLElBQUQ7cUJBQ3hDLElBQUksQ0FBQyxRQUFMLEtBQWlCLE1BQU0sQ0FBQyxHQUFHLENBQUM7WUFEWSxDQUE1QjtZQUlkLElBQUcscUJBQUEsSUFBZ0Isa0NBQW5CO2NBQ0UsTUFBTSxDQUFDLEdBQUcsQ0FBQyxtQkFBWCxHQUFpQyxXQUFXLENBQUMsYUFEL0M7O29CQUdBLE1BQU0sQ0FBQyxJQUFHLENBQUMsZ0JBQUQsQ0FBQyxVQUFZO1lBQ3ZCLElBQUcsQ0FBQyxDQUFDLENBQUMsT0FBRixDQUFVLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBUSxDQUFBLENBQUEsQ0FBN0IsQ0FBSjtjQUNFLElBQTBCLHdCQUExQjtnQkFBQSxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQVgsR0FBbUIsR0FBbkI7O2NBQ0EsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBakIsR0FBd0IsQ0FBQyxDQUFDLElBQUYsQ0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQVEsQ0FBQSxDQUFBLENBQTFCLENBQThCLENBQUEsQ0FBQTtxQkFDdEQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBakIsR0FBeUIsQ0FBQyxDQUFDLE1BQUYsQ0FBUyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQVEsQ0FBQSxDQUFBLENBQTVCLENBQWdDLENBQUEsQ0FBQSxFQUgzRDs7VUFWRixDQURGLEVBREY7O1FBa0JBLE1BQU0sQ0FBQyxtQkFBUCxHQUE2QixTQUFBO2lCQUMzQixNQUFNLENBQUMsZ0JBQVAsR0FBMEI7UUFEQztRQUc3QixNQUFNLENBQUMsZ0JBQVAsR0FBMEIsU0FBQTtpQkFDeEIsTUFBTSxDQUFDLGdCQUFQLEdBQTBCO1FBREY7UUFHMUIsTUFBTSxDQUFDLFVBQVAsR0FBb0IsU0FBQTtVQUNsQixJQUFVLENBQUMsQ0FBQyxPQUFGLENBQVUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFyQixDQUFWO0FBQUEsbUJBQUE7O2lCQUNBLFlBQVksQ0FBQyxNQUFiLENBQW9CLE1BQU0sQ0FBQyxHQUEzQixFQUFnQztZQUFFLElBQUEsRUFBTSxNQUFNLENBQUMsR0FBRyxDQUFDLElBQW5CO1dBQWhDO1FBRmtCO1FBSXBCLE1BQU0sQ0FBQyxjQUFQLEdBQXdCLFNBQUE7QUFDdEIsY0FBQTtVQUFBLE1BQUEsR0FBUztVQUNULElBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFGLENBQVUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBakIsSUFBMEIsQ0FBQyxDQUFDLE9BQUYsQ0FBVSxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUEzQixDQUFwQyxDQUFELENBQUo7WUFDRSxPQUFBLEdBQVU7WUFDVixPQUFRLENBQUEsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBakIsQ0FBUixHQUFpQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQztZQUNsRCxNQUFNLENBQUMsT0FBUCxHQUFpQixDQUFDLE9BQUQsRUFIbkI7O1VBSUEsSUFBQSxDQUFxRCxDQUFDLENBQUMsT0FBRixDQUFVLE1BQU0sQ0FBQyxHQUFHLENBQUMsWUFBckIsQ0FBckQ7WUFBQSxNQUFNLENBQUMsWUFBUCxHQUFzQixNQUFNLENBQUMsR0FBRyxDQUFDLGFBQWpDOztVQUVBLElBQUEsQ0FBK0MsQ0FBQyxDQUFDLE9BQUYsQ0FBVSxNQUFWLENBQS9DO1lBQUEsWUFBWSxDQUFDLE1BQWIsQ0FBb0IsTUFBTSxDQUFDLEdBQTNCLEVBQWdDLE1BQWhDLEVBQUE7O2lCQUVBLE1BQU0sQ0FBQyxnQkFBUCxDQUFBO1FBVnNCO2VBWXhCLE1BQU0sQ0FBQyxTQUFQLEdBQW1CLFNBQUE7VUFDakIsSUFBVSxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQUQsQ0FBcEI7QUFBQSxtQkFBQTs7aUJBQ0EsWUFBWSxDQUFDLFFBQUQsQ0FBWixDQUFvQixNQUFNLENBQUMsR0FBM0IsQ0FBK0IsQ0FBQyxJQUFoQyxDQUFxQyxDQUFDLFNBQUMsT0FBRDttQkFBYSxNQUFNLENBQUMsUUFBUCxDQUFBO1VBQWIsQ0FBRCxDQUFyQztRQUZpQjtNQW5EVCxDQVRQOztFQURjLENBRnpCO0FBQUEiLCJmaWxlIjoiY29tcG9uZW50cy9rcGkva3BpLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbImFuZ3VsYXJcbiAgLm1vZHVsZSgnaW1wYWMuY29tcG9uZW50cy5rcGknLCBbXSlcbiAgLmRpcmVjdGl2ZSgnaW1wYWNLcGknLCAoJGxvZywgSW1wYWNLcGlzU3ZjKSAtPlxuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogJ0VBJ1xuICAgICAgc2NvcGU6IHtcbiAgICAgICAgb25EZWxldGU6ICcmJ1xuICAgICAgICBrcGk6ICc9J1xuICAgICAgICBlZGl0TW9kZTogJz0nXG4gICAgICB9XG4gICAgICB0ZW1wbGF0ZVVybDogJ2twaS9rcGkudG1wbC5odG1sJ1xuXG4gICAgICBjb250cm9sbGVyOiAoJHNjb3BlKSAtPlxuICAgICAgICAkc2NvcGUuc2hvd0VkaXRTZXR0aW5ncyA9IGZhbHNlXG5cbiAgICAgICAgJHNjb3BlLmtwaVRlbXBsYXRlcyA9IEltcGFjS3Bpc1N2Yy5nZXRLcGlzVGVtcGxhdGVzKClcbiAgICAgICAgJHNjb3BlLnBvc3NpYmxlRXh0cmFQYXJhbXMgPSBbXVxuICAgICAgICAkc2NvcGUubGltaXQgPSB7fVxuICAgICAgICAkc2NvcGUucG9zc2libGVUYXJnZXRzID0gW1xuICAgICAgICAgIHsgbGFiZWw6ICdvdmVyJywgbW9kZTogJ21pbicgfVxuICAgICAgICAgIHsgbGFiZWw6ICdiZWxvdycsIG1vZGU6ICdtYXgnIH1cbiAgICAgICAgXVxuXG4gICAgICAgIHVubGVzcyAkc2NvcGUua3BpLnN0YXRpY1xuICAgICAgICAgIEltcGFjS3Bpc1N2Yy5zaG93KCRzY29wZS5rcGkpLnRoZW4oXG4gICAgICAgICAgICAoc3VjY2VzcykgLT5cbiAgICAgICAgICAgICAgIyBHZXQgdGhlIGNvcnJlc3BvbmRpbmcgdGVtcGxhdGUgb2YgdGhlIEtQSSBsb2FkZWRcbiAgICAgICAgICAgICAga3BpVGVtcGxhdGUgPSBfLmZpbmQgJHNjb3BlLmtwaVRlbXBsYXRlcywgKGFLcGkpIC0+XG4gICAgICAgICAgICAgICAgYUtwaS5lbmRwb2ludCA9PSAkc2NvcGUua3BpLmVuZHBvaW50XG5cbiAgICAgICAgICAgICAgIyBJZiB0aGUgdGVtcGxhdGUgY29udGFpbnMgZXh0cmEgcGFyYW1zIHdlIGFkZCBpdCB0byB0aGUgS1BJXG4gICAgICAgICAgICAgIGlmIGtwaVRlbXBsYXRlPyAmJiBrcGlUZW1wbGF0ZS5leHRyYV9wYXJhbXM/XG4gICAgICAgICAgICAgICAgJHNjb3BlLmtwaS5wb3NzaWJsZUV4dHJhUGFyYW1zID0ga3BpVGVtcGxhdGUuZXh0cmFfcGFyYW1zXG5cbiAgICAgICAgICAgICAgJHNjb3BlLmtwaS50YXJnZXRzIHx8PSBbXVxuICAgICAgICAgICAgICBpZiAhXy5pc0VtcHR5KCRzY29wZS5rcGkudGFyZ2V0c1swXSlcbiAgICAgICAgICAgICAgICAkc2NvcGUua3BpLmxpbWl0ID0ge30gaWYgISRzY29wZS5rcGkubGltaXQ/XG4gICAgICAgICAgICAgICAgJHNjb3BlLmtwaS5saW1pdC5tb2RlID0gXy5rZXlzKCRzY29wZS5rcGkudGFyZ2V0c1swXSlbMF1cbiAgICAgICAgICAgICAgICAkc2NvcGUua3BpLmxpbWl0LnZhbHVlID0gXy52YWx1ZXMoJHNjb3BlLmtwaS50YXJnZXRzWzBdKVswXVxuICAgICAgICAgIClcblxuICAgICAgICAkc2NvcGUuZGlzcGxheUVkaXRTZXR0aW5ncyA9IC0+XG4gICAgICAgICAgJHNjb3BlLnNob3dFZGl0U2V0dGluZ3MgPSB0cnVlXG5cbiAgICAgICAgJHNjb3BlLmhpZGVFZGl0U2V0dGluZ3MgPSAtPlxuICAgICAgICAgICRzY29wZS5zaG93RWRpdFNldHRpbmdzID0gZmFsc2VcblxuICAgICAgICAkc2NvcGUudXBkYXRlTmFtZSA9IC0+XG4gICAgICAgICAgcmV0dXJuIGlmIF8uaXNFbXB0eSgkc2NvcGUua3BpLm5hbWUpXG4gICAgICAgICAgSW1wYWNLcGlzU3ZjLnVwZGF0ZSgkc2NvcGUua3BpLCB7IG5hbWU6ICRzY29wZS5rcGkubmFtZSB9KVxuXG4gICAgICAgICRzY29wZS51cGRhdGVTZXR0aW5ncyA9IC0+XG4gICAgICAgICAgcGFyYW1zID0ge31cbiAgICAgICAgICBpZiAhKF8uaXNFbXB0eSAkc2NvcGUua3BpLmxpbWl0LnZhbHVlIHx8IF8uaXNFbXB0eSAkc2NvcGUua3BpLmxpbWl0Lm1vZGUpXG4gICAgICAgICAgICB0YXJnZXQwID0ge31cbiAgICAgICAgICAgIHRhcmdldDBbJHNjb3BlLmtwaS5saW1pdC5tb2RlXSA9ICRzY29wZS5rcGkubGltaXQudmFsdWVcbiAgICAgICAgICAgIHBhcmFtcy50YXJnZXRzID0gW3RhcmdldDBdXG4gICAgICAgICAgcGFyYW1zLmV4dHJhX3BhcmFtcyA9ICRzY29wZS5rcGkuZXh0cmFfcGFyYW1zIHVubGVzcyBfLmlzRW1wdHkoJHNjb3BlLmtwaS5leHRyYV9wYXJhbXMpXG5cbiAgICAgICAgICBJbXBhY0twaXNTdmMudXBkYXRlKCRzY29wZS5rcGksIHBhcmFtcykgdW5sZXNzIF8uaXNFbXB0eShwYXJhbXMpXG5cbiAgICAgICAgICAkc2NvcGUuaGlkZUVkaXRTZXR0aW5ncygpXG5cbiAgICAgICAgJHNjb3BlLmRlbGV0ZUtwaSA9IC0+XG4gICAgICAgICAgcmV0dXJuIGlmICRzY29wZS5rcGkuc3RhdGljXG4gICAgICAgICAgSW1wYWNLcGlzU3ZjLmRlbGV0ZSgkc2NvcGUua3BpKS50aGVuICgoc3VjY2VzcykgLT4gJHNjb3BlLm9uRGVsZXRlKCkpXG4gICAgfVxuICApXG4iXX0=

(function() {
  angular.module('impac.components.kpis-bar', []).directive('kpisBar', function($templateCache, ImpacKpisSvc) {
    return {
      restrict: 'E',
      scope: {
        kpis: '='
      },
      template: $templateCache.get('kpis-bar/kpis-bar.tmpl.html'),
      controller: function($scope, $timeout, $log) {
        $scope.hideAvailableKpis = true;
        $scope.showKpisExpanded = false;
        $scope.showEditMode = false;
        $scope.isAddingKPI = false;
        $scope.availableKpis = ImpacKpisSvc.getKpisTemplates();
        $scope.toggleAvailableKpis = function() {
          return $scope.hideAvailableKpis = !$scope.hideAvailableKpis;
        };
        $scope.formatKpiName = function(endpoint) {
          var endpoint_splitted, name;
          endpoint_splitted = endpoint.split('/');
          name = endpoint_splitted[0] + ' | ' + endpoint_splitted.slice(1, endpoint_splitted.length).join(' ');
          name = name.replace('_', ' ');
          return name;
        };
        $scope.addKpi = function(kpi) {
          $scope.isAddingKPI = true;
          return ImpacKpisSvc.create(kpi.source || 'impac', kpi.endpoint, kpi.element_watched).then(function(success) {
            return $scope.kpis.push(success);
          }, function(error) {
            return $log.error("Impac Kpis bar can't add a kpi", error);
          })["finally"](function() {
            return $scope.isAddingKPI = false;
          });
        };
        $scope.removeKpi = function(kpiId) {
          return $scope.kpis = _.remove($scope.kpis, function(kpi) {
            return kpi.id !== kpiId;
          });
        };
        return $scope.toggleEditMode = function() {
          return $scope.showEditMode = !$scope.showEditMode;
        };
      }
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMva3Bpcy1iYXIva3Bpcy1iYXIuZGlyZWN0aXZlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUFBLE9BQ0UsQ0FBQyxNQURILENBQ1UsMkJBRFYsRUFDdUMsRUFEdkMsQ0FFRSxDQUFDLFNBRkgsQ0FFYSxTQUZiLEVBRXdCLFNBQUMsY0FBRCxFQUFpQixZQUFqQjtBQUNwQixXQUFPO01BQ0wsUUFBQSxFQUFVLEdBREw7TUFFTCxLQUFBLEVBQU87UUFDTCxJQUFBLEVBQU0sR0FERDtPQUZGO01BS0wsUUFBQSxFQUFVLGNBQWMsQ0FBQyxHQUFmLENBQW1CLDZCQUFuQixDQUxMO01BT0wsVUFBQSxFQUFZLFNBQUMsTUFBRCxFQUFTLFFBQVQsRUFBbUIsSUFBbkI7UUFDVixNQUFNLENBQUMsaUJBQVAsR0FBMkI7UUFDM0IsTUFBTSxDQUFDLGdCQUFQLEdBQTBCO1FBQzFCLE1BQU0sQ0FBQyxZQUFQLEdBQXNCO1FBQ3RCLE1BQU0sQ0FBQyxXQUFQLEdBQXFCO1FBSXJCLE1BQU0sQ0FBQyxhQUFQLEdBQXVCLFlBQVksQ0FBQyxnQkFBYixDQUFBO1FBVXZCLE1BQU0sQ0FBQyxtQkFBUCxHQUE2QixTQUFBO2lCQUMzQixNQUFNLENBQUMsaUJBQVAsR0FBMkIsQ0FBQyxNQUFNLENBQUM7UUFEUjtRQUc3QixNQUFNLENBQUMsYUFBUCxHQUF1QixTQUFDLFFBQUQ7QUFDckIsY0FBQTtVQUFBLGlCQUFBLEdBQW9CLFFBQVEsQ0FBQyxLQUFULENBQWUsR0FBZjtVQUNwQixJQUFBLEdBQU8saUJBQWtCLENBQUEsQ0FBQSxDQUFsQixHQUF1QixLQUF2QixHQUErQixpQkFBaUIsQ0FBQyxLQUFsQixDQUF3QixDQUF4QixFQUEwQixpQkFBaUIsQ0FBQyxNQUE1QyxDQUFtRCxDQUFDLElBQXBELENBQXlELEdBQXpEO1VBQ3RDLElBQUEsR0FBTyxJQUFJLENBQUMsT0FBTCxDQUFhLEdBQWIsRUFBa0IsR0FBbEI7QUFDUCxpQkFBTztRQUpjO1FBTXZCLE1BQU0sQ0FBQyxNQUFQLEdBQWdCLFNBQUMsR0FBRDtVQUNkLE1BQU0sQ0FBQyxXQUFQLEdBQXFCO2lCQUNyQixZQUFZLENBQUMsTUFBYixDQUFvQixHQUFHLENBQUMsTUFBSixJQUFjLE9BQWxDLEVBQTJDLEdBQUcsQ0FBQyxRQUEvQyxFQUF5RCxHQUFHLENBQUMsZUFBN0QsQ0FBNkUsQ0FBQyxJQUE5RSxDQUNFLFNBQUMsT0FBRDttQkFDRSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQVosQ0FBaUIsT0FBakI7VUFERixDQURGLEVBR0UsU0FBQyxLQUFEO21CQUNFLElBQUksQ0FBQyxLQUFMLENBQVcsZ0NBQVgsRUFBNkMsS0FBN0M7VUFERixDQUhGLENBS0MsQ0FBQyxTQUFELENBTEQsQ0FLVSxTQUFBO21CQUFHLE1BQU0sQ0FBQyxXQUFQLEdBQXFCO1VBQXhCLENBTFY7UUFGYztRQVNoQixNQUFNLENBQUMsU0FBUCxHQUFtQixTQUFDLEtBQUQ7aUJBQ2pCLE1BQU0sQ0FBQyxJQUFQLEdBQWMsQ0FBQyxDQUFDLE1BQUYsQ0FBUyxNQUFNLENBQUMsSUFBaEIsRUFBc0IsU0FBQyxHQUFEO21CQUNsQyxHQUFHLENBQUMsRUFBSixLQUFVO1VBRHdCLENBQXRCO1FBREc7ZUFLbkIsTUFBTSxDQUFDLGNBQVAsR0FBd0IsU0FBQTtpQkFDdEIsTUFBTSxDQUFDLFlBQVAsR0FBc0IsQ0FBQyxNQUFNLENBQUM7UUFEUjtNQXpDZCxDQVBQOztFQURhLENBRnhCO0FBQUEiLCJmaWxlIjoiY29tcG9uZW50cy9rcGlzLWJhci9rcGlzLWJhci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJhbmd1bGFyXG4gIC5tb2R1bGUoJ2ltcGFjLmNvbXBvbmVudHMua3Bpcy1iYXInLCBbXSlcbiAgLmRpcmVjdGl2ZSgna3Bpc0JhcicsICgkdGVtcGxhdGVDYWNoZSwgSW1wYWNLcGlzU3ZjKSAtPlxuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogJ0UnXG4gICAgICBzY29wZToge1xuICAgICAgICBrcGlzOiAnPSdcbiAgICAgIH1cbiAgICAgIHRlbXBsYXRlOiAkdGVtcGxhdGVDYWNoZS5nZXQoJ2twaXMtYmFyL2twaXMtYmFyLnRtcGwuaHRtbCcpXG5cbiAgICAgIGNvbnRyb2xsZXI6ICgkc2NvcGUsICR0aW1lb3V0LCAkbG9nKSAtPlxuICAgICAgICAkc2NvcGUuaGlkZUF2YWlsYWJsZUtwaXMgPSB0cnVlXG4gICAgICAgICRzY29wZS5zaG93S3Bpc0V4cGFuZGVkID0gZmFsc2VcbiAgICAgICAgJHNjb3BlLnNob3dFZGl0TW9kZSA9IGZhbHNlXG4gICAgICAgICRzY29wZS5pc0FkZGluZ0tQSSA9IGZhbHNlXG5cbiAgICAgICAgIyByZWZlcmVuY2VzIHRvIHNlcnZpY2VzIChib3VuZCBvYmplY3RzIHNoYXJlZCBiZXR3ZWVuIGFsbCBjb250cm9sbGVycylcbiAgICAgICAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICRzY29wZS5hdmFpbGFibGVLcGlzID0gSW1wYWNLcGlzU3ZjLmdldEtwaXNUZW1wbGF0ZXMoKVxuXG4gICAgICAgICMgJHNjb3BlLmtleVN0YXRzID0gW1xuICAgICAgICAjICAgeyBuYW1lOiAnSW50ZXJlc3QnLCBkYXRhOiB7IHZhbHVlOiAnLTE1LjMwJywgdW5pdDogJyUnIH0sIHN0YXRpYzogdHJ1ZSB9LFxuICAgICAgICAjICAgeyBuYW1lOiAnUHJvZml0YWJpbGl0eScsIGRhdGE6IHsgdmFsdWU6ICc4LjM0JywgdW5pdDogJyUnIH0sIHN0YXRpYzogdHJ1ZX0sXG4gICAgICAgICMgICB7IG5hbWU6ICdDb3N0IG9mIGNhcGl0YWwnLCBkYXRhOiB7IHZhbHVlOiAnMjAuMDAnLCB1bml0OiAnQVVEJyB9LCBzdGF0aWM6IHRydWV9LFxuICAgICAgICAjICAgeyBuYW1lOiAnVEFYICUgYmFzZWQgb24gRlkxNCcsIGRhdGE6IHsgdmFsdWU6ICcyOS45MScsIHVuaXQ6ICclJyB9LCBzdGF0aWM6IHRydWV9LFxuICAgICAgICAjICAgeyBuYW1lOiAnU3VwZXInLCBkYXRhOiB7IHZhbHVlOiAnNDc5MDIzJywgdW5pdDogJ0FVRCcgfSwgc3RhdGljOiB0cnVlfVxuICAgICAgICAjIF1cblxuICAgICAgICAkc2NvcGUudG9nZ2xlQXZhaWxhYmxlS3BpcyA9IC0+XG4gICAgICAgICAgJHNjb3BlLmhpZGVBdmFpbGFibGVLcGlzID0gISRzY29wZS5oaWRlQXZhaWxhYmxlS3Bpc1xuXG4gICAgICAgICRzY29wZS5mb3JtYXRLcGlOYW1lID0gKGVuZHBvaW50KSAtPlxuICAgICAgICAgIGVuZHBvaW50X3NwbGl0dGVkID0gZW5kcG9pbnQuc3BsaXQoJy8nKVxuICAgICAgICAgIG5hbWUgPSBlbmRwb2ludF9zcGxpdHRlZFswXSArICcgfCAnICsgZW5kcG9pbnRfc3BsaXR0ZWQuc2xpY2UoMSxlbmRwb2ludF9zcGxpdHRlZC5sZW5ndGgpLmpvaW4oJyAnKVxuICAgICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoJ18nLCAnICcpXG4gICAgICAgICAgcmV0dXJuIG5hbWVcblxuICAgICAgICAkc2NvcGUuYWRkS3BpID0gKGtwaSkgLT5cbiAgICAgICAgICAkc2NvcGUuaXNBZGRpbmdLUEkgPSB0cnVlXG4gICAgICAgICAgSW1wYWNLcGlzU3ZjLmNyZWF0ZShrcGkuc291cmNlIHx8ICdpbXBhYycsIGtwaS5lbmRwb2ludCwga3BpLmVsZW1lbnRfd2F0Y2hlZCkudGhlbihcbiAgICAgICAgICAgIChzdWNjZXNzKSAtPlxuICAgICAgICAgICAgICAkc2NvcGUua3Bpcy5wdXNoKHN1Y2Nlc3MpXG4gICAgICAgICAgICAoZXJyb3IpIC0+XG4gICAgICAgICAgICAgICRsb2cuZXJyb3IoXCJJbXBhYyBLcGlzIGJhciBjYW4ndCBhZGQgYSBrcGlcIiwgZXJyb3IpXG4gICAgICAgICAgKS5maW5hbGx5KC0+ICRzY29wZS5pc0FkZGluZ0tQSSA9IGZhbHNlKVxuXG4gICAgICAgICRzY29wZS5yZW1vdmVLcGkgPSAoa3BpSWQpIC0+XG4gICAgICAgICAgJHNjb3BlLmtwaXMgPSBfLnJlbW92ZSgkc2NvcGUua3BpcywgKGtwaSkgLT5cbiAgICAgICAgICAgIGtwaS5pZCAhPSBrcGlJZFxuICAgICAgICAgIClcblxuICAgICAgICAkc2NvcGUudG9nZ2xlRWRpdE1vZGUgPSAtPlxuICAgICAgICAgICRzY29wZS5zaG93RWRpdE1vZGUgPSAhJHNjb3BlLnNob3dFZGl0TW9kZVxuICAgIH1cbiAgKVxuIl19

(function() {
  var module;

  module = angular.module('impac.components.widget', []);

  module.controller('ImpacWidgetCtrl', function($scope, $log, $q, $timeout, ImpacWidgetsSvc) {
    var w;
    w = $scope.widget || {};
    $scope.widgetDeferred = $q.defer();
    $scope.widgetDeferred.promise.then(function(promises) {
      return $q.all(promises).then(function(success) {
        return $scope.showWidget();
      }, function(error) {
        w.isLoading = false;
        $log.error("widget " + w.id + " failed to render");
        return $log.error(error);
      });
    });
    $scope.showWidget = function(refreshCache) {
      if (refreshCache == null) {
        refreshCache = false;
      }
      w.isLoading || (w.isLoading = true);
      return ImpacWidgetsSvc.show(w, refreshCache).then(function(updatedWidget) {
        if ($scope.isAccessibility) {
          w.initialWidth = w.width;
          return w.width = 12;
        } else if (w.initialWidth) {
          return w.width = w.initialWidth;
        }
      })["finally"](function() {
        return w.isLoading = false;
      });
    };
    $scope.initSettings = function() {
      return ImpacWidgetsSvc.initWidgetSettings(w);
    };
    $scope.updateSettings = function(needContentReload) {
      if (needContentReload == null) {
        needContentReload = true;
      }
      return ImpacWidgetsSvc.updateWidgetSettings(w, needContentReload);
    };
    return w.getColClass = function() {
      return "col-md-" + w.width;
    };
  });

  module.directive('impacWidget', function($templateCache) {
    return {
      restrict: 'A',
      scope: {
        parentDashboard: '=',
        widget: '=',
        isAccessibility: '=',
        onDisplayAlerts: '&'
      },
      controller: 'ImpacWidgetCtrl',
      link: function(scope, element) {
        scope.widget.isLoading = true;
        scope.widget.settings = [];
        scope.widget.hasEditAbility = true;
        scope.widget.hasDeleteAbility = true;
        return scope.widgetContentTemplate = function() {
          var splittedPath, templatePath;
          if (scope.widget.metadata.template) {
            scope.templateName = scope.widget.metadata.template.replace(/\/|_/g, '-');
          } else {
            splittedPath = angular.copy(scope.widget.category).split('/');
            splittedPath.length = 2;
            scope.templateName = splittedPath.join("-").replace(/_/g, '-');
          }
          templatePath = 'widgets/' + scope.templateName + '.tmpl.html';
          if (scope.isAccessibility) {
            if ($templateCache.get('widgets/' + scope.templateName + '.accessible.tmpl.html')) {
              templatePath = 'widgets/' + scope.templateName + '.accessible.tmpl.html';
            }
            scope.templateName = scope.templateName + ' accessible';
          }
          return templatePath;
        };
      },
      template: $templateCache.get('widget/widget.tmpl.html')
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0L3dpZGdldC5kaXJlY3RpdmUuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQTs7RUFBQSxNQUFBLEdBQVMsT0FBTyxDQUFDLE1BQVIsQ0FBZSx5QkFBZixFQUEwQyxFQUExQzs7RUFDVCxNQUFNLENBQUMsVUFBUCxDQUFrQixpQkFBbEIsRUFBcUMsU0FBQyxNQUFELEVBQVMsSUFBVCxFQUFlLEVBQWYsRUFBbUIsUUFBbkIsRUFBNkIsZUFBN0I7QUFFbkMsUUFBQTtJQUFBLENBQUEsR0FBSSxNQUFNLENBQUMsTUFBUCxJQUFpQjtJQUtyQixNQUFNLENBQUMsY0FBUCxHQUF3QixFQUFFLENBQUMsS0FBSCxDQUFBO0lBQ3hCLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLElBQTlCLENBRUUsU0FBQyxRQUFEO2FBQ0UsRUFBRSxDQUFDLEdBQUgsQ0FBTyxRQUFQLENBQWdCLENBQUMsSUFBakIsQ0FDRSxTQUFDLE9BQUQ7ZUFDRSxNQUFNLENBQUMsVUFBUCxDQUFBO01BREYsQ0FERixFQUlFLFNBQUMsS0FBRDtRQUNFLENBQUMsQ0FBQyxTQUFGLEdBQWM7UUFDZCxJQUFJLENBQUMsS0FBTCxDQUFXLFNBQUEsR0FBVSxDQUFDLENBQUMsRUFBWixHQUFlLG1CQUExQjtlQUNBLElBQUksQ0FBQyxLQUFMLENBQVcsS0FBWDtNQUhGLENBSkY7SUFERixDQUZGO0lBZUEsTUFBTSxDQUFDLFVBQVAsR0FBb0IsU0FBQyxZQUFEOztRQUFDLGVBQWE7O01BQ2hDLENBQUMsQ0FBQyxjQUFGLENBQUMsQ0FBQyxZQUFjO2FBQ2hCLGVBQWUsQ0FBQyxJQUFoQixDQUFxQixDQUFyQixFQUF3QixZQUF4QixDQUFxQyxDQUFDLElBQXRDLENBQ0UsU0FBQyxhQUFEO1FBRUUsSUFBRyxNQUFNLENBQUMsZUFBVjtVQUNFLENBQUMsQ0FBQyxZQUFGLEdBQWlCLENBQUMsQ0FBQztpQkFDbkIsQ0FBQyxDQUFDLEtBQUYsR0FBVSxHQUZaO1NBQUEsTUFHSyxJQUFHLENBQUMsQ0FBQyxZQUFMO2lCQUNILENBQUMsQ0FBQyxLQUFGLEdBQVUsQ0FBQyxDQUFDLGFBRFQ7O01BTFAsQ0FERixDQVFDLENBQUMsU0FBRCxDQVJELENBUVcsU0FBQTtlQUFHLENBQUMsQ0FBQyxTQUFGLEdBQWM7TUFBakIsQ0FSWDtJQUZrQjtJQVlwQixNQUFNLENBQUMsWUFBUCxHQUFzQixTQUFBO2FBQ3BCLGVBQWUsQ0FBQyxrQkFBaEIsQ0FBbUMsQ0FBbkM7SUFEb0I7SUFHdEIsTUFBTSxDQUFDLGNBQVAsR0FBd0IsU0FBQyxpQkFBRDs7UUFBQyxvQkFBa0I7O2FBQ3pDLGVBQWUsQ0FBQyxvQkFBaEIsQ0FBcUMsQ0FBckMsRUFBd0MsaUJBQXhDO0lBRHNCO1dBR3hCLENBQUMsQ0FBQyxXQUFGLEdBQWdCLFNBQUE7YUFDZCxTQUFBLEdBQVUsQ0FBQyxDQUFDO0lBREU7RUF6Q21CLENBQXJDOztFQTZDQSxNQUFNLENBQUMsU0FBUCxDQUFpQixhQUFqQixFQUFnQyxTQUFDLGNBQUQ7QUFDOUIsV0FBTztNQUNMLFFBQUEsRUFBVSxHQURMO01BRUwsS0FBQSxFQUFPO1FBQ0wsZUFBQSxFQUFpQixHQURaO1FBRUwsTUFBQSxFQUFRLEdBRkg7UUFHTCxlQUFBLEVBQWlCLEdBSFo7UUFJTCxlQUFBLEVBQWlCLEdBSlo7T0FGRjtNQVFMLFVBQUEsRUFBWSxpQkFSUDtNQVNMLElBQUEsRUFBTSxTQUFDLEtBQUQsRUFBUSxPQUFSO1FBSUosS0FBSyxDQUFDLE1BQU0sQ0FBQyxTQUFiLEdBQXlCO1FBQ3pCLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBYixHQUF3QjtRQUV4QixLQUFLLENBQUMsTUFBTSxDQUFDLGNBQWIsR0FBOEI7UUFDOUIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxnQkFBYixHQUFnQztlQU9oQyxLQUFLLENBQUMscUJBQU4sR0FBOEIsU0FBQTtBQUU1QixjQUFBO1VBQUEsSUFBRyxLQUFLLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUF6QjtZQUNFLEtBQUssQ0FBQyxZQUFOLEdBQXFCLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxPQUEvQixDQUF1QyxPQUF2QyxFQUFnRCxHQUFoRCxFQUR2QjtXQUFBLE1BQUE7WUFLRSxZQUFBLEdBQWUsT0FBTyxDQUFDLElBQVIsQ0FBYSxLQUFLLENBQUMsTUFBTSxDQUFDLFFBQTFCLENBQW1DLENBQUMsS0FBcEMsQ0FBMEMsR0FBMUM7WUFFZixZQUFZLENBQUMsTUFBYixHQUFzQjtZQUN0QixLQUFLLENBQUMsWUFBTixHQUFxQixZQUFZLENBQUMsSUFBYixDQUFrQixHQUFsQixDQUFzQixDQUFDLE9BQXZCLENBQStCLElBQS9CLEVBQXFDLEdBQXJDLEVBUnZCOztVQVdBLFlBQUEsR0FBZSxVQUFBLEdBQWEsS0FBSyxDQUFDLFlBQW5CLEdBQWtDO1VBRWpELElBQUcsS0FBSyxDQUFDLGVBQVQ7WUFDRSxJQUFHLGNBQWMsQ0FBQyxHQUFmLENBQW1CLFVBQUEsR0FBYSxLQUFLLENBQUMsWUFBbkIsR0FBa0MsdUJBQXJELENBQUg7Y0FDRSxZQUFBLEdBQWUsVUFBQSxHQUFhLEtBQUssQ0FBQyxZQUFuQixHQUFrQyx3QkFEbkQ7O1lBRUEsS0FBSyxDQUFDLFlBQU4sR0FBcUIsS0FBSyxDQUFDLFlBQU4sR0FBcUIsY0FINUM7O0FBS0EsaUJBQU87UUFwQnFCO01BZjFCLENBVEQ7TUE4Q0osUUFBQSxFQUFVLGNBQWMsQ0FBQyxHQUFmLENBQW1CLHlCQUFuQixDQTlDTjs7RUFEdUIsQ0FBaEM7QUE5Q0EiLCJmaWxlIjoiY29tcG9uZW50cy93aWRnZXQvd2lkZ2V0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdpbXBhYy5jb21wb25lbnRzLndpZGdldCcsIFtdKVxubW9kdWxlLmNvbnRyb2xsZXIoJ0ltcGFjV2lkZ2V0Q3RybCcsICgkc2NvcGUsICRsb2csICRxLCAkdGltZW91dCwgSW1wYWNXaWRnZXRzU3ZjKSAtPlxuXG4gIHcgPSAkc2NvcGUud2lkZ2V0IHx8IHt9XG5cbiAgIyAxc3QgbG9hZFxuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAjIHdpZGdldERlZmVycmVkIHdpbGwgYmUgcmVzb2x2ZWQgb25jZSB0aGUgd2lkZ2V0IGlzIHJlYWR5IChpZTogYXQgdGhlIGVuZCBvZiB0aGUgJ3NwZWNpZmljJyBkaXJlY3RpdmUpXG4gICRzY29wZS53aWRnZXREZWZlcnJlZCA9ICRxLmRlZmVyKClcbiAgJHNjb3BlLndpZGdldERlZmVycmVkLnByb21pc2UudGhlbihcbiAgICAjIGVhY2ggcHJvbWlzZSBjb3JyZXNwb25kcyB0byBhIHNldHRpbmcsIGFuZCB3aWxsIGJlIHJlc29sdmVkIG9uY2UgdGhlIHNldHRpbmcgaXMgcmVhZHlcbiAgICAocHJvbWlzZXMpIC0+XG4gICAgICAkcS5hbGwocHJvbWlzZXMpLnRoZW4oXG4gICAgICAgIChzdWNjZXNzKSAtPlxuICAgICAgICAgICRzY29wZS5zaG93V2lkZ2V0KClcblxuICAgICAgICAoZXJyb3IpIC0+XG4gICAgICAgICAgdy5pc0xvYWRpbmcgPSBmYWxzZVxuICAgICAgICAgICRsb2cuZXJyb3IoXCJ3aWRnZXQgI3t3LmlkfSBmYWlsZWQgdG8gcmVuZGVyXCIpXG4gICAgICAgICAgJGxvZy5lcnJvcihlcnJvcilcbiAgICAgIClcbiAgKVxuXG5cbiAgJHNjb3BlLnNob3dXaWRnZXQgPSAocmVmcmVzaENhY2hlPWZhbHNlKSAtPlxuICAgIHcuaXNMb2FkaW5nIHx8PSB0cnVlXG4gICAgSW1wYWNXaWRnZXRzU3ZjLnNob3codywgcmVmcmVzaENhY2hlKS50aGVuKFxuICAgICAgKHVwZGF0ZWRXaWRnZXQpIC0+XG4gICAgICAgICNUT0RPOiBBY2Nlc3NpYmlsaXR5IHNob3VsZCBiZSB0cmVhdGVkIGRpZmZlcmVudGx5IChpbiBzZXJ2aWNlPylcbiAgICAgICAgaWYgJHNjb3BlLmlzQWNjZXNzaWJpbGl0eVxuICAgICAgICAgIHcuaW5pdGlhbFdpZHRoID0gdy53aWR0aFxuICAgICAgICAgIHcud2lkdGggPSAxMlxuICAgICAgICBlbHNlIGlmIHcuaW5pdGlhbFdpZHRoXG4gICAgICAgICAgdy53aWR0aCA9IHcuaW5pdGlhbFdpZHRoXG4gICAgKS5maW5hbGx5KCAtPiB3LmlzTG9hZGluZyA9IGZhbHNlICkgXG5cbiAgJHNjb3BlLmluaXRTZXR0aW5ncyA9IC0+XG4gICAgSW1wYWNXaWRnZXRzU3ZjLmluaXRXaWRnZXRTZXR0aW5ncyh3KVxuXG4gICRzY29wZS51cGRhdGVTZXR0aW5ncyA9IChuZWVkQ29udGVudFJlbG9hZD10cnVlKSAtPlxuICAgIEltcGFjV2lkZ2V0c1N2Yy51cGRhdGVXaWRnZXRTZXR0aW5ncyh3LCBuZWVkQ29udGVudFJlbG9hZClcblxuICB3LmdldENvbENsYXNzID0gLT5cbiAgICBcImNvbC1tZC0je3cud2lkdGh9XCJcbilcblxubW9kdWxlLmRpcmVjdGl2ZSgnaW1wYWNXaWRnZXQnLCAoJHRlbXBsYXRlQ2FjaGUpIC0+XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBzY29wZToge1xuICAgICAgcGFyZW50RGFzaGJvYXJkOiAnPSdcbiAgICAgIHdpZGdldDogJz0nXG4gICAgICBpc0FjY2Vzc2liaWxpdHk6ICc9J1xuICAgICAgb25EaXNwbGF5QWxlcnRzOiAnJidcbiAgICB9LFxuICAgIGNvbnRyb2xsZXI6ICdJbXBhY1dpZGdldEN0cmwnLFxuICAgIGxpbms6IChzY29wZSwgZWxlbWVudCkgLT5cblxuICAgICAgIyBpbml0aWFsaXplIHNjb3BlIGF0dHJpYnV0ZXNcbiAgICAgICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgIHNjb3BlLndpZGdldC5pc0xvYWRpbmcgPSB0cnVlXG4gICAgICBzY29wZS53aWRnZXQuc2V0dGluZ3MgPSBbXVxuICAgICAgIyBVbnVzZWQgc28gZmFyIC0tPlxuICAgICAgc2NvcGUud2lkZ2V0Lmhhc0VkaXRBYmlsaXR5ID0gdHJ1ZVxuICAgICAgc2NvcGUud2lkZ2V0Lmhhc0RlbGV0ZUFiaWxpdHkgPSB0cnVlXG4gICAgICAjIDwtLVxuXG4gICAgICAjPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICAjIERZTkFNSUMgV0lER0VUIFRFTVBMQVRFIExPQURJTkdcbiAgICAgICMgd2lkZ2V0IGNhdGVnb3J5IGFuZCBtZXRhZGF0YS50ZW1wbGF0ZSBkYXRhIHNlbnQgZnJvbSBNYWVzdHJhbm8gZGIuXG4gICAgICAjPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICBzY29wZS53aWRnZXRDb250ZW50VGVtcGxhdGUgPSAtPlxuICAgICAgICAjIGltcGFjLWFuZ3VsYXIgY29tcG9uZW50IHRlbXBsYXRlIG5hbWVcbiAgICAgICAgaWYgc2NvcGUud2lkZ2V0Lm1ldGFkYXRhLnRlbXBsYXRlXG4gICAgICAgICAgc2NvcGUudGVtcGxhdGVOYW1lID0gc2NvcGUud2lkZ2V0Lm1ldGFkYXRhLnRlbXBsYXRlLnJlcGxhY2UoL1xcL3xfL2csICctJylcblxuICAgICAgICAjIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgZm9yIG9sZCB3aWRnZXRzXG4gICAgICAgIGVsc2VcbiAgICAgICAgICBzcGxpdHRlZFBhdGggPSBhbmd1bGFyLmNvcHkoc2NvcGUud2lkZ2V0LmNhdGVnb3J5KS5zcGxpdCgnLycpXG4gICAgICAgICAgIyByZW1vdmUgYW55IG51bWJlciBvZiBwYXRoIGV4dGVuc2lvbnMgYmV5b25kIGxlbmd0aCA+IDIuIChlZzogYWNjb3VudGluZ192YWx1ZXMgaXMgYSB0ZW1wbGF0ZSB1c2VkIGJ5IHNldmVyYWwgZGlmZmVyZW50IHdpZGdldHMpXG4gICAgICAgICAgc3BsaXR0ZWRQYXRoLmxlbmd0aCA9IDJcbiAgICAgICAgICBzY29wZS50ZW1wbGF0ZU5hbWUgPSBzcGxpdHRlZFBhdGguam9pbihcIi1cIikucmVwbGFjZSgvXy9nLCAnLScpXG5cbiAgICAgICAgIyB1cmwgZm9yIHJldHJlaXZpbmcgd2lkZ2V0IHRlbXBsYXRlcyBmcm9tIGFuZ3VsYXIgJHRlbXBsYXRlQ2FjaGUgc2VydmljZS5cbiAgICAgICAgdGVtcGxhdGVQYXRoID0gJ3dpZGdldHMvJyArIHNjb3BlLnRlbXBsYXRlTmFtZSArICcudG1wbC5odG1sJ1xuXG4gICAgICAgIGlmIHNjb3BlLmlzQWNjZXNzaWJpbGl0eVxuICAgICAgICAgIGlmICR0ZW1wbGF0ZUNhY2hlLmdldCgnd2lkZ2V0cy8nICsgc2NvcGUudGVtcGxhdGVOYW1lICsgJy5hY2Nlc3NpYmxlLnRtcGwuaHRtbCcpXG4gICAgICAgICAgICB0ZW1wbGF0ZVBhdGggPSAnd2lkZ2V0cy8nICsgc2NvcGUudGVtcGxhdGVOYW1lICsgJy5hY2Nlc3NpYmxlLnRtcGwuaHRtbCdcbiAgICAgICAgICBzY29wZS50ZW1wbGF0ZU5hbWUgPSBzY29wZS50ZW1wbGF0ZU5hbWUgKyAnIGFjY2Vzc2libGUnXG5cbiAgICAgICAgcmV0dXJuIHRlbXBsYXRlUGF0aFxuXG4gICAgLHRlbXBsYXRlOiAkdGVtcGxhdGVDYWNoZS5nZXQoJ3dpZGdldC93aWRnZXQudG1wbC5odG1sJylcbiAgfVxuKVxuIl19

(function() {
  angular.module('impac.filters.url-helper', []).filter('urlHelper', function() {
    return function(input, params) {
      var processArrayParams, processObjectParams;
      if (!input || !input.length) {
        return;
      }
      processArrayParams = function() {
        input = [input, params.shift()].join('?');
        return input = [].concat.apply([], [input, params]).join('&');
      };
      processObjectParams = function() {
        var arr, i, keys;
        i = 0;
        arr = [];
        keys = Object.keys(params);
        while (i < keys.length) {
          arr.push(keys[i] + '=' + params[keys[i]]);
          i++;
        }
        params = arr;
        return processArrayParams();
      };
      if (Array.isArray(params)) {
        processArrayParams();
      }
      if (typeof params === 'object' && !Array.isArray(params)) {
        processObjectParams();
      }
      return input;
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbHRlcnMvdXJsLWhlbHBlci91cmxIZWxwZXIuZmlsdGVyLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQTtFQUFBLE9BQ0UsQ0FBQyxNQURILENBQ1UsMEJBRFYsRUFDc0MsRUFEdEMsQ0FFRSxDQUFDLE1BRkgsQ0FFVSxXQUZWLEVBRXVCLFNBQUE7QUFDbkIsV0FBTyxTQUFDLEtBQUQsRUFBUSxNQUFSO0FBQ0wsVUFBQTtNQUFBLElBQVUsQ0FBQyxLQUFELElBQVUsQ0FBQyxLQUFLLENBQUMsTUFBM0I7QUFBQSxlQUFBOztNQUVBLGtCQUFBLEdBQXFCLFNBQUE7UUFDbkIsS0FBQSxHQUFRLENBQUMsS0FBRCxFQUFPLE1BQU0sQ0FBQyxLQUFQLENBQUEsQ0FBUCxDQUFzQixDQUFDLElBQXZCLENBQTRCLEdBQTVCO2VBQ1IsS0FBQSxHQUFRLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBVixDQUFnQixFQUFoQixFQUFvQixDQUFDLEtBQUQsRUFBUSxNQUFSLENBQXBCLENBQW9DLENBQUMsSUFBckMsQ0FBMEMsR0FBMUM7TUFGVztNQUlyQixtQkFBQSxHQUFzQixTQUFBO0FBQ3BCLFlBQUE7UUFBQSxDQUFBLEdBQUk7UUFDSixHQUFBLEdBQU07UUFDTixJQUFBLEdBQU8sTUFBTSxDQUFDLElBQVAsQ0FBWSxNQUFaO0FBQ1AsZUFBTSxDQUFBLEdBQUksSUFBSSxDQUFDLE1BQWY7VUFDRSxHQUFHLENBQUMsSUFBSixDQUFTLElBQUssQ0FBQSxDQUFBLENBQUwsR0FBVSxHQUFWLEdBQWdCLE1BQU8sQ0FBQSxJQUFLLENBQUEsQ0FBQSxDQUFMLENBQWhDO1VBQ0EsQ0FBQTtRQUZGO1FBR0EsTUFBQSxHQUFTO2VBQ1Qsa0JBQUEsQ0FBQTtNQVJvQjtNQVV0QixJQUF3QixLQUFLLENBQUMsT0FBTixDQUFjLE1BQWQsQ0FBeEI7UUFBQSxrQkFBQSxDQUFBLEVBQUE7O01BQ0EsSUFBeUIsT0FBTyxNQUFQLEtBQWlCLFFBQWpCLElBQTZCLENBQUMsS0FBSyxDQUFDLE9BQU4sQ0FBYyxNQUFkLENBQXZEO1FBQUEsbUJBQUEsQ0FBQSxFQUFBOztBQUVBLGFBQU87SUFwQkY7RUFEWSxDQUZ2QjtBQUFBIiwiZmlsZSI6ImZpbHRlcnMvdXJsLWhlbHBlci91cmxIZWxwZXIuZmlsdGVyLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiIyBGaWx0ZXIgaGVscGVyIGZvciBwcm9jZXNzaW5nIHBhcmFtcyBPYmplY3RzIG9yIEFycmF5cyBpbnRvIGEgUkVTVGZ1bCBpbmxpbmUgdXJsLlxuYW5ndWxhclxuICAubW9kdWxlKCdpbXBhYy5maWx0ZXJzLnVybC1oZWxwZXInLCBbXSlcbiAgLmZpbHRlcigndXJsSGVscGVyJywgKCkgLT5cbiAgICByZXR1cm4gKGlucHV0LCBwYXJhbXMpIC0+XG4gICAgICByZXR1cm4gaWYgIWlucHV0IG9yICFpbnB1dC5sZW5ndGhcblxuICAgICAgcHJvY2Vzc0FycmF5UGFyYW1zID0gLT5cbiAgICAgICAgaW5wdXQgPSBbaW5wdXQscGFyYW1zLnNoaWZ0KCldLmpvaW4oJz8nKVxuICAgICAgICBpbnB1dCA9IFtdLmNvbmNhdC5hcHBseShbXSwgW2lucHV0LCBwYXJhbXNdKS5qb2luKCcmJylcblxuICAgICAgcHJvY2Vzc09iamVjdFBhcmFtcyA9IC0+XG4gICAgICAgIGkgPSAwXG4gICAgICAgIGFyciA9IFtdXG4gICAgICAgIGtleXMgPSBPYmplY3Qua2V5cyhwYXJhbXMpXG4gICAgICAgIHdoaWxlIGkgPCBrZXlzLmxlbmd0aFxuICAgICAgICAgIGFyci5wdXNoKGtleXNbaV0gKyAnPScgKyBwYXJhbXNba2V5c1tpXV0pXG4gICAgICAgICAgaSsrXG4gICAgICAgIHBhcmFtcyA9IGFyclxuICAgICAgICBwcm9jZXNzQXJyYXlQYXJhbXMoKVxuXG4gICAgICBwcm9jZXNzQXJyYXlQYXJhbXMoKSBpZiBBcnJheS5pc0FycmF5KHBhcmFtcylcbiAgICAgIHByb2Nlc3NPYmplY3RQYXJhbXMoKSBpZiB0eXBlb2YgcGFyYW1zID09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KHBhcmFtcylcblxuICAgICAgcmV0dXJuIGlucHV0XG4gIClcbiJdfQ==

(function() {
  angular.module('impac.services.assets', []).provider('ImpacAssets', function() {
    var _$get, paths, provider;
    provider = this;
    paths = {
      dataNotFound: null,
      impacTitleLogo: null,
      impacDashboardBackground: null,
      noWarning: false
    };
    provider.configure = function(configOptions) {
      return angular.extend(paths, configOptions);
    };
    _$get = function($log) {
      var service;
      service = this;
      service.get = function(key) {
        var msg, path;
        path = '';
        msg = 'impac-angular warning: There are missing assets (' + key + '), please refer to the including assets section in the docs.';
        if (paths[key] != null) {
          path = paths[key];
        } else {
          if (!paths.noWarning) {
            $log.warn(msg);
          }
        }
        return path;
      };
      return service;
    };
    _$get.$inject = ['$log'];
    provider.$get = _$get;
    return provider;
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VzL2Fzc2V0cy9hc3NldHMuc3ZjLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQTtFQUFBLE9BQ0UsQ0FBQyxNQURILENBQ1UsdUJBRFYsRUFDbUMsRUFEbkMsQ0FFRSxDQUFDLFFBRkgsQ0FFWSxhQUZaLEVBRTJCLFNBQUE7QUFDdkIsUUFBQTtJQUFBLFFBQUEsR0FBVztJQUtYLEtBQUEsR0FDRTtNQUFBLFlBQUEsRUFBYyxJQUFkO01BQ0EsY0FBQSxFQUFnQixJQURoQjtNQUVBLHdCQUFBLEVBQTBCLElBRjFCO01BR0EsU0FBQSxFQUFXLEtBSFg7O0lBUUYsUUFBUSxDQUFDLFNBQVQsR0FBcUIsU0FBQyxhQUFEO2FBQ25CLE9BQU8sQ0FBQyxNQUFSLENBQWUsS0FBZixFQUFzQixhQUF0QjtJQURtQjtJQUlyQixLQUFBLEdBQVEsU0FBQyxJQUFEO0FBQ04sVUFBQTtNQUFBLE9BQUEsR0FBVTtNQUlWLE9BQU8sQ0FBQyxHQUFSLEdBQWMsU0FBQyxHQUFEO0FBQ1osWUFBQTtRQUFBLElBQUEsR0FBTztRQUNQLEdBQUEsR0FBTSxtREFBQSxHQUFzRCxHQUF0RCxHQUE0RDtRQUNsRSxJQUFHLGtCQUFIO1VBQ0UsSUFBQSxHQUFPLEtBQU0sQ0FBQSxHQUFBLEVBRGY7U0FBQSxNQUFBO1VBR0UsSUFBQSxDQUFzQixLQUFLLENBQUMsU0FBNUI7WUFBQSxJQUFJLENBQUMsSUFBTCxDQUFVLEdBQVYsRUFBQTtXQUhGOztBQUlBLGVBQU87TUFQSztBQVNkLGFBQU87SUFkRDtJQWdCUixLQUFLLENBQUMsT0FBTixHQUFnQixDQUFDLE1BQUQ7SUFFaEIsUUFBUSxDQUFDLElBQVQsR0FBZ0I7QUFFaEIsV0FBTztFQXZDZ0IsQ0FGM0I7QUFBQSIsImZpbGUiOiJzZXJ2aWNlcy9hc3NldHMvYXNzZXRzLnN2Yy5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIiMgcHJvdmlkZXIgZm9yIGNvbmZpZ3VyaW5nIGltcGFjIHN0YXRpYyBhc3NldHMuXG5hbmd1bGFyXG4gIC5tb2R1bGUoJ2ltcGFjLnNlcnZpY2VzLmFzc2V0cycsIFtdKVxuICAucHJvdmlkZXIoJ0ltcGFjQXNzZXRzJywgKCkgLT5cbiAgICBwcm92aWRlciA9IEBcbiAgICAjPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgIyBQcml2YXRlIERlZmF1bHRzXG4gICAgIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICMgcGFyZW50IGFwcCBzaG91bGQgaG9zdCBpbWFnZXMsIGNvbmZpZ3VyZSB0aGlzIHByb3ZpZGVyIHRvIHByb3ZpZGUgcmVsYXRpdmUgaW1nIHBhdGhzLlxuICAgIHBhdGhzID1cbiAgICAgIGRhdGFOb3RGb3VuZDogbnVsbCxcbiAgICAgIGltcGFjVGl0bGVMb2dvOiBudWxsLFxuICAgICAgaW1wYWNEYXNoYm9hcmRCYWNrZ3JvdW5kOiBudWxsLFxuICAgICAgbm9XYXJuaW5nOiBmYWxzZVxuXG4gICAgIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICMgUHVibGljIG1ldGhvZHMgYXZhaWxhYmxlIGluIGNvbmZpZ1xuICAgICM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICBwcm92aWRlci5jb25maWd1cmUgPSAoY29uZmlnT3B0aW9ucykgLT5cbiAgICAgIGFuZ3VsYXIuZXh0ZW5kKHBhdGhzLCBjb25maWdPcHRpb25zKVxuXG4gICAgIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgIF8kZ2V0ID0gKCRsb2cpIC0+XG4gICAgICBzZXJ2aWNlID0gQFxuICAgICAgIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgIyBQdWJsaWMgbWV0aG9kcyBhdmFpbGFibGUgYXMgc2VydmljZVxuICAgICAgIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgc2VydmljZS5nZXQgPSAoa2V5KSAtPlxuICAgICAgICBwYXRoID0gJydcbiAgICAgICAgbXNnID0gJ2ltcGFjLWFuZ3VsYXIgd2FybmluZzogVGhlcmUgYXJlIG1pc3NpbmcgYXNzZXRzICgnICsga2V5ICsgJyksIHBsZWFzZSByZWZlciB0byB0aGUgaW5jbHVkaW5nIGFzc2V0cyBzZWN0aW9uIGluIHRoZSBkb2NzLidcbiAgICAgICAgaWYgcGF0aHNba2V5XT9cbiAgICAgICAgICBwYXRoID0gcGF0aHNba2V5XVxuICAgICAgICBlbHNlXG4gICAgICAgICAgJGxvZy53YXJuKG1zZykgdW5sZXNzIHBhdGhzLm5vV2FybmluZ1xuICAgICAgICByZXR1cm4gcGF0aFxuXG4gICAgICByZXR1cm4gc2VydmljZVxuICAgICMgaW5qZWN0IHNlcnZpY2UgZGVwZW5kZW5jaWVzIGhlcmUsIGFuZCBkZWNsYXJlIGluIF8kZ2V0IGZ1bmN0aW9uIGFyZ3MuXG4gICAgXyRnZXQuJGluamVjdCA9IFsnJGxvZyddO1xuICAgICMgYXR0YWNoIHByb3ZpZGVyIGZ1bmN0aW9uIG9udG8gdGhlIHByb3ZpZGVyIG9iamVjdFxuICAgIHByb3ZpZGVyLiRnZXQgPSBfJGdldFxuXG4gICAgcmV0dXJuIHByb3ZpZGVyXG4gIClcbiJdfQ==

(function() {
  angular.module('impac.services.chart-formatter', []).service('ChartFormatterSvc', function(ImpacTheming, $filter, $window, $document, ImpacDashboardsSvc) {
    var COLORS, _self, cutHex, hexToB, hexToG, hexToR, hexToRGB, lightenColor;
    _self = this;
    COLORS = ImpacTheming.get().chartColors;
    $window.onblur = function() {
      return angular.element($document[0].getElementById('chartjs-tooltip')).remove();
    };
    this.getPositiveColor = function() {
      return COLORS.positive;
    };
    this.getNegativeColor = function() {
      return COLORS.negative;
    };
    this.getOthersColor = function() {
      return COLORS.others;
    };
    this.getColor = function(index) {
      return COLORS.array[index % COLORS.array.length];
    };
    cutHex = function(htmlColor) {
      return htmlColor.replace(/#/, '');
    };
    hexToR = function(htmlColor) {
      return parseInt((cutHex(htmlColor)).substring(0, 2), 16);
    };
    hexToG = function(htmlColor) {
      return parseInt((cutHex(htmlColor)).substring(2, 4), 16);
    };
    hexToB = function(htmlColor) {
      return parseInt((cutHex(htmlColor)).substring(4, 6), 16);
    };
    hexToRGB = function(htmlColor) {
      return [hexToR(htmlColor), hexToG(htmlColor), hexToB(htmlColor)].join(",");
    };
    lightenColor = function(htmlColor, alpha) {
      return "rgba(" + (hexToRGB(htmlColor)) + "," + alpha + ")";
    };
    this.customTooltip = function(tooltip) {
      var canvasEl, innerHtml, obj, offset, ref, tooltipEl;
      tooltipEl = angular.element('#chartjs-tooltip');
      if (!tooltipEl[0]) {
        angular.element('body').append('<div id="chartjs-tooltip"></div>');
        tooltipEl = angular.element('#chartjs-tooltip');
      }
      if (!tooltip.opacity) {
        tooltipEl.css({
          opacity: 0.5
        });
        return;
      }
      tooltipEl.removeClass('above below no-transform');
      if (tooltip.yAlign) {
        tooltipEl.addClass(tooltip.yAlign);
      } else {
        tooltipEl.addClass('no-transform');
      }
      if (tooltip.body) {
        innerHtml = _.compact([(tooltip.beforeTitle || []).join('<br/>'), (tooltip.title || []).join('<br/>'), (tooltip.afterTitle || []).join('<br/>'), (tooltip.beforeBody || []).join('<br/>'), (tooltip.body || []).join('<br/>'), (tooltip.afterBody || []).join('<br/>'), (tooltip.beforeFooter || []).join('<br/>'), (tooltip.footer || []).join('<br/>'), (tooltip.afterFooter || []).join('<br/>')]);
        tooltipEl.html(innerHtml.join('<br/>'));
      }
      canvasEl = angular.element(this._chart.canvas);
      offset = canvasEl.offset();
      canvasEl.bind('mouseleave', function(event) {
        if (event.relatedTarget.id !== 'chartjs-tooltip') {
          return tooltipEl.remove();
        }
      });
      tooltipEl.bind('mouseleave', function(event) {
        if (event.relatedTarget.tagName !== 'CANVAS') {
          return tooltipEl.remove();
        }
      });
      return tooltipEl.css({
        'background-color': '#17262d',
        color: 'white',
        opacity: 1,
        transition: 'opacity 0.5s, top 0.5s, left 0.5s',
        position: 'absolute',
        width: (ref = tooltip.width) != null ? ref : (
          obj = {},
          obj[tooltip.width + "px"] = 'auto',
          obj
        ),
        left: (offset.left + tooltip.x + 10) + "px",
        top: (offset.top + tooltip.y + 10) + "px",
        fontFamily: tooltip._fontFamily,
        fontSize: tooltip.fontSize,
        fontStyle: tooltip._fontStyle,
        padding: tooltip.yPadding + "px " + tooltip.xPadding + "px",
        'border-radius': '2px'
      });
    };
    angular.merge(Chart.defaults.global, {
      defaultColor: _self.getColor(0),
      tooltips: {
        titleFontFamily: "Lato, 'Helvetica Neue', Helvetica, Arial, sans-serif",
        bodyFontFamily: "Lato, 'Helvetica Neue', Helvetica, Arial, sans-serif",
        footerFontFamily: "Lato, 'Helvetica Neue', Helvetica, Arial, sans-serif",
        enabled: false,
        custom: _self.customTooltip
      },
      elements: {
        point: {
          hitRadius: 8,
          hoverRadius: 8
        },
        line: {
          tension: 0,
          borderWidth: 2
        }
      }
    });
    angular.merge(Chart.defaults.scale, {
      ticks: {
        beginAtZero: true,
        minRotation: 0,
        fontFamily: "Lato, 'Helvetica Neue', Helvetica, Arial, sans-serif"
      },
      scaleLabel: {
        fontFamily: "Lato, 'Helvetica Neue', Helvetica, Arial, sans-serif"
      }
    });
    this.setTooltipsTextLayout = function(opts, showSerieInTitle) {
      if (showSerieInTitle == null) {
        showSerieInTitle = false;
      }
      return angular.merge(opts, {
        tooltips: {
          callbacks: {
            title: function(context, data) {
              var title;
              if (!showSerieInTitle) {
                return data.labels[context[0].index];
              } else {
                title = [data.labels[context[0].index]];
                if (data.datasets[context[0].datasetIndex].label) {
                  title.push(data.datasets[context[0].datasetIndex].label);
                }
                return title.join(' | ');
              }
            },
            label: function(context, data) {
              var currency;
              currency = opts.currency || ImpacDashboardsSvc.getCurrentDashboard().currency;
              if (currency !== 'hide') {
                return $filter('mnoCurrency')(data.datasets[context.datasetIndex].data[context.index], currency);
              } else {
                return data.datasets[context.datasetIndex].data[context.index];
              }
            }
          }
        }
      });
    };
    this.lineChart = function(inputDataArray, opts, versusMode) {
      var index, isFilled, singleValue;
      if (opts == null) {
        opts = {};
      }
      if (versusMode == null) {
        versusMode = false;
      }
      _self.setTooltipsTextLayout(opts, true);
      index = 0;
      isFilled = inputDataArray.length === 1;
      singleValue = false;
      if (inputDataArray[0].labels.length < 2) {
        singleValue = true;
        inputDataArray[0].labels.push(inputDataArray[0].labels[0]);
      }
      if (inputDataArray.length > 1 || ((opts.pointDot != null) && !opts.pointDot) || singleValue) {
        angular.merge(opts, {
          elements: {
            point: {
              radius: 0.0001
            },
            line: {
              tension: 0.3
            }
          }
        });
      }
      return {
        type: 'line',
        options: opts,
        data: {
          labels: inputDataArray[0].labels,
          datasets: _.map(inputDataArray, function(inputData) {
            var color;
            if (singleValue) {
              inputData.values.push(inputData.values[0]);
            }
            if (versusMode) {
              if (index === 0) {
                color = _self.getNegativeColor();
              } else {
                color = _self.getPositiveColor();
              }
            } else {
              color = _self.getColor(index);
            }
            index++;
            return {
              label: inputData.title,
              data: inputData.values,
              fill: isFilled,
              backgroundColor: lightenColor(color, 0.3),
              borderColor: color,
              pointBorderColor: color,
              pointBackgroundColor: color,
              pointHoverBackgroundColor: 'rgb(255,255,255)'
            };
          })
        }
      };
    };
    this.barChart = function(inputData, opts, positivesOnly) {
      var colors, i, index, len, ref, value;
      if (opts == null) {
        opts = {};
      }
      if (positivesOnly == null) {
        positivesOnly = true;
      }
      _self.setTooltipsTextLayout(opts);
      index = 0;
      colors = [];
      ref = inputData.values;
      for (i = 0, len = ref.length; i < len; i++) {
        value = ref[i];
        if (positivesOnly) {
          inputData.values[index] = Math.abs(value);
        }
        colors.push(_self.getColor(index));
        index++;
      }
      return {
        type: 'bar',
        options: opts,
        data: {
          labels: inputData.labels,
          datasets: [
            {
              backgroundColor: colors,
              data: inputData.values
            }
          ]
        }
      };
    };
    this.combinedBarChart = function(inputData, opts, positivesOnly) {
      var index, result;
      if (opts == null) {
        opts = {};
      }
      if (positivesOnly == null) {
        positivesOnly = true;
      }
      _self.setTooltipsTextLayout(opts, true);
      index = 0;
      result = {
        type: 'bar',
        options: opts,
        data: {
          labels: inputData.labels,
          datasets: _.map(inputData.datasets, function(dataset) {
            var color, i, len, ref, value;
            color = _self.getColor(index);
            index++;
            if (positivesOnly) {
              ref = dataset.values;
              for (i = 0, len = ref.length; i < len; i++) {
                value = ref[i];
                value = Math.abs(value);
              }
            }
            return {
              label: dataset.title,
              data: dataset.values,
              backgroundColor: color
            };
          })
        }
      };
      return result;
    };
    this.pieChart = function(inputData, opts, versusMode) {
      var colors, data, i, index, j, len, len1;
      if (opts == null) {
        opts = {};
      }
      if (versusMode == null) {
        versusMode = false;
      }
      _self.setTooltipsTextLayout(opts);
      index = 0;
      colors = [];
      if (versusMode) {
        colors.push(_self.getNegativeColor());
        for (i = 0, len = inputData.length; i < len; i++) {
          data = inputData[i];
          if (index !== 0) {
            colors.push(_self.getPositiveColor());
          }
          index++;
        }
      } else {
        for (j = 0, len1 = inputData.length; j < len1; j++) {
          data = inputData[j];
          colors.push(_self.getColor(index));
          index++;
        }
      }
      return {
        type: 'doughnut',
        options: opts,
        data: {
          datasets: [
            {
              data: _.map(inputData, (function(data) {
                return Math.abs(data.value);
              })),
              backgroundColor: colors
            }
          ],
          labels: _.map(inputData, (function(data) {
            return data.label;
          }))
        }
      };
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

(function() {
  angular.module('impac.services.dashboards', []).service('ImpacDashboardsSvc', function($q, $http, $log, $timeout, ImpacMainSvc, ImpacRoutes, ImpacKpisSvc, ImpacTheming) {
    var _self, belongsToCurrentOrganization, needConfigurationLoad, setDefaultCurrentDashboard;
    _self = this;
    this.config = {};
    this.config.dashboards = [];
    this.getDashboards = function() {
      return _self.config.dashboards;
    };
    this.config.currentDashboard = {};
    this.getCurrentDashboard = function() {
      return _self.config.currentDashboard;
    };
    this.config.widgetsTemplates = [];
    this.getWidgetsTemplates = function() {
      return _self.config.widgetsTemplates;
    };
    this.callbacks = {};
    this.callbacks.dashboardChanged = $q.defer();
    this.dashboardChanged = function() {
      return _self.callbacks.dashboardChanged.promise;
    };
    this.callbacks.widgetAdded = $q.defer();
    this.widgetAdded = function() {
      return _self.callbacks.widgetAdded.promise;
    };
    needConfigurationLoad = function() {
      return _.isEmpty(_self.config.dashboards) || _.isEmpty(_self.config.currentDashboard);
    };
    this.isThereADashboard = function() {
      return !_.isEmpty(_self.config.currentDashboard);
    };
    this.areThereSeveralDashboards = function() {
      return _self.config.dashboards.length > 1;
    };
    this.isCurrentDashboardEmpty = function() {
      return _self.isThereADashboard() && _.isEmpty(_self.config.currentDashboard.widgets);
    };
    this.areKpisEnabled = function() {
      return ImpacTheming.get().dhbKpisConfig.enableKpis;
    };
    this.loadLocked = false;
    this.load = function(force) {
      var deferred;
      if (force == null) {
        force = false;
      }
      if (!_self.loadLocked) {
        _self.loadLocked = true;
        deferred = $q.defer();
        if (needConfigurationLoad() || force) {
          ImpacMainSvc.loadOrganizations(force).then(function(success) {
            var orgId;
            orgId = success.currentOrganization.id;
            return $http.get(ImpacRoutes.dashboards.index(orgId)).then(function(dashboards) {
              _self.setDashboards(dashboards.data).then(function() {
                _self.setCurrentDashboard();
                _self.loadLocked = false;
                return deferred.resolve(_self.config);
              });
              return function(error) {
                _self.loadLocked = false;
                return deferred.reject(error);
              };
            }, function(error) {
              $log.error("Impac - DashboardSvc: cannot retrieve dashboards list for org: " + orgId);
              _self.loadLocked = false;
              return deferred.reject(error);
            });
          }, function(error) {
            $log.error("Impac - DashboardSvc: cannot retrieve current organization");
            _self.loadLocked = false;
            return deferred.reject(error);
          });
        } else {
          _self.loadLocked = false;
          deferred.resolve(_self.config);
        }
        return deferred.promise;
      } else {
        $log.warn("ImpacDashboardsSvc.load locked. Trying again in 1s");
        return $timeout((function() {
          return _self.load(force);
        }), 1000);
      }
    };
    setDefaultCurrentDashboard = function() {
      if ((_self.config.dashboards != null) && _self.config.dashboards.length > 0) {
        $log.info("Impac - DashboardSvc: first dashboard set as current by default");
        ImpacMainSvc.override(_self.config.currentDashboard, _self.config.dashboards[0]);
        _self.setWidgetsTemplates(_self.config.currentDashboard.widgets_templates);
        if (_self.areKpisEnabled()) {
          ImpacKpisSvc.initialize(_self.config.currentDashboard);
        }
        _self.initializeActiveTabs();
        _self.callbacks.dashboardChanged.notify(_self.config.currentDashboard);
        return true;
      } else {
        $log.warn("Impac - DashboardSvc: cannot set default current dashboard");
        ImpacMainSvc.override(_self.config.currentDashboard, {});
        _self.callbacks.dashboardChanged.notify(false);
        return false;
      }
    };
    this.setCurrentDashboard = function(id) {
      var fetchedDhb;
      if (id == null) {
        id = null;
      }
      if (id != null) {
        fetchedDhb = _.find(_self.config.dashboards, (function(dhb) {
          return id === dhb.id;
        }));
        if (!_.isEmpty(fetchedDhb)) {
          ImpacMainSvc.override(_self.config.currentDashboard, fetchedDhb);
          _self.setWidgetsTemplates(fetchedDhb.widgets_templates);
          if (_self.areKpisEnabled()) {
            ImpacKpisSvc.initialize(_self.config.currentDashboard);
          }
          _self.initializeActiveTabs();
          _self.callbacks.dashboardChanged.notify(_self.config.currentDashboard);
          return true;
        } else {
          $log.error("Impac - DashboardSvc: dashboard: " + id + " not found in dashboards list");
          return setDefaultCurrentDashboard();
        }
      } else {
        return setDefaultCurrentDashboard();
      }
    };
    belongsToCurrentOrganization = function(dashboard, org) {
      return _.includes(_.pluck(dashboard.data_sources, 'id'), org.id);
    };
    this.setDashboards = function(dashboardsArray) {
      if (dashboardsArray == null) {
        dashboardsArray = [];
      }
      return ImpacMainSvc.loadOrganizations().then(function(config) {
        var curOrg, dhb, i, len, results;
        curOrg = config.currentOrganization;
        _.remove(_self.config.dashboards, (function() {
          return true;
        }));
        results = [];
        for (i = 0, len = dashboardsArray.length; i < len; i++) {
          dhb = dashboardsArray[i];
          if (belongsToCurrentOrganization(dhb, curOrg)) {
            results.push(_self.config.dashboards.push(dhb));
          } else {
            results.push(void 0);
          }
        }
        return results;
      }, function(error) {
        return $log.error("Impac - DashboardSvc: Cannot load user's organizations");
      });
    };
    this.setWidgetsTemplates = function(templatesArray) {
      var i, len, template;
      if (_.isEmpty(templatesArray) || !_.isEmpty(_self.config.widgetsTemplates)) {
        return false;
      }
      for (i = 0, len = templatesArray.length; i < len; i++) {
        template = templatesArray[i];
        _self.config.widgetsTemplates.push(template);
      }
      return true;
    };
    this.initializeActiveTabs = function() {
      var dhb, i, len, ref, results;
      ref = _self.config.dashboards;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        dhb = ref[i];
        results.push(_.merge(dhb, {
          active: _self.config.currentDashboard.id === dhb.id
        }));
      }
      return results;
    };
    this.create = function(dashboard) {
      return _self.load().then(function() {
        var data, deferred, org;
        deferred = $q.defer();
        org = ImpacMainSvc.config.currentOrganization;
        if (dashboard.currency == null) {
          dashboard.currency = org.currency || 'USD';
        }
        data = {
          dashboard: dashboard
        };
        $http.post(ImpacRoutes.dashboards.create(org.id), data).then(function(success) {
          _self.config.dashboards.push(success.data);
          _self.setCurrentDashboard(success.data.id);
          return deferred.resolve(success.data);
        }, function(error) {
          $log.error("Impac - DashboardSvc: cannot create dashboard with parameters: " + (angular.toJson(dashboard)), error);
          return deferred.reject(error);
        });
        return deferred.promise;
      });
    };
    this["delete"] = function(id) {
      var deferred;
      deferred = $q.defer();
      $http["delete"](ImpacRoutes.dashboards["delete"](id)).then(function(success) {
        _.remove(_self.config.dashboards, function(dhb) {
          return id === dhb.id;
        });
        _self.setCurrentDashboard();
        return deferred.resolve(success);
      }, function(error) {
        $log.error("Impac - DashboardSvc: cannot delete dashboard: " + id);
        return deferred.reject(error);
      });
      return deferred.promise;
    };
    this.update = function(id, opts) {
      var data, deferred;
      deferred = $q.defer();
      data = {
        dashboard: opts
      };
      $http.put(ImpacRoutes.dashboards.update(id), data).then(function(success) {
        angular.merge(_.find(_self.config.dashboards, function(dhb) {
          return id === dhb.id;
        }), success.data);
        if (id === _self.config.currentDashboard.id) {
          angular.merge(_self.config.currentDashboard, success.data);
        }
        return deferred.resolve(success.data);
      }, function(error) {
        $log.error("Impac - DashboardSvc: cannot update dashboard: " + id + " with parameters: " + opts);
        return deferred.reject(error);
      });
      return deferred.promise;
    };
    return _self;
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

(function() {
  angular.module('impac.services.kpis', []).service('ImpacKpisSvc', function($log, $http, $filter, $q, ImpacRoutes, ImpacMainSvc) {
    var _self, formatShowQuery, index, isDeveloper, isInitialized;
    _self = this;
    this.config = {};
    this.config.ssoSessionId = "";
    this.getSsoSessionId = function() {
      return _self.config.ssoSessionId;
    };
    this.config.kpisTemplates = [];
    this.getKpisTemplates = function() {
      return _self.config.kpisTemplates;
    };
    this.config.currentDashboardId = "";
    this.getCurrentDashboardId = function() {
      return _self.config.currentDashboardId;
    };
    formatShowQuery = function(basePath, endpoint, watchable, params) {
      var baseUrl, url;
      baseUrl = [basePath, endpoint, watchable].join('/');
      url = [baseUrl, decodeURIComponent($.param(params))].join('?');
      return url;
    };
    isInitialized = function() {
      return !(_.isEmpty(_self.config.ssoSessionId || _.isEmpty(_self.config.kpisTemplates || _.isEmpty(_self.config.currentDashboardId))));
    };
    isDeveloper = function() {
      var basicAuth;
      basicAuth = $http.defaults.headers.common.Authorization;
      return basicAuth && typeof basicAuth === 'string' && basicAuth.length;
    };
    this.load = function(force) {
      var deferred;
      if (force == null) {
        force = false;
      }
      deferred = $q.defer();
      if (_.isEmpty(_self.config.ssoSessionId) || force) {
        ImpacMainSvc.loadUserData(force).then(function(mainConfig) {
          _self.config.ssoSessionId = mainConfig.sso_session;
          return deferred.resolve(_self.config);
        }, function(error) {
          return deferred.reject(error);
        });
      } else {
        deferred.resolve(_self.config);
      }
      return deferred.promise;
    };
    this.initialize = function(dashboard) {
      return _self.load().then(function() {
        var orgUids, params, promises;
        _self.config.currentDashboardId = dashboard.id;
        orgUids = _.pluck(dashboard.data_sources, 'uid');
        params = {};
        params.metadata = {
          organization_ids: orgUids
        };
        if (_self.config.ssoSessionId) {
          params.metadata.sso_session = _self.config.ssoSessionId;
        }
        promises = {
          impac: index(params)
        };
        if (ImpacRoutes.kpis.local()) {
          promises.local = $http.get(ImpacRoutes.kpis.local());
        }
        return $q.all(promises).then(function(response) {
          var i, j, len, len1, ref, ref1, results, template;
          _.remove(_self.config.kpisTemplates, (function() {
            return true;
          }));
          ref = response.impac.data.kpis;
          for (i = 0, len = ref.length; i < len; i++) {
            template = ref[i];
            template.source || (template.source = 'impac');
            _self.config.kpisTemplates.push(template);
          }
          if (response.local) {
            ref1 = response.local.data.kpis;
            results = [];
            for (j = 0, len1 = ref1.length; j < len1; j++) {
              template = ref1[j];
              template.source = 'local';
              results.push(_self.config.kpisTemplates.push(template));
            }
            return results;
          }
        }, function(error) {
          return $log.error('ImpacKpisSvc - cannot retrieve kpis templates list', error);
        });
      });
    };
    index = function(params) {
      var host, url;
      host = ImpacRoutes.kpis.index();
      url = [host, decodeURIComponent($.param(params))].join('?');
      return $http.get(url);
    };
    this.show = function(kpi) {
      var deferred, host, params, url;
      deferred = $q.defer();
      if (!(isInitialized() || isDeveloper())) {
        $log.error('ImpacKpisSvc - Service not initialized');
        deferred.reject({
          error: {
            message: 'ImpacKpisSvc is not initialized'
          }
        });
      } else {
        params = {};
        if (_self.config.ssoSessionId) {
          params.sso_session = _self.config.ssoSessionId;
        }
        if (kpi.targets != null) {
          params.targets = kpi.targets;
        }
        if (kpi.settings != null) {
          params.metadata = kpi.settings;
        }
        if (kpi.extra_params != null) {
          params.extra_params = kpi.extra_params;
        }
        switch (kpi.source) {
          case 'impac':
            host = ImpacRoutes.kpis.show(_self.config.currentDashboardId, kpi.id);
            break;
          case 'local':
            host = ImpacRoutes.kpis.local();
        }
        url = formatShowQuery(host, kpi.endpoint, kpi.element_watched, params);
        $http.get(url).then(function(response) {
          var missingParams, updatedConfig;
          kpi.data || (kpi.data = {});
          angular.extend(kpi.data, _.pick(response.data.kpi, ['value', 'unit', 'results']));
          updatedConfig = response.data.kpi.configuration || {};
          missingParams = _.select(['targets', 'extra_params'], (function(param) {
            return (kpi[param] == null) && (updatedConfig[param] != null);
          }));
          angular.extend(kpi, _.pick(updatedConfig, missingParams));
          return deferred.resolve(kpi);
        }, function(err) {
          $log.error('impac-angular ERROR: Could not retrieve KPI at: ' + kpi.endpoint, err);
          return deferred.reject(err);
        });
      }
      return deferred.promise;
    };
    this.create = function(source, endpoint, elementWatched) {
      var deferred, params, url;
      deferred = $q.defer();
      if (!(isInitialized() || isDeveloper())) {
        deferred.reject({
          error: {
            message: 'ImpacKpisSvc is not initialized'
          }
        });
      } else {
        params = {
          source: source,
          endpoint: endpoint,
          element_watched: elementWatched
        };
        url = ImpacRoutes.kpis.create(_self.config.currentDashboardId);
        $http.post(url, {
          kpi: params
        }).then(function(success) {
          return deferred.resolve(success.data);
        }, function(err) {
          return deferred.reject(err);
        });
      }
      return deferred.promise;
    };
    this.update = function(kpi, params) {
      var deferred, filtered_params, url;
      deferred = $q.defer();
      filtered_params = {};
      if (params.name != null) {
        filtered_params.name = params.name;
      }
      if (params.metadata != null) {
        filtered_params.settings = params.metadata;
      }
      if (params.targets != null) {
        filtered_params.targets = params.targets;
      }
      if (params.extra_params != null) {
        filtered_params.extra_params = params.extra_params;
      }
      url = ImpacRoutes.kpis.update(_self.config.currentDashboardId, kpi.id);
      if (!_.isEmpty(filtered_params)) {
        $http.put(url, {
          kpi: params
        }).then(function(success) {
          angular.extend(kpi, success.data);
          _self.show(kpi);
          return deferred.resolve(kpi);
        }, function(err) {
          $log.error('impac-angular ERROR: Unable to update KPI ', err);
          return deferred.reject(err);
        });
      }
      return deferred.promise;
    };
    this["delete"] = function(kpi) {
      var deferred, url;
      deferred = $q.defer();
      url = ImpacRoutes.kpis["delete"](_self.config.currentDashboardId, kpi.id);
      $http["delete"](url).then(function(success) {
        return deferred.resolve(success);
      }, function(err) {
        return deferred.reject(err);
      });
      return deferred.promise;
    };
    return this;
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

(function() {
  angular.module('impac.services.linking', []).provider('ImpacLinking', function() {
    var _$get, links, provider;
    provider = this;
    links = {
      user: null,
      organizations: null
    };
    provider.linkData = function(configData) {
      return _.forIn(links, function(value, key) {
        var link;
        link = configData[key];
        if (link == null) {
          throw new Error("impac-angular linking.svc: Missing core data (" + key + ") to run impac-angular.");
        }
        if (typeof link !== 'function') {
          throw new TypeError("impac-angular linking.svc: " + key + " should be a Function.");
        }
        return links[key] = link;
      });
    };
    _$get = function($q) {
      var service;
      service = this;
      service.getUserData = function() {
        return links.user().then(function(success) {
          return success;
        }, function(err) {
          return $q.reject(err);
        });
      };
      service.getOrganizations = function() {
        return links.organizations().then(function(success) {
          return success;
        }, function(err) {
          return $q.reject(err);
        });
      };
      return service;
    };
    _$get.$inject = ['$q'];
    provider.$get = _$get;
    return provider;
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VzL2xpbmtpbmcvbGlua2luZy5zdmMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUtBO0VBQUEsT0FDRSxDQUFDLE1BREgsQ0FDVSx3QkFEVixFQUNvQyxFQURwQyxDQUVFLENBQUMsUUFGSCxDQUVZLGNBRlosRUFFNEIsU0FBQTtBQUN4QixRQUFBO0lBQUEsUUFBQSxHQUFXO0lBS1gsS0FBQSxHQUFRO01BQ04sSUFBQSxFQUFNLElBREE7TUFFTixhQUFBLEVBQWUsSUFGVDs7SUFRUixRQUFRLENBQUMsUUFBVCxHQUFvQixTQUFDLFVBQUQ7YUFDbEIsQ0FBQyxDQUFDLEtBQUYsQ0FBUSxLQUFSLEVBQWUsU0FBQyxLQUFELEVBQVEsR0FBUjtBQUNiLFlBQUE7UUFBQSxJQUFBLEdBQU8sVUFBVyxDQUFBLEdBQUE7UUFDbEIsSUFBTyxZQUFQO0FBQ0UsZ0JBQVUsSUFBQSxLQUFBLENBQU0sZ0RBQUEsR0FBaUQsR0FBakQsR0FBcUQseUJBQTNELEVBRFo7O1FBRUEsSUFBRyxPQUFPLElBQVAsS0FBZSxVQUFsQjtBQUNFLGdCQUFVLElBQUEsU0FBQSxDQUFVLDZCQUFBLEdBQThCLEdBQTlCLEdBQWtDLHdCQUE1QyxFQURaOztlQUVBLEtBQU0sQ0FBQSxHQUFBLENBQU4sR0FBYTtNQU5BLENBQWY7SUFEa0I7SUFXcEIsS0FBQSxHQUFRLFNBQUMsRUFBRDtBQUNOLFVBQUE7TUFBQSxPQUFBLEdBQVU7TUFJVixPQUFPLENBQUMsV0FBUixHQUFzQixTQUFBO0FBQ3BCLGVBQU8sS0FBSyxDQUFDLElBQU4sQ0FBQSxDQUFZLENBQUMsSUFBYixDQUNMLFNBQUMsT0FBRDtBQUNFLGlCQUFPO1FBRFQsQ0FESyxFQUdMLFNBQUMsR0FBRDtBQUNFLGlCQUFPLEVBQUUsQ0FBQyxNQUFILENBQVUsR0FBVjtRQURULENBSEs7TUFEYTtNQVF0QixPQUFPLENBQUMsZ0JBQVIsR0FBMkIsU0FBQTtBQUN6QixlQUFPLEtBQUssQ0FBQyxhQUFOLENBQUEsQ0FBcUIsQ0FBQyxJQUF0QixDQUNMLFNBQUMsT0FBRDtBQUNFLGlCQUFPO1FBRFQsQ0FESyxFQUdMLFNBQUMsR0FBRDtBQUNFLGlCQUFPLEVBQUUsQ0FBQyxNQUFILENBQVUsR0FBVjtRQURULENBSEs7TUFEa0I7QUFRM0IsYUFBTztJQXJCRDtJQXVCUixLQUFLLENBQUMsT0FBTixHQUFnQixDQUFDLElBQUQ7SUFFaEIsUUFBUSxDQUFDLElBQVQsR0FBZ0I7QUFFaEIsV0FBTztFQXBEaUIsQ0FGNUI7QUFBQSIsImZpbGUiOiJzZXJ2aWNlcy9saW5raW5nL2xpbmtpbmcuc3ZjLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuIyBUaGlzIHByb3ZpZGVyIHNlcnZpY2UgaXMgZGVzaWduZWQgdG8gcHJvdmlkZSBpbXBhYy1hbmd1bGFyIHdpdGggYWxsIGl0J3Mgdml0YWwgbWV0aG9kcyAmIGRhdGEsXG4jIHdoaWxlIGludGVybmFsbHkga2VlcGluZyBpdCdzIGNvbmNlcm5zIGFzIGZvY3VzZWQgYXMgcG9zc2libGUuXG4jIFRPRE86IHdoZW4gdGhpcyBnZXRzIGxlc3MgdmFyaWVkLi4gc3BsaXQgb3V0IGludG8gbXVsdGlwbGUsIG1vcmUgc3BlY2lmaWMgcHJvdmlkZXJzLlxuIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuYW5ndWxhclxuICAubW9kdWxlKCdpbXBhYy5zZXJ2aWNlcy5saW5raW5nJywgW10pXG4gIC5wcm92aWRlcignSW1wYWNMaW5raW5nJywgKCkgLT5cbiAgICBwcm92aWRlciA9IEBcbiAgICAjPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgIyBQcml2YXRlIERlZmF1bHRzXG4gICAgIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICMgUmVxdWlyZWQgZGF0YTpcbiAgICBsaW5rcyA9IHtcbiAgICAgIHVzZXI6IG51bGwsICMgQHBhcmFtcyBGdW5jdGlvbiAtPiByZXR1cm5zIFByb21pc2VcbiAgICAgIG9yZ2FuaXphdGlvbnM6IG51bGwgIyBAcGFyYW1zIEZ1bmN0aW9uIC0+IHJldHVybiBQcm9taXNlXG4gICAgfVxuICAgICM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAjIFB1YmxpYyBtZXRob2RzIGF2YWlsYWJsZSBpbiBjb25maWdcbiAgICAjPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgIyBJdGVyYXRlcyBvdmVyIGRlZmF1bHQgbGlua3Mgb2JqZWN0IGFuZCBhc3NpZ25zIHZhbHVlcyBmcm9tIGNvbmZpZ0RhdGEgd2l0aCBzdHJpY3QgY2hlY2tpbmcuXG4gICAgcHJvdmlkZXIubGlua0RhdGEgPSAoY29uZmlnRGF0YSkgIC0+XG4gICAgICBfLmZvckluKGxpbmtzLCAodmFsdWUsIGtleSkgLT5cbiAgICAgICAgbGluayA9IGNvbmZpZ0RhdGFba2V5XVxuICAgICAgICB1bmxlc3MgbGluaz9cbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbXBhYy1hbmd1bGFyIGxpbmtpbmcuc3ZjOiBNaXNzaW5nIGNvcmUgZGF0YSAoI3trZXl9KSB0byBydW4gaW1wYWMtYW5ndWxhci5cIilcbiAgICAgICAgaWYgdHlwZW9mIGxpbmsgIT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJpbXBhYy1hbmd1bGFyIGxpbmtpbmcuc3ZjOiAje2tleX0gc2hvdWxkIGJlIGEgRnVuY3Rpb24uXCIpXG4gICAgICAgIGxpbmtzW2tleV0gPSBsaW5rXG4gICAgICApXG5cbiAgICAjPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgXyRnZXQgPSAoJHEpIC0+XG4gICAgICBzZXJ2aWNlID0gQFxuICAgICAgIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgIyBQdWJsaWMgbWV0aG9kcyBhdmFpbGFibGUgYXMgc2VydmljZVxuICAgICAgIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgc2VydmljZS5nZXRVc2VyRGF0YSA9IC0+XG4gICAgICAgIHJldHVybiBsaW5rcy51c2VyKCkudGhlbihcbiAgICAgICAgICAoc3VjY2VzcykgLT5cbiAgICAgICAgICAgIHJldHVybiBzdWNjZXNzXG4gICAgICAgICAgKGVycikgLT5cbiAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QoZXJyKVxuICAgICAgKVxuXG4gICAgICBzZXJ2aWNlLmdldE9yZ2FuaXphdGlvbnMgPSAtPlxuICAgICAgICByZXR1cm4gbGlua3Mub3JnYW5pemF0aW9ucygpLnRoZW4oXG4gICAgICAgICAgKHN1Y2Nlc3MpIC0+XG4gICAgICAgICAgICByZXR1cm4gc3VjY2Vzc1xuICAgICAgICAgIChlcnIpIC0+XG4gICAgICAgICAgICByZXR1cm4gJHEucmVqZWN0KGVycilcbiAgICAgICAgKVxuXG4gICAgICByZXR1cm4gc2VydmljZVxuICAgICMgaW5qZWN0IHNlcnZpY2UgZGVwZW5kZW5jaWVzIGhlcmUsIGFuZCBkZWNsYXJlIGluIF8kZ2V0IGZ1bmN0aW9uIGFyZ3MuXG4gICAgXyRnZXQuJGluamVjdCA9IFsnJHEnXTtcbiAgICAjIGF0dGFjaCBwcm92aWRlciBmdW5jdGlvbiBvbnRvIHRoZSBwcm92aWRlciBvYmplY3RcbiAgICBwcm92aWRlci4kZ2V0ID0gXyRnZXRcblxuICAgIHJldHVybiBwcm92aWRlclxuXG4gIClcbiJdfQ==

(function() {
  angular.module('impac.services.main', []).service('ImpacMainSvc', function($q, $log, ImpacLinking) {
    var _self, isConfigurationLoaded, setDefaultCurrentOrganization;
    _self = this;
    this.config = {};
    this.config.organizations = [];
    this.config.currentOrganization = {};
    this.config.userData = {};
    this.config.currencies = ["USD", "AUD", "CAD", "CNY", "EUR", "GBP", "HKD", "INR", "JPY", "NZD", "SGD", "PHP", "AED", "IDR"];
    isConfigurationLoaded = function() {
      return !(_.isEmpty(_self.config.organizations) || _.isEmpty(_self.config.currentOrganization || _.isEmpty(_self.config.userData)));
    };
    this.load = function(force) {
      var deferred;
      if (force == null) {
        force = false;
      }
      deferred = $q.defer();
      if (!isConfigurationLoaded() || force) {
        $q.all([_self.loadOrganizations(force), _self.loadUserData(force)]).then(function(results) {
          return deferred.resolve(_self.config);
        }, function(error) {
          $log.error("ImpacMainSvc: failed to load configuration");
          return deferred.reject(error);
        });
      } else {
        deferred.resolve(_self.config);
      }
      return deferred.promise;
    };
    this.loadOrganizations = function(force) {
      var deferred;
      if (force == null) {
        force = false;
      }
      deferred = $q.defer();
      if (_.isEmpty(_self.config.organizations) || _.isEmpty(_self.config.currentOrganization) || force) {
        ImpacLinking.getOrganizations().then(function(success) {
          if ((success.organizations != null) && success.organizations.length > 0) {
            _self.config.organizations = success.organizations;
            _self.setCurrentOrganization(success.currentOrgId);
          } else {
            _self.config.organizations = [];
            _self.config.currentOrganization = {};
            $log.info("ImpacMainSvc: retrieved empty organizations list");
          }
          return deferred.resolve(_self.config);
        }, function(error) {
          $log.error("ImpacMainSvc: cannot set organization: " + id + " as currentOrganization");
          return deferred.reject(error);
        });
      } else {
        deferred.resolve(_self.config);
      }
      return deferred.promise;
    };
    setDefaultCurrentOrganization = function() {
      if ((_self.config.organizations != null) && _self.config.organizations.length > 0) {
        _self.config.currentOrganization = _self.config.organizations[0];
        $log.info("ImpacMainSvc: first organization set as current by default");
        return true;
      } else {
        _self.config.currentOrganization = {};
        $log.error("ImpacMainSvc: cannot set default current organization");
        return {
          error: {
            code: 400,
            message: "cannot set default current organization"
          }
        };
      }
    };
    this.setCurrentOrganization = function(id) {
      var fetchedOrg;
      if (id == null) {
        id = null;
      }
      if (id != null) {
        fetchedOrg = _.find(_self.config.organizations, (function(org) {
          return id === org.id;
        }));
        if (!_.isEmpty(fetchedOrg)) {
          _self.config.currentOrganization = fetchedOrg;
          return true;
        } else {
          $log.error("ImpacMainSvc: organization: " + id + " not found in organizations list");
          return setDefaultCurrentOrganization();
        }
      } else {
        return setDefaultCurrentOrganization();
      }
    };
    this.loadUserData = function(force) {
      var deferred;
      if (force == null) {
        force = false;
      }
      deferred = $q.defer();
      if (_.isEmpty(_self.config.userData) || force) {
        ImpacLinking.getUserData().then(function(user) {
          angular.extend(_self.config.userData, user);
          return deferred.resolve(_self.config.userData);
        }, function(error) {
          $log.error('ImpacMainSvc: cannot retrieve user data');
          return deferred.reject(error);
        });
      } else {
        deferred.resolve(_self.config.userData);
      }
      return deferred.promise;
    };
    this.override = function(src, dst) {
      var key, value;
      for (key in src) {
        value = src[key];
        delete src[key];
      }
      for (key in dst) {
        value = dst[key];
        src[key] = value;
      }
      return src;
    };
    return _self;
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

(function() {
  angular.module('impac.services.message-bus', []).service('MsgBus', function() {
    var msgBusData;
    msgBusData = {
      dashboardGrid: {},
      controlBarFilter: {},
      controlBarQuickFilter: {},
      orgaSharingModal: {},
      appConnectModal: {},
      page: {},
      pane: {},
      errors: [],
      autostopQueue: [],
      notificationQueue: [],
      params: {}
    };
    this.publish = function(name, object) {
      return msgBusData[name] = object;
    };
    this.subscribe = function(name) {
      return function() {
        return msgBusData[name];
      };
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VzL21zZy1idXMvbXNnLWJ1cy5zdmMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBO0VBQUEsT0FDRSxDQUFDLE1BREgsQ0FDVSw0QkFEVixFQUN3QyxFQUR4QyxDQUVFLENBQUMsT0FGSCxDQUVXLFFBRlgsRUFFcUIsU0FBQTtBQWdCakIsUUFBQTtJQUFBLFVBQUEsR0FDRTtNQUFBLGFBQUEsRUFBZSxFQUFmO01BQ0EsZ0JBQUEsRUFBa0IsRUFEbEI7TUFFQSxxQkFBQSxFQUF1QixFQUZ2QjtNQUdBLGdCQUFBLEVBQWtCLEVBSGxCO01BSUEsZUFBQSxFQUFpQixFQUpqQjtNQUtBLElBQUEsRUFBTSxFQUxOO01BTUEsSUFBQSxFQUFNLEVBTk47TUFPQSxNQUFBLEVBQVEsRUFQUjtNQVFBLGFBQUEsRUFBZSxFQVJmO01BU0EsaUJBQUEsRUFBbUIsRUFUbkI7TUFVQSxNQUFBLEVBQVEsRUFWUjs7SUFhRixJQUFDLENBQUEsT0FBRCxHQUFXLFNBQUMsSUFBRCxFQUFNLE1BQU47YUFDVCxVQUFXLENBQUEsSUFBQSxDQUFYLEdBQW1CO0lBRFY7SUFRWCxJQUFDLENBQUEsU0FBRCxHQUFhLFNBQUMsSUFBRDtBQUNYLGFBQU8sU0FBQTtlQUFNLFVBQVcsQ0FBQSxJQUFBO01BQWpCO0lBREk7RUF0Q0ksQ0FGckI7QUFBQSIsImZpbGUiOiJzZXJ2aWNlcy9tc2ctYnVzL21zZy1idXMuc3ZjLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiIyBUaGlzIHNlcnZpY2UgaXMgdXNlZCB0byBwYXNzIG9iamVjdHMgYmV0d2VlbiBkaXJlY3RpdmVzXG4jIC0tLVxuIyBQbGVhc2UgcmVnaXN0ZXIgYmVsb3cgYW55IG9iamVjdCB0aGF0IHNob3VsZCBiZSBzaGFyZWQgc28gd2VcbiMgd2UgY2FuIGVuc3VyZSB0aGF0IHRoZXJlIGlzIG5vIG5hbWUgY29uZmxpY3RcbmFuZ3VsYXJcbiAgLm1vZHVsZSgnaW1wYWMuc2VydmljZXMubWVzc2FnZS1idXMnLCBbXSlcbiAgLnNlcnZpY2UoJ01zZ0J1cycsICgpIC0+XG5cbiAgICAjIE1lc3NhZ2VzXG4gICAgIyAtLS1cbiAgICAjIE5vdGUgdGhhdCBzdHJpbmdzIG9yIGludGVnZXIgY2FuJ3QgYmUgcGFzc2VkIGRpcmVjdGx5LiBPYmplY3RzIG5lZWQgdG8gYmVcbiAgICAjIHBhc3NlZCBieSByZWZlcmVuY2VcbiAgICAjIFRvIHBhc3MgYSBzdHJpbmcgb3IgaW50ZWdlciB5b3Ugd291bGQgbmVlZCB0byBkbyBzb21ldGhpbmcgbGlrZSB0aGlzXG4gICAgI1xuICAgICMgQ29udHJvbGxlcjE6XG4gICAgIyAkc2NvcGUubXlzdHJpbmcgPSB7IHZhbHVlOiAnYmxhJyB9XG4gICAgIyBNc2dCdXMucHVibGlzaCgkc2NvcGUubXlzdHJpbmcpXG4gICAgI1xuICAgICMgQ29udHJvbGxlcjI6XG4gICAgIyAkc2NvcGUubXlzdHJpbmcgPSBNc2dCdXMuc3Vic2NyaWJlKCdteXN0cmluZycpXG4gICAgIyBhbmQgdXNlIGl0IGluIHZpZXcgbGlrZSB0aGlzOiBteXN0cmluZygpLnZhbHVlXG4gICAgI1xuICAgIG1zZ0J1c0RhdGEgPVxuICAgICAgZGFzaGJvYXJkR3JpZDoge30gICAgICAgICAgIyBkYXNoYm9hcmRHcmlkIGNyZWF0ZWQgaW4gQXBwc0N0cmxcbiAgICAgIGNvbnRyb2xCYXJGaWx0ZXI6IHt9ICAgICAgICMgc2VhcmNoIGJhciBmaWx0ZXJcbiAgICAgIGNvbnRyb2xCYXJRdWlja0ZpbHRlcjoge30gICMgcXVpY2sgZmlsdGVycyBvbiBjb250cm9sIGJhclxuICAgICAgb3JnYVNoYXJpbmdNb2RhbDoge30gICAgICAgIyBTaGFyaW5nIFdhbGt0aHJvdWdoIE1vZGFsXG4gICAgICBhcHBDb25uZWN0TW9kYWw6IHt9ICAgICAgICAjIENvbm5lYyEgV2Fsa3Rocm91Z2ggTW9kYWxcbiAgICAgIHBhZ2U6IHt9ICAgICAgICAgICAgICAgICAgICMgdGhlIHBhZ2Ugd2UncmUgb25cbiAgICAgIHBhbmU6IHt9ICAgICAgICAgICAgICAgICAgICMgdGhlIHBhbmUgd2UncmUgb25cbiAgICAgIGVycm9yczogW10gICAgICAgICAgICAgICAgICMgY3VycmVudCBlcnJvcnMgdG8gYmUgcGFzc2VkIHRvIHRoZSBlcnJvciBmbGFzaFxuICAgICAgYXV0b3N0b3BRdWV1ZTogW10gICAgICAgICAgIyBsaXN0IG9mIEFwcEluc3RhbmNlIHRoYXQgc2hvdWxkIGJlIHByb3Bvc2VkIGFuIGF1dG9zdG9wXG4gICAgICBub3RpZmljYXRpb25RdWV1ZTogW10gICAgICAjIGxpc3Qgb2Ygbm90aWZpY2F0aW9ucyB0aGF0IHNob3VsZCBhcHBlYXIgaW4gdGhlIG5vdGlmaWNhdGlvbiB3aWRnZXRcbiAgICAgIHBhcmFtczoge30gICAgICAgICAgICAgICAgICMgUGFyYW1zIHBhc3NlZCB0byBteXNwYWNlIHBhcmFtIHVwb24gbG9hZGluZy4gRS5nLjogL215c3BhY2U/bmV3QXBwPXRydWVcblxuICAgICMgU2V0IGFuIG9iamVjdCBvbiB0aGUgYnVzXG4gICAgQHB1Ymxpc2ggPSAobmFtZSxvYmplY3QpIC0+XG4gICAgICBtc2dCdXNEYXRhW25hbWVdID0gb2JqZWN0XG5cbiAgICAjIEdldCBhIGJ1cyBhY2Nlc3NvciB0byB0aGUgb2JqZWN0XG4gICAgIyBOb3RlIHRoYXQgdGhpcyBtZXRob2QgcmV0dXJucyBhIEZVTkNUSU9OIG5vdCBhbiBhdHRyaWJ1dGVcbiAgICAjIC0tLVxuICAgICMgV2UgbmVlZCB0byByZXR1cm4gYSBmdW5jdGlvbiBpZiB3ZSB3YW50IHRoZSByZXN1bHQgdG8gYmVcbiAgICAjIGV2YWx1YXRlZCBkdXJpbmcgJGRpZ2VzdCAoYW5kIFVJIHVwZGF0ZWQgYXV0b21hdGljYWxseSlcbiAgICBAc3Vic2NyaWJlID0gKG5hbWUpIC0+XG4gICAgICByZXR1cm4gKCkgLT4gbXNnQnVzRGF0YVtuYW1lXVxuXG4gICAgcmV0dXJuXG4gIClcbiJdfQ==

(function() {
  angular.module('impac.services.routes', []).provider('ImpacRoutes', function() {
    var _$get, defaults, provider;
    provider = this;
    defaults = {
      mnoHub: '/api/v2',
      impacPrefix: '/impac',
      impacApi: 'http://localhost:4000/api',
      dashboards: {
        index: null,
        show: null,
        create: null,
        update: null,
        del: null
      },
      widgets: {
        index: null,
        show: null,
        create: null,
        update: null,
        del: null,
        suggest: null
      },
      kpis: {
        index: null,
        show: null,
        create: null,
        update: null,
        del: null,
        local: null
      },
      organizations: {
        appInstancesSync: null
      }
    };
    provider.configureRoutes = function(configOptions) {
      return angular.extend(defaults, configOptions);
    };
    _$get = function() {
      var service;
      service = this;
      service.dashboards = {
        index: function(orgId) {
          if (orgId == null) {
            orgId = null;
          }
          if (defaults.dashboards.index) {
            return defaults.dashboards.index.replace(':organization_id', orgId);
          } else {
            return "" + defaults.mnoHub + defaults.impacPrefix + "/dashboards";
          }
        },
        create: function(orgId) {
          if (orgId == null) {
            orgId = null;
          }
          if (defaults.dashboards.create) {
            return defaults.dashboards.create.replace(':organization_id', orgId);
          } else {
            return service.dashboards.index(orgId);
          }
        },
        show: function(id) {
          if (defaults.dashboards.show) {
            return defaults.dashboards.show.replace(':id', id);
          } else {
            return "" + defaults.mnoHub + defaults.impacPrefix + "/dashboards/" + id;
          }
        },
        update: function(id) {
          if (defaults.dashboards.update) {
            return defaults.dashboards.update.replace(':id', id);
          } else {
            return service.dashboards.show(id);
          }
        },
        "delete": function(id) {
          if (defaults.dashboards.del) {
            return defaults.dashboards.del.replace(':id', id);
          } else {
            return service.dashboards.show(id);
          }
        }
      };
      service.widgets = {
        index: function(dashboard_id) {
          if (defaults.widgets.index) {
            return defaults.widgets.index.replace(':dashboard_id', dashboard_id);
          } else {
            return (service.dashboards.show(dashboard_id)) + "/widgets";
          }
        },
        show: function(dashboard_id, id) {
          if (defaults.widgets.show) {
            return defaults.widgets.show.replace(':dashboard_id', dashboard_id).replace(':id', id);
          } else {
            return defaults.impacApi + "/v1/get_widget";
          }
        },
        create: function(dashboard_id) {
          if (defaults.widgets.create) {
            return defaults.widgets.create.replace(':dashboard_id', dashboard_id);
          } else {
            return service.widgets.index(dashboard_id);
          }
        },
        update: function(dashboard_id, id) {
          if (defaults.widgets.update) {
            return defaults.widgets.update.replace(':dashboard_id', dashboard_id).replace(':id', id);
          } else {
            return (service.widgets.index(dashboard_id)) + "/" + id;
          }
        },
        "delete": function(dashboard_id, id) {
          if (defaults.widgets.del) {
            return defaults.widgets.del.replace(':dashboard_id', dashboard_id).replace(':id', id);
          } else {
            return (service.widgets.index(dashboard_id)) + "/" + id;
          }
        },
        suggest: function() {
          return defaults.widgets.suggest;
        }
      };
      service.kpis = {
        index: function(dashboard_id) {
          if (defaults.kpis.index) {
            return defaults.kpis.index.replace(':dashboard_id', dashboard_id);
          } else {
            return defaults.impacApi + "/v2/kpis";
          }
        },
        show: function(dashboard_id, id) {
          if (defaults.kpis.show) {
            return defaults.kpis.show.replace(':dashboard_id', dashboard_id).replace(':id', id);
          } else {
            return defaults.impacApi + "/v2/kpis";
          }
        },
        create: function(dashboard_id) {
          if (defaults.kpis.create) {
            return defaults.kpis.create.replace(':dashboard_id', dashboard_id);
          } else {
            return (service.dashboards.show(dashboard_id)) + "/kpis";
          }
        },
        update: function(dashboard_id, id) {
          if (defaults.kpis.update) {
            return defaults.kpis.update.replace(':dashboard_id', dashboard_id).replace(':id', id);
          } else {
            return (service.kpis.create(dashboard_id)) + "/" + id;
          }
        },
        "delete": function(dashboard_id, id) {
          if (defaults.kpis.del) {
            return defaults.kpis.del.replace(':dashboard_id', dashboard_id).replace(':id', id);
          } else {
            return (service.kpis.create(dashboard_id)) + "/" + id;
          }
        },
        local: function() {
          return defaults.kpis.local;
        }
      };
      service.organizations = {
        appInstancesSync: function(uid) {
          if (defaults.organizations.appInstancesSync) {
            return defaults.organizations.appInstancesSync.replace(':uid', uid);
          } else {
            return defaults.mnoHub + "/organizations/" + uid + "/app_instances_sync";
          }
        }
      };
      return service;
    };
    _$get.$inject = [];
    provider.$get = _$get;
    return provider;
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

(function() {
  angular.module('impac.services.theming', []).provider('ImpacTheming', function() {
    var _$get, options, provider;
    provider = this;
    options = {
      chartColors: {
        positive: '#3FC4FF',
        negative: '#1DE9B6',
        array: ["#1de9b6", "#7c4dff", "#ffc928", "#3fc4ff", "#ff8e01", "#c6ff00", "#d500fa", "#ff6e41", "#ffeb3c", "#ff1844"]
      },
      dhbConfig: {
        showDhbHeading: false,
        dhbHeadingText: 'Impac!'
      },
      dhbSelectorConfig: {
        selectorType: 'dropdown',
        customTmplPath: null,
        accessibilityEnabled: false,
        addWidgetEnabled: true,
        addDhbEnabled: true,
        deleteDhbEnabled: true
      },
      dhbKpisConfig: {
        enableKpis: false,
        parentElementId: ''
      },
      dataNotFoundConfig: {
        mainMessage: 'Data not found',
        linkMessage: 'Are you missing an app?',
        linkUrl: '/apps',
        linkTarget: '_blank',
        linkUrlCallback: null
      },
      dhbErrorsConfig: {
        firstTimeCreated: {
          first: 'It\'s time to add a reporting dashboard!',
          second: 'In 2 clicks, you\'ll be able to visualize how your business is performing.',
          note: 'Note: dashboards you create will only be accessible by you. Dashboard sharing across users will be added soon.'
        },
        empty: {
          first: 'Now it\'s time to select the metrics you want to see!',
          second: 'Add widgets to your dashboard to help make an Impac!™ to your business.'
        }
      },
      dhbSubMenuConfig: {
        myobMessage: {
          show: true,
          appLink: {
            show: true,
            url: '#/marketplace',
            text: '>> Check this app on our marketplace'
          }
        }
      },
      widgetSelectorConfig: {
        path: null
      },
      addChartTile: {
        show: false,
        onClickOptions: {
          triggers: []
        }
      },
      showNoWidgetMsg: {
        show: true
      },
      dhbSettings: {
        inWidgetsContainer: false,
        showSyncApps: function() {
          return true;
        },
        currency: {
          locked: false
        }
      }
    };
    provider.configure = function(configOptions) {
      return angular.merge(options, configOptions);
    };
    _$get = function() {
      var service;
      service = this;
      service.get = function() {
        return options;
      };
      return service;
    };
    _$get.$inject = [];
    provider.$get = _$get;
    return provider;
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VzL3RoZW1pbmcvdGhlbWluZy5zdmMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBO0VBQUEsT0FDRSxDQUFDLE1BREgsQ0FDVSx3QkFEVixFQUNvQyxFQURwQyxDQUVFLENBQUMsUUFGSCxDQUVZLGNBRlosRUFFNEIsU0FBQTtBQUV4QixRQUFBO0lBQUEsUUFBQSxHQUFXO0lBSVgsT0FBQSxHQUVFO01BQUEsV0FBQSxFQUNFO1FBQUEsUUFBQSxFQUFVLFNBQVY7UUFDQSxRQUFBLEVBQVUsU0FEVjtRQUVBLEtBQUEsRUFBTyxDQUNMLFNBREssRUFFTCxTQUZLLEVBR0wsU0FISyxFQUlMLFNBSkssRUFLTCxTQUxLLEVBTUwsU0FOSyxFQU9MLFNBUEssRUFRTCxTQVJLLEVBU0wsU0FUSyxFQVVMLFNBVkssQ0FGUDtPQURGO01BZ0JBLFNBQUEsRUFDRTtRQUFBLGNBQUEsRUFBZ0IsS0FBaEI7UUFDQSxjQUFBLEVBQWdCLFFBRGhCO09BakJGO01Bb0JBLGlCQUFBLEVBQ0U7UUFBQSxZQUFBLEVBQWMsVUFBZDtRQUNBLGNBQUEsRUFBZ0IsSUFEaEI7UUFFQSxvQkFBQSxFQUFzQixLQUZ0QjtRQUdBLGdCQUFBLEVBQWtCLElBSGxCO1FBSUEsYUFBQSxFQUFlLElBSmY7UUFLQSxnQkFBQSxFQUFrQixJQUxsQjtPQXJCRjtNQTRCQSxhQUFBLEVBQ0U7UUFBQSxVQUFBLEVBQVksS0FBWjtRQUNBLGVBQUEsRUFBaUIsRUFEakI7T0E3QkY7TUFnQ0Esa0JBQUEsRUFDRTtRQUFBLFdBQUEsRUFBYSxnQkFBYjtRQUNBLFdBQUEsRUFBYSx5QkFEYjtRQUVBLE9BQUEsRUFBUyxPQUZUO1FBR0EsVUFBQSxFQUFZLFFBSFo7UUFJQSxlQUFBLEVBQWlCLElBSmpCO09BakNGO01Bd0NBLGVBQUEsRUFDRTtRQUFBLGdCQUFBLEVBQ0U7VUFBQSxLQUFBLEVBQU8sMENBQVA7VUFDQSxNQUFBLEVBQVEsNEVBRFI7VUFFQSxJQUFBLEVBQU0sZ0hBRk47U0FERjtRQUlBLEtBQUEsRUFDRTtVQUFBLEtBQUEsRUFBTyx1REFBUDtVQUNBLE1BQUEsRUFBUSx5RUFEUjtTQUxGO09BekNGO01BaURBLGdCQUFBLEVBQ0U7UUFBQSxXQUFBLEVBQ0U7VUFBQSxJQUFBLEVBQU0sSUFBTjtVQUNBLE9BQUEsRUFDRTtZQUFBLElBQUEsRUFBTSxJQUFOO1lBQ0EsR0FBQSxFQUFLLGVBREw7WUFFQSxJQUFBLEVBQU0sc0NBRk47V0FGRjtTQURGO09BbERGO01BMERBLG9CQUFBLEVBQ0U7UUFBQSxJQUFBLEVBQU0sSUFBTjtPQTNERjtNQTZEQSxZQUFBLEVBQ0U7UUFBQSxJQUFBLEVBQU0sS0FBTjtRQUNBLGNBQUEsRUFDRTtVQUFBLFFBQUEsRUFBVSxFQUFWO1NBRkY7T0E5REY7TUFrRUEsZUFBQSxFQUNFO1FBQUEsSUFBQSxFQUFNLElBQU47T0FuRUY7TUFxRUEsV0FBQSxFQUNFO1FBQUEsa0JBQUEsRUFBb0IsS0FBcEI7UUFDQSxZQUFBLEVBQWMsU0FBQTtpQkFBRztRQUFILENBRGQ7UUFFQSxRQUFBLEVBQ0U7VUFBQSxNQUFBLEVBQVEsS0FBUjtTQUhGO09BdEVGOztJQStFRixRQUFRLENBQUMsU0FBVCxHQUFxQixTQUFDLGFBQUQ7YUFDbkIsT0FBTyxDQUFDLEtBQVIsQ0FBYyxPQUFkLEVBQXVCLGFBQXZCO0lBRG1CO0lBSXJCLEtBQUEsR0FBUSxTQUFBO0FBQ04sVUFBQTtNQUFBLE9BQUEsR0FBVTtNQUlWLE9BQU8sQ0FBQyxHQUFSLEdBQWMsU0FBQTtBQUNaLGVBQU87TUFESztBQUdkLGFBQU87SUFSRDtJQVVSLEtBQUssQ0FBQyxPQUFOLEdBQWdCO0lBRWhCLFFBQVEsQ0FBQyxJQUFULEdBQWdCO0FBRWhCLFdBQU87RUF6R2lCLENBRjVCO0FBQUEiLCJmaWxlIjoic2VydmljZXMvdGhlbWluZy90aGVtaW5nLnN2Yy5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIiM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiMgcHJvdmlkZXIgZm9yIGNvbmZpZ3VyaW5nIGltcGFjLWFuZ3VsYXIgY29sb3VyIHRoZW1lICYgbGF5b3V0LlxuIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuYW5ndWxhclxuICAubW9kdWxlKCdpbXBhYy5zZXJ2aWNlcy50aGVtaW5nJywgW10pXG4gIC5wcm92aWRlcignSW1wYWNUaGVtaW5nJywgKCkgLT5cblxuICAgIHByb3ZpZGVyID0gQFxuICAgICM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAjIFByaXZhdGUgRGVmYXVsdHMgfCBDdXN0b21pc2FibGUgZmVhdHVyZXNcbiAgICAjPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgb3B0aW9ucyA9XG4gICAgICAjIHdpZGdldCBjaGFydHMgY29sb3VyIHBhbGV0dGVcbiAgICAgIGNoYXJ0Q29sb3JzOlxuICAgICAgICBwb3NpdGl2ZTogJyMzRkM0RkYnLFxuICAgICAgICBuZWdhdGl2ZTogJyMxREU5QjYnLFxuICAgICAgICBhcnJheTogW1xuICAgICAgICAgIFwiIzFkZTliNlwiLFxuICAgICAgICAgIFwiIzdjNGRmZlwiLFxuICAgICAgICAgIFwiI2ZmYzkyOFwiLFxuICAgICAgICAgIFwiIzNmYzRmZlwiLFxuICAgICAgICAgIFwiI2ZmOGUwMVwiLFxuICAgICAgICAgIFwiI2M2ZmYwMFwiLFxuICAgICAgICAgIFwiI2Q1MDBmYVwiLFxuICAgICAgICAgIFwiI2ZmNmU0MVwiLFxuICAgICAgICAgIFwiI2ZmZWIzY1wiLFxuICAgICAgICAgIFwiI2ZmMTg0NFwiXG4gICAgICAgIF1cbiAgICAgICMgZ2VuZXJhbCBkYXNoYm9hcmQgb3B0aW9uc1xuICAgICAgZGhiQ29uZmlnOlxuICAgICAgICBzaG93RGhiSGVhZGluZzogZmFsc2VcbiAgICAgICAgZGhiSGVhZGluZ1RleHQ6ICdJbXBhYyEnXG4gICAgICAjIGNvbmZpZ3VyYXRpb25zIGZvciB0aGUgZGFzaGJvYXJkIHNlbGVjdG9yIGZlYXR1cmUuXG4gICAgICBkaGJTZWxlY3RvckNvbmZpZzpcbiAgICAgICAgc2VsZWN0b3JUeXBlOiAnZHJvcGRvd24nXG4gICAgICAgIGN1c3RvbVRtcGxQYXRoOiBudWxsXG4gICAgICAgIGFjY2Vzc2liaWxpdHlFbmFibGVkOiBmYWxzZVxuICAgICAgICBhZGRXaWRnZXRFbmFibGVkOiB0cnVlXG4gICAgICAgIGFkZERoYkVuYWJsZWQ6IHRydWVcbiAgICAgICAgZGVsZXRlRGhiRW5hYmxlZDogdHJ1ZVxuICAgICAgIyBrcGlzIG9wdGlvbnNcbiAgICAgIGRoYktwaXNDb25maWc6XG4gICAgICAgIGVuYWJsZUtwaXM6IGZhbHNlXG4gICAgICAgIHBhcmVudEVsZW1lbnRJZDogJydcbiAgICAgICMgb3B0aW9ucyBmb3IgdGhlIGRhdGEtbm90LWZvdW5kIGRpc3BsYXkgcGFuZWwgbWVzc2FnZXMuXG4gICAgICBkYXRhTm90Rm91bmRDb25maWc6XG4gICAgICAgIG1haW5NZXNzYWdlOiAnRGF0YSBub3QgZm91bmQnXG4gICAgICAgIGxpbmtNZXNzYWdlOiAnQXJlIHlvdSBtaXNzaW5nIGFuIGFwcD8nXG4gICAgICAgIGxpbmtVcmw6ICcvYXBwcydcbiAgICAgICAgbGlua1RhcmdldDogJ19ibGFuaydcbiAgICAgICAgbGlua1VybENhbGxiYWNrOiBudWxsXG5cbiAgICAgICMgb3B0aW9ucyBmb3IgY29uZmlndXJpbmcgdGhlIGRoYiBlcnJvcnMgbWVzc2FnZXMuXG4gICAgICBkaGJFcnJvcnNDb25maWc6XG4gICAgICAgIGZpcnN0VGltZUNyZWF0ZWQ6XG4gICAgICAgICAgZmlyc3Q6ICdJdFxcJ3MgdGltZSB0byBhZGQgYSByZXBvcnRpbmcgZGFzaGJvYXJkISdcbiAgICAgICAgICBzZWNvbmQ6ICdJbiAyIGNsaWNrcywgeW91XFwnbGwgYmUgYWJsZSB0byB2aXN1YWxpemUgaG93IHlvdXIgYnVzaW5lc3MgaXMgcGVyZm9ybWluZy4nXG4gICAgICAgICAgbm90ZTogJ05vdGU6IGRhc2hib2FyZHMgeW91IGNyZWF0ZSB3aWxsIG9ubHkgYmUgYWNjZXNzaWJsZSBieSB5b3UuIERhc2hib2FyZCBzaGFyaW5nIGFjcm9zcyB1c2VycyB3aWxsIGJlIGFkZGVkIHNvb24uJ1xuICAgICAgICBlbXB0eTpcbiAgICAgICAgICBmaXJzdDogJ05vdyBpdFxcJ3MgdGltZSB0byBzZWxlY3QgdGhlIG1ldHJpY3MgeW91IHdhbnQgdG8gc2VlISdcbiAgICAgICAgICBzZWNvbmQ6ICdBZGQgd2lkZ2V0cyB0byB5b3VyIGRhc2hib2FyZCB0byBoZWxwIG1ha2UgYW4gSW1wYWMh4oSiIHRvIHlvdXIgYnVzaW5lc3MuJ1xuXG4gICAgICBkaGJTdWJNZW51Q29uZmlnOlxuICAgICAgICBteW9iTWVzc2FnZTpcbiAgICAgICAgICBzaG93OiB0cnVlXG4gICAgICAgICAgYXBwTGluazpcbiAgICAgICAgICAgIHNob3c6IHRydWVcbiAgICAgICAgICAgIHVybDogJyMvbWFya2V0cGxhY2UnXG4gICAgICAgICAgICB0ZXh0OiAnPj4gQ2hlY2sgdGhpcyBhcHAgb24gb3VyIG1hcmtldHBsYWNlJ1xuXG4gICAgICAjIG9wdGlvbnMgZm9yIHRoZSB3aWRnZXQgc2VsZWN0b3IgcGFuZWwuXG4gICAgICB3aWRnZXRTZWxlY3RvckNvbmZpZzpcbiAgICAgICAgcGF0aDogbnVsbFxuICAgICAgIyBhZGQgY2hhcnQod2lkZ2V0KSB0aWxlIGZlYXR1cmUgJiBjb25maWd1cmF0aW9ucy5cbiAgICAgIGFkZENoYXJ0VGlsZTpcbiAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgb25DbGlja09wdGlvbnM6XG4gICAgICAgICAgdHJpZ2dlcnM6IFtdXG4gICAgICAjIHNob3dpbmcgdGhlIG5vIHdpZGdldHMgLyBlbXB0eSBkYXNoYm9hcmQgbWVzc2FnZSBwYW5lbCAmIGFueSBjb25maWd1cmF0aW9ucyB0aGF0IGJlbG9uZy5cbiAgICAgIHNob3dOb1dpZGdldE1zZzpcbiAgICAgICAgc2hvdzogdHJ1ZVxuICAgICAgIyBjb25maWd1cmluZyBkYXNoYm9hcmQgc2V0dGluZ3NcbiAgICAgIGRoYlNldHRpbmdzOlxuICAgICAgICBpbldpZGdldHNDb250YWluZXI6IGZhbHNlXG4gICAgICAgIHNob3dTeW5jQXBwczogLT4gdHJ1ZVxuICAgICAgICBjdXJyZW5jeTpcbiAgICAgICAgICBsb2NrZWQ6IGZhbHNlXG5cblxuICAgICM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAjIFB1YmxpYyBtZXRob2RzIGF2YWlsYWJsZSBpbiBjb25maWdcbiAgICAjPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgcHJvdmlkZXIuY29uZmlndXJlID0gKGNvbmZpZ09wdGlvbnMpIC0+XG4gICAgICBhbmd1bGFyLm1lcmdlKG9wdGlvbnMsIGNvbmZpZ09wdGlvbnMpXG5cbiAgICAjPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgXyRnZXQgPSAoKSAtPlxuICAgICAgc2VydmljZSA9IEBcbiAgICAgICM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgICMgUHVibGljIG1ldGhvZHMgYXZhaWxhYmxlIGFzIHNlcnZpY2VcbiAgICAgICM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgIHNlcnZpY2UuZ2V0ID0gLT5cbiAgICAgICAgcmV0dXJuIG9wdGlvbnNcblxuICAgICAgcmV0dXJuIHNlcnZpY2VcbiAgICAjIGluamVjdCBzZXJ2aWNlIGRlcGVuZGVuY2llcyBoZXJlLCBhbmQgZGVjbGFyZSBpbiBfJGdldCBmdW5jdGlvbiBhcmdzLlxuICAgIF8kZ2V0LiRpbmplY3QgPSBbXTtcbiAgICAjIGF0dGFjaCBwcm92aWRlciBmdW5jdGlvbiBvbnRvIHRoZSBwcm92aWRlciBvYmplY3RcbiAgICBwcm92aWRlci4kZ2V0ID0gXyRnZXRcblxuICAgIHJldHVybiBwcm92aWRlclxuICApXG4iXX0=

(function() {
  angular.module('impac.services.utilities', []).service('ImpacUtilities', function() {
    this.processRailsError = function(error) {
      var messages;
      messages = [];
      if (error.status && error.status === 401) {
        messages.push("Sorry! You are not authorized to perform this action");
      } else {
        if (error.data && error.data !== " ") {
          if (angular.isArray(error.data)) {
            _.each(error.data, function(errorMessage) {
              var capitalizedError;
              capitalizedError = errorMessage.charAt(0).toUpperCase() + errorMessage.slice(1);
              return messages.push("" + capitalizedError);
            });
          } else if (angular.isObject(error.data)) {
            _.each(error.data, function(attrErrors, attribute) {
              var capitalizedAttr;
              capitalizedAttr = (attribute.charAt(0).toUpperCase() + attribute.slice(1)).replace('_', ' ');
              if (angular.isArray(attrErrors)) {
                return _.each(attrErrors, function(attrError) {
                  if (capitalizedAttr.match(/base/i)) {
                    return messages.push(attrError);
                  } else {
                    return messages.push(capitalizedAttr + " " + attrError);
                  }
                });
              } else {
                if (capitalizedAttr.match(/base/i)) {
                  return messages.push(attrErrors);
                } else {
                  return messages.push(capitalizedAttr + " " + attrErrors);
                }
              }
            });
          } else if (angular.isString(error.data)) {
            messages.push(error.data);
          } else {
            messages.push("Potentially a system or communication error. Please retry later.");
          }
        } else {
          messages.push("Potentially a system or communication error. Please retry later.");
        }
      }
      return messages;
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VzL3V0aWxpdGllcy91dGlsaXRpZXMuc3ZjLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQTtFQUFBLE9BQ0UsQ0FBQyxNQURILENBQ1UsMEJBRFYsRUFDc0MsRUFEdEMsQ0FFRSxDQUFDLE9BRkgsQ0FFVyxnQkFGWCxFQUU2QixTQUFBO0lBSXpCLElBQUMsQ0FBQSxpQkFBRCxHQUFxQixTQUFDLEtBQUQ7QUFDbkIsVUFBQTtNQUFBLFFBQUEsR0FBVztNQUVYLElBQUcsS0FBSyxDQUFDLE1BQU4sSUFBZ0IsS0FBSyxDQUFDLE1BQU4sS0FBZ0IsR0FBbkM7UUFDRSxRQUFRLENBQUMsSUFBVCxDQUFjLHNEQUFkLEVBREY7T0FBQSxNQUFBO1FBR0UsSUFBRyxLQUFLLENBQUMsSUFBTixJQUFjLEtBQUssQ0FBQyxJQUFOLEtBQWMsR0FBL0I7VUFDRSxJQUFHLE9BQU8sQ0FBQyxPQUFSLENBQWdCLEtBQUssQ0FBQyxJQUF0QixDQUFIO1lBQ0UsQ0FBQyxDQUFDLElBQUYsQ0FBTyxLQUFLLENBQUMsSUFBYixFQUFtQixTQUFDLFlBQUQ7QUFDakIsa0JBQUE7Y0FBQSxnQkFBQSxHQUFtQixZQUFZLENBQUMsTUFBYixDQUFvQixDQUFwQixDQUFzQixDQUFDLFdBQXZCLENBQUEsQ0FBQSxHQUF1QyxZQUFZLENBQUMsS0FBYixDQUFtQixDQUFuQjtxQkFDMUQsUUFBUSxDQUFDLElBQVQsQ0FBYyxFQUFBLEdBQUcsZ0JBQWpCO1lBRmlCLENBQW5CLEVBREY7V0FBQSxNQUtLLElBQUcsT0FBTyxDQUFDLFFBQVIsQ0FBaUIsS0FBSyxDQUFDLElBQXZCLENBQUg7WUFDSCxDQUFDLENBQUMsSUFBRixDQUFPLEtBQUssQ0FBQyxJQUFiLEVBQW1CLFNBQUMsVUFBRCxFQUFhLFNBQWI7QUFDakIsa0JBQUE7Y0FBQSxlQUFBLEdBQWtCLENBQUMsU0FBUyxDQUFDLE1BQVYsQ0FBaUIsQ0FBakIsQ0FBbUIsQ0FBQyxXQUFwQixDQUFBLENBQUEsR0FBb0MsU0FBUyxDQUFDLEtBQVYsQ0FBZ0IsQ0FBaEIsQ0FBckMsQ0FBd0QsQ0FBQyxPQUF6RCxDQUFpRSxHQUFqRSxFQUFzRSxHQUF0RTtjQUNsQixJQUFHLE9BQU8sQ0FBQyxPQUFSLENBQWdCLFVBQWhCLENBQUg7dUJBQ0UsQ0FBQyxDQUFDLElBQUYsQ0FBTyxVQUFQLEVBQW1CLFNBQUMsU0FBRDtrQkFDakIsSUFBRyxlQUFlLENBQUMsS0FBaEIsQ0FBc0IsT0FBdEIsQ0FBSDsyQkFDRSxRQUFRLENBQUMsSUFBVCxDQUFjLFNBQWQsRUFERjttQkFBQSxNQUFBOzJCQUdFLFFBQVEsQ0FBQyxJQUFULENBQWlCLGVBQUQsR0FBaUIsR0FBakIsR0FBb0IsU0FBcEMsRUFIRjs7Z0JBRGlCLENBQW5CLEVBREY7ZUFBQSxNQUFBO2dCQVFFLElBQUcsZUFBZSxDQUFDLEtBQWhCLENBQXNCLE9BQXRCLENBQUg7eUJBQ0UsUUFBUSxDQUFDLElBQVQsQ0FBYyxVQUFkLEVBREY7aUJBQUEsTUFBQTt5QkFHRSxRQUFRLENBQUMsSUFBVCxDQUFpQixlQUFELEdBQWlCLEdBQWpCLEdBQW9CLFVBQXBDLEVBSEY7aUJBUkY7O1lBRmlCLENBQW5CLEVBREc7V0FBQSxNQWdCQSxJQUFHLE9BQU8sQ0FBQyxRQUFSLENBQWlCLEtBQUssQ0FBQyxJQUF2QixDQUFIO1lBQ0gsUUFBUSxDQUFDLElBQVQsQ0FBYyxLQUFLLENBQUMsSUFBcEIsRUFERztXQUFBLE1BQUE7WUFHSCxRQUFRLENBQUMsSUFBVCxDQUFjLGtFQUFkLEVBSEc7V0F0QlA7U0FBQSxNQUFBO1VBMkJFLFFBQVEsQ0FBQyxJQUFULENBQWMsa0VBQWQsRUEzQkY7U0FIRjs7QUFnQ0EsYUFBTztJQW5DWTtFQUpJLENBRjdCO0FBQUEiLCJmaWxlIjoic2VydmljZXMvdXRpbGl0aWVzL3V0aWxpdGllcy5zdmMuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyIjIFRoaXMgc2VydmljZSBwcm92aWRlcyBvZnRlbmx5IHVzZWQgbWV0aG9kcyBsaWtlIFJhaWxzIGVycm9yIHByb2Nlc3NpbmcuXG4jIHRvZG86OmxpYi1zdHJ1Y3R1cmU6IHNob3VsZCB0aGlzIGJlIGluIGltcGFjLWFuZ3VsYXI/XG5hbmd1bGFyXG4gIC5tb2R1bGUoJ2ltcGFjLnNlcnZpY2VzLnV0aWxpdGllcycsIFtdKVxuICAuc2VydmljZSgnSW1wYWNVdGlsaXRpZXMnLCAoKSAtPlxuXG4gICAgIyBQYXJzZSBhIFJhaWxzIG1vZGVsIGVycm9yIGFuZCByZXR1cm4gYW4gYXJyYXkgb2YgbWVzc2FnZXNcbiAgICAjIHJlYWR5IHRvIGJlIGRpc3BsYXllZFxuICAgIEBwcm9jZXNzUmFpbHNFcnJvciA9IChlcnJvcikgLT5cbiAgICAgIG1lc3NhZ2VzID0gW11cblxuICAgICAgaWYgZXJyb3Iuc3RhdHVzICYmIGVycm9yLnN0YXR1cyA9PSA0MDFcbiAgICAgICAgbWVzc2FnZXMucHVzaChcIlNvcnJ5ISBZb3UgYXJlIG5vdCBhdXRob3JpemVkIHRvIHBlcmZvcm0gdGhpcyBhY3Rpb25cIilcbiAgICAgIGVsc2VcbiAgICAgICAgaWYgZXJyb3IuZGF0YSAmJiBlcnJvci5kYXRhICE9IFwiIFwiXG4gICAgICAgICAgaWYgYW5ndWxhci5pc0FycmF5KGVycm9yLmRhdGEpXG4gICAgICAgICAgICBfLmVhY2goZXJyb3IuZGF0YSwgKGVycm9yTWVzc2FnZSkgLT5cbiAgICAgICAgICAgICAgY2FwaXRhbGl6ZWRFcnJvciA9IGVycm9yTWVzc2FnZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGVycm9yTWVzc2FnZS5zbGljZSgxKTtcbiAgICAgICAgICAgICAgbWVzc2FnZXMucHVzaChcIiN7Y2FwaXRhbGl6ZWRFcnJvcn1cIilcbiAgICAgICAgICAgIClcbiAgICAgICAgICBlbHNlIGlmIGFuZ3VsYXIuaXNPYmplY3QoZXJyb3IuZGF0YSlcbiAgICAgICAgICAgIF8uZWFjaChlcnJvci5kYXRhLCAoYXR0ckVycm9ycywgYXR0cmlidXRlKSAtPlxuICAgICAgICAgICAgICBjYXBpdGFsaXplZEF0dHIgPSAoYXR0cmlidXRlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgYXR0cmlidXRlLnNsaWNlKDEpKS5yZXBsYWNlKCdfJywgJyAnKVxuICAgICAgICAgICAgICBpZiBhbmd1bGFyLmlzQXJyYXkoYXR0ckVycm9ycylcbiAgICAgICAgICAgICAgICBfLmVhY2goYXR0ckVycm9ycywgKGF0dHJFcnJvcikgLT5cbiAgICAgICAgICAgICAgICAgIGlmIGNhcGl0YWxpemVkQXR0ci5tYXRjaCgvYmFzZS9pKVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlcy5wdXNoKGF0dHJFcnJvcilcbiAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZXMucHVzaChcIiN7Y2FwaXRhbGl6ZWRBdHRyfSAje2F0dHJFcnJvcn1cIilcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBpZiBjYXBpdGFsaXplZEF0dHIubWF0Y2goL2Jhc2UvaSlcbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2VzLnB1c2goYXR0ckVycm9ycylcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICBtZXNzYWdlcy5wdXNoKFwiI3tjYXBpdGFsaXplZEF0dHJ9ICN7YXR0ckVycm9yc31cIilcbiAgICAgICAgICAgIClcbiAgICAgICAgICBlbHNlIGlmIGFuZ3VsYXIuaXNTdHJpbmcoZXJyb3IuZGF0YSlcbiAgICAgICAgICAgIG1lc3NhZ2VzLnB1c2goZXJyb3IuZGF0YSlcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBtZXNzYWdlcy5wdXNoKFwiUG90ZW50aWFsbHkgYSBzeXN0ZW0gb3IgY29tbXVuaWNhdGlvbiBlcnJvci4gUGxlYXNlIHJldHJ5IGxhdGVyLlwiKVxuICAgICAgICBlbHNlXG4gICAgICAgICAgbWVzc2FnZXMucHVzaChcIlBvdGVudGlhbGx5IGEgc3lzdGVtIG9yIGNvbW11bmljYXRpb24gZXJyb3IuIFBsZWFzZSByZXRyeSBsYXRlci5cIilcblxuICAgICAgcmV0dXJuIG1lc3NhZ2VzXG5cbiAgICByZXR1cm5cbiAgKVxuIl19

(function() {
  angular.module('impac.services.widgets', []).service('ImpacWidgetsSvc', function($q, $http, $log, ImpacRoutes, ImpacMainSvc, ImpacDashboardsSvc) {
    var _self, isWidgetInCurrentDashboard;
    _self = this;
    this.config = {};
    this.config.ssoSessionId = "";
    this.load = function(force) {
      var deferred;
      if (force == null) {
        force = false;
      }
      deferred = $q.defer();
      if (_.isEmpty(_self.config.ssoSessionId) || force) {
        $q.all([ImpacMainSvc.loadUserData(force), ImpacDashboardsSvc.load(force)]).then(function(results) {
          _self.config.ssoSessionId = results[0].sso_session;
          return deferred.resolve(_self.config);
        }, function(error) {
          return deferred.reject(error);
        });
      } else {
        deferred.resolve(_self.config);
      }
      return deferred.promise;
    };
    this.create = function(opts) {
      var deferred;
      deferred = $q.defer();
      _self.load().then(function(config) {
        var dashboard, data;
        dashboard = ImpacDashboardsSvc.getCurrentDashboard();
        data = {
          widget: opts
        };
        return $http.post(ImpacRoutes.widgets.create(dashboard.id), data).then(function(success) {
          var newWidget;
          newWidget = success.data;
          dashboard.widgets.push(newWidget);
          ImpacDashboardsSvc.callbacks.widgetAdded.notify(newWidget);
          return deferred.resolve(newWidget);
        }, function(error) {
          $log.error("ImpacWidgetsSvc: cannot create widget on dashboard " + dashboard.id);
          return deferred.reject(error);
        });
      }, function(error) {
        $log.error("ImpacWidgetsSvc: error while trying to load the service");
        return deferred.reject(error);
      });
      return deferred.promise;
    };
    isWidgetInCurrentDashboard = function(widgetId) {
      var currentDhb;
      currentDhb = ImpacDashboardsSvc.getCurrentDashboard();
      if (_.isEmpty(currentDhb) || _.isEmpty(currentDhb.widgets)) {
        return false;
      }
      return _.contains(_.pluck(currentDhb.widgets, 'id'), widgetId);
    };
    this.initWidgetSettings = function(w) {
      var i, len, ref, setting;
      w.isEditMode = false;
      if (_.isEmpty(w.settings)) {
        return;
      }
      ref = w.settings;
      for (i = 0, len = ref.length; i < len; i++) {
        setting = ref[i];
        setting.initialize();
      }
      return true;
    };
    this.updateWidgetSettings = function(widget, needContentReload) {
      var deferred, i, len, meta, ref, setting;
      if (needContentReload == null) {
        needContentReload = true;
      }
      widget.isEditMode = false;
      deferred = $q.defer();
      if (_.isEmpty(widget.settings)) {
        deferred.reject('no setting to update');
      } else {
        if (needContentReload) {
          widget.isLoading = true;
        }
        meta = {};
        ref = widget.settings;
        for (i = 0, len = ref.length; i < len; i++) {
          setting = ref[i];
          angular.merge(meta, setting.toMetadata());
        }
        _self.update(widget, {
          metadata: meta
        }).then(function(updatedSettingsWidget) {
          if (needContentReload) {
            return _self.show(updatedSettingsWidget).then(function(updatedContentWidget) {
              updatedContentWidget.isLoading = false;
              return deferred.resolve(updatedContentWidget);
            }, function(error) {
              updatedSettingsWidget.isLoading = false;
              return deferred.reject(error);
            });
          } else {
            return deferred.resolve(updatedSettingsWidget);
          }
        }, function(error) {
          return deferred.reject(error);
        });
      }
      return deferred.promise;
    };
    this.massAssignAll = function(metadata) {
      if (!_.isEmpty(metadata)) {
        return _self.load().then(function() {
          var currentDhb, i, len, newMetadata, promises, ref, widget;
          currentDhb = ImpacDashboardsSvc.getCurrentDashboard();
          promises = [];
          if ((currentDhb != null) && (currentDhb.widgets != null)) {
            if (!_.isEmpty(currentDhb.widgets)) {
              ref = currentDhb.widgets;
              for (i = 0, len = ref.length; i < len; i++) {
                widget = ref[i];
                newMetadata = angular.merge({}, widget.metadata, metadata);
                if (!_.isEqual(widget.metadata, newMetadata)) {
                  promises.push(_self.update(widget, {
                    metadata: newMetadata
                  }).then(function(updatedWidget) {
                    updatedWidget.isLoading = true;
                    return _self.show(updatedWidget).then(function(renderedWidget) {
                      return renderedWidget.isLoading = false;
                    });
                  }));
                }
              }
              return $q.all(promises);
            } else {
              return $q.resolve([]);
            }
          } else {
            $log.error("ImpacWidgetsSvc - currentDhb.widgets is null", currentDhb);
            return $q.reject(null);
          }
        });
      }
    };
    this.refreshAll = function() {
      return ImpacDashboardsSvc.load().then(function(config) {
        var widgets;
        widgets = config.currentDashboard.widgets;
        return _.forEach(widgets, function(w) {
          w.isLoading || (w.isLoading = true);
          return _self.show(w, true).then(function(updatedWidget) {
            return w.isLoading = false;
          }, function(errorResponse) {
            w.isLoading = false;
            if ((errorResponse.data != null) && errorResponse.data.error) {
              return $log.error(errorResponse.data.error);
            }
          });
        });
      });
    };
    this.show = function(widget, refreshCache) {
      var deferred;
      if (refreshCache == null) {
        refreshCache = false;
      }
      deferred = $q.defer();
      _self.load().then(function(config) {
        var dashboard, data;
        if (!isWidgetInCurrentDashboard(widget.id)) {
          $log.info("ImpacWidgetsSvc: trying to load a widget (id: " + widget.id + ") that is not in currentDashboard");
          return deferred.reject("trying to load a widget (id: " + widget.id + ") that is not in currentDashboard");
        } else {
          data = {
            owner: widget.owner,
            sso_session: _self.config.ssoSessionId,
            metadata: widget.metadata,
            engine: widget.category
          };
          if (refreshCache) {
            angular.extend(data, {
              refresh_cache: true
            });
          }
          dashboard = ImpacDashboardsSvc.getCurrentDashboard();
          return $http.post(ImpacRoutes.widgets.show(dashboard.id, widget.id), data).then(function(success) {
            var content, i, len, name, ref, setting;
            content = success.data.content || {};
            name = success.data.name;
            angular.extend(widget, {
              content: content,
              originalName: name
            });
            if (angular.isDefined(widget.initContext)) {
              widget.initContext();
            }
            ref = widget.settings;
            for (i = 0, len = ref.length; i < len; i++) {
              setting = ref[i];
              if (angular.isDefined(setting.initialize)) {
                setting.initialize();
              }
            }
            if (angular.isDefined(widget.format)) {
              widget.format();
            }
            return deferred.resolve(widget);
          }, function(errorResponse) {
            var i, len, ref, setting;
            if (angular.isDefined(widget.initContext)) {
              widget.initContext();
            }
            ref = widget.settings;
            for (i = 0, len = ref.length; i < len; i++) {
              setting = ref[i];
              if (angular.isDefined(setting.initialize)) {
                setting.initialize();
              }
            }
            if (angular.isDefined(widget.processError) && (errorResponse.data != null) && errorResponse.data.error) {
              widget.processError(errorResponse.data.error);
            }
            return deferred.reject(errorResponse);
          });
        }
      }, function(error) {
        $log.error("ImpacWidgetsSvc: error while trying to load the service");
        return deferred.reject(error);
      });
      return deferred.promise;
    };
    this.update = function(widget, opts) {
      var dashboard, data, deferred;
      deferred = $q.defer();
      _self.load().then(function(config) {}, !isWidgetInCurrentDashboard(widget.id) ? ($log.info("ImpacWidgetsSvc: trying to update a widget (id: " + widget.id + ") that is not in currentDashboard"), deferred.reject("trying to update a widget (id: " + widget.id + ") that is not in currentDashboard")) : (data = {
        widget: opts
      }, dashboard = ImpacDashboardsSvc.getCurrentDashboard(), $http.put(ImpacRoutes.widgets.update(dashboard.id, widget.id), data).then(function(success) {
        var updatedWidget;
        updatedWidget = success.data;
        angular.extend(widget, updatedWidget);
        return deferred.resolve(widget);
      }, function(error) {
        $log.error("ImpacWidgetsSvc: cannot update widget: " + widget.id);
        return deferred.reject(error);
      })), function(error) {
        $log.error("ImpacWidgetsSvc: error while trying to load the service");
        return deferred.reject(error);
      });
      return deferred.promise;
    };
    this["delete"] = function(widgetToDelete) {
      var deferred;
      deferred = $q.defer();
      _self.load().then(function(config) {
        var dashboard;
        dashboard = ImpacDashboardsSvc.getCurrentDashboard();
        return $http["delete"](ImpacRoutes.widgets["delete"](dashboard.id, widgetToDelete.id)).then(function(success) {
          _.remove(dashboard.widgets, function(widget) {
            return widget.id === widgetToDelete.id;
          });
          return deferred.resolve(success);
        }, function(error) {
          $log.error("ImpacWidgetsSvc: error while trying to delete widget: " + widgetToDelete.id);
          return deferred.reject(error);
        });
      }, function(error) {
        $log.error("ImpacWidgetsSvc: error while trying to load the service");
        return deferred.reject(error);
      });
      return deferred.promise;
    };
    return _self;
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

(function() {
  var module;

  module = angular.module('impac.components.dashboard-settings.currency', []);

  module.directive('dashboardSettingCurrency', function($templateCache, $log, ImpacMainSvc, ImpacDashboardsSvc, ImpacWidgetsSvc, ImpacTheming) {
    return {
      restrict: 'A',
      scope: {
        currency: '='
      },
      link: function(scope, element, attrs) {
        scope.locked = ImpacTheming.get().dhbSettings.currency.locked;
        ImpacMainSvc.load().then(function(mainConfig) {
          return ImpacDashboardsSvc.load().then(function() {
            scope.currentDhb = ImpacDashboardsSvc.getCurrentDashboard();
            return scope.currencies = mainConfig.currencies;
          });
        });
        return scope.massAssignCurrency = function() {
          var data;
          data = {
            currency: scope.currency
          };
          ImpacDashboardsSvc.update(scope.currentDhb.id, data);
          return ImpacWidgetsSvc.massAssignAll(data);
        };
      },
      template: $templateCache.get('dashboard-settings/currency.tmpl.html')
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvZGFzaGJvYXJkLXNldHRpbmdzL2N1cnJlbmN5L2N1cnJlbmN5LmRpcmVjdGl2ZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBOztFQUFBLE1BQUEsR0FBUyxPQUFPLENBQUMsTUFBUixDQUFlLDhDQUFmLEVBQThELEVBQTlEOztFQUVULE1BQU0sQ0FBQyxTQUFQLENBQWlCLDBCQUFqQixFQUE2QyxTQUFDLGNBQUQsRUFBaUIsSUFBakIsRUFBdUIsWUFBdkIsRUFBcUMsa0JBQXJDLEVBQXlELGVBQXpELEVBQTBFLFlBQTFFO0FBQzNDLFdBQU87TUFDTCxRQUFBLEVBQVUsR0FETDtNQUVMLEtBQUEsRUFBTztRQUNMLFFBQUEsRUFBVSxHQURMO09BRkY7TUFLTCxJQUFBLEVBQU0sU0FBQyxLQUFELEVBQVEsT0FBUixFQUFpQixLQUFqQjtRQUNKLEtBQUssQ0FBQyxNQUFOLEdBQWUsWUFBWSxDQUFDLEdBQWIsQ0FBQSxDQUFrQixDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUM7UUFFdkQsWUFBWSxDQUFDLElBQWIsQ0FBQSxDQUFtQixDQUFDLElBQXBCLENBQ0UsU0FBQyxVQUFEO2lCQUNFLGtCQUFrQixDQUFDLElBQW5CLENBQUEsQ0FBeUIsQ0FBQyxJQUExQixDQUErQixTQUFBO1lBRTdCLEtBQUssQ0FBQyxVQUFOLEdBQW1CLGtCQUFrQixDQUFDLG1CQUFuQixDQUFBO21CQUNuQixLQUFLLENBQUMsVUFBTixHQUFtQixVQUFVLENBQUM7VUFIRCxDQUEvQjtRQURGLENBREY7ZUFRQSxLQUFLLENBQUMsa0JBQU4sR0FBMkIsU0FBQTtBQUN6QixjQUFBO1VBQUEsSUFBQSxHQUFPO1lBQUMsUUFBQSxFQUFVLEtBQUssQ0FBQyxRQUFqQjs7VUFDUCxrQkFBa0IsQ0FBQyxNQUFuQixDQUEwQixLQUFLLENBQUMsVUFBVSxDQUFDLEVBQTNDLEVBQStDLElBQS9DO2lCQUNBLGVBQWUsQ0FBQyxhQUFoQixDQUE4QixJQUE5QjtRQUh5QjtNQVh2QixDQUxEO01Bc0JMLFFBQUEsRUFBVSxjQUFjLENBQUMsR0FBZixDQUFtQix1Q0FBbkIsQ0F0Qkw7O0VBRG9DLENBQTdDO0FBRkEiLCJmaWxlIjoiY29tcG9uZW50cy9kYXNoYm9hcmQtc2V0dGluZ3MvY3VycmVuY3kvY3VycmVuY3kuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2ltcGFjLmNvbXBvbmVudHMuZGFzaGJvYXJkLXNldHRpbmdzLmN1cnJlbmN5JyxbXSlcblxubW9kdWxlLmRpcmVjdGl2ZSgnZGFzaGJvYXJkU2V0dGluZ0N1cnJlbmN5JywgKCR0ZW1wbGF0ZUNhY2hlLCAkbG9nLCBJbXBhY01haW5TdmMsIEltcGFjRGFzaGJvYXJkc1N2YywgSW1wYWNXaWRnZXRzU3ZjLCBJbXBhY1RoZW1pbmcpIC0+XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBzY29wZToge1xuICAgICAgY3VycmVuY3k6ICc9J1xuICAgIH0sXG4gICAgbGluazogKHNjb3BlLCBlbGVtZW50LCBhdHRycykgLT5cbiAgICAgIHNjb3BlLmxvY2tlZCA9IEltcGFjVGhlbWluZy5nZXQoKS5kaGJTZXR0aW5ncy5jdXJyZW5jeS5sb2NrZWRcblxuICAgICAgSW1wYWNNYWluU3ZjLmxvYWQoKS50aGVuKFxuICAgICAgICAobWFpbkNvbmZpZykgLT5cbiAgICAgICAgICBJbXBhY0Rhc2hib2FyZHNTdmMubG9hZCgpLnRoZW4gLT5cbiAgICAgICAgICAgICMgc2NvcGUgaW5pdGlhbGl6YXRpb25cbiAgICAgICAgICAgIHNjb3BlLmN1cnJlbnREaGIgPSBJbXBhY0Rhc2hib2FyZHNTdmMuZ2V0Q3VycmVudERhc2hib2FyZCgpXG4gICAgICAgICAgICBzY29wZS5jdXJyZW5jaWVzID0gbWFpbkNvbmZpZy5jdXJyZW5jaWVzXG4gICAgICApXG5cbiAgICAgIHNjb3BlLm1hc3NBc3NpZ25DdXJyZW5jeSA9IC0+XG4gICAgICAgIGRhdGEgPSB7Y3VycmVuY3k6IHNjb3BlLmN1cnJlbmN5fVxuICAgICAgICBJbXBhY0Rhc2hib2FyZHNTdmMudXBkYXRlKHNjb3BlLmN1cnJlbnREaGIuaWQsIGRhdGEpXG4gICAgICAgIEltcGFjV2lkZ2V0c1N2Yy5tYXNzQXNzaWduQWxsKGRhdGEpXG5cblxuICAgIHRlbXBsYXRlOiAkdGVtcGxhdGVDYWNoZS5nZXQoJ2Rhc2hib2FyZC1zZXR0aW5ncy9jdXJyZW5jeS50bXBsLmh0bWwnKSxcbiAgfVxuKVxuIl19

(function() {
  var module;

  module = angular.module('impac.components.dashboard-settings.sync-apps', []);

  module.directive('dashboardSettingSyncApps', function($templateCache, $log, $http, $filter, $modal, ImpacMainSvc, ImpacRoutes, ImpacWidgetsSvc, ImpacTheming, poller, $timeout) {
    return {
      restrict: 'A',
      scope: {},
      template: $templateCache.get('dashboard-settings/sync-apps.tmpl.html'),
      link: function(scope, element, attrs) {
        var getOffset, processAppInstancesSync, refreshDashboard;
        scope.isSyncing = false;
        scope.hasConnectors = false;
        processAppInstancesSync = function(responseData) {
          var c, i, len, ref;
          scope.isSyncing = responseData.is_syncing;
          scope.hasConnectors = responseData.connectors && responseData.connectors.length > 0;
          if (scope.hasConnectors) {
            scope.lastConnector = responseData.connectors[0];
            scope.otherConnectors = _.slice(responseData.connectors, 1);
            scope.failedConnectors = [];
            scope.disconnectedConnectors = [];
            ref = responseData.connectors;
            for (i = 0, len = ref.length; i < len; i++) {
              c = ref[i];
              if (c.status === "FAILED") {
                scope.failedConnectors.push(angular.copy(c));
              } else if (c.status === "DISCONNECTED") {
                scope.disconnectedConnectors.push(angular.copy(c));
              }
            }
          } else {
            scope.lastConnector = {
              status: 'SUCCESS',
              last_sync_date: new Date()
            };
          }
          if (!scope.isSyncing) {
            return refreshDashboard();
          }
        };
        refreshDashboard = function() {
          var modalInstance;
          scope.syncingPoller.stop();
          if (!scope.isDashboardRefreshAuthorized) {
            return;
          }
          ImpacWidgetsSvc.refreshAll();
          if (!(_.isEmpty(scope.failedConnectors) && _.isEmpty(scope.disconnectedConnectors))) {
            modalInstance = $modal.open({
              animation: true,
              size: 'md',
              templateUrl: 'alerts.tmpl.html',
              appendTo: angular.element('impac-dashboard'),
              controller: function($scope, connectors) {
                $scope.failedConnectors = connectors.failed;
                $scope.disconnectedConnectors = connectors.disconnected;
                return $scope.ok = function() {
                  return modalInstance.close();
                };
              },
              resolve: {
                connectors: function() {
                  return {
                    disconnected: scope.disconnectedConnectors,
                    failed: scope.failedConnectors
                  };
                }
              }
            });
          }
          return scope.isDashboardRefreshAuthorized = false;
        };
        getOffset = function() {
          var hours, minutes, offsetArray, timezone;
          timezone = new Date().getTimezoneOffset();
          offsetArray = ['+', '00', '00'];
          if (!(timezone < 0)) {
            offsetArray[0] = '-';
          }
          hours = "" + (Math.abs(Math.floor(timezone / 60)));
          if (hours.length < 2) {
            offsetArray[1] = "0" + hours;
          } else {
            offsetArray[1] = hours;
          }
          minutes = "" + (Math.abs(timezone % 60));
          if (minutes.length < 2) {
            offsetArray[2] = "0" + minutes;
          } else {
            offsetArray[2] = minutes;
          }
          return offsetArray.join('');
        };
        scope.synchronize = function() {
          if (scope.isSyncing) {
            return;
          }
          scope.isSyncing = true;
          scope.isDashboardRefreshAuthorized = true;
          return $http.post(ImpacRoutes.organizations.appInstancesSync(scope.orgUID)).then(function(success) {
            processAppInstancesSync(success.data);
            if (success.data.is_syncing) {
              return $timeout(function() {
                return scope.syncingPoller.start();
              }, 5000);
            }
          }, function(err) {
            $log.error('Unable to sync apps', err);
            return scope.isSyncing = false;
          });
        };
        scope.formatStatus = function(connector) {
          var date, name, status;
          if (!connector) {
            return;
          }
          name = connector.name;
          status = "";
          if (connector.last_sync_date) {
            date = $filter('date')(connector.last_sync_date, "yyyy-MM-dd 'at' h:mma", getOffset());
            switch (connector.status) {
              case 'SUCCESS':
                status = "Last sync: " + date;
                break;
              case 'FAILED':
                status = "Last sync failed: " + date;
                break;
              case 'DISCONNECTED':
                status = "Disconnected - previous sync was: " + date;
            }
          } else {
            switch (connector.status) {
              case 'FAILED':
                status = "Sync failed";
                break;
              case 'DISCONNECTED':
                status = "Sync failed - Disconnected";
                break;
              case 'NOT SYNCED':
                status = "Not synced yet";
            }
          }
          if (!(_.isEmpty(status) || _.isEmpty(name))) {
            status = status + " (" + name + ")";
          }
          return status;
        };
        ImpacMainSvc.load(true).then(function(config) {
          scope.orgUID = config.currentOrganization.uid;
          scope.syncingPoller = poller.get(ImpacRoutes.organizations.appInstancesSync(scope.orgUID), {
            delay: 5000,
            smart: true
          });
          return scope.syncingPoller.promise.then(null, null, function(response) {
            return processAppInstancesSync(response.data);
          });
        });
        return scope.$on("$destroy", function() {
          if (scope.syncingPoller) {
            return scope.syncingPoller.stop() && scope.syncingPoller.remove();
          }
        });
      }
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

(function() {
  var module;

  module = angular.module('impac.components.widgets.accounts-accounting-values', []);

  module.controller('WidgetAccountsAccountingValuesCtrl', function($scope, $q, ChartFormatterSvc, $filter) {
    var settingsPromises, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    $scope.timeRangeDeferred = $q.defer();
    $scope.histModeDeferred = $q.defer();
    $scope.chartDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise, $scope.timeRangeDeferred.promise, $scope.histModeDeferred.promise, $scope.chartDeferred.promise];
    w.initContext = function() {
      return $scope.isDataFound = (w.content != null) && (w.content.accounting != null);
    };
    $scope.getCurrentPrice = function() {
      if ($scope.isDataFound) {
        return _.last(w.content.accounting.values);
      }
    };
    $scope.getCurrency = function() {
      if ($scope.isDataFound) {
        return w.content.accounting.currency;
      }
    };
    $scope.getLegend = function() {
      if ($scope.isDataFound) {
        return w.content.accounting.legend;
      }
    };
    $scope.drawTrigger = $q.defer();
    w.format = function() {
      var all_values_are_positive, chartData, data, dates, inputData, options, period;
      if ($scope.isDataFound) {
        data = angular.copy(w.content.accounting);
        period = null;
        if ((w.metadata != null) && (w.metadata.hist_parameters != null)) {
          period = w.metadata.hist_parameters.period;
        }
        dates = _.map(data.dates, function(date) {
          return $filter('mnoDate')(date, period);
        });
        inputData = {
          title: data.type,
          labels: dates,
          values: data.values
        };
        all_values_are_positive = true;
        angular.forEach(data.values, function(value) {
          return all_values_are_positive && (all_values_are_positive = value >= 0);
        });
        options = {
          scaleBeginAtZero: all_values_are_positive,
          showXLabels: false,
          currency: data.currency
        };
        chartData = ChartFormatterSvc.lineChart([inputData], options);
        return $scope.drawTrigger.notify(chartData);
      }
    };
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetAccountsAccountingValues', function() {
    return {
      restrict: 'A',
      controller: 'WidgetAccountsAccountingValuesCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy9hY2NvdW50cy1hY2NvdW50aW5nLXZhbHVlcy9hY2NvdW50cy1hY2NvdW50aW5nLXZhbHVlcy5kaXJlY3RpdmUuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQTs7RUFBQSxNQUFBLEdBQVMsT0FBTyxDQUFDLE1BQVIsQ0FBZSxxREFBZixFQUFxRSxFQUFyRTs7RUFFVCxNQUFNLENBQUMsVUFBUCxDQUFrQixvQ0FBbEIsRUFBd0QsU0FBQyxNQUFELEVBQVMsRUFBVCxFQUFhLGlCQUFiLEVBQWdDLE9BQWhDO0FBRXRELFFBQUE7SUFBQSxDQUFBLEdBQUksTUFBTSxDQUFDO0lBSVgsTUFBTSxDQUFDLFdBQVAsR0FBcUIsRUFBRSxDQUFDLEtBQUgsQ0FBQTtJQUNyQixNQUFNLENBQUMsaUJBQVAsR0FBMkIsRUFBRSxDQUFDLEtBQUgsQ0FBQTtJQUMzQixNQUFNLENBQUMsZ0JBQVAsR0FBMEIsRUFBRSxDQUFDLEtBQUgsQ0FBQTtJQUMxQixNQUFNLENBQUMsYUFBUCxHQUF1QixFQUFFLENBQUMsS0FBSCxDQUFBO0lBRXZCLGdCQUFBLEdBQW1CLENBQ2pCLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FERixFQUVqQixNQUFNLENBQUMsaUJBQWlCLENBQUMsT0FGUixFQUdqQixNQUFNLENBQUMsZ0JBQWdCLENBQUMsT0FIUCxFQUlqQixNQUFNLENBQUMsYUFBYSxDQUFDLE9BSko7SUFVbkIsQ0FBQyxDQUFDLFdBQUYsR0FBZ0IsU0FBQTthQUNkLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLG1CQUFBLElBQWM7SUFEckI7SUFHaEIsTUFBTSxDQUFDLGVBQVAsR0FBeUIsU0FBQTtNQUN2QixJQUE2QyxNQUFNLENBQUMsV0FBcEQ7QUFBQSxlQUFPLENBQUMsQ0FBQyxJQUFGLENBQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsTUFBNUIsRUFBUDs7SUFEdUI7SUFHekIsTUFBTSxDQUFDLFdBQVAsR0FBcUIsU0FBQTtNQUNuQixJQUF3QyxNQUFNLENBQUMsV0FBL0M7QUFBQSxlQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLFNBQTVCOztJQURtQjtJQUdyQixNQUFNLENBQUMsU0FBUCxHQUFtQixTQUFBO01BQ2pCLElBQXNDLE1BQU0sQ0FBQyxXQUE3QztBQUFBLGVBQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBNUI7O0lBRGlCO0lBTW5CLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFDckIsQ0FBQyxDQUFDLE1BQUYsR0FBVyxTQUFBO0FBQ1QsVUFBQTtNQUFBLElBQUcsTUFBTSxDQUFDLFdBQVY7UUFDRSxJQUFBLEdBQU8sT0FBTyxDQUFDLElBQVIsQ0FBYSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQXZCO1FBRVAsTUFBQSxHQUFTO1FBQ1QsSUFBOEMsb0JBQUEsSUFBZSxvQ0FBN0Q7VUFBQSxNQUFBLEdBQVMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsT0FBcEM7O1FBQ0EsS0FBQSxHQUFRLENBQUMsQ0FBQyxHQUFGLENBQU0sSUFBSSxDQUFDLEtBQVgsRUFBa0IsU0FBQyxJQUFEO2lCQUN4QixPQUFBLENBQVEsU0FBUixDQUFBLENBQW1CLElBQW5CLEVBQXlCLE1BQXpCO1FBRHdCLENBQWxCO1FBR1IsU0FBQSxHQUFZO1VBQUMsS0FBQSxFQUFPLElBQUksQ0FBQyxJQUFiO1VBQW1CLE1BQUEsRUFBUSxLQUEzQjtVQUFrQyxNQUFBLEVBQVEsSUFBSSxDQUFDLE1BQS9DOztRQUNaLHVCQUFBLEdBQTBCO1FBQzFCLE9BQU8sQ0FBQyxPQUFSLENBQWdCLElBQUksQ0FBQyxNQUFyQixFQUE2QixTQUFDLEtBQUQ7aUJBQzNCLDRCQUFBLDBCQUE0QixLQUFBLElBQVM7UUFEVixDQUE3QjtRQUlBLE9BQUEsR0FBVTtVQUNSLGdCQUFBLEVBQWtCLHVCQURWO1VBRVIsV0FBQSxFQUFhLEtBRkw7VUFHUixRQUFBLEVBQVUsSUFBSSxDQUFDLFFBSFA7O1FBS1YsU0FBQSxHQUFZLGlCQUFpQixDQUFDLFNBQWxCLENBQTRCLENBQUMsU0FBRCxDQUE1QixFQUF3QyxPQUF4QztlQUdaLE1BQU0sQ0FBQyxXQUFXLENBQUMsTUFBbkIsQ0FBMEIsU0FBMUIsRUF0QkY7O0lBRFM7V0E0QlgsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUF0QixDQUE4QixnQkFBOUI7RUFqRXNELENBQXhEOztFQW9FQSxNQUFNLENBQUMsU0FBUCxDQUFpQixnQ0FBakIsRUFBbUQsU0FBQTtBQUNqRCxXQUFPO01BQ0wsUUFBQSxFQUFVLEdBREw7TUFFTCxVQUFBLEVBQVksb0NBRlA7O0VBRDBDLENBQW5EO0FBdEVBIiwiZmlsZSI6ImNvbXBvbmVudHMvd2lkZ2V0cy9hY2NvdW50cy1hY2NvdW50aW5nLXZhbHVlcy9hY2NvdW50cy1hY2NvdW50aW5nLXZhbHVlcy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnaW1wYWMuY29tcG9uZW50cy53aWRnZXRzLmFjY291bnRzLWFjY291bnRpbmctdmFsdWVzJyxbXSlcblxubW9kdWxlLmNvbnRyb2xsZXIoJ1dpZGdldEFjY291bnRzQWNjb3VudGluZ1ZhbHVlc0N0cmwnLCAoJHNjb3BlLCAkcSwgQ2hhcnRGb3JtYXR0ZXJTdmMsICRmaWx0ZXIpIC0+XG5cbiAgdyA9ICRzY29wZS53aWRnZXRcblxuICAjIERlZmluZSBzZXR0aW5nc1xuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICRzY29wZS5vcmdEZWZlcnJlZCA9ICRxLmRlZmVyKClcbiAgJHNjb3BlLnRpbWVSYW5nZURlZmVycmVkID0gJHEuZGVmZXIoKVxuICAkc2NvcGUuaGlzdE1vZGVEZWZlcnJlZCA9ICRxLmRlZmVyKClcbiAgJHNjb3BlLmNoYXJ0RGVmZXJyZWQgPSAkcS5kZWZlcigpXG5cbiAgc2V0dGluZ3NQcm9taXNlcyA9IFtcbiAgICAkc2NvcGUub3JnRGVmZXJyZWQucHJvbWlzZVxuICAgICRzY29wZS50aW1lUmFuZ2VEZWZlcnJlZC5wcm9taXNlXG4gICAgJHNjb3BlLmhpc3RNb2RlRGVmZXJyZWQucHJvbWlzZVxuICAgICRzY29wZS5jaGFydERlZmVycmVkLnByb21pc2VcbiAgXVxuXG5cbiAgIyBXaWRnZXQgc3BlY2lmaWMgbWV0aG9kc1xuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHcuaW5pdENvbnRleHQgPSAtPlxuICAgICRzY29wZS5pc0RhdGFGb3VuZCA9IHcuY29udGVudD8gJiYgdy5jb250ZW50LmFjY291bnRpbmc/XG5cbiAgJHNjb3BlLmdldEN1cnJlbnRQcmljZSA9IC0+XG4gICAgcmV0dXJuIF8ubGFzdCB3LmNvbnRlbnQuYWNjb3VudGluZy52YWx1ZXMgaWYgJHNjb3BlLmlzRGF0YUZvdW5kXG5cbiAgJHNjb3BlLmdldEN1cnJlbmN5ID0gLT5cbiAgICByZXR1cm4gdy5jb250ZW50LmFjY291bnRpbmcuY3VycmVuY3kgaWYgJHNjb3BlLmlzRGF0YUZvdW5kXG5cbiAgJHNjb3BlLmdldExlZ2VuZCA9IC0+XG4gICAgcmV0dXJuIHcuY29udGVudC5hY2NvdW50aW5nLmxlZ2VuZCBpZiAkc2NvcGUuaXNEYXRhRm91bmRcblxuXG4gICMgQ2hhcnQgZm9ybWF0aW5nIGZ1bmN0aW9uXG4gICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgJHNjb3BlLmRyYXdUcmlnZ2VyID0gJHEuZGVmZXIoKVxuICB3LmZvcm1hdCA9IC0+XG4gICAgaWYgJHNjb3BlLmlzRGF0YUZvdW5kXG4gICAgICBkYXRhID0gYW5ndWxhci5jb3B5KHcuY29udGVudC5hY2NvdW50aW5nKVxuXG4gICAgICBwZXJpb2QgPSBudWxsXG4gICAgICBwZXJpb2QgPSB3Lm1ldGFkYXRhLmhpc3RfcGFyYW1ldGVycy5wZXJpb2QgaWYgdy5tZXRhZGF0YT8gJiYgdy5tZXRhZGF0YS5oaXN0X3BhcmFtZXRlcnM/XG4gICAgICBkYXRlcyA9IF8ubWFwIGRhdGEuZGF0ZXMsIChkYXRlKSAtPlxuICAgICAgICAkZmlsdGVyKCdtbm9EYXRlJykoZGF0ZSwgcGVyaW9kKVxuXG4gICAgICBpbnB1dERhdGEgPSB7dGl0bGU6IGRhdGEudHlwZSwgbGFiZWxzOiBkYXRlcywgdmFsdWVzOiBkYXRhLnZhbHVlc31cbiAgICAgIGFsbF92YWx1ZXNfYXJlX3Bvc2l0aXZlID0gdHJ1ZVxuICAgICAgYW5ndWxhci5mb3JFYWNoKGRhdGEudmFsdWVzLCAodmFsdWUpIC0+XG4gICAgICAgIGFsbF92YWx1ZXNfYXJlX3Bvc2l0aXZlICYmPSB2YWx1ZSA+PSAwXG4gICAgICApXG5cbiAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgIHNjYWxlQmVnaW5BdFplcm86IGFsbF92YWx1ZXNfYXJlX3Bvc2l0aXZlLFxuICAgICAgICBzaG93WExhYmVsczogZmFsc2UsXG4gICAgICAgIGN1cnJlbmN5OiBkYXRhLmN1cnJlbmN5XG4gICAgICB9XG4gICAgICBjaGFydERhdGEgPSBDaGFydEZvcm1hdHRlclN2Yy5saW5lQ2hhcnQoW2lucHV0RGF0YV0sb3B0aW9ucylcbiAgICAgIFxuICAgICAgIyBjYWxscyBjaGFydC5kcmF3KClcbiAgICAgICRzY29wZS5kcmF3VHJpZ2dlci5ub3RpZnkoY2hhcnREYXRhKVxuXG5cbiAgIyBXaWRnZXQgaXMgcmVhZHk6IGNhbiB0cmlnZ2VyIHRoZSBcIndhaXQgZm9yIHNldHRpZ25zIHRvIGJlIHJlYWR5XCJcbiAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAkc2NvcGUud2lkZ2V0RGVmZXJyZWQucmVzb2x2ZShzZXR0aW5nc1Byb21pc2VzKVxuKVxuXG5tb2R1bGUuZGlyZWN0aXZlKCd3aWRnZXRBY2NvdW50c0FjY291bnRpbmdWYWx1ZXMnLCAtPlxuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgY29udHJvbGxlcjogJ1dpZGdldEFjY291bnRzQWNjb3VudGluZ1ZhbHVlc0N0cmwnLFxuICB9XG4pIl19

(function() {
  var module;

  module = angular.module('impac.components.widgets.accounts-assets-liability-summary', []);

  module.controller('WidgetAccountsAssetsLiabilitySummaryCtrl', function($scope, $q, ChartFormatterSvc) {
    var settingsPromises, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    $scope.chartDeferred = $q.defer();
    $scope.paramSelectorDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise, $scope.chartDeferred.promise, $scope.paramSelectorDeferred.promise];
    w.initContext = function() {
      $scope.isDataFound = angular.isDefined(w.content) && !_.isEmpty(w.content.summary);
      switch ((w.metadata.classification || 'asset').toLowerCase()) {
        case 'liability':
          $scope.classification = "Liabilities";
          break;
        default:
          $scope.classification = "Assets";
      }
      $scope.accountsOptions = [
        {
          label: 'Assets Accounts',
          value: 'ASSET'
        }, {
          label: 'Liability Accounts',
          value: 'LIABILITY'
        }
      ];
      if (!$scope.selectedAccountsOption) {
        $scope.selectedAccountsOption = angular.copy(_.find($scope.accountsOptions, {
          value: w.metadata.classification || 'ASSET'
        }));
      }
      if ($scope.isDataFound) {
        if (w.metadata.organization_ids.length > 1) {
          return $scope.dataSource = w.content.repartition;
        } else {
          return $scope.dataSource = w.content.summary;
        }
      }
    };
    $scope.getCurrency = function() {
      if ($scope.isDataFound) {
        return w.content.currency;
      }
    };
    $scope.getAccountColor = function(elem) {
      if ($scope.isDataFound) {
        return ChartFormatterSvc.getColor(_.indexOf($scope.dataSource, elem));
      }
    };
    $scope.drawTrigger = $q.defer();
    w.format = function() {
      var chartData, pieData, pieOptions;
      if ($scope.isDataFound) {
        pieData = _.map($scope.dataSource, function(company) {
          return {
            label: company.label,
            value: company.total
          };
        });
        pieOptions = {
          percentageInnerCutout: 50,
          tooltipFontSize: 12
        };
        chartData = ChartFormatterSvc.pieChart(pieData, pieOptions);
        return $scope.drawTrigger.notify(chartData);
      }
    };
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetAccountsAssetsLiabilitySummary', function() {
    return {
      restrict: 'A',
      controller: 'WidgetAccountsAssetsLiabilitySummaryCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy9hY2NvdW50cy1hc3NldHMtbGlhYmlsaXR5LXN1bW1hcnkvYWNjb3VudHMtYXNzZXRzLWxpYWJpbGl0eS1zdW1tYXJ5LmRpcmVjdGl2ZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBOztFQUFBLE1BQUEsR0FBUyxPQUFPLENBQUMsTUFBUixDQUFlLDREQUFmLEVBQTZFLEVBQTdFOztFQUNULE1BQU0sQ0FBQyxVQUFQLENBQWtCLDBDQUFsQixFQUE4RCxTQUFDLE1BQUQsRUFBUyxFQUFULEVBQWEsaUJBQWI7QUFFNUQsUUFBQTtJQUFBLENBQUEsR0FBSSxNQUFNLENBQUM7SUFHWCxNQUFNLENBQUMsV0FBUCxHQUFxQixFQUFFLENBQUMsS0FBSCxDQUFBO0lBQ3JCLE1BQU0sQ0FBQyxhQUFQLEdBQXVCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFDdkIsTUFBTSxDQUFDLHFCQUFQLEdBQStCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFFL0IsZ0JBQUEsR0FBbUIsQ0FDakIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQURGLEVBRWpCLE1BQU0sQ0FBQyxhQUFhLENBQUMsT0FGSixFQUdqQixNQUFNLENBQUMscUJBQXFCLENBQUMsT0FIWjtJQVFuQixDQUFDLENBQUMsV0FBRixHQUFnQixTQUFBO01BQ2QsTUFBTSxDQUFDLFdBQVAsR0FBcUIsT0FBTyxDQUFDLFNBQVIsQ0FBa0IsQ0FBQyxDQUFDLE9BQXBCLENBQUEsSUFBZ0MsQ0FBQyxDQUFDLENBQUMsT0FBRixDQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBcEI7QUFFdEQsY0FBTyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsY0FBWCxJQUE2QixPQUE5QixDQUFzQyxDQUFDLFdBQXZDLENBQUEsQ0FBUDtBQUFBLGFBQ08sV0FEUDtVQUVJLE1BQU0sQ0FBQyxjQUFQLEdBQXdCO0FBRHJCO0FBRFA7VUFJSSxNQUFNLENBQUMsY0FBUCxHQUF3QjtBQUo1QjtNQU1BLE1BQU0sQ0FBQyxlQUFQLEdBQXlCO1FBQ3ZCO1VBQUUsS0FBQSxFQUFPLGlCQUFUO1VBQTRCLEtBQUEsRUFBTyxPQUFuQztTQUR1QixFQUV2QjtVQUFFLEtBQUEsRUFBTyxvQkFBVDtVQUErQixLQUFBLEVBQU8sV0FBdEM7U0FGdUI7O01BS3pCLElBQUcsQ0FBQyxNQUFNLENBQUMsc0JBQVg7UUFDRSxNQUFNLENBQUMsc0JBQVAsR0FBZ0MsT0FBTyxDQUFDLElBQVIsQ0FBYSxDQUFDLENBQUMsSUFBRixDQUFPLE1BQU0sQ0FBQyxlQUFkLEVBQStCO1VBQzFFLEtBQUEsRUFBTyxDQUFDLENBQUMsUUFBUSxDQUFDLGNBQVgsSUFBNkIsT0FEc0M7U0FBL0IsQ0FBYixFQURsQzs7TUFLQSxJQUFHLE1BQU0sQ0FBQyxXQUFWO1FBQ0UsSUFBRyxDQUFDLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLE1BQTVCLEdBQXFDLENBQXhDO2lCQUNFLE1BQU0sQ0FBQyxVQUFQLEdBQW9CLENBQUMsQ0FBQyxPQUFPLENBQUMsWUFEaEM7U0FBQSxNQUFBO2lCQUdFLE1BQU0sQ0FBQyxVQUFQLEdBQW9CLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFIaEM7U0FERjs7SUFuQmM7SUF5QmhCLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLFNBQUE7TUFDbkIsSUFBc0IsTUFBTSxDQUFDLFdBQTdCO2VBQUEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFWOztJQURtQjtJQUdyQixNQUFNLENBQUMsZUFBUCxHQUF5QixTQUFDLElBQUQ7TUFDdkIsSUFBa0UsTUFBTSxDQUFDLFdBQXpFO2VBQUEsaUJBQWlCLENBQUMsUUFBbEIsQ0FBMkIsQ0FBQyxDQUFDLE9BQUYsQ0FBVSxNQUFNLENBQUMsVUFBakIsRUFBNkIsSUFBN0IsQ0FBM0IsRUFBQTs7SUFEdUI7SUFLekIsTUFBTSxDQUFDLFdBQVAsR0FBcUIsRUFBRSxDQUFDLEtBQUgsQ0FBQTtJQUNyQixDQUFDLENBQUMsTUFBRixHQUFXLFNBQUE7QUFDVCxVQUFBO01BQUEsSUFBRyxNQUFNLENBQUMsV0FBVjtRQUNFLE9BQUEsR0FBVSxDQUFDLENBQUMsR0FBRixDQUFNLE1BQU0sQ0FBQyxVQUFiLEVBQXlCLFNBQUMsT0FBRDtpQkFDakM7WUFDRSxLQUFBLEVBQU8sT0FBTyxDQUFDLEtBRGpCO1lBRUUsS0FBQSxFQUFPLE9BQU8sQ0FBQyxLQUZqQjs7UUFEaUMsQ0FBekI7UUFLVixVQUFBLEdBQWE7VUFDWCxxQkFBQSxFQUF1QixFQURaO1VBRVgsZUFBQSxFQUFpQixFQUZOOztRQUliLFNBQUEsR0FBWSxpQkFBaUIsQ0FBQyxRQUFsQixDQUEyQixPQUEzQixFQUFvQyxVQUFwQztlQUdaLE1BQU0sQ0FBQyxXQUFXLENBQUMsTUFBbkIsQ0FBMEIsU0FBMUIsRUFiRjs7SUFEUztXQW1CWCxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQXRCLENBQThCLGdCQUE5QjtFQXRFNEQsQ0FBOUQ7O0VBeUVBLE1BQU0sQ0FBQyxTQUFQLENBQWlCLHNDQUFqQixFQUF5RCxTQUFBO0FBQ3ZELFdBQU87TUFDTCxRQUFBLEVBQVUsR0FETDtNQUVMLFVBQUEsRUFBWSwwQ0FGUDs7RUFEZ0QsQ0FBekQ7QUExRUEiLCJmaWxlIjoiY29tcG9uZW50cy93aWRnZXRzL2FjY291bnRzLWFzc2V0cy1saWFiaWxpdHktc3VtbWFyeS9hY2NvdW50cy1hc3NldHMtbGlhYmlsaXR5LXN1bW1hcnkuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2ltcGFjLmNvbXBvbmVudHMud2lkZ2V0cy5hY2NvdW50cy1hc3NldHMtbGlhYmlsaXR5LXN1bW1hcnknLCBbXSlcbm1vZHVsZS5jb250cm9sbGVyKCdXaWRnZXRBY2NvdW50c0Fzc2V0c0xpYWJpbGl0eVN1bW1hcnlDdHJsJywgKCRzY29wZSwgJHEsIENoYXJ0Rm9ybWF0dGVyU3ZjKSAtPlxuXG4gIHcgPSAkc2NvcGUud2lkZ2V0XG4gICMgRGVmaW5lIHNldHRpbmdzXG4gICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgJHNjb3BlLm9yZ0RlZmVycmVkID0gJHEuZGVmZXIoKVxuICAkc2NvcGUuY2hhcnREZWZlcnJlZCA9ICRxLmRlZmVyKClcbiAgJHNjb3BlLnBhcmFtU2VsZWN0b3JEZWZlcnJlZCA9ICRxLmRlZmVyKClcblxuICBzZXR0aW5nc1Byb21pc2VzID0gW1xuICAgICRzY29wZS5vcmdEZWZlcnJlZC5wcm9taXNlXG4gICAgJHNjb3BlLmNoYXJ0RGVmZXJyZWQucHJvbWlzZVxuICAgICRzY29wZS5wYXJhbVNlbGVjdG9yRGVmZXJyZWQucHJvbWlzZVxuICBdXG5cbiAgIyBXaWRnZXQgc3BlY2lmaWMgbWV0aG9kc1xuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHcuaW5pdENvbnRleHQgPSAtPlxuICAgICRzY29wZS5pc0RhdGFGb3VuZCA9IGFuZ3VsYXIuaXNEZWZpbmVkKHcuY29udGVudCkgJiYgIV8uaXNFbXB0eSh3LmNvbnRlbnQuc3VtbWFyeSlcbiAgICAjVE9ETzogTm8gLnBsdXJhbGl6ZSgpIGluIGFuZ3VsYXI/XG4gICAgc3dpdGNoICh3Lm1ldGFkYXRhLmNsYXNzaWZpY2F0aW9uIHx8ICdhc3NldCcpLnRvTG93ZXJDYXNlKClcbiAgICAgIHdoZW4gJ2xpYWJpbGl0eSdcbiAgICAgICAgJHNjb3BlLmNsYXNzaWZpY2F0aW9uID0gXCJMaWFiaWxpdGllc1wiXG4gICAgICBlbHNlXG4gICAgICAgICRzY29wZS5jbGFzc2lmaWNhdGlvbiA9IFwiQXNzZXRzXCJcblxuICAgICRzY29wZS5hY2NvdW50c09wdGlvbnMgPSBbXG4gICAgICB7IGxhYmVsOiAnQXNzZXRzIEFjY291bnRzJywgdmFsdWU6ICdBU1NFVCcgfSxcbiAgICAgIHsgbGFiZWw6ICdMaWFiaWxpdHkgQWNjb3VudHMnLCB2YWx1ZTogJ0xJQUJJTElUWScgfVxuICAgIF1cblxuICAgIGlmICEkc2NvcGUuc2VsZWN0ZWRBY2NvdW50c09wdGlvblxuICAgICAgJHNjb3BlLnNlbGVjdGVkQWNjb3VudHNPcHRpb24gPSBhbmd1bGFyLmNvcHkoXy5maW5kKCRzY29wZS5hY2NvdW50c09wdGlvbnMsIHtcbiAgICAgICAgdmFsdWU6IHcubWV0YWRhdGEuY2xhc3NpZmljYXRpb24gfHwgJ0FTU0VUJ1xuICAgICAgfSkpXG5cbiAgICBpZiAkc2NvcGUuaXNEYXRhRm91bmRcbiAgICAgIGlmIHcubWV0YWRhdGEub3JnYW5pemF0aW9uX2lkcy5sZW5ndGggPiAxXG4gICAgICAgICRzY29wZS5kYXRhU291cmNlID0gdy5jb250ZW50LnJlcGFydGl0aW9uXG4gICAgICBlbHNlXG4gICAgICAgICRzY29wZS5kYXRhU291cmNlID0gdy5jb250ZW50LnN1bW1hcnlcblxuICAkc2NvcGUuZ2V0Q3VycmVuY3kgPSAtPlxuICAgIHcuY29udGVudC5jdXJyZW5jeSBpZiAkc2NvcGUuaXNEYXRhRm91bmRcblxuICAkc2NvcGUuZ2V0QWNjb3VudENvbG9yID0gKGVsZW0pIC0+XG4gICAgQ2hhcnRGb3JtYXR0ZXJTdmMuZ2V0Q29sb3IoXy5pbmRleE9mKCRzY29wZS5kYXRhU291cmNlLCBlbGVtKSkgaWYgJHNjb3BlLmlzRGF0YUZvdW5kXG5cbiAgIyBDaGFydCBmb3JtYXRpbmcgZnVuY3Rpb25cbiAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAkc2NvcGUuZHJhd1RyaWdnZXIgPSAkcS5kZWZlcigpXG4gIHcuZm9ybWF0ID0gLT5cbiAgICBpZiAkc2NvcGUuaXNEYXRhRm91bmRcbiAgICAgIHBpZURhdGEgPSBfLm1hcCAkc2NvcGUuZGF0YVNvdXJjZSwgKGNvbXBhbnkpIC0+XG4gICAgICAgIHtcbiAgICAgICAgICBsYWJlbDogY29tcGFueS5sYWJlbCxcbiAgICAgICAgICB2YWx1ZTogY29tcGFueS50b3RhbCxcbiAgICAgICAgfVxuICAgICAgcGllT3B0aW9ucyA9IHtcbiAgICAgICAgcGVyY2VudGFnZUlubmVyQ3V0b3V0OiA1MCxcbiAgICAgICAgdG9vbHRpcEZvbnRTaXplOiAxMixcbiAgICAgIH1cbiAgICAgIGNoYXJ0RGF0YSA9IENoYXJ0Rm9ybWF0dGVyU3ZjLnBpZUNoYXJ0KHBpZURhdGEsIHBpZU9wdGlvbnMpXG5cbiAgICAgICMgY2FsbHMgY2hhcnQuZHJhdygpXG4gICAgICAkc2NvcGUuZHJhd1RyaWdnZXIubm90aWZ5KGNoYXJ0RGF0YSlcblxuXG4gICMgV2lkZ2V0IGlzIHJlYWR5OiBjYW4gdHJpZ2dlciB0aGUgXCJ3YWl0IGZvciBzZXR0aWducyB0byBiZSByZWFkeVwiXG4gICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgJHNjb3BlLndpZGdldERlZmVycmVkLnJlc29sdmUoc2V0dGluZ3NQcm9taXNlcylcbilcblxubW9kdWxlLmRpcmVjdGl2ZSgnd2lkZ2V0QWNjb3VudHNBc3NldHNMaWFiaWxpdHlTdW1tYXJ5JywgLT5cbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIGNvbnRyb2xsZXI6ICdXaWRnZXRBY2NvdW50c0Fzc2V0c0xpYWJpbGl0eVN1bW1hcnlDdHJsJ1xuICB9XG4pXG4iXX0=

(function() {
  var module;

  module = angular.module('impac.components.widgets.accounts-assets-summary', []);

  module.controller('WidgetAccountsAssetsSummaryCtrl', function($scope, $q, ChartFormatterSvc) {
    var settingsPromises, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    $scope.chartDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise, $scope.chartDeferred.promise];
    w.initContext = function() {
      $scope.isDataFound = angular.isDefined(w.content) && !_.isEmpty(w.content.summary);
      if ($scope.isDataFound) {
        if (w.metadata.organization_ids.length > 1) {
          $scope.dataSource = w.content.repartition;
        } else {
          $scope.dataSource = w.content.summary;
        }
      }
      switch ((w.metadata.classification || 'assets').toLowerCase()) {
        case 'liability':
          return $scope.classification = "Liabilities";
        default:
          return $scope.classification = "Assets";
      }
    };
    $scope.getCurrency = function() {
      if ($scope.isDataFound) {
        return w.content.currency;
      }
    };
    $scope.getAccountColor = function(elem) {
      if ($scope.isDataFound) {
        return ChartFormatterSvc.getColor(_.indexOf($scope.dataSource, elem));
      }
    };
    $scope.drawTrigger = $q.defer();
    w.format = function() {
      var chartData, pieData, pieOptions;
      if ($scope.isDataFound) {
        pieData = _.map($scope.dataSource, function(company) {
          return {
            label: company.label,
            value: company.total
          };
        });
        pieOptions = {
          percentageInnerCutout: 50,
          tooltipFontSize: 12
        };
        chartData = ChartFormatterSvc.pieChart(pieData, pieOptions);
        return $scope.drawTrigger.notify(chartData);
      }
    };
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetAccountsAssetsSummary', function() {
    return {
      restrict: 'A',
      controller: 'WidgetAccountsAssetsSummaryCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy9hY2NvdW50cy1hc3NldHMtc3VtbWFyeS9hY2NvdW50cy1hc3NldHMtc3VtbWFyeS5kaXJlY3RpdmUuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQTs7RUFBQSxNQUFBLEdBQVMsT0FBTyxDQUFDLE1BQVIsQ0FBZSxrREFBZixFQUFtRSxFQUFuRTs7RUFDVCxNQUFNLENBQUMsVUFBUCxDQUFrQixpQ0FBbEIsRUFBcUQsU0FBQyxNQUFELEVBQVMsRUFBVCxFQUFhLGlCQUFiO0FBRW5ELFFBQUE7SUFBQSxDQUFBLEdBQUksTUFBTSxDQUFDO0lBSVgsTUFBTSxDQUFDLFdBQVAsR0FBcUIsRUFBRSxDQUFDLEtBQUgsQ0FBQTtJQUNyQixNQUFNLENBQUMsYUFBUCxHQUF1QixFQUFFLENBQUMsS0FBSCxDQUFBO0lBRXZCLGdCQUFBLEdBQW1CLENBQ2pCLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FERixFQUVqQixNQUFNLENBQUMsYUFBYSxDQUFDLE9BRko7SUFRbkIsQ0FBQyxDQUFDLFdBQUYsR0FBZ0IsU0FBQTtNQUNkLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLE9BQU8sQ0FBQyxTQUFSLENBQWtCLENBQUMsQ0FBQyxPQUFwQixDQUFBLElBQWdDLENBQUMsQ0FBQyxDQUFDLE9BQUYsQ0FBVSxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQXBCO01BRXRELElBQUcsTUFBTSxDQUFDLFdBQVY7UUFDRSxJQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsTUFBNUIsR0FBcUMsQ0FBeEM7VUFDRSxNQUFNLENBQUMsVUFBUCxHQUFvQixDQUFDLENBQUMsT0FBTyxDQUFDLFlBRGhDO1NBQUEsTUFBQTtVQUdFLE1BQU0sQ0FBQyxVQUFQLEdBQW9CLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFIaEM7U0FERjs7QUFPQSxjQUFPLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxjQUFYLElBQTZCLFFBQTlCLENBQXVDLENBQUMsV0FBeEMsQ0FBQSxDQUFQO0FBQUEsYUFDTyxXQURQO2lCQUVJLE1BQU0sQ0FBQyxjQUFQLEdBQXdCO0FBRjVCO2lCQUlJLE1BQU0sQ0FBQyxjQUFQLEdBQXdCO0FBSjVCO0lBVmM7SUFnQmhCLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLFNBQUE7TUFDbkIsSUFBc0IsTUFBTSxDQUFDLFdBQTdCO2VBQUEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFWOztJQURtQjtJQUdyQixNQUFNLENBQUMsZUFBUCxHQUF5QixTQUFDLElBQUQ7TUFDdkIsSUFBa0UsTUFBTSxDQUFDLFdBQXpFO2VBQUEsaUJBQWlCLENBQUMsUUFBbEIsQ0FBMkIsQ0FBQyxDQUFDLE9BQUYsQ0FBVSxNQUFNLENBQUMsVUFBakIsRUFBNkIsSUFBN0IsQ0FBM0IsRUFBQTs7SUFEdUI7SUFNekIsTUFBTSxDQUFDLFdBQVAsR0FBcUIsRUFBRSxDQUFDLEtBQUgsQ0FBQTtJQUNyQixDQUFDLENBQUMsTUFBRixHQUFXLFNBQUE7QUFDVCxVQUFBO01BQUEsSUFBRyxNQUFNLENBQUMsV0FBVjtRQUNFLE9BQUEsR0FBVSxDQUFDLENBQUMsR0FBRixDQUFNLE1BQU0sQ0FBQyxVQUFiLEVBQXlCLFNBQUMsT0FBRDtpQkFDakM7WUFDRSxLQUFBLEVBQU8sT0FBTyxDQUFDLEtBRGpCO1lBRUUsS0FBQSxFQUFPLE9BQU8sQ0FBQyxLQUZqQjs7UUFEaUMsQ0FBekI7UUFNVixVQUFBLEdBQWE7VUFDWCxxQkFBQSxFQUF1QixFQURaO1VBRVgsZUFBQSxFQUFpQixFQUZOOztRQUliLFNBQUEsR0FBWSxpQkFBaUIsQ0FBQyxRQUFsQixDQUEyQixPQUEzQixFQUFvQyxVQUFwQztlQUdaLE1BQU0sQ0FBQyxXQUFXLENBQUMsTUFBbkIsQ0FBMEIsU0FBMUIsRUFkRjs7SUFEUztXQW9CWCxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQXRCLENBQThCLGdCQUE5QjtFQS9EbUQsQ0FBckQ7O0VBa0VBLE1BQU0sQ0FBQyxTQUFQLENBQWlCLDZCQUFqQixFQUFnRCxTQUFBO0FBQzlDLFdBQU87TUFDTCxRQUFBLEVBQVUsR0FETDtNQUVMLFVBQUEsRUFBWSxpQ0FGUDs7RUFEdUMsQ0FBaEQ7QUFuRUEiLCJmaWxlIjoiY29tcG9uZW50cy93aWRnZXRzL2FjY291bnRzLWFzc2V0cy1zdW1tYXJ5L2FjY291bnRzLWFzc2V0cy1zdW1tYXJ5LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdpbXBhYy5jb21wb25lbnRzLndpZGdldHMuYWNjb3VudHMtYXNzZXRzLXN1bW1hcnknLCBbXSlcbm1vZHVsZS5jb250cm9sbGVyKCdXaWRnZXRBY2NvdW50c0Fzc2V0c1N1bW1hcnlDdHJsJywgKCRzY29wZSwgJHEsIENoYXJ0Rm9ybWF0dGVyU3ZjKSAtPlxuXG4gIHcgPSAkc2NvcGUud2lkZ2V0XG5cbiAgIyBEZWZpbmUgc2V0dGluZ3NcbiAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAkc2NvcGUub3JnRGVmZXJyZWQgPSAkcS5kZWZlcigpXG4gICRzY29wZS5jaGFydERlZmVycmVkID0gJHEuZGVmZXIoKVxuXG4gIHNldHRpbmdzUHJvbWlzZXMgPSBbXG4gICAgJHNjb3BlLm9yZ0RlZmVycmVkLnByb21pc2VcbiAgICAkc2NvcGUuY2hhcnREZWZlcnJlZC5wcm9taXNlXG4gIF1cblxuXG4gICMgV2lkZ2V0IHNwZWNpZmljIG1ldGhvZHNcbiAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICB3LmluaXRDb250ZXh0ID0gLT5cbiAgICAkc2NvcGUuaXNEYXRhRm91bmQgPSBhbmd1bGFyLmlzRGVmaW5lZCh3LmNvbnRlbnQpICYmICFfLmlzRW1wdHkody5jb250ZW50LnN1bW1hcnkpXG4gICAgXG4gICAgaWYgJHNjb3BlLmlzRGF0YUZvdW5kXG4gICAgICBpZiB3Lm1ldGFkYXRhLm9yZ2FuaXphdGlvbl9pZHMubGVuZ3RoID4gMVxuICAgICAgICAkc2NvcGUuZGF0YVNvdXJjZSA9IHcuY29udGVudC5yZXBhcnRpdGlvblxuICAgICAgZWxzZVxuICAgICAgICAkc2NvcGUuZGF0YVNvdXJjZSA9IHcuY29udGVudC5zdW1tYXJ5XG5cbiAgICAjVE9ETzogTm8gLnBsdXJhbGl6ZSgpIGluIGFuZ3VsYXI/XG4gICAgc3dpdGNoICh3Lm1ldGFkYXRhLmNsYXNzaWZpY2F0aW9uIHx8ICdhc3NldHMnKS50b0xvd2VyQ2FzZSgpXG4gICAgICB3aGVuICdsaWFiaWxpdHknXG4gICAgICAgICRzY29wZS5jbGFzc2lmaWNhdGlvbiA9IFwiTGlhYmlsaXRpZXNcIlxuICAgICAgZWxzZVxuICAgICAgICAkc2NvcGUuY2xhc3NpZmljYXRpb24gPSBcIkFzc2V0c1wiXG5cbiAgJHNjb3BlLmdldEN1cnJlbmN5ID0gLT5cbiAgICB3LmNvbnRlbnQuY3VycmVuY3kgaWYgJHNjb3BlLmlzRGF0YUZvdW5kXG5cbiAgJHNjb3BlLmdldEFjY291bnRDb2xvciA9IChlbGVtKSAtPlxuICAgIENoYXJ0Rm9ybWF0dGVyU3ZjLmdldENvbG9yKF8uaW5kZXhPZigkc2NvcGUuZGF0YVNvdXJjZSwgZWxlbSkpIGlmICRzY29wZS5pc0RhdGFGb3VuZFxuXG5cbiAgIyBDaGFydCBmb3JtYXRpbmcgZnVuY3Rpb25cbiAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAkc2NvcGUuZHJhd1RyaWdnZXIgPSAkcS5kZWZlcigpXG4gIHcuZm9ybWF0ID0gLT5cbiAgICBpZiAkc2NvcGUuaXNEYXRhRm91bmRcbiAgICAgIHBpZURhdGEgPSBfLm1hcCAkc2NvcGUuZGF0YVNvdXJjZSwgKGNvbXBhbnkpIC0+XG4gICAgICAgIHtcbiAgICAgICAgICBsYWJlbDogY29tcGFueS5sYWJlbCxcbiAgICAgICAgICB2YWx1ZTogY29tcGFueS50b3RhbCxcbiAgICAgICAgfVxuXG4gICAgICBwaWVPcHRpb25zID0ge1xuICAgICAgICBwZXJjZW50YWdlSW5uZXJDdXRvdXQ6IDUwLFxuICAgICAgICB0b29sdGlwRm9udFNpemU6IDEyLFxuICAgICAgfVxuICAgICAgY2hhcnREYXRhID0gQ2hhcnRGb3JtYXR0ZXJTdmMucGllQ2hhcnQocGllRGF0YSwgcGllT3B0aW9ucylcblxuICAgICAgIyBjYWxscyBjaGFydC5kcmF3KClcbiAgICAgICRzY29wZS5kcmF3VHJpZ2dlci5ub3RpZnkoY2hhcnREYXRhKVxuXG5cbiAgIyBXaWRnZXQgaXMgcmVhZHk6IGNhbiB0cmlnZ2VyIHRoZSBcIndhaXQgZm9yIHNldHRpZ25zIHRvIGJlIHJlYWR5XCJcbiAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAkc2NvcGUud2lkZ2V0RGVmZXJyZWQucmVzb2x2ZShzZXR0aW5nc1Byb21pc2VzKVxuKVxuXG5tb2R1bGUuZGlyZWN0aXZlKCd3aWRnZXRBY2NvdW50c0Fzc2V0c1N1bW1hcnknLCAtPlxuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgY29udHJvbGxlcjogJ1dpZGdldEFjY291bnRzQXNzZXRzU3VtbWFyeUN0cmwnXG4gIH1cbilcbiJdfQ==

(function() {
  var module;

  module = angular.module('impac.components.widgets.accounts-assets-vs-liabilities', []);

  module.controller('WidgetAccountsAssetsVsLiabilitiesCtrl', function($scope, $q, ChartFormatterSvc, $filter) {
    var settingsPromises, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    $scope.chartDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise, $scope.chartDeferred.promise];
    w.initContext = function() {
      var index;
      $scope.isDataFound = (w.content != null) && !_.isEmpty(w.content.summary) && !_.isEmpty(w.content.companies);
      if ($scope.isDataFound) {
        index = 0;
        return $scope.companiesList = _.map(w.content.companies, function(company) {
          var assetSum, liabilitiesSum, result;
          assetSum = _.find(w.content.summary, (function(sum) {
            return sum.classification === "ASSET";
          }));
          liabilitiesSum = _.find(w.content.summary, (function(sum) {
            return sum.classification === "LIABILITY";
          }));
          result = {
            company: company,
            assets: assetSum != null ? assetSum.totals[index] : 0.0,
            liabilities: liabilitiesSum != null ? liabilitiesSum.totals[index] : 0.0,
            currency: w.content.currency
          };
          index++;
          return result;
        });
      }
    };
    $scope.assetsColor = ChartFormatterSvc.getColor(0);
    $scope.liabilitiesColor = ChartFormatterSvc.getColor(1);
    $scope.drawTrigger = $q.defer();
    w.format = function() {
      var chartData, datasets, inputData, options;
      if ($scope.isDataFound) {
        datasets = _.map(w.content.summary, function(sum) {
          if (_.includes(['ASSET', 'LIABILITY'], sum.classification)) {
            return {
              title: sum.classification,
              values: sum.totals
            };
          }
        });
        datasets = _.sortByOrder(datasets, ['title']);
        inputData = {
          labels: w.content.companies,
          datasets: _.compact(datasets)
        };
        options = {
          showTooltips: false,
          showXLabels: false,
          barValueSpacing: Math.max(8 - w.content.companies.length, 1)
        };
        chartData = ChartFormatterSvc.combinedBarChart(inputData, options);
        return $scope.drawTrigger.notify(chartData);
      }
    };
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetAccountsAssetsVsLiabilities', function() {
    return {
      restrict: 'A',
      controller: 'WidgetAccountsAssetsVsLiabilitiesCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy9hY2NvdW50cy1hc3NldHMtdnMtbGlhYmlsaXRpZXMvYWNjb3VudHMtYXNzZXRzLXZzLWxpYWJpbGl0aWVzLmRpcmVjdGl2ZS5qcy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBOztFQUFBLE1BQUEsR0FBUyxPQUFPLENBQUMsTUFBUixDQUFlLHlEQUFmLEVBQXlFLEVBQXpFOztFQUVULE1BQU0sQ0FBQyxVQUFQLENBQWtCLHVDQUFsQixFQUEyRCxTQUFDLE1BQUQsRUFBUyxFQUFULEVBQWEsaUJBQWIsRUFBZ0MsT0FBaEM7QUFFekQsUUFBQTtJQUFBLENBQUEsR0FBSSxNQUFNLENBQUM7SUFJWCxNQUFNLENBQUMsV0FBUCxHQUFxQixFQUFFLENBQUMsS0FBSCxDQUFBO0lBQ3JCLE1BQU0sQ0FBQyxhQUFQLEdBQXVCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFFdkIsZ0JBQUEsR0FBbUIsQ0FDakIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQURGLEVBRWpCLE1BQU0sQ0FBQyxhQUFhLENBQUMsT0FGSjtJQU9uQixDQUFDLENBQUMsV0FBRixHQUFnQixTQUFBO0FBQ2QsVUFBQTtNQUFBLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLG1CQUFBLElBQWMsQ0FBQyxDQUFDLENBQUMsT0FBRixDQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBcEIsQ0FBZixJQUErQyxDQUFDLENBQUMsQ0FBQyxPQUFGLENBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFwQjtNQUVyRSxJQUFHLE1BQU0sQ0FBQyxXQUFWO1FBQ0UsS0FBQSxHQUFNO2VBQ04sTUFBTSxDQUFDLGFBQVAsR0FBdUIsQ0FBQyxDQUFDLEdBQUYsQ0FBTSxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQWhCLEVBQTJCLFNBQUMsT0FBRDtBQUNoRCxjQUFBO1VBQUEsUUFBQSxHQUFXLENBQUMsQ0FBQyxJQUFGLENBQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFqQixFQUEwQixDQUFDLFNBQUMsR0FBRDttQkFBUyxHQUFHLENBQUMsY0FBSixLQUFzQjtVQUEvQixDQUFELENBQTFCO1VBQ1gsY0FBQSxHQUFpQixDQUFDLENBQUMsSUFBRixDQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBakIsRUFBMEIsQ0FBQyxTQUFDLEdBQUQ7bUJBQVMsR0FBRyxDQUFDLGNBQUosS0FBc0I7VUFBL0IsQ0FBRCxDQUExQjtVQUVqQixNQUFBLEdBQVM7WUFDUCxPQUFBLEVBQVMsT0FERjtZQUVQLE1BQUEsRUFBVyxnQkFBSCxHQUFrQixRQUFRLENBQUMsTUFBTyxDQUFBLEtBQUEsQ0FBbEMsR0FBOEMsR0FGL0M7WUFHUCxXQUFBLEVBQWdCLHNCQUFILEdBQXdCLGNBQWMsQ0FBQyxNQUFPLENBQUEsS0FBQSxDQUE5QyxHQUEwRCxHQUhoRTtZQUlQLFFBQUEsRUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLFFBSmI7O1VBT1QsS0FBQTtpQkFDQTtRQVpnRCxDQUEzQixFQUZ6Qjs7SUFIYztJQW1CaEIsTUFBTSxDQUFDLFdBQVAsR0FBcUIsaUJBQWlCLENBQUMsUUFBbEIsQ0FBMkIsQ0FBM0I7SUFDckIsTUFBTSxDQUFDLGdCQUFQLEdBQTBCLGlCQUFpQixDQUFDLFFBQWxCLENBQTJCLENBQTNCO0lBWTFCLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFDckIsQ0FBQyxDQUFDLE1BQUYsR0FBVyxTQUFBO0FBQ1QsVUFBQTtNQUFBLElBQUcsTUFBTSxDQUFDLFdBQVY7UUFDRSxRQUFBLEdBQVcsQ0FBQyxDQUFDLEdBQUYsQ0FBTSxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQWhCLEVBQXlCLFNBQUMsR0FBRDtVQUNsQyxJQUFHLENBQUMsQ0FBQyxRQUFGLENBQVcsQ0FBQyxPQUFELEVBQVUsV0FBVixDQUFYLEVBQW1DLEdBQUcsQ0FBQyxjQUF2QyxDQUFIO21CQUNFO2NBQUUsS0FBQSxFQUFPLEdBQUcsQ0FBQyxjQUFiO2NBQTZCLE1BQUEsRUFBUSxHQUFHLENBQUMsTUFBekM7Y0FERjs7UUFEa0MsQ0FBekI7UUFJWCxRQUFBLEdBQVcsQ0FBQyxDQUFDLFdBQUYsQ0FBYyxRQUFkLEVBQXdCLENBQUMsT0FBRCxDQUF4QjtRQUVYLFNBQUEsR0FBWTtVQUFFLE1BQUEsRUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQXBCO1VBQStCLFFBQUEsRUFBVSxDQUFDLENBQUMsT0FBRixDQUFVLFFBQVYsQ0FBekM7O1FBRVosT0FBQSxHQUFVO1VBQ1IsWUFBQSxFQUFjLEtBRE47VUFFUixXQUFBLEVBQWEsS0FGTDtVQUdSLGVBQUEsRUFBaUIsSUFBSSxDQUFDLEdBQUwsQ0FBUyxDQUFBLEdBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsTUFBL0IsRUFBc0MsQ0FBdEMsQ0FIVDs7UUFLVixTQUFBLEdBQVksaUJBQWlCLENBQUMsZ0JBQWxCLENBQW1DLFNBQW5DLEVBQTZDLE9BQTdDO2VBR1osTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFuQixDQUEwQixTQUExQixFQWpCRjs7SUFEUztXQXNCWCxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQXRCLENBQThCLGdCQUE5QjtFQXZFeUQsQ0FBM0Q7O0VBMEVBLE1BQU0sQ0FBQyxTQUFQLENBQWlCLG1DQUFqQixFQUFzRCxTQUFBO0FBQ3BELFdBQU87TUFDTCxRQUFBLEVBQVUsR0FETDtNQUVMLFVBQUEsRUFBWSx1Q0FGUDs7RUFENkMsQ0FBdEQ7QUE1RUEiLCJmaWxlIjoiY29tcG9uZW50cy93aWRnZXRzL2FjY291bnRzLWFzc2V0cy12cy1saWFiaWxpdGllcy9hY2NvdW50cy1hc3NldHMtdnMtbGlhYmlsaXRpZXMuZGlyZWN0aXZlLmpzLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2ltcGFjLmNvbXBvbmVudHMud2lkZ2V0cy5hY2NvdW50cy1hc3NldHMtdnMtbGlhYmlsaXRpZXMnLFtdKVxuXG5tb2R1bGUuY29udHJvbGxlcignV2lkZ2V0QWNjb3VudHNBc3NldHNWc0xpYWJpbGl0aWVzQ3RybCcsICgkc2NvcGUsICRxLCBDaGFydEZvcm1hdHRlclN2YywgJGZpbHRlcikgLT5cblxuICB3ID0gJHNjb3BlLndpZGdldFxuXG4gICMgRGVmaW5lIHNldHRpbmdzXG4gICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgJHNjb3BlLm9yZ0RlZmVycmVkID0gJHEuZGVmZXIoKVxuICAkc2NvcGUuY2hhcnREZWZlcnJlZCA9ICRxLmRlZmVyKClcblxuICBzZXR0aW5nc1Byb21pc2VzID0gW1xuICAgICRzY29wZS5vcmdEZWZlcnJlZC5wcm9taXNlXG4gICAgJHNjb3BlLmNoYXJ0RGVmZXJyZWQucHJvbWlzZVxuICBdXG5cbiAgIyBXaWRnZXQgc3BlY2lmaWMgbWV0aG9kc1xuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHcuaW5pdENvbnRleHQgPSAtPlxuICAgICRzY29wZS5pc0RhdGFGb3VuZCA9IHcuY29udGVudD8gJiYgIV8uaXNFbXB0eSh3LmNvbnRlbnQuc3VtbWFyeSkgJiYgIV8uaXNFbXB0eSh3LmNvbnRlbnQuY29tcGFuaWVzKVxuICAgIFxuICAgIGlmICRzY29wZS5pc0RhdGFGb3VuZFxuICAgICAgaW5kZXg9MFxuICAgICAgJHNjb3BlLmNvbXBhbmllc0xpc3QgPSBfLm1hcCB3LmNvbnRlbnQuY29tcGFuaWVzLCAoY29tcGFueSkgLT5cbiAgICAgICAgYXNzZXRTdW0gPSBfLmZpbmQody5jb250ZW50LnN1bW1hcnksICgoc3VtKSAtPiBzdW0uY2xhc3NpZmljYXRpb24gPT0gXCJBU1NFVFwiKSlcbiAgICAgICAgbGlhYmlsaXRpZXNTdW0gPSBfLmZpbmQody5jb250ZW50LnN1bW1hcnksICgoc3VtKSAtPiBzdW0uY2xhc3NpZmljYXRpb24gPT0gXCJMSUFCSUxJVFlcIikpXG5cbiAgICAgICAgcmVzdWx0ID0ge1xuICAgICAgICAgIGNvbXBhbnk6IGNvbXBhbnlcbiAgICAgICAgICBhc3NldHM6IGlmIGFzc2V0U3VtPyB0aGVuIGFzc2V0U3VtLnRvdGFsc1tpbmRleF0gZWxzZSAwLjBcbiAgICAgICAgICBsaWFiaWxpdGllczogaWYgbGlhYmlsaXRpZXNTdW0/IHRoZW4gbGlhYmlsaXRpZXNTdW0udG90YWxzW2luZGV4XSBlbHNlIDAuMFxuICAgICAgICAgIGN1cnJlbmN5OiB3LmNvbnRlbnQuY3VycmVuY3lcbiAgICAgICAgfVxuXG4gICAgICAgIGluZGV4KytcbiAgICAgICAgcmVzdWx0XG5cbiAgJHNjb3BlLmFzc2V0c0NvbG9yID0gQ2hhcnRGb3JtYXR0ZXJTdmMuZ2V0Q29sb3IoMClcbiAgJHNjb3BlLmxpYWJpbGl0aWVzQ29sb3IgPSBDaGFydEZvcm1hdHRlclN2Yy5nZXRDb2xvcigxKVxuXG5cbiAgIyAkc2NvcGUuZ2V0QWNjb3VudENvbG9yID0gKGFuQWNjb3VudCkgLT5cbiAgIyAgIGlmICRzY29wZS5pc011bHRpQ29tcGFueU1vZGUoKVxuICAjICAgICBDaGFydEZvcm1hdHRlclN2Yy5nZXRDb2xvcihfLmluZGV4T2Yody5zZWxlY3RlZEFjY291bnRzWzBdLmFjY291bnRzLCBhbkFjY291bnQpKVxuICAjICAgZWxzZVxuICAjICAgICBDaGFydEZvcm1hdHRlclN2Yy5nZXRDb2xvcihfLmluZGV4T2Yody5zZWxlY3RlZEFjY291bnRzLCBhbkFjY291bnQpKVxuXG5cbiAgIyBDaGFydCBmb3JtYXRpbmcgZnVuY3Rpb25cbiAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAkc2NvcGUuZHJhd1RyaWdnZXIgPSAkcS5kZWZlcigpXG4gIHcuZm9ybWF0ID0gLT5cbiAgICBpZiAkc2NvcGUuaXNEYXRhRm91bmRcbiAgICAgIGRhdGFzZXRzID0gXy5tYXAgdy5jb250ZW50LnN1bW1hcnksIChzdW0pIC0+XG4gICAgICAgIGlmIF8uaW5jbHVkZXMgWydBU1NFVCcsICdMSUFCSUxJVFknXSwgc3VtLmNsYXNzaWZpY2F0aW9uXG4gICAgICAgICAgeyB0aXRsZTogc3VtLmNsYXNzaWZpY2F0aW9uLCB2YWx1ZXM6IHN1bS50b3RhbHMgfVxuXG4gICAgICBkYXRhc2V0cyA9IF8uc29ydEJ5T3JkZXIoZGF0YXNldHMsIFsndGl0bGUnXSlcblxuICAgICAgaW5wdXREYXRhID0geyBsYWJlbHM6IHcuY29udGVudC5jb21wYW5pZXMsIGRhdGFzZXRzOiBfLmNvbXBhY3QgZGF0YXNldHMgfVxuXG4gICAgICBvcHRpb25zID0ge1xuICAgICAgICBzaG93VG9vbHRpcHM6IGZhbHNlLFxuICAgICAgICBzaG93WExhYmVsczogZmFsc2UsXG4gICAgICAgIGJhclZhbHVlU3BhY2luZzogTWF0aC5tYXgoOC13LmNvbnRlbnQuY29tcGFuaWVzLmxlbmd0aCwxKSxcbiAgICAgIH1cbiAgICAgIGNoYXJ0RGF0YSA9IENoYXJ0Rm9ybWF0dGVyU3ZjLmNvbWJpbmVkQmFyQ2hhcnQoaW5wdXREYXRhLG9wdGlvbnMpXG5cbiAgICAgICMgY2FsbHMgY2hhcnQuZHJhdygpXG4gICAgICAkc2NvcGUuZHJhd1RyaWdnZXIubm90aWZ5KGNoYXJ0RGF0YSlcblxuICAjIFdpZGdldCBpcyByZWFkeTogY2FuIHRyaWdnZXIgdGhlIFwid2FpdCBmb3Igc2V0dGlnbnMgdG8gYmUgcmVhZHlcIlxuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICRzY29wZS53aWRnZXREZWZlcnJlZC5yZXNvbHZlKHNldHRpbmdzUHJvbWlzZXMpXG4pXG5cbm1vZHVsZS5kaXJlY3RpdmUoJ3dpZGdldEFjY291bnRzQXNzZXRzVnNMaWFiaWxpdGllcycsIC0+XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBjb250cm9sbGVyOiAnV2lkZ2V0QWNjb3VudHNBc3NldHNWc0xpYWJpbGl0aWVzQ3RybCdcbiAgfVxuKVxuIl19

(function() {
  var module;

  module = angular.module('impac.components.widgets.accounts-balance', []);

  module.controller('WidgetAccountsBalanceCtrl', function($scope, $q, ChartFormatterSvc, $filter) {
    var settingsPromises, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    $scope.accountBackDeferred = $q.defer();
    $scope.accountFrontDeferred = $q.defer();
    $scope.timeRangeDeferred = $q.defer();
    $scope.histModeDeferred = $q.defer();
    $scope.chartDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise, $scope.accountBackDeferred, $scope.accountFrontDeferred, $scope.timeRangeDeferred.promise, $scope.histModeDeferred.promise, $scope.chartDeferred.promise];
    $scope.isDataFound = true;
    w.initContext = function() {
      return $scope.isDataFound = (w.content != null) && !_.isEmpty(w.content.account_list);
    };
    $scope.getName = function() {
      if (w.selectedAccount != null) {
        return w.selectedAccount.name;
      }
    };
    $scope.getCurrentBalance = function() {
      if (w.selectedAccount != null) {
        return w.selectedAccount.current_balance;
      }
    };
    $scope.getCurrency = function() {
      if (w.selectedAccount != null) {
        return w.selectedAccount.currency;
      }
    };
    $scope.displayAccount = function() {
      $scope.updateSettings(false);
      return w.format();
    };
    $scope.drawTrigger = $q.defer();
    w.format = function() {
      var all_values_are_positive, chartData, data, dates, inputData, options, period;
      if ($scope.isDataFound && (w.selectedAccount != null)) {
        data = angular.copy(w.selectedAccount);
        period = null;
        if ((w.metadata != null) && (w.metadata.hist_parameters != null)) {
          period = w.metadata.hist_parameters.period;
        }
        dates = _.map(w.content.dates, function(date) {
          return $filter('mnoDate')(date, period);
        });
        inputData = {
          title: data.name,
          labels: dates,
          values: data.balances
        };
        all_values_are_positive = true;
        angular.forEach(data.balances, function(value) {
          return all_values_are_positive && (all_values_are_positive = value >= 0);
        });
        options = {
          scaleBeginAtZero: all_values_are_positive,
          showXLabels: false
        };
        chartData = ChartFormatterSvc.lineChart([inputData], options);
        return $scope.drawTrigger.notify(chartData);
      }
    };
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetAccountsBalance', function() {
    return {
      restrict: 'A',
      controller: 'WidgetAccountsBalanceCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy9hY2NvdW50cy1iYWxhbmNlL2FjY291bnRzLWJhbGFuY2UuZGlyZWN0aXZlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUE7O0VBQUEsTUFBQSxHQUFTLE9BQU8sQ0FBQyxNQUFSLENBQWUsMkNBQWYsRUFBMkQsRUFBM0Q7O0VBRVQsTUFBTSxDQUFDLFVBQVAsQ0FBa0IsMkJBQWxCLEVBQStDLFNBQUMsTUFBRCxFQUFTLEVBQVQsRUFBYSxpQkFBYixFQUFnQyxPQUFoQztBQUU3QyxRQUFBO0lBQUEsQ0FBQSxHQUFJLE1BQU0sQ0FBQztJQUlYLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFDckIsTUFBTSxDQUFDLG1CQUFQLEdBQTZCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFDN0IsTUFBTSxDQUFDLG9CQUFQLEdBQThCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFDOUIsTUFBTSxDQUFDLGlCQUFQLEdBQTJCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFDM0IsTUFBTSxDQUFDLGdCQUFQLEdBQTBCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFDMUIsTUFBTSxDQUFDLGFBQVAsR0FBdUIsRUFBRSxDQUFDLEtBQUgsQ0FBQTtJQUV2QixnQkFBQSxHQUFtQixDQUNqQixNQUFNLENBQUMsV0FBVyxDQUFDLE9BREYsRUFFakIsTUFBTSxDQUFDLG1CQUZVLEVBR2pCLE1BQU0sQ0FBQyxvQkFIVSxFQUlqQixNQUFNLENBQUMsaUJBQWlCLENBQUMsT0FKUixFQUtqQixNQUFNLENBQUMsZ0JBQWdCLENBQUMsT0FMUCxFQU1qQixNQUFNLENBQUMsYUFBYSxDQUFDLE9BTko7SUFZbkIsTUFBTSxDQUFDLFdBQVAsR0FBbUI7SUFDbkIsQ0FBQyxDQUFDLFdBQUYsR0FBZ0IsU0FBQTthQUNkLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLG1CQUFBLElBQWMsQ0FBQyxDQUFDLENBQUMsT0FBRixDQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsWUFBcEI7SUFEdEI7SUFHaEIsTUFBTSxDQUFDLE9BQVAsR0FBaUIsU0FBQTtNQUNmLElBQTBCLHlCQUExQjtlQUFBLENBQUMsQ0FBQyxlQUFlLENBQUMsS0FBbEI7O0lBRGU7SUFHakIsTUFBTSxDQUFDLGlCQUFQLEdBQTJCLFNBQUE7TUFDekIsSUFBcUMseUJBQXJDO2VBQUEsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxnQkFBbEI7O0lBRHlCO0lBRzNCLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLFNBQUE7TUFDbkIsSUFBOEIseUJBQTlCO2VBQUEsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxTQUFsQjs7SUFEbUI7SUFHckIsTUFBTSxDQUFDLGNBQVAsR0FBd0IsU0FBQTtNQUN0QixNQUFNLENBQUMsY0FBUCxDQUFzQixLQUF0QjthQUNBLENBQUMsQ0FBQyxNQUFGLENBQUE7SUFGc0I7SUFPeEIsTUFBTSxDQUFDLFdBQVAsR0FBcUIsRUFBRSxDQUFDLEtBQUgsQ0FBQTtJQUNyQixDQUFDLENBQUMsTUFBRixHQUFXLFNBQUE7QUFDVCxVQUFBO01BQUEsSUFBRyxNQUFNLENBQUMsV0FBUCxJQUFzQiwyQkFBekI7UUFDRSxJQUFBLEdBQU8sT0FBTyxDQUFDLElBQVIsQ0FBYSxDQUFDLENBQUMsZUFBZjtRQUVQLE1BQUEsR0FBUztRQUNULElBQThDLG9CQUFBLElBQWUsb0NBQTdEO1VBQUEsTUFBQSxHQUFTLENBQUMsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLE9BQXBDOztRQUNBLEtBQUEsR0FBUSxDQUFDLENBQUMsR0FBRixDQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBaEIsRUFBdUIsU0FBQyxJQUFEO2lCQUM3QixPQUFBLENBQVEsU0FBUixDQUFBLENBQW1CLElBQW5CLEVBQXlCLE1BQXpCO1FBRDZCLENBQXZCO1FBR1IsU0FBQSxHQUFZO1VBQUMsS0FBQSxFQUFPLElBQUksQ0FBQyxJQUFiO1VBQW1CLE1BQUEsRUFBUSxLQUEzQjtVQUFrQyxNQUFBLEVBQVEsSUFBSSxDQUFDLFFBQS9DOztRQUNaLHVCQUFBLEdBQTBCO1FBQzFCLE9BQU8sQ0FBQyxPQUFSLENBQWdCLElBQUksQ0FBQyxRQUFyQixFQUErQixTQUFDLEtBQUQ7aUJBQzdCLDRCQUFBLDBCQUE0QixLQUFBLElBQVM7UUFEUixDQUEvQjtRQUlBLE9BQUEsR0FBVTtVQUNSLGdCQUFBLEVBQWtCLHVCQURWO1VBRVIsV0FBQSxFQUFhLEtBRkw7O1FBSVYsU0FBQSxHQUFZLGlCQUFpQixDQUFDLFNBQWxCLENBQTRCLENBQUMsU0FBRCxDQUE1QixFQUF3QyxPQUF4QztlQUdaLE1BQU0sQ0FBQyxXQUFXLENBQUMsTUFBbkIsQ0FBMEIsU0FBMUIsRUFyQkY7O0lBRFM7V0EyQlgsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUF0QixDQUE4QixnQkFBOUI7RUF6RTZDLENBQS9DOztFQTRFQSxNQUFNLENBQUMsU0FBUCxDQUFpQix1QkFBakIsRUFBMEMsU0FBQTtBQUN4QyxXQUFPO01BQ0wsUUFBQSxFQUFVLEdBREw7TUFFTCxVQUFBLEVBQVksMkJBRlA7O0VBRGlDLENBQTFDO0FBOUVBIiwiZmlsZSI6ImNvbXBvbmVudHMvd2lkZ2V0cy9hY2NvdW50cy1iYWxhbmNlL2FjY291bnRzLWJhbGFuY2UuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2ltcGFjLmNvbXBvbmVudHMud2lkZ2V0cy5hY2NvdW50cy1iYWxhbmNlJyxbXSlcblxubW9kdWxlLmNvbnRyb2xsZXIoJ1dpZGdldEFjY291bnRzQmFsYW5jZUN0cmwnLCAoJHNjb3BlLCAkcSwgQ2hhcnRGb3JtYXR0ZXJTdmMsICRmaWx0ZXIpIC0+XG5cbiAgdyA9ICRzY29wZS53aWRnZXRcblxuICAjIERlZmluZSBzZXR0aW5nc1xuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICRzY29wZS5vcmdEZWZlcnJlZCA9ICRxLmRlZmVyKClcbiAgJHNjb3BlLmFjY291bnRCYWNrRGVmZXJyZWQgPSAkcS5kZWZlcigpXG4gICRzY29wZS5hY2NvdW50RnJvbnREZWZlcnJlZCA9ICRxLmRlZmVyKClcbiAgJHNjb3BlLnRpbWVSYW5nZURlZmVycmVkID0gJHEuZGVmZXIoKVxuICAkc2NvcGUuaGlzdE1vZGVEZWZlcnJlZCA9ICRxLmRlZmVyKClcbiAgJHNjb3BlLmNoYXJ0RGVmZXJyZWQgPSAkcS5kZWZlcigpXG5cbiAgc2V0dGluZ3NQcm9taXNlcyA9IFtcbiAgICAkc2NvcGUub3JnRGVmZXJyZWQucHJvbWlzZVxuICAgICRzY29wZS5hY2NvdW50QmFja0RlZmVycmVkXG4gICAgJHNjb3BlLmFjY291bnRGcm9udERlZmVycmVkXG4gICAgJHNjb3BlLnRpbWVSYW5nZURlZmVycmVkLnByb21pc2VcbiAgICAkc2NvcGUuaGlzdE1vZGVEZWZlcnJlZC5wcm9taXNlXG4gICAgJHNjb3BlLmNoYXJ0RGVmZXJyZWQucHJvbWlzZVxuICBdXG5cblxuICAjIFdpZGdldCBzcGVjaWZpYyBtZXRob2RzXG4gICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgJHNjb3BlLmlzRGF0YUZvdW5kPXRydWVcbiAgdy5pbml0Q29udGV4dCA9IC0+XG4gICAgJHNjb3BlLmlzRGF0YUZvdW5kID0gdy5jb250ZW50PyAmJiAhXy5pc0VtcHR5KHcuY29udGVudC5hY2NvdW50X2xpc3QpXG5cbiAgJHNjb3BlLmdldE5hbWUgPSAtPlxuICAgIHcuc2VsZWN0ZWRBY2NvdW50Lm5hbWUgaWYgdy5zZWxlY3RlZEFjY291bnQ/XG5cbiAgJHNjb3BlLmdldEN1cnJlbnRCYWxhbmNlID0gLT5cbiAgICB3LnNlbGVjdGVkQWNjb3VudC5jdXJyZW50X2JhbGFuY2UgaWYgdy5zZWxlY3RlZEFjY291bnQ/XG5cbiAgJHNjb3BlLmdldEN1cnJlbmN5ID0gLT5cbiAgICB3LnNlbGVjdGVkQWNjb3VudC5jdXJyZW5jeSBpZiB3LnNlbGVjdGVkQWNjb3VudD9cblxuICAkc2NvcGUuZGlzcGxheUFjY291bnQgPSAtPlxuICAgICRzY29wZS51cGRhdGVTZXR0aW5ncyhmYWxzZSlcbiAgICB3LmZvcm1hdCgpXG5cblxuICAjIENoYXJ0IGZvcm1hdGluZyBmdW5jdGlvblxuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICRzY29wZS5kcmF3VHJpZ2dlciA9ICRxLmRlZmVyKClcbiAgdy5mb3JtYXQgPSAtPlxuICAgIGlmICRzY29wZS5pc0RhdGFGb3VuZCAmJiB3LnNlbGVjdGVkQWNjb3VudD9cbiAgICAgIGRhdGEgPSBhbmd1bGFyLmNvcHkody5zZWxlY3RlZEFjY291bnQpXG5cbiAgICAgIHBlcmlvZCA9IG51bGxcbiAgICAgIHBlcmlvZCA9IHcubWV0YWRhdGEuaGlzdF9wYXJhbWV0ZXJzLnBlcmlvZCBpZiB3Lm1ldGFkYXRhPyAmJiB3Lm1ldGFkYXRhLmhpc3RfcGFyYW1ldGVycz9cbiAgICAgIGRhdGVzID0gXy5tYXAgdy5jb250ZW50LmRhdGVzLCAoZGF0ZSkgLT5cbiAgICAgICAgJGZpbHRlcignbW5vRGF0ZScpKGRhdGUsIHBlcmlvZClcblxuICAgICAgaW5wdXREYXRhID0ge3RpdGxlOiBkYXRhLm5hbWUsIGxhYmVsczogZGF0ZXMsIHZhbHVlczogZGF0YS5iYWxhbmNlc31cbiAgICAgIGFsbF92YWx1ZXNfYXJlX3Bvc2l0aXZlID0gdHJ1ZVxuICAgICAgYW5ndWxhci5mb3JFYWNoKGRhdGEuYmFsYW5jZXMsICh2YWx1ZSkgLT5cbiAgICAgICAgYWxsX3ZhbHVlc19hcmVfcG9zaXRpdmUgJiY9IHZhbHVlID49IDBcbiAgICAgIClcblxuICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgc2NhbGVCZWdpbkF0WmVybzogYWxsX3ZhbHVlc19hcmVfcG9zaXRpdmUsXG4gICAgICAgIHNob3dYTGFiZWxzOiBmYWxzZSxcbiAgICAgIH1cbiAgICAgIGNoYXJ0RGF0YSA9IENoYXJ0Rm9ybWF0dGVyU3ZjLmxpbmVDaGFydChbaW5wdXREYXRhXSxvcHRpb25zKVxuICAgICAgXG4gICAgICAjIGNhbGxzIGNoYXJ0LmRyYXcoKVxuICAgICAgJHNjb3BlLmRyYXdUcmlnZ2VyLm5vdGlmeShjaGFydERhdGEpXG5cblxuICAjIFdpZGdldCBpcyByZWFkeTogY2FuIHRyaWdnZXIgdGhlIFwid2FpdCBmb3Igc2V0dGluZ3MgdG8gYmUgcmVhZHlcIlxuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICRzY29wZS53aWRnZXREZWZlcnJlZC5yZXNvbHZlKHNldHRpbmdzUHJvbWlzZXMpXG4pXG5cbm1vZHVsZS5kaXJlY3RpdmUoJ3dpZGdldEFjY291bnRzQmFsYW5jZScsIC0+XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBjb250cm9sbGVyOiAnV2lkZ2V0QWNjb3VudHNCYWxhbmNlQ3RybCdcbiAgfVxuKSJdfQ==

(function() {
  var module;

  module = angular.module('impac.components.widgets.accounts-balance-sheet', []);

  module.controller('WidgetAccountsBalanceSheetCtrl', function($scope, $q, ImpacWidgetsSvc) {
    var settingsPromises, unCollapsedSetting, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    $scope.paramSelectorFrontDeferred = $q.defer();
    $scope.paramSelectorBackDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise, $scope.paramSelectorFrontDeferred.promise, $scope.paramSelectorBackDeferred.promise];
    $scope.periodOptions = [
      {
        label: "Year",
        value: "YEARLY"
      }, {
        label: "Quarter",
        value: "QUARTERLY"
      }, {
        label: "Month",
        value: "MONTHLY"
      }, {
        label: "Week",
        value: "WEEKLY"
      }, {
        label: "Day",
        value: "DAILY"
      }
    ];
    $scope.period = angular.copy($scope.periodOptions[2]);
    w.initContext = function() {
      if ((w.content != null) && (w.content.period != null) && _.contains(_.pluck($scope.periodOptions, 'value'), w.content.period)) {
        $scope.period = angular.copy(_.find($scope.periodOptions, (function(o) {
          return o.value === w.content.period;
        })));
      }
      if ($scope.isDataFound = angular.isDefined(w.content) && !_.isEmpty(w.content.summary) && !_.isEmpty(w.content.dates)) {
        $scope.dates = w.content.dates;
        $scope.unCollapsed = w.metadata.unCollapsed || [];
        return $scope.categories = Object.keys(w.content.summary);
      }
    };
    $scope.toggleCollapsed = function(categoryName) {
      if (categoryName != null) {
        if (_.find($scope.unCollapsed, (function(name) {
          return categoryName === name;
        }))) {
          $scope.unCollapsed = _.reject($scope.unCollapsed, function(name) {
            return name === categoryName;
          });
        } else {
          $scope.unCollapsed.push(categoryName);
        }
        return ImpacWidgetsSvc.updateWidgetSettings(w, false);
      }
    };
    $scope.isCollapsed = function(categoryName) {
      if (categoryName != null) {
        if (_.find($scope.unCollapsed, (function(name) {
          return categoryName === name;
        }))) {
          return false;
        } else {
          return true;
        }
      }
    };
    unCollapsedSetting = {};
    unCollapsedSetting.initialized = false;
    unCollapsedSetting.initialize = function() {
      return unCollapsedSetting.initialized = true;
    };
    unCollapsedSetting.toMetadata = function() {
      return {
        unCollapsed: $scope.unCollapsed
      };
    };
    w.settings.push(unCollapsedSetting);
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetAccountsBalanceSheet', function() {
    return {
      restrict: 'A',
      controller: 'WidgetAccountsBalanceSheetCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy9hY2NvdW50cy1iYWxhbmNlLXNoZWV0L2FjY291bnRzLWJhbGFuY2Utc2hlZXQuZGlyZWN0aXZlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUE7O0VBQUEsTUFBQSxHQUFTLE9BQU8sQ0FBQyxNQUFSLENBQWUsaURBQWYsRUFBaUUsRUFBakU7O0VBRVQsTUFBTSxDQUFDLFVBQVAsQ0FBa0IsZ0NBQWxCLEVBQW9ELFNBQUMsTUFBRCxFQUFTLEVBQVQsRUFBYSxlQUFiO0FBRWxELFFBQUE7SUFBQSxDQUFBLEdBQUksTUFBTSxDQUFDO0lBSVgsTUFBTSxDQUFDLFdBQVAsR0FBcUIsRUFBRSxDQUFDLEtBQUgsQ0FBQTtJQUNyQixNQUFNLENBQUMsMEJBQVAsR0FBb0MsRUFBRSxDQUFDLEtBQUgsQ0FBQTtJQUNwQyxNQUFNLENBQUMseUJBQVAsR0FBbUMsRUFBRSxDQUFDLEtBQUgsQ0FBQTtJQUVuQyxnQkFBQSxHQUFtQixDQUNqQixNQUFNLENBQUMsV0FBVyxDQUFDLE9BREYsRUFFakIsTUFBTSxDQUFDLDBCQUEwQixDQUFDLE9BRmpCLEVBR2pCLE1BQU0sQ0FBQyx5QkFBeUIsQ0FBQyxPQUhoQjtJQVNuQixNQUFNLENBQUMsYUFBUCxHQUF1QjtNQUNyQjtRQUFDLEtBQUEsRUFBTyxNQUFSO1FBQWdCLEtBQUEsRUFBTyxRQUF2QjtPQURxQixFQUVyQjtRQUFDLEtBQUEsRUFBTyxTQUFSO1FBQW1CLEtBQUEsRUFBTyxXQUExQjtPQUZxQixFQUdyQjtRQUFDLEtBQUEsRUFBTyxPQUFSO1FBQWlCLEtBQUEsRUFBTyxTQUF4QjtPQUhxQixFQUlyQjtRQUFDLEtBQUEsRUFBTyxNQUFSO1FBQWdCLEtBQUEsRUFBTyxRQUF2QjtPQUpxQixFQUtyQjtRQUFDLEtBQUEsRUFBTyxLQUFSO1FBQWUsS0FBQSxFQUFPLE9BQXRCO09BTHFCOztJQU92QixNQUFNLENBQUMsTUFBUCxHQUFnQixPQUFPLENBQUMsSUFBUixDQUFhLE1BQU0sQ0FBQyxhQUFjLENBQUEsQ0FBQSxDQUFsQztJQUNoQixDQUFDLENBQUMsV0FBRixHQUFnQixTQUFBO01BQ2QsSUFBRyxtQkFBQSxJQUFjLDBCQUFkLElBQW1DLENBQUMsQ0FBQyxRQUFGLENBQVcsQ0FBQyxDQUFDLEtBQUYsQ0FBUSxNQUFNLENBQUMsYUFBZixFQUE4QixPQUE5QixDQUFYLEVBQW1ELENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBN0QsQ0FBdEM7UUFDRSxNQUFNLENBQUMsTUFBUCxHQUFnQixPQUFPLENBQUMsSUFBUixDQUFhLENBQUMsQ0FBQyxJQUFGLENBQU8sTUFBTSxDQUFDLGFBQWQsRUFBNkIsQ0FBQyxTQUFDLENBQUQ7aUJBQU8sQ0FBQyxDQUFDLEtBQUYsS0FBVyxDQUFDLENBQUMsT0FBTyxDQUFDO1FBQTVCLENBQUQsQ0FBN0IsQ0FBYixFQURsQjs7TUFHQSxJQUFHLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLE9BQU8sQ0FBQyxTQUFSLENBQWtCLENBQUMsQ0FBQyxPQUFwQixDQUFBLElBQWdDLENBQUMsQ0FBQyxDQUFDLE9BQUYsQ0FBVSxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQXBCLENBQWpDLElBQWlFLENBQUMsQ0FBQyxDQUFDLE9BQUYsQ0FBVSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQXBCLENBQTFGO1FBQ0UsTUFBTSxDQUFDLEtBQVAsR0FBZSxDQUFDLENBQUMsT0FBTyxDQUFDO1FBQ3pCLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLENBQUMsQ0FBQyxRQUFRLENBQUMsV0FBWCxJQUEwQjtlQUMvQyxNQUFNLENBQUMsVUFBUCxHQUFvQixNQUFNLENBQUMsSUFBUCxDQUFZLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBdEIsRUFIdEI7O0lBSmM7SUFTaEIsTUFBTSxDQUFDLGVBQVAsR0FBeUIsU0FBQyxZQUFEO01BQ3ZCLElBQUcsb0JBQUg7UUFDRSxJQUFHLENBQUMsQ0FBQyxJQUFGLENBQU8sTUFBTSxDQUFDLFdBQWQsRUFBMkIsQ0FBQyxTQUFDLElBQUQ7aUJBQVUsWUFBQSxLQUFnQjtRQUExQixDQUFELENBQTNCLENBQUg7VUFDRSxNQUFNLENBQUMsV0FBUCxHQUFxQixDQUFDLENBQUMsTUFBRixDQUFTLE1BQU0sQ0FBQyxXQUFoQixFQUE2QixTQUFDLElBQUQ7bUJBQ2hELElBQUEsS0FBUTtVQUR3QyxDQUE3QixFQUR2QjtTQUFBLE1BQUE7VUFLRSxNQUFNLENBQUMsV0FBVyxDQUFDLElBQW5CLENBQXdCLFlBQXhCLEVBTEY7O2VBTUEsZUFBZSxDQUFDLG9CQUFoQixDQUFxQyxDQUFyQyxFQUF1QyxLQUF2QyxFQVBGOztJQUR1QjtJQVV6QixNQUFNLENBQUMsV0FBUCxHQUFxQixTQUFDLFlBQUQ7TUFDbkIsSUFBRyxvQkFBSDtRQUNFLElBQUcsQ0FBQyxDQUFDLElBQUYsQ0FBTyxNQUFNLENBQUMsV0FBZCxFQUEyQixDQUFDLFNBQUMsSUFBRDtpQkFBVSxZQUFBLEtBQWdCO1FBQTFCLENBQUQsQ0FBM0IsQ0FBSDtBQUNFLGlCQUFPLE1BRFQ7U0FBQSxNQUFBO0FBR0UsaUJBQU8sS0FIVDtTQURGOztJQURtQjtJQVdyQixrQkFBQSxHQUFxQjtJQUNyQixrQkFBa0IsQ0FBQyxXQUFuQixHQUFpQztJQUVqQyxrQkFBa0IsQ0FBQyxVQUFuQixHQUFnQyxTQUFBO2FBQzlCLGtCQUFrQixDQUFDLFdBQW5CLEdBQWlDO0lBREg7SUFHaEMsa0JBQWtCLENBQUMsVUFBbkIsR0FBZ0MsU0FBQTthQUM5QjtRQUFDLFdBQUEsRUFBYSxNQUFNLENBQUMsV0FBckI7O0lBRDhCO0lBR2hDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBWCxDQUFnQixrQkFBaEI7V0FLQSxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQXRCLENBQThCLGdCQUE5QjtFQXZFa0QsQ0FBcEQ7O0VBMEVBLE1BQU0sQ0FBQyxTQUFQLENBQWlCLDRCQUFqQixFQUErQyxTQUFBO0FBQzdDLFdBQU87TUFDTCxRQUFBLEVBQVUsR0FETDtNQUVMLFVBQUEsRUFBWSxnQ0FGUDs7RUFEc0MsQ0FBL0M7QUE1RUEiLCJmaWxlIjoiY29tcG9uZW50cy93aWRnZXRzL2FjY291bnRzLWJhbGFuY2Utc2hlZXQvYWNjb3VudHMtYmFsYW5jZS1zaGVldC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnaW1wYWMuY29tcG9uZW50cy53aWRnZXRzLmFjY291bnRzLWJhbGFuY2Utc2hlZXQnLFtdKVxuXG5tb2R1bGUuY29udHJvbGxlcignV2lkZ2V0QWNjb3VudHNCYWxhbmNlU2hlZXRDdHJsJywgKCRzY29wZSwgJHEsIEltcGFjV2lkZ2V0c1N2YykgLT5cblxuICB3ID0gJHNjb3BlLndpZGdldFxuXG4gICMgRGVmaW5lIHNldHRpbmdzXG4gICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgJHNjb3BlLm9yZ0RlZmVycmVkID0gJHEuZGVmZXIoKVxuICAkc2NvcGUucGFyYW1TZWxlY3RvckZyb250RGVmZXJyZWQgPSAkcS5kZWZlcigpXG4gICRzY29wZS5wYXJhbVNlbGVjdG9yQmFja0RlZmVycmVkID0gJHEuZGVmZXIoKVxuXG4gIHNldHRpbmdzUHJvbWlzZXMgPSBbXG4gICAgJHNjb3BlLm9yZ0RlZmVycmVkLnByb21pc2VcbiAgICAkc2NvcGUucGFyYW1TZWxlY3RvckZyb250RGVmZXJyZWQucHJvbWlzZVxuICAgICRzY29wZS5wYXJhbVNlbGVjdG9yQmFja0RlZmVycmVkLnByb21pc2VcbiAgXVxuXG5cbiAgIyBXaWRnZXQgc3BlY2lmaWMgbWV0aG9kc1xuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICRzY29wZS5wZXJpb2RPcHRpb25zID0gW1xuICAgIHtsYWJlbDogXCJZZWFyXCIsIHZhbHVlOiBcIllFQVJMWVwifSxcbiAgICB7bGFiZWw6IFwiUXVhcnRlclwiLCB2YWx1ZTogXCJRVUFSVEVSTFlcIn0sXG4gICAge2xhYmVsOiBcIk1vbnRoXCIsIHZhbHVlOiBcIk1PTlRITFlcIn0sXG4gICAge2xhYmVsOiBcIldlZWtcIiwgdmFsdWU6IFwiV0VFS0xZXCJ9LFxuICAgIHtsYWJlbDogXCJEYXlcIiwgdmFsdWU6IFwiREFJTFlcIn0sXG4gIF1cbiAgJHNjb3BlLnBlcmlvZCA9IGFuZ3VsYXIuY29weSAkc2NvcGUucGVyaW9kT3B0aW9uc1syXVxuICB3LmluaXRDb250ZXh0ID0gLT5cbiAgICBpZiB3LmNvbnRlbnQ/ICYmIHcuY29udGVudC5wZXJpb2Q/ICYmIF8uY29udGFpbnMoXy5wbHVjaygkc2NvcGUucGVyaW9kT3B0aW9ucywgJ3ZhbHVlJyksIHcuY29udGVudC5wZXJpb2QpXG4gICAgICAkc2NvcGUucGVyaW9kID0gYW5ndWxhci5jb3B5IF8uZmluZCAkc2NvcGUucGVyaW9kT3B0aW9ucywgKChvKSAtPiBvLnZhbHVlID09IHcuY29udGVudC5wZXJpb2QpXG5cbiAgICBpZiAkc2NvcGUuaXNEYXRhRm91bmQgPSBhbmd1bGFyLmlzRGVmaW5lZCh3LmNvbnRlbnQpICYmICFfLmlzRW1wdHkody5jb250ZW50LnN1bW1hcnkpICYmICFfLmlzRW1wdHkody5jb250ZW50LmRhdGVzKVxuICAgICAgJHNjb3BlLmRhdGVzID0gdy5jb250ZW50LmRhdGVzXG4gICAgICAkc2NvcGUudW5Db2xsYXBzZWQgPSB3Lm1ldGFkYXRhLnVuQ29sbGFwc2VkIHx8IFtdXG4gICAgICAkc2NvcGUuY2F0ZWdvcmllcyA9IE9iamVjdC5rZXlzKHcuY29udGVudC5zdW1tYXJ5KVxuXG4gICRzY29wZS50b2dnbGVDb2xsYXBzZWQgPSAoY2F0ZWdvcnlOYW1lKSAtPlxuICAgIGlmIGNhdGVnb3J5TmFtZT9cbiAgICAgIGlmIF8uZmluZCgkc2NvcGUudW5Db2xsYXBzZWQsICgobmFtZSkgLT4gY2F0ZWdvcnlOYW1lID09IG5hbWUpKVxuICAgICAgICAkc2NvcGUudW5Db2xsYXBzZWQgPSBfLnJlamVjdCgkc2NvcGUudW5Db2xsYXBzZWQsIChuYW1lKSAtPlxuICAgICAgICAgIG5hbWUgPT0gY2F0ZWdvcnlOYW1lXG4gICAgICAgIClcbiAgICAgIGVsc2VcbiAgICAgICAgJHNjb3BlLnVuQ29sbGFwc2VkLnB1c2goY2F0ZWdvcnlOYW1lKVxuICAgICAgSW1wYWNXaWRnZXRzU3ZjLnVwZGF0ZVdpZGdldFNldHRpbmdzKHcsZmFsc2UpXG5cbiAgJHNjb3BlLmlzQ29sbGFwc2VkID0gKGNhdGVnb3J5TmFtZSkgLT5cbiAgICBpZiBjYXRlZ29yeU5hbWU/XG4gICAgICBpZiBfLmZpbmQoJHNjb3BlLnVuQ29sbGFwc2VkLCAoKG5hbWUpIC0+IGNhdGVnb3J5TmFtZSA9PSBuYW1lKSlcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICBlbHNlXG4gICAgICAgIHJldHVybiB0cnVlXG5cblxuICAjIE1pbmktc2V0dGluZ3Mgb2JqZWN0c1xuICAjIGhhbmRsZXMgdGhlIHNhdmluZyBvZiBjb2xsYXBzZWQgLyB1bmNvbGxhcHNlZCBsaXN0IGdyb3Vwcy5cbiAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICB1bkNvbGxhcHNlZFNldHRpbmcgPSB7fVxuICB1bkNvbGxhcHNlZFNldHRpbmcuaW5pdGlhbGl6ZWQgPSBmYWxzZVxuXG4gIHVuQ29sbGFwc2VkU2V0dGluZy5pbml0aWFsaXplID0gLT5cbiAgICB1bkNvbGxhcHNlZFNldHRpbmcuaW5pdGlhbGl6ZWQgPSB0cnVlXG5cbiAgdW5Db2xsYXBzZWRTZXR0aW5nLnRvTWV0YWRhdGEgPSAtPlxuICAgIHt1bkNvbGxhcHNlZDogJHNjb3BlLnVuQ29sbGFwc2VkfVxuXG4gIHcuc2V0dGluZ3MucHVzaCh1bkNvbGxhcHNlZFNldHRpbmcpXG5cblxuICAjIFdpZGdldCBpcyByZWFkeTogY2FuIHRyaWdnZXIgdGhlIFwid2FpdCBmb3Igc2V0dGlnbnMgdG8gYmUgcmVhZHlcIlxuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICRzY29wZS53aWRnZXREZWZlcnJlZC5yZXNvbHZlKHNldHRpbmdzUHJvbWlzZXMpXG4pXG5cbm1vZHVsZS5kaXJlY3RpdmUoJ3dpZGdldEFjY291bnRzQmFsYW5jZVNoZWV0JywgLT5cbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIGNvbnRyb2xsZXI6ICdXaWRnZXRBY2NvdW50c0JhbGFuY2VTaGVldEN0cmwnXG4gIH1cbilcbiJdfQ==

(function() {
  var module;

  module = angular.module('impac.components.widgets.accounts-cash-summary', []);

  module.controller('WidgetAccountsCashSummaryCtrl', function($scope, $q, ChartFormatterSvc, $filter, ImpacWidgetsSvc) {
    var selectedElementSetting, settingsPromises, unCollapsedSetting, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    $scope.timeRangeDeferred = $q.defer();
    $scope.widthDeferred = $q.defer();
    $scope.chartDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise, $scope.timeRangeDeferred.promise, $scope.widthDeferred.promise, $scope.chartDeferred.promise];
    w.initContext = function() {
      if ($scope.isDataFound = angular.isDefined(w.content) && !_.isEmpty(w.content.summary) && !_.isEmpty(w.content.dates)) {
        $scope.dates = w.content.dates;
        $scope.unCollapsed = w.metadata.unCollapsed || [];
        if (w.metadata.selectedElement) {
          $scope.selectedElement = _.find(w.content.summary, function(statement) {
            return statement.name === w.metadata.selectedElement.name;
          });
          if (!$scope.selectedElement) {
            return angular.forEach(w.content.summary, function(statement) {
              if (statement.accounts != null) {
                return $scope.selectedElement || ($scope.selectedElement = _.find(statement.accounts, function(account) {
                  return account.id === w.metadata.selectedElement.id;
                }));
              }
            });
          }
        }
      }
    };
    $scope.getLastDate = function() {
      if ($scope.dates != null) {
        return $scope.dates[$scope.dates.length - 1];
      }
    };
    $scope.getPrevDate = function() {
      if ($scope.dates != null) {
        return $scope.dates[$scope.dates.length - 2];
      }
    };
    $scope.getLastValue = function(element) {
      if (element.cash_flows != null) {
        return _.last(element.cash_flows);
      }
    };
    $scope.formatVariance = function(aVariance) {
      if (aVariance != null) {
        if (aVariance > 0) {
          return "+" + aVariance + " %";
        } else {
          return aVariance + " %";
        }
      } else {
        return "-";
      }
    };
    $scope.getLastVariance = function(element) {
      if ((element.variances != null) && (_.last(element.variances) != null)) {
        return $scope.formatVariance(_.last(element.variances));
      } else {
        return "-";
      }
    };
    $scope.getVarianceClassColor = function(aVariance) {
      if (parseInt(aVariance) > 0) {
        return 'positive';
      } else if (parseInt(aVariance) < 0) {
        return 'negative';
      } else {
        return null;
      }
    };
    $scope.getName = function(element) {
      if ((element != null) && (element.name != null)) {
        return element.name.replace(/_/g, " ");
      }
    };
    $scope.toggleSelectedElement = function(element) {
      if ($scope.isSelected(element)) {
        $scope.selectedElement = null;
        if (w.isExpanded()) {
          return w.toggleExpanded();
        } else {
          return ImpacWidgetsSvc.updateWidgetSettings(w, false);
        }
      } else {
        $scope.selectedElement = angular.copy(element);
        w.format();
        if (!w.isExpanded()) {
          return w.toggleExpanded();
        } else {
          return ImpacWidgetsSvc.updateWidgetSettings(w, false);
        }
      }
    };
    $scope.isSelected = function(element) {
      if ((element != null) && ($scope.selectedElement != null)) {
        if (((element.id != null) && $scope.selectedElement.id && element.id === $scope.selectedElement.id) || (element.name === $scope.selectedElement.name)) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    };
    $scope.toggleCollapsed = function(element) {
      if ((element != null) && (element.name != null)) {
        if (_.find($scope.unCollapsed, (function(name) {
          return element.name === name;
        }))) {
          $scope.unCollapsed = _.reject($scope.unCollapsed, function(name) {
            return name === element.name;
          });
        } else {
          $scope.unCollapsed.push(element.name);
        }
        return ImpacWidgetsSvc.updateWidgetSettings(w, false);
      }
    };
    $scope.isCollapsed = function(element) {
      if ((element != null) && (element.name != null)) {
        if (_.find($scope.unCollapsed, (function(name) {
          return element.name === name;
        }))) {
          return false;
        } else {
          return true;
        }
        if ($scope.selectedElement == null) {
          return w.width = 6;
        }
      }
    };
    $scope.drawTrigger = $q.defer();
    w.format = function() {
      var all_values_are_positive, chartData, data, dates, inputData, options, period;
      if ($scope.isDataFound && ($scope.selectedElement != null)) {
        data = angular.copy($scope.selectedElement);
        period = null;
        if ((w.metadata != null) && (w.metadata.hist_parameters != null)) {
          period = w.metadata.hist_parameters.period;
        }
        dates = _.map(w.content.dates, function(date) {
          return $filter('mnoDate')(date, period);
        });
        inputData = {
          labels: dates,
          datasets: [
            {
              title: data.name,
              values: data.cash_flows
            }
          ]
        };
        all_values_are_positive = true;
        angular.forEach(data.cash_flows, function(value) {
          return all_values_are_positive && (all_values_are_positive = value >= 0);
        });
        options = {
          scaleBeginAtZero: all_values_are_positive,
          showXLabels: true
        };
        chartData = ChartFormatterSvc.combinedBarChart(inputData, options);
        return $scope.drawTrigger.notify(chartData);
      }
    };
    unCollapsedSetting = {};
    unCollapsedSetting.initialized = false;
    unCollapsedSetting.initialize = function() {
      return unCollapsedSetting.initialized = true;
    };
    unCollapsedSetting.toMetadata = function() {
      return {
        unCollapsed: $scope.unCollapsed
      };
    };
    w.settings.push(unCollapsedSetting);
    selectedElementSetting = {};
    selectedElementSetting.initialized = false;
    selectedElementSetting.initialize = function() {
      return selectedElementSetting.initialized = true;
    };
    selectedElementSetting.toMetadata = function() {
      return {
        selectedElement: $scope.selectedElement
      };
    };
    w.settings.push(selectedElementSetting);
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetAccountsCashSummary', function() {
    return {
      restrict: 'A',
      controller: 'WidgetAccountsCashSummaryCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

(function() {
  var module;

  module = angular.module('impac.components.widgets.accounts-class-comparison', []);

  module.controller('WidgetAccountsClassComparisonCtrl', function($scope, $q, $filter, ChartFormatterSvc) {
    var settingsPromises, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    $scope.chartDeferred = $q.defer();
    $scope.paramSelectorDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise, $scope.chartDeferred.promise, $scope.paramSelectorDeferred.promise];
    w.initContext = function() {
      $scope.isDataFound = angular.isDefined(w.content) && !_.isEmpty(w.content.summary) && !_.isEmpty(w.content.companies);
      if ($scope.isDataFound) {
        $scope.classifications = _.map(w.content.summary, function(summary) {
          var klass;
          klass = summary.classification;
          return {
            label: _.capitalize(klass.toLowerCase()),
            value: klass
          };
        });
        if (!$scope.selectedClassification) {
          return $scope.selectedClassification = angular.copy(_.find($scope.classifications, {
            value: w.metadata.classification || $scope.classifications[0].value
          }));
        }
      }
    };
    $scope.getTotals = function() {
      var amount;
      return amount = _.find(w.content.summary, function(sum) {
        return sum.classification === $scope.selectedClassification.value;
      }).totals;
    };
    $scope.getAmount = function(index) {
      var amount;
      amount = $scope.getTotals()[index];
      return $filter('mnoCurrency')(amount, w.content.currency);
    };
    $scope.getAccountColor = function(anEntity) {
      return ChartFormatterSvc.getColor(_.indexOf(w.content.companies, anEntity));
    };
    $scope.drawTrigger = $q.defer();
    w.format = function() {
      var chartData, inputData, options;
      if ($scope.isDataFound) {
        inputData = {};
        inputData.labels = w.content.companies;
        inputData.values = $scope.getTotals();
        if (inputData.labels.length > 15) {
          inputData.labels.length = 15;
        }
        if (inputData.values.length > 15) {
          inputData.values.length = 15;
        }
        options = {
          showTooltips: false,
          showXLabels: false,
          barValueSpacing: Math.max(8 - w.content.companies.length, 1)
        };
        chartData = ChartFormatterSvc.barChart(inputData, options);
        return $scope.drawTrigger.notify(chartData);
      }
    };
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetAccountsClassComparison', function() {
    return {
      restrict: 'A',
      controller: 'WidgetAccountsClassComparisonCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy9hY2NvdW50cy1jbGFzcy1jb21wYXJpc29uL2FjY291bnRzLWNsYXNzLWNvbXBhcmlzb24uZGlyZWN0aXZlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUE7O0VBQUEsTUFBQSxHQUFTLE9BQU8sQ0FBQyxNQUFSLENBQWUsb0RBQWYsRUFBcUUsRUFBckU7O0VBQ1QsTUFBTSxDQUFDLFVBQVAsQ0FBa0IsbUNBQWxCLEVBQXVELFNBQUMsTUFBRCxFQUFTLEVBQVQsRUFBYSxPQUFiLEVBQXNCLGlCQUF0QjtBQUVyRCxRQUFBO0lBQUEsQ0FBQSxHQUFJLE1BQU0sQ0FBQztJQUlYLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFDckIsTUFBTSxDQUFDLGFBQVAsR0FBdUIsRUFBRSxDQUFDLEtBQUgsQ0FBQTtJQUN2QixNQUFNLENBQUMscUJBQVAsR0FBK0IsRUFBRSxDQUFDLEtBQUgsQ0FBQTtJQUUvQixnQkFBQSxHQUFtQixDQUNqQixNQUFNLENBQUMsV0FBVyxDQUFDLE9BREYsRUFFakIsTUFBTSxDQUFDLGFBQWEsQ0FBQyxPQUZKLEVBR2pCLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxPQUhaO0lBUW5CLENBQUMsQ0FBQyxXQUFGLEdBQWdCLFNBQUE7TUFDZCxNQUFNLENBQUMsV0FBUCxHQUFxQixPQUFPLENBQUMsU0FBUixDQUFrQixDQUFDLENBQUMsT0FBcEIsQ0FBQSxJQUFnQyxDQUFDLENBQUMsQ0FBQyxPQUFGLENBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFwQixDQUFqQyxJQUFpRSxDQUFDLENBQUMsQ0FBQyxPQUFGLENBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFwQjtNQUN2RixJQUFHLE1BQU0sQ0FBQyxXQUFWO1FBRUUsTUFBTSxDQUFDLGVBQVAsR0FBeUIsQ0FBQyxDQUFDLEdBQUYsQ0FBTSxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQWhCLEVBQXlCLFNBQUMsT0FBRDtBQUNoRCxjQUFBO1VBQUEsS0FBQSxHQUFRLE9BQU8sQ0FBQztpQkFDaEI7WUFDRSxLQUFBLEVBQU8sQ0FBQyxDQUFDLFVBQUYsQ0FBYSxLQUFLLENBQUMsV0FBTixDQUFBLENBQWIsQ0FEVDtZQUVFLEtBQUEsRUFBTyxLQUZUOztRQUZnRCxDQUF6QjtRQVF6QixJQUFHLENBQUMsTUFBTSxDQUFDLHNCQUFYO2lCQUNFLE1BQU0sQ0FBQyxzQkFBUCxHQUFnQyxPQUFPLENBQUMsSUFBUixDQUFhLENBQUMsQ0FBQyxJQUFGLENBQU8sTUFBTSxDQUFDLGVBQWQsRUFBK0I7WUFDMUUsS0FBQSxFQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsY0FBWCxJQUE2QixNQUFNLENBQUMsZUFBZ0IsQ0FBQSxDQUFBLENBQUUsQ0FBQyxLQURZO1dBQS9CLENBQWIsRUFEbEM7U0FWRjs7SUFGYztJQWlCaEIsTUFBTSxDQUFDLFNBQVAsR0FBbUIsU0FBQTtBQUNqQixVQUFBO2FBQUEsTUFBQSxHQUFTLENBQUMsQ0FBQyxJQUFGLENBQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFqQixFQUEwQixTQUFDLEdBQUQ7ZUFDakMsR0FBRyxDQUFDLGNBQUosS0FBc0IsTUFBTSxDQUFDLHNCQUFzQixDQUFDO01BRG5CLENBQTFCLENBRVIsQ0FBQztJQUhlO0lBS25CLE1BQU0sQ0FBQyxTQUFQLEdBQW1CLFNBQUMsS0FBRDtBQUNqQixVQUFBO01BQUEsTUFBQSxHQUFTLE1BQU0sQ0FBQyxTQUFQLENBQUEsQ0FBbUIsQ0FBQSxLQUFBO0FBQzVCLGFBQU8sT0FBQSxDQUFRLGFBQVIsQ0FBQSxDQUF1QixNQUF2QixFQUErQixDQUFDLENBQUMsT0FBTyxDQUFDLFFBQXpDO0lBRlU7SUFJbkIsTUFBTSxDQUFDLGVBQVAsR0FBeUIsU0FBQyxRQUFEO2FBQ3ZCLGlCQUFpQixDQUFDLFFBQWxCLENBQTJCLENBQUMsQ0FBQyxPQUFGLENBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFwQixFQUErQixRQUEvQixDQUEzQjtJQUR1QjtJQUt6QixNQUFNLENBQUMsV0FBUCxHQUFxQixFQUFFLENBQUMsS0FBSCxDQUFBO0lBQ3JCLENBQUMsQ0FBQyxNQUFGLEdBQVcsU0FBQTtBQUNULFVBQUE7TUFBQSxJQUFHLE1BQU0sQ0FBQyxXQUFWO1FBQ0UsU0FBQSxHQUFZO1FBRVosU0FBUyxDQUFDLE1BQVYsR0FBbUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQztRQUM3QixTQUFTLENBQUMsTUFBVixHQUFtQixNQUFNLENBQUMsU0FBUCxDQUFBO1FBS25CLElBQWdDLFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBakIsR0FBMEIsRUFBMUQ7VUFBQSxTQUFTLENBQUMsTUFBTSxDQUFDLE1BQWpCLEdBQTBCLEdBQTFCOztRQUNBLElBQWdDLFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBakIsR0FBMEIsRUFBMUQ7VUFBQSxTQUFTLENBQUMsTUFBTSxDQUFDLE1BQWpCLEdBQTBCLEdBQTFCOztRQUVBLE9BQUEsR0FBVTtVQUNSLFlBQUEsRUFBYyxLQUROO1VBRVIsV0FBQSxFQUFhLEtBRkw7VUFHUixlQUFBLEVBQWlCLElBQUksQ0FBQyxHQUFMLENBQVMsQ0FBQSxHQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLE1BQS9CLEVBQXNDLENBQXRDLENBSFQ7O1FBS1YsU0FBQSxHQUFZLGlCQUFpQixDQUFDLFFBQWxCLENBQTJCLFNBQTNCLEVBQXFDLE9BQXJDO2VBRVosTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFuQixDQUEwQixTQUExQixFQW5CRjs7SUFEUztXQXlCWCxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQXRCLENBQThCLGdCQUE5QjtFQTNFcUQsQ0FBdkQ7O0VBNkVBLE1BQU0sQ0FBQyxTQUFQLENBQWlCLCtCQUFqQixFQUFrRCxTQUFBO0FBQ2hELFdBQU87TUFDTCxRQUFBLEVBQVUsR0FETDtNQUVMLFVBQUEsRUFBWSxtQ0FGUDs7RUFEeUMsQ0FBbEQ7QUE5RUEiLCJmaWxlIjoiY29tcG9uZW50cy93aWRnZXRzL2FjY291bnRzLWNsYXNzLWNvbXBhcmlzb24vYWNjb3VudHMtY2xhc3MtY29tcGFyaXNvbi5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnaW1wYWMuY29tcG9uZW50cy53aWRnZXRzLmFjY291bnRzLWNsYXNzLWNvbXBhcmlzb24nLCBbXSlcbm1vZHVsZS5jb250cm9sbGVyKCdXaWRnZXRBY2NvdW50c0NsYXNzQ29tcGFyaXNvbkN0cmwnLCAoJHNjb3BlLCAkcSwgJGZpbHRlciwgQ2hhcnRGb3JtYXR0ZXJTdmMpIC0+XG5cbiAgdyA9ICRzY29wZS53aWRnZXRcblxuICAjIERlZmluZSBzZXR0aW5nc1xuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICRzY29wZS5vcmdEZWZlcnJlZCA9ICRxLmRlZmVyKClcbiAgJHNjb3BlLmNoYXJ0RGVmZXJyZWQgPSAkcS5kZWZlcigpXG4gICRzY29wZS5wYXJhbVNlbGVjdG9yRGVmZXJyZWQgPSAkcS5kZWZlcigpXG5cbiAgc2V0dGluZ3NQcm9taXNlcyA9IFtcbiAgICAkc2NvcGUub3JnRGVmZXJyZWQucHJvbWlzZVxuICAgICRzY29wZS5jaGFydERlZmVycmVkLnByb21pc2VcbiAgICAkc2NvcGUucGFyYW1TZWxlY3RvckRlZmVycmVkLnByb21pc2VcbiAgXVxuXG4gICMgV2lkZ2V0IHNwZWNpZmljIG1ldGhvZHNcbiAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICB3LmluaXRDb250ZXh0ID0gLT5cbiAgICAkc2NvcGUuaXNEYXRhRm91bmQgPSBhbmd1bGFyLmlzRGVmaW5lZCh3LmNvbnRlbnQpICYmICFfLmlzRW1wdHkody5jb250ZW50LnN1bW1hcnkpICYmICFfLmlzRW1wdHkody5jb250ZW50LmNvbXBhbmllcylcbiAgICBpZiAkc2NvcGUuaXNEYXRhRm91bmRcblxuICAgICAgJHNjb3BlLmNsYXNzaWZpY2F0aW9ucyA9IF8ubWFwIHcuY29udGVudC5zdW1tYXJ5LCAoc3VtbWFyeSkgLT5cbiAgICAgICAga2xhc3MgPSBzdW1tYXJ5LmNsYXNzaWZpY2F0aW9uXG4gICAgICAgIHtcbiAgICAgICAgICBsYWJlbDogXy5jYXBpdGFsaXplKGtsYXNzLnRvTG93ZXJDYXNlKCkpXG4gICAgICAgICAgdmFsdWU6IGtsYXNzXG4gICAgICAgIH1cbiAgICAgICAgIyByZXR1cm4geyBsYWJlbDogXy5jYXBpdGFsaXplKHN1bW1hcnkudG9Mb3dlckNhc2UoKSksIHZhbHVlOiBzdW1tYXJ5IH1cblxuICAgICAgaWYgISRzY29wZS5zZWxlY3RlZENsYXNzaWZpY2F0aW9uXG4gICAgICAgICRzY29wZS5zZWxlY3RlZENsYXNzaWZpY2F0aW9uID0gYW5ndWxhci5jb3B5KF8uZmluZCAkc2NvcGUuY2xhc3NpZmljYXRpb25zLCB7XG4gICAgICAgICAgdmFsdWU6IHcubWV0YWRhdGEuY2xhc3NpZmljYXRpb24gfHwgJHNjb3BlLmNsYXNzaWZpY2F0aW9uc1swXS52YWx1ZVxuICAgICAgICB9KVxuXG4gICRzY29wZS5nZXRUb3RhbHMgPSAtPlxuICAgIGFtb3VudCA9IF8uZmluZCh3LmNvbnRlbnQuc3VtbWFyeSwgKHN1bSkgLT5cbiAgICAgIHN1bS5jbGFzc2lmaWNhdGlvbiA9PSAkc2NvcGUuc2VsZWN0ZWRDbGFzc2lmaWNhdGlvbi52YWx1ZVxuICAgICkudG90YWxzXG5cbiAgJHNjb3BlLmdldEFtb3VudCA9IChpbmRleCkgLT5cbiAgICBhbW91bnQgPSAkc2NvcGUuZ2V0VG90YWxzKClbaW5kZXhdXG4gICAgcmV0dXJuICRmaWx0ZXIoJ21ub0N1cnJlbmN5JykoYW1vdW50LCB3LmNvbnRlbnQuY3VycmVuY3kpXG5cbiAgJHNjb3BlLmdldEFjY291bnRDb2xvciA9IChhbkVudGl0eSkgLT5cbiAgICBDaGFydEZvcm1hdHRlclN2Yy5nZXRDb2xvcihfLmluZGV4T2Yody5jb250ZW50LmNvbXBhbmllcywgYW5FbnRpdHkpKVxuXG4gICMgQ2hhcnQgZm9ybWF0aW5nIGZ1bmN0aW9uXG4gICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgJHNjb3BlLmRyYXdUcmlnZ2VyID0gJHEuZGVmZXIoKVxuICB3LmZvcm1hdCA9IC0+XG4gICAgaWYgJHNjb3BlLmlzRGF0YUZvdW5kXG4gICAgICBpbnB1dERhdGEgPSB7fVxuXG4gICAgICBpbnB1dERhdGEubGFiZWxzID0gdy5jb250ZW50LmNvbXBhbmllc1xuICAgICAgaW5wdXREYXRhLnZhbHVlcyA9ICRzY29wZS5nZXRUb3RhbHMoKVxuXG4gICAgICAjIGlucHV0RGF0YS5sYWJlbHMgPSBfLm1hcCB3LmNvbnRlbnQuc3VtbWFyeSwgKGRhdGEpIC0+IGRhdGEuY29tcGFueVxuICAgICAgIyBpbnB1dERhdGEudmFsdWVzID0gXy5tYXAgdy5jb250ZW50LnN1bW1hcnksIChkYXRhKSAtPiBkYXRhLnRvdGFsc1skc2NvcGUuY2xhc3NJbmRleF1cbiAgICAgICMgbWF4aW11bSBjYXBhY2l0eSBmb3IgY2hhcnRqcyBiYXItY2hhcnRcbiAgICAgIGlucHV0RGF0YS5sYWJlbHMubGVuZ3RoID0gMTUgaWYgaW5wdXREYXRhLmxhYmVscy5sZW5ndGggPiAxNVxuICAgICAgaW5wdXREYXRhLnZhbHVlcy5sZW5ndGggPSAxNSBpZiBpbnB1dERhdGEudmFsdWVzLmxlbmd0aCA+IDE1XG5cbiAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgIHNob3dUb29sdGlwczogZmFsc2UsXG4gICAgICAgIHNob3dYTGFiZWxzOiBmYWxzZSxcbiAgICAgICAgYmFyVmFsdWVTcGFjaW5nOiBNYXRoLm1heCg4LXcuY29udGVudC5jb21wYW5pZXMubGVuZ3RoLDEpXG4gICAgICB9XG4gICAgICBjaGFydERhdGEgPSBDaGFydEZvcm1hdHRlclN2Yy5iYXJDaGFydChpbnB1dERhdGEsb3B0aW9ucylcblxuICAgICAgJHNjb3BlLmRyYXdUcmlnZ2VyLm5vdGlmeShjaGFydERhdGEpXG5cblxuICAjIFdpZGdldCBpcyByZWFkeTogY2FuIHRyaWdnZXIgdGhlIFwid2FpdCBmb3Igc2V0dGluZ3MgdG8gYmUgcmVhZHlcIlxuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICRzY29wZS53aWRnZXREZWZlcnJlZC5yZXNvbHZlKHNldHRpbmdzUHJvbWlzZXMpXG4pXG5tb2R1bGUuZGlyZWN0aXZlKCd3aWRnZXRBY2NvdW50c0NsYXNzQ29tcGFyaXNvbicsIC0+XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBjb250cm9sbGVyOiAnV2lkZ2V0QWNjb3VudHNDbGFzc0NvbXBhcmlzb25DdHJsJ1xuICB9XG4pXG4iXX0=

(function() {
  var module;

  module = angular.module('impac.components.widgets.accounts-comparison', []);

  module.controller('WidgetAccountsComparisonCtrl', function($scope, $q, ChartFormatterSvc, $filter) {
    var scanAccountsForMultiOrgData, settingsPromises, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    $scope.accountsListDeferred = $q.defer();
    $scope.chartDeferred = $q.defer();
    $scope.paramsCheckboxesDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise, $scope.accountsListDeferred.promise, $scope.chartDeferred.promise, $scope.paramsCheckboxesDeferred.promise];
    w.initContext = function() {
      $scope.movedAccount = {};
      $scope.comparisonModeOptions = [
        {
          id: 'compare_accounts',
          label: 'Compare matching accounts across your companies',
          value: false,
          onChangeCallback: $scope.updateSettings
        }
      ];
      if (angular.isDefined(w.metadata.comparison_mode) && (w.metadata.organization_ids != null) && w.metadata.organization_ids.length > 1) {
        angular.merge($scope.comparisonModeOptions, w.metadata.comparison_mode);
      }
      $scope.isDataFound = (w.content != null) && !_.isEmpty(w.content.complete_list) || $scope.isComparisonMode();
      $scope.noComparableAccounts = $scope.isComparisonMode() && (w.content != null) && _.isEmpty(w.content.complete_list);
      return $scope.canSelectComparisonMode = scanAccountsForMultiOrgData();
    };
    scanAccountsForMultiOrgData = function() {
      if (w.content == null) {
        return false;
      }
      return _.uniq(_.pluck(w.content.complete_list, 'org_name')).length > 1;
    };
    $scope.isComparisonMode = function() {
      return _.result(_.find($scope.comparisonModeOptions, 'id', 'compare_accounts'), 'value') || false;
    };
    $scope.hasAccountsSelected = function() {
      return w.selectedAccounts && w.selectedAccounts.length > 0;
    };
    $scope.getAccountColor = function(anAccount) {
      if ($scope.isComparisonMode()) {
        return ChartFormatterSvc.getColor(_.indexOf(w.selectedAccounts[0].accounts, anAccount));
      } else {
        return ChartFormatterSvc.getColor(_.indexOf(w.selectedAccounts, anAccount));
      }
    };
    $scope.addAccount = function(anAccount) {
      w.moveAccountToAnotherList(anAccount, w.remainingAccounts, w.selectedAccounts);
      return w.format();
    };
    $scope.removeAccount = function(anAccount) {
      w.moveAccountToAnotherList(anAccount, w.selectedAccounts, w.remainingAccounts);
      return w.format();
    };
    $scope.formatAmount = function(anAccount) {
      return $filter('mnoCurrency')(anAccount.current_balance, anAccount.currency);
    };
    $scope.drawTrigger = $q.defer();
    w.format = function() {
      var chartData, inputData, options;
      inputData = {
        labels: [],
        values: []
      };
      _.forEach(w.selectedAccounts, function(account) {
        if ($scope.isComparisonMode()) {
          return _.forEach(account.accounts, function(groupedAccount) {
            inputData.labels.push(groupedAccount.name);
            return inputData.values.push(groupedAccount.current_balance);
          });
        } else {
          inputData.labels.push(account.name);
          return inputData.values.push(account.current_balance);
        }
      });
      while (inputData.values.length < 15) {
        inputData.labels.push("");
        inputData.values.push(null);
      }
      options = {
        showTooltips: false,
        showXLabels: false,
        barDatasetSpacing: 9
      };
      chartData = ChartFormatterSvc.barChart(inputData, options);
      return $scope.drawTrigger.notify(chartData);
    };
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetAccountsComparison', function() {
    return {
      restrict: 'A',
      controller: 'WidgetAccountsComparisonCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

(function() {
  var module;

  module = angular.module('impac.components.widgets.accounts-custom-calculation', []);

  module.controller('WidgetAccountsCustomCalculationCtrl', function($scope, $timeout, $modal, $q, $templateCache, ImpacWidgetsSvc) {
    var settingsPromises, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    $scope.accountsListDeferred = $q.defer();
    $scope.formulaDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise, $scope.accountsListDeferred.promise, $scope.formulaDeferred.promise];
    w.initContext = function() {
      $scope.movedAccount = {};
      return $scope.isDataFound = (w.content != null) && !_.isEmpty(w.content.complete_list);
    };
    $scope.addAccountToFormula = function(account) {
      if (account == null) {
        return;
      }
      if (w.selectedAccounts.length > 0) {
        w.formula += " + {" + (w.selectedAccounts.length + 1) + "}";
      } else {
        w.formula = "{1}";
      }
      return w.moveAccountToAnotherList(account, w.remainingAccounts, w.selectedAccounts, false);
    };
    $scope.removeAccountFromFormula = function(account) {
      var diffAccountIndex, diffAccountUid, i, indexPattern, newFormula, nextUids, prevUids, removePattern;
      prevUids = _.map(w.selectedAccounts, function(e) {
        return e.uid;
      });
      nextUids = _.reject(prevUids, function(e) {
        return e === account.uid;
      });
      diffAccountUid = _.first(_.difference(prevUids, nextUids));
      diffAccountIndex = _.indexOf(prevUids, diffAccountUid) + 1;
      if (diffAccountIndex === 1) {
        removePattern = "{" + diffAccountIndex + "\\}\\s*(-|\\*|\\/|\\+)*\\s*";
      } else {
        removePattern = "\\s*(-|\\*|\\/|\\+)*\\s*\\{" + diffAccountIndex + "\\}";
      }
      newFormula = angular.copy(w.formula).replace(new RegExp(removePattern, 'g'), '');
      i = diffAccountIndex + 1;
      while (i <= prevUids.length) {
        indexPattern = "\\{" + i + "\\}";
        newFormula = newFormula.replace(new RegExp(indexPattern, 'g'), "{" + (i - 1) + "}");
        i++;
      }
      w.formula = angular.copy(newFormula);
      return w.moveAccountToAnotherList(account, w.selectedAccounts, w.remainingAccounts, false);
    };
    $scope.formulaModal = $scope.$new();
    $scope.formulaModal.config = {
      backdrop: 'static',
      template: $templateCache.get('widgets/accounts-custom-calculation/formula.modal.html'),
      size: 'lg',
      scope: $scope.formulaModal,
      keyboard: false
    };
    $scope.formulaModal.open = function() {
      var self;
      self = $scope.formulaModal;
      self.modalOrgDeferred = $q.defer();
      _.remove(w.settings, (function(set) {
        return set.key === "organizations";
      }));
      self.instance = $modal.open(self.config);
      return self.modalOrgDeferred.promise.then(function(success) {
        return $scope.initSettings();
      });
    };
    $scope.$watch((function() {
      return w.selectedOrganizations;
    }), function(result) {
      if (!_.isEmpty(result)) {
        return ImpacWidgetsSvc.updateWidgetSettings(w);
      }
    }, true);
    $scope.formulaModal.cancel = function() {
      $scope.initSettings();
      return $scope.formulaModal.close();
    };
    $scope.formulaModal.proceed = function() {
      ImpacWidgetsSvc.updateWidgetSettings(w, false);
      return $scope.formulaModal.close();
    };
    $scope.formulaModal.close = function() {
      return $scope.formulaModal.instance.close();
    };
    $scope.$watch((function() {
      return w.isEditMode;
    }), function(result, prev) {
      if (result && !prev) {
        return $scope.formulaModal.open();
      }
    });
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetAccountsCustomCalculation', function() {
    return {
      restrict: 'A',
      controller: 'WidgetAccountsCustomCalculationCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

(function() {
  var module;

  module = angular.module('impac.components.widgets.accounts-detailed-classifications', []);

  module.controller('WidgetAccountsDetailedClassificationsCtrl', function($scope, $q, ImpacWidgetsSvc) {
    var settingsPromises, unCollapsedSetting, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise];
    w.initContext = function() {
      $scope.isDataFound = angular.isDefined(w.content) && !_.isEmpty(w.content.companies);
      if ($scope.isDataFound) {
        $scope.unCollapsed = w.metadata.unCollapsed || [];
        if (w.content.companies.length === 1) {
          $scope.multiEntity = false;
          return $scope.dataSource = _.map(w.content.companies[0].classifications, function(klass) {
            return {
              label: klass.name,
              value: klass.total,
              currency: klass.currency,
              entries: _.map(klass.accounts, function(acc) {
                return {
                  label: acc.name,
                  value: acc.balance,
                  currency: acc.currency
                };
              })
            };
          });
        } else {
          $scope.multiEntity = true;
          return $scope.dataSource = _.map(w.content.companies, function(company) {
            return {
              label: company.name,
              entries: _.map(company.classifications, function(klass) {
                return {
                  label: klass.name,
                  value: klass.total,
                  currency: klass.currency
                };
              })
            };
          });
        }
      }
    };
    $scope.toggleCollapsed = function(groupName) {
      if (groupName != null) {
        if (_.find($scope.unCollapsed, (function(name) {
          return groupName === name;
        }))) {
          $scope.unCollapsed = _.reject($scope.unCollapsed, function(name) {
            return name === groupName;
          });
        } else {
          $scope.unCollapsed.push(groupName);
        }
        return ImpacWidgetsSvc.updateWidgetSettings(w, false);
      }
    };
    $scope.isCollapsed = function(groupName) {
      if (groupName != null) {
        if (_.find($scope.unCollapsed, (function(name) {
          return groupName === name;
        }))) {
          return false;
        } else {
          return true;
        }
      }
    };
    unCollapsedSetting = {};
    unCollapsedSetting.initialized = false;
    unCollapsedSetting.initialize = function() {
      return unCollapsedSetting.initialized = true;
    };
    unCollapsedSetting.toMetadata = function() {
      return {
        unCollapsed: $scope.unCollapsed
      };
    };
    w.settings.push(unCollapsedSetting);
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetAccountsDetailedClassifications', function() {
    return {
      restrict: 'A',
      controller: 'WidgetAccountsDetailedClassificationsCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy9hY2NvdW50cy1kZXRhaWxlZC1jbGFzc2lmaWNhdGlvbnMvYWNjb3VudHMtZGV0YWlsZWQtY2xhc3NpZmljYXRpb25zLmRpcmVjdGl2ZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBOztFQUFBLE1BQUEsR0FBUyxPQUFPLENBQUMsTUFBUixDQUFlLDREQUFmLEVBQTZFLEVBQTdFOztFQUNULE1BQU0sQ0FBQyxVQUFQLENBQWtCLDJDQUFsQixFQUErRCxTQUFDLE1BQUQsRUFBUyxFQUFULEVBQWEsZUFBYjtBQUU3RCxRQUFBO0lBQUEsQ0FBQSxHQUFJLE1BQU0sQ0FBQztJQUlYLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFHckIsZ0JBQUEsR0FBbUIsQ0FDakIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQURGO0lBT25CLENBQUMsQ0FBQyxXQUFGLEdBQWdCLFNBQUE7TUFDZCxNQUFNLENBQUMsV0FBUCxHQUFxQixPQUFPLENBQUMsU0FBUixDQUFrQixDQUFDLENBQUMsT0FBcEIsQ0FBQSxJQUFnQyxDQUFDLENBQUMsQ0FBQyxPQUFGLENBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFwQjtNQUV0RCxJQUFHLE1BQU0sQ0FBQyxXQUFWO1FBQ0UsTUFBTSxDQUFDLFdBQVAsR0FBcUIsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxXQUFYLElBQTBCO1FBRS9DLElBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsTUFBcEIsS0FBOEIsQ0FBakM7VUFDRSxNQUFNLENBQUMsV0FBUCxHQUFxQjtpQkFDckIsTUFBTSxDQUFDLFVBQVAsR0FBb0IsQ0FBQyxDQUFDLEdBQUYsQ0FBTSxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVUsQ0FBQSxDQUFBLENBQUUsQ0FBQyxlQUE3QixFQUE4QyxTQUFDLEtBQUQ7bUJBQ2hFO2NBQ0UsS0FBQSxFQUFPLEtBQUssQ0FBQyxJQURmO2NBRUUsS0FBQSxFQUFPLEtBQUssQ0FBQyxLQUZmO2NBR0UsUUFBQSxFQUFVLEtBQUssQ0FBQyxRQUhsQjtjQUlFLE9BQUEsRUFBUyxDQUFDLENBQUMsR0FBRixDQUFNLEtBQUssQ0FBQyxRQUFaLEVBQXNCLFNBQUMsR0FBRDt1QkFDN0I7a0JBQ0UsS0FBQSxFQUFPLEdBQUcsQ0FBQyxJQURiO2tCQUVFLEtBQUEsRUFBTyxHQUFHLENBQUMsT0FGYjtrQkFHRSxRQUFBLEVBQVUsR0FBRyxDQUFDLFFBSGhCOztjQUQ2QixDQUF0QixDQUpYOztVQURnRSxDQUE5QyxFQUZ0QjtTQUFBLE1BQUE7VUFnQkUsTUFBTSxDQUFDLFdBQVAsR0FBcUI7aUJBQ3JCLE1BQU0sQ0FBQyxVQUFQLEdBQW9CLENBQUMsQ0FBQyxHQUFGLENBQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFoQixFQUEyQixTQUFDLE9BQUQ7bUJBQzdDO2NBQ0UsS0FBQSxFQUFPLE9BQU8sQ0FBQyxJQURqQjtjQUVFLE9BQUEsRUFBUyxDQUFDLENBQUMsR0FBRixDQUFNLE9BQU8sQ0FBQyxlQUFkLEVBQStCLFNBQUMsS0FBRDt1QkFDdEM7a0JBQ0UsS0FBQSxFQUFPLEtBQUssQ0FBQyxJQURmO2tCQUVFLEtBQUEsRUFBTyxLQUFLLENBQUMsS0FGZjtrQkFHRSxRQUFBLEVBQVUsS0FBSyxDQUFDLFFBSGxCOztjQURzQyxDQUEvQixDQUZYOztVQUQ2QyxDQUEzQixFQWpCdEI7U0FIRjs7SUFIYztJQWtDaEIsTUFBTSxDQUFDLGVBQVAsR0FBeUIsU0FBQyxTQUFEO01BQ3ZCLElBQUcsaUJBQUg7UUFDRSxJQUFHLENBQUMsQ0FBQyxJQUFGLENBQU8sTUFBTSxDQUFDLFdBQWQsRUFBMkIsQ0FBQyxTQUFDLElBQUQ7aUJBQVUsU0FBQSxLQUFhO1FBQXZCLENBQUQsQ0FBM0IsQ0FBSDtVQUNFLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLENBQUMsQ0FBQyxNQUFGLENBQVMsTUFBTSxDQUFDLFdBQWhCLEVBQTZCLFNBQUMsSUFBRDttQkFDaEQsSUFBQSxLQUFRO1VBRHdDLENBQTdCLEVBRHZCO1NBQUEsTUFBQTtVQUtFLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBbkIsQ0FBd0IsU0FBeEIsRUFMRjs7ZUFNQSxlQUFlLENBQUMsb0JBQWhCLENBQXFDLENBQXJDLEVBQXVDLEtBQXZDLEVBUEY7O0lBRHVCO0lBVXpCLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLFNBQUMsU0FBRDtNQUNuQixJQUFHLGlCQUFIO1FBQ0UsSUFBRyxDQUFDLENBQUMsSUFBRixDQUFPLE1BQU0sQ0FBQyxXQUFkLEVBQTJCLENBQUMsU0FBQyxJQUFEO2lCQUFVLFNBQUEsS0FBYTtRQUF2QixDQUFELENBQTNCLENBQUg7QUFDRSxpQkFBTyxNQURUO1NBQUEsTUFBQTtBQUdFLGlCQUFPLEtBSFQ7U0FERjs7SUFEbUI7SUFVckIsa0JBQUEsR0FBcUI7SUFDckIsa0JBQWtCLENBQUMsV0FBbkIsR0FBaUM7SUFFakMsa0JBQWtCLENBQUMsVUFBbkIsR0FBZ0MsU0FBQTthQUM5QixrQkFBa0IsQ0FBQyxXQUFuQixHQUFpQztJQURIO0lBR2hDLGtCQUFrQixDQUFDLFVBQW5CLEdBQWdDLFNBQUE7YUFDOUI7UUFBQyxXQUFBLEVBQWEsTUFBTSxDQUFDLFdBQXJCOztJQUQ4QjtJQUdoQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQVgsQ0FBZ0Isa0JBQWhCO1dBS0EsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUF0QixDQUE4QixnQkFBOUI7RUFwRjZELENBQS9EOztFQXNGQSxNQUFNLENBQUMsU0FBUCxDQUFpQix1Q0FBakIsRUFBMEQsU0FBQTtBQUN4RCxXQUFPO01BQ0wsUUFBQSxFQUFVLEdBREw7TUFFTCxVQUFBLEVBQVksMkNBRlA7O0VBRGlELENBQTFEO0FBdkZBIiwiZmlsZSI6ImNvbXBvbmVudHMvd2lkZ2V0cy9hY2NvdW50cy1kZXRhaWxlZC1jbGFzc2lmaWNhdGlvbnMvYWNjb3VudHMtZGV0YWlsZWQtY2xhc3NpZmljYXRpb25zLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdpbXBhYy5jb21wb25lbnRzLndpZGdldHMuYWNjb3VudHMtZGV0YWlsZWQtY2xhc3NpZmljYXRpb25zJywgW10pXG5tb2R1bGUuY29udHJvbGxlcignV2lkZ2V0QWNjb3VudHNEZXRhaWxlZENsYXNzaWZpY2F0aW9uc0N0cmwnLCAoJHNjb3BlLCAkcSwgSW1wYWNXaWRnZXRzU3ZjKSAtPlxuXG4gIHcgPSAkc2NvcGUud2lkZ2V0XG5cbiAgIyBEZWZpbmUgc2V0dGluZ3NcbiAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAkc2NvcGUub3JnRGVmZXJyZWQgPSAkcS5kZWZlcigpXG4gICMgJHNjb3BlLnBhcmFtU2VsZWN0ZXJEZWZlcnJlZCA9ICRxLmRlZmVyKClcblxuICBzZXR0aW5nc1Byb21pc2VzID0gW1xuICAgICRzY29wZS5vcmdEZWZlcnJlZC5wcm9taXNlXG4gICAgIyAkc2NvcGUucGFyYW1TZWxlY3RlckRlZmVycmVkLnByb21pc2VcbiAgXVxuXG4gICMgV2lkZ2V0IHNwZWNpZmljIG1ldGhvZHNcbiAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICB3LmluaXRDb250ZXh0ID0gLT5cbiAgICAkc2NvcGUuaXNEYXRhRm91bmQgPSBhbmd1bGFyLmlzRGVmaW5lZCh3LmNvbnRlbnQpICYmICFfLmlzRW1wdHkody5jb250ZW50LmNvbXBhbmllcylcblxuICAgIGlmICRzY29wZS5pc0RhdGFGb3VuZFxuICAgICAgJHNjb3BlLnVuQ29sbGFwc2VkID0gdy5tZXRhZGF0YS51bkNvbGxhcHNlZCB8fCBbXVxuXG4gICAgICBpZiB3LmNvbnRlbnQuY29tcGFuaWVzLmxlbmd0aCA9PSAxXG4gICAgICAgICRzY29wZS5tdWx0aUVudGl0eSA9IGZhbHNlXG4gICAgICAgICRzY29wZS5kYXRhU291cmNlID0gXy5tYXAgdy5jb250ZW50LmNvbXBhbmllc1swXS5jbGFzc2lmaWNhdGlvbnMsIChrbGFzcykgLT5cbiAgICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDoga2xhc3MubmFtZVxuICAgICAgICAgICAgdmFsdWU6IGtsYXNzLnRvdGFsXG4gICAgICAgICAgICBjdXJyZW5jeToga2xhc3MuY3VycmVuY3lcbiAgICAgICAgICAgIGVudHJpZXM6IF8ubWFwIGtsYXNzLmFjY291bnRzLCAoYWNjKSAtPlxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6IGFjYy5uYW1lXG4gICAgICAgICAgICAgICAgdmFsdWU6IGFjYy5iYWxhbmNlXG4gICAgICAgICAgICAgICAgY3VycmVuY3k6IGFjYy5jdXJyZW5jeVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICBlbHNlXG4gICAgICAgICRzY29wZS5tdWx0aUVudGl0eSA9IHRydWVcbiAgICAgICAgJHNjb3BlLmRhdGFTb3VyY2UgPSBfLm1hcCB3LmNvbnRlbnQuY29tcGFuaWVzLCAoY29tcGFueSkgLT5cbiAgICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogY29tcGFueS5uYW1lXG4gICAgICAgICAgICBlbnRyaWVzOiBfLm1hcCBjb21wYW55LmNsYXNzaWZpY2F0aW9ucywgKGtsYXNzKSAtPlxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6IGtsYXNzLm5hbWVcbiAgICAgICAgICAgICAgICB2YWx1ZToga2xhc3MudG90YWxcbiAgICAgICAgICAgICAgICBjdXJyZW5jeToga2xhc3MuY3VycmVuY3lcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAkc2NvcGUudG9nZ2xlQ29sbGFwc2VkID0gKGdyb3VwTmFtZSkgLT5cbiAgICBpZiBncm91cE5hbWU/XG4gICAgICBpZiBfLmZpbmQoJHNjb3BlLnVuQ29sbGFwc2VkLCAoKG5hbWUpIC0+IGdyb3VwTmFtZSA9PSBuYW1lKSlcbiAgICAgICAgJHNjb3BlLnVuQ29sbGFwc2VkID0gXy5yZWplY3QoJHNjb3BlLnVuQ29sbGFwc2VkLCAobmFtZSkgLT5cbiAgICAgICAgICBuYW1lID09IGdyb3VwTmFtZVxuICAgICAgICApXG4gICAgICBlbHNlXG4gICAgICAgICRzY29wZS51bkNvbGxhcHNlZC5wdXNoKGdyb3VwTmFtZSlcbiAgICAgIEltcGFjV2lkZ2V0c1N2Yy51cGRhdGVXaWRnZXRTZXR0aW5ncyh3LGZhbHNlKVxuXG4gICRzY29wZS5pc0NvbGxhcHNlZCA9IChncm91cE5hbWUpIC0+XG4gICAgaWYgZ3JvdXBOYW1lP1xuICAgICAgaWYgXy5maW5kKCRzY29wZS51bkNvbGxhcHNlZCwgKChuYW1lKSAtPiBncm91cE5hbWUgPT0gbmFtZSkpXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgZWxzZVxuICAgICAgICByZXR1cm4gdHJ1ZVxuXG4gICMgTWluaS1zZXR0aW5ncyBvYmplY3RzXG4gICMgaGFuZGxlcyB0aGUgc2F2aW5nIG9mIGNvbGxhcHNlZCAvIHVuY29sbGFwc2VkIGxpc3QgZ3JvdXBzLlxuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHVuQ29sbGFwc2VkU2V0dGluZyA9IHt9XG4gIHVuQ29sbGFwc2VkU2V0dGluZy5pbml0aWFsaXplZCA9IGZhbHNlXG5cbiAgdW5Db2xsYXBzZWRTZXR0aW5nLmluaXRpYWxpemUgPSAtPlxuICAgIHVuQ29sbGFwc2VkU2V0dGluZy5pbml0aWFsaXplZCA9IHRydWVcblxuICB1bkNvbGxhcHNlZFNldHRpbmcudG9NZXRhZGF0YSA9IC0+XG4gICAge3VuQ29sbGFwc2VkOiAkc2NvcGUudW5Db2xsYXBzZWR9XG5cbiAgdy5zZXR0aW5ncy5wdXNoKHVuQ29sbGFwc2VkU2V0dGluZylcblxuXG4gICMgV2lkZ2V0IGlzIHJlYWR5OiBjYW4gdHJpZ2dlciB0aGUgXCJ3YWl0IGZvciBzZXR0aW5ncyB0byBiZSByZWFkeVwiXG4gICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgJHNjb3BlLndpZGdldERlZmVycmVkLnJlc29sdmUoc2V0dGluZ3NQcm9taXNlcylcbilcbm1vZHVsZS5kaXJlY3RpdmUoJ3dpZGdldEFjY291bnRzRGV0YWlsZWRDbGFzc2lmaWNhdGlvbnMnLCAtPlxuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgY29udHJvbGxlcjogJ1dpZGdldEFjY291bnRzRGV0YWlsZWRDbGFzc2lmaWNhdGlvbnNDdHJsJ1xuICB9XG4pXG4iXX0=

(function() {
  var module;

  module = angular.module('impac.components.widgets.accounts-expense-weight', []);

  module.controller('WidgetAccountsExpenseWeightCtrl', function($scope, $q, ChartFormatterSvc) {
    var settingsPromises, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    $scope.accountBackDeferred = $q.defer();
    $scope.accountFrontDeferred = $q.defer();
    $scope.chartDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise, $scope.accountBackDeferred, $scope.accountFrontDeferred, $scope.chartDeferred.promise];
    w.initContext = function() {
      return $scope.isDataFound = (w.content != null) && !_.isEmpty(w.content.account_list);
    };
    $scope.getName = function() {
      if (w.selectedAccount != null) {
        return w.selectedAccount.name;
      }
    };
    $scope.getComparator = function() {
      switch (w.metadata.comparator) {
        case 'turnover':
          return "turnover";
        default:
          return "total expenses";
      }
    };
    $scope.drawTrigger = $q.defer();
    w.format = function() {
      var chartData, companies, inputData, options, ratios;
      if ($scope.isDataFound && (w.content.summary != null)) {
        companies = _.map(w.content.summary, function(s) {
          return s.company;
        });
        ratios = _.map(w.content.summary, function(s) {
          return s.ratio;
        });
        if (companies.length === 1) {
          companies.push(companies[0]);
          ratios.push(ratios[0]);
        }
        inputData = {
          labels: companies,
          values: ratios
        };
        options = {
          scales: {
            yAxes: [
              {
                ticks: {
                  suggestedMin: 0,
                  suggestedMax: 100,
                  maxTicksLimit: 5
                }
              }
            ]
          },
          showXLabels: false,
          pointDot: false,
          currency: '%'
        };
        chartData = ChartFormatterSvc.lineChart([inputData], options);
        return $scope.drawTrigger.notify(chartData);
      }
    };
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetAccountsExpenseWeight', function() {
    return {
      restrict: 'A',
      controller: 'WidgetAccountsExpenseWeightCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy9hY2NvdW50cy1leHBlbnNlLXdlaWdodC9hY2NvdW50cy1leHBlbnNlLXdlaWdodC5kaXJlY3RpdmUuanMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQTs7RUFBQSxNQUFBLEdBQVMsT0FBTyxDQUFDLE1BQVIsQ0FBZSxrREFBZixFQUFrRSxFQUFsRTs7RUFFVCxNQUFNLENBQUMsVUFBUCxDQUFrQixpQ0FBbEIsRUFBcUQsU0FBQyxNQUFELEVBQVMsRUFBVCxFQUFhLGlCQUFiO0FBRW5ELFFBQUE7SUFBQSxDQUFBLEdBQUksTUFBTSxDQUFDO0lBSVgsTUFBTSxDQUFDLFdBQVAsR0FBcUIsRUFBRSxDQUFDLEtBQUgsQ0FBQTtJQUNyQixNQUFNLENBQUMsbUJBQVAsR0FBNkIsRUFBRSxDQUFDLEtBQUgsQ0FBQTtJQUM3QixNQUFNLENBQUMsb0JBQVAsR0FBOEIsRUFBRSxDQUFDLEtBQUgsQ0FBQTtJQUM5QixNQUFNLENBQUMsYUFBUCxHQUF1QixFQUFFLENBQUMsS0FBSCxDQUFBO0lBRXZCLGdCQUFBLEdBQW1CLENBQ2pCLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FERixFQUVqQixNQUFNLENBQUMsbUJBRlUsRUFHakIsTUFBTSxDQUFDLG9CQUhVLEVBSWpCLE1BQU0sQ0FBQyxhQUFhLENBQUMsT0FKSjtJQVVuQixDQUFDLENBQUMsV0FBRixHQUFnQixTQUFBO2FBQ2QsTUFBTSxDQUFDLFdBQVAsR0FBcUIsbUJBQUEsSUFBYyxDQUFDLENBQUMsQ0FBQyxPQUFGLENBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxZQUFwQjtJQUR0QjtJQUdoQixNQUFNLENBQUMsT0FBUCxHQUFpQixTQUFBO01BQ2YsSUFBMEIseUJBQTFCO2VBQUEsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxLQUFsQjs7SUFEZTtJQUdqQixNQUFNLENBQUMsYUFBUCxHQUF1QixTQUFBO0FBQ3JCLGNBQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxVQUFsQjtBQUFBLGFBQ08sVUFEUDtBQUVJLGlCQUFPO0FBRlg7QUFJSSxpQkFBTztBQUpYO0lBRHFCO0lBVXZCLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFDckIsQ0FBQyxDQUFDLE1BQUYsR0FBVyxTQUFBO0FBQ1QsVUFBQTtNQUFBLElBQUcsTUFBTSxDQUFDLFdBQVAsSUFBc0IsMkJBQXpCO1FBQ0UsU0FBQSxHQUFZLENBQUMsQ0FBQyxHQUFGLENBQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFoQixFQUF5QixTQUFDLENBQUQ7aUJBQU8sQ0FBQyxDQUFDO1FBQVQsQ0FBekI7UUFDWixNQUFBLEdBQVMsQ0FBQyxDQUFDLEdBQUYsQ0FBTSxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQWhCLEVBQXlCLFNBQUMsQ0FBRDtpQkFBTyxDQUFDLENBQUM7UUFBVCxDQUF6QjtRQUVULElBQUcsU0FBUyxDQUFDLE1BQVYsS0FBb0IsQ0FBdkI7VUFDRSxTQUFTLENBQUMsSUFBVixDQUFlLFNBQVUsQ0FBQSxDQUFBLENBQXpCO1VBQ0EsTUFBTSxDQUFDLElBQVAsQ0FBWSxNQUFPLENBQUEsQ0FBQSxDQUFuQixFQUZGOztRQUlBLFNBQUEsR0FBWTtVQUFDLE1BQUEsRUFBUSxTQUFUO1VBQW9CLE1BQUEsRUFBUSxNQUE1Qjs7UUFHWixPQUFBLEdBQVU7VUFLUixNQUFBLEVBQVE7WUFBRSxLQUFBLEVBQU87Y0FDZjtnQkFBRSxLQUFBLEVBQU87a0JBQ1AsWUFBQSxFQUFjLENBRFA7a0JBRVAsWUFBQSxFQUFjLEdBRlA7a0JBR1AsYUFBQSxFQUFlLENBSFI7aUJBQVQ7ZUFEZTthQUFUO1dBTEE7VUFhUixXQUFBLEVBQWEsS0FiTDtVQWNSLFFBQUEsRUFBVSxLQWRGO1VBZVIsUUFBQSxFQUFVLEdBZkY7O1FBaUJWLFNBQUEsR0FBWSxpQkFBaUIsQ0FBQyxTQUFsQixDQUE0QixDQUFDLFNBQUQsQ0FBNUIsRUFBd0MsT0FBeEM7ZUFHWixNQUFNLENBQUMsV0FBVyxDQUFDLE1BQW5CLENBQTBCLFNBQTFCLEVBL0JGOztJQURTO1dBcUNYLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBdEIsQ0FBOEIsZ0JBQTlCO0VBM0VtRCxDQUFyRDs7RUE4RUEsTUFBTSxDQUFDLFNBQVAsQ0FBaUIsNkJBQWpCLEVBQWdELFNBQUE7QUFDOUMsV0FBTztNQUNMLFFBQUEsRUFBVSxHQURMO01BRUwsVUFBQSxFQUFZLGlDQUZQOztFQUR1QyxDQUFoRDtBQWhGQSIsImZpbGUiOiJjb21wb25lbnRzL3dpZGdldHMvYWNjb3VudHMtZXhwZW5zZS13ZWlnaHQvYWNjb3VudHMtZXhwZW5zZS13ZWlnaHQuZGlyZWN0aXZlLmpzLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2ltcGFjLmNvbXBvbmVudHMud2lkZ2V0cy5hY2NvdW50cy1leHBlbnNlLXdlaWdodCcsW10pXG5cbm1vZHVsZS5jb250cm9sbGVyKCdXaWRnZXRBY2NvdW50c0V4cGVuc2VXZWlnaHRDdHJsJywgKCRzY29wZSwgJHEsIENoYXJ0Rm9ybWF0dGVyU3ZjKSAtPlxuXG4gIHcgPSAkc2NvcGUud2lkZ2V0XG5cbiAgIyBEZWZpbmUgc2V0dGluZ3NcbiAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAkc2NvcGUub3JnRGVmZXJyZWQgPSAkcS5kZWZlcigpXG4gICRzY29wZS5hY2NvdW50QmFja0RlZmVycmVkID0gJHEuZGVmZXIoKVxuICAkc2NvcGUuYWNjb3VudEZyb250RGVmZXJyZWQgPSAkcS5kZWZlcigpXG4gICRzY29wZS5jaGFydERlZmVycmVkID0gJHEuZGVmZXIoKVxuXG4gIHNldHRpbmdzUHJvbWlzZXMgPSBbXG4gICAgJHNjb3BlLm9yZ0RlZmVycmVkLnByb21pc2VcbiAgICAkc2NvcGUuYWNjb3VudEJhY2tEZWZlcnJlZFxuICAgICRzY29wZS5hY2NvdW50RnJvbnREZWZlcnJlZFxuICAgICRzY29wZS5jaGFydERlZmVycmVkLnByb21pc2VcbiAgXVxuXG5cbiAgIyBXaWRnZXQgc3BlY2lmaWMgbWV0aG9kc1xuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHcuaW5pdENvbnRleHQgPSAtPlxuICAgICRzY29wZS5pc0RhdGFGb3VuZCA9IHcuY29udGVudD8gJiYgIV8uaXNFbXB0eSh3LmNvbnRlbnQuYWNjb3VudF9saXN0KVxuXG4gICRzY29wZS5nZXROYW1lID0gLT5cbiAgICB3LnNlbGVjdGVkQWNjb3VudC5uYW1lIGlmIHcuc2VsZWN0ZWRBY2NvdW50P1xuXG4gICRzY29wZS5nZXRDb21wYXJhdG9yID0gLT5cbiAgICBzd2l0Y2ggdy5tZXRhZGF0YS5jb21wYXJhdG9yXG4gICAgICB3aGVuICd0dXJub3ZlcidcbiAgICAgICAgcmV0dXJuIFwidHVybm92ZXJcIlxuICAgICAgZWxzZVxuICAgICAgICByZXR1cm4gXCJ0b3RhbCBleHBlbnNlc1wiXG5cblxuICAjIENoYXJ0IGZvcm1hdGluZyBmdW5jdGlvblxuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICRzY29wZS5kcmF3VHJpZ2dlciA9ICRxLmRlZmVyKClcbiAgdy5mb3JtYXQgPSAtPlxuICAgIGlmICRzY29wZS5pc0RhdGFGb3VuZCAmJiB3LmNvbnRlbnQuc3VtbWFyeT9cbiAgICAgIGNvbXBhbmllcyA9IF8ubWFwIHcuY29udGVudC5zdW1tYXJ5LCAocykgLT4gcy5jb21wYW55XG4gICAgICByYXRpb3MgPSBfLm1hcCB3LmNvbnRlbnQuc3VtbWFyeSwgKHMpIC0+IHMucmF0aW9cbiAgICAgICMgRGlzcGxheSBhIGxpbmUgaW5zdGVhZCBvZiBhIHBvaW50IHdoZW4gb25seSAxIGNvbXBhbnlcbiAgICAgIGlmIGNvbXBhbmllcy5sZW5ndGggPT0gMVxuICAgICAgICBjb21wYW5pZXMucHVzaChjb21wYW5pZXNbMF0pXG4gICAgICAgIHJhdGlvcy5wdXNoKHJhdGlvc1swXSlcblxuICAgICAgaW5wdXREYXRhID0ge2xhYmVsczogY29tcGFuaWVzLCB2YWx1ZXM6IHJhdGlvc31cbiAgICAgIFxuXG4gICAgICBvcHRpb25zID0ge1xuICAgICAgICAjIHNjYWxlT3ZlcnJpZGU6IHRydWUsXG4gICAgICAgICMgc2NhbGVTdGVwczogNCxcbiAgICAgICAgIyBzY2FsZVN0ZXBXaWR0aDogMjUsXG4gICAgICAgICMgc2NhbGVTdGFydFZhbHVlOiAwLFxuICAgICAgICBzY2FsZXM6IHsgeUF4ZXM6IFtcbiAgICAgICAgICB7IHRpY2tzOiB7XG4gICAgICAgICAgICBzdWdnZXN0ZWRNaW46IDBcbiAgICAgICAgICAgIHN1Z2dlc3RlZE1heDogMTAwXG4gICAgICAgICAgICBtYXhUaWNrc0xpbWl0OiA1XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICBdfVxuICAgICAgICBzaG93WExhYmVsczogZmFsc2VcbiAgICAgICAgcG9pbnREb3Q6IGZhbHNlXG4gICAgICAgIGN1cnJlbmN5OiAnJSdcbiAgICAgIH1cbiAgICAgIGNoYXJ0RGF0YSA9IENoYXJ0Rm9ybWF0dGVyU3ZjLmxpbmVDaGFydChbaW5wdXREYXRhXSxvcHRpb25zKVxuICAgICAgXG4gICAgICAjIGNhbGxzIGNoYXJ0LmRyYXcoKVxuICAgICAgJHNjb3BlLmRyYXdUcmlnZ2VyLm5vdGlmeShjaGFydERhdGEpXG5cblxuICAjIFdpZGdldCBpcyByZWFkeTogY2FuIHRyaWdnZXIgdGhlIFwid2FpdCBmb3Igc2V0dGluZ3MgdG8gYmUgcmVhZHlcIlxuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICRzY29wZS53aWRnZXREZWZlcnJlZC5yZXNvbHZlKHNldHRpbmdzUHJvbWlzZXMpXG4pXG5cbm1vZHVsZS5kaXJlY3RpdmUoJ3dpZGdldEFjY291bnRzRXhwZW5zZVdlaWdodCcsIC0+XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBjb250cm9sbGVyOiAnV2lkZ2V0QWNjb3VudHNFeHBlbnNlV2VpZ2h0Q3RybCdcbiAgfVxuKSJdfQ==

(function() {
  var module;

  module = angular.module('impac.components.widgets.accounts-expenses-revenue', []);

  module.controller('WidgetAccountsExpensesRevenueCtrl', function($scope, $q, ChartFormatterSvc, $filter) {
    var settingsPromises, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    $scope.timeRangeDeferred = $q.defer();
    $scope.histModeDeferred = $q.defer();
    $scope.chartDeferred = $q.defer();
    $scope.paramsCheckboxesDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise, $scope.timeRangeDeferred.promise, $scope.histModeDeferred.promise, $scope.chartDeferred.promise, $scope.paramsCheckboxesDeferred.promise];
    w.initContext = function() {
      $scope.isDataFound = (w.content != null) && (w.content.values != null);
      $scope.displayOptions = [
        {
          id: 'show_net_profit',
          label: 'Show net profit',
          value: false,
          onChangeCallback: $scope.toggleDisplayNetProfit
        }
      ];
      if (angular.isDefined((w.metadata != null) && (w.metadata.display != null))) {
        angular.merge($scope.displayOptions, w.metadata.display);
      }
      return $scope.isNetProfitDisplayed = !!$scope.displayOptions[0].value;
    };
    $scope.getCurrentRevenue = function() {
      if ($scope.isDataFound) {
        return _.last(w.content.values.revenue);
      }
    };
    $scope.getCurrentExpenses = function() {
      if ($scope.isDataFound) {
        return _.last(w.content.values.expenses);
      }
    };
    $scope.getCurrency = function() {
      if ($scope.isDataFound) {
        return w.content.currency;
      }
    };
    $scope.toggleDisplayNetProfit = function() {
      $scope.isNetProfitDisplayed = !!$scope.displayOptions[0].value;
      $scope.updateSettings(false);
      return w.format();
    };
    $scope.drawTrigger = $q.defer();
    w.format = function() {
      var all_values_are_positive, chartData, dates, lineData, lineOptions, period, pieData, pieOptions;
      if ($scope.isDataFound) {
        if (w.isHistoryMode) {
          period = null;
          if ((w.metadata != null) && (w.metadata.hist_parameters != null)) {
            period = w.metadata.hist_parameters.period;
          }
          dates = _.map(w.content.dates, function(date) {
            return $filter('mnoDate')(date, period);
          });
          if ($scope.isNetProfitDisplayed) {
            lineData = [
              {
                title: "Net Profit (" + ($scope.getCurrency()) + ")",
                labels: dates,
                values: w.content.values.net_profit
              }
            ];
            all_values_are_positive = true;
            angular.forEach(w.content.values.net_profit, function(value) {
              return all_values_are_positive && (all_values_are_positive = value >= 0);
            });
          } else {
            lineData = [
              {
                title: "Expenses (" + ($scope.getCurrency()) + ")",
                labels: dates,
                values: w.content.values.expenses
              }, {
                title: "Revenue (" + ($scope.getCurrency()) + ")",
                labels: dates,
                values: w.content.values.revenue
              }
            ];
            all_values_are_positive = true;
            angular.forEach(w.content.values.expenses, function(value) {
              return all_values_are_positive && (all_values_are_positive = value >= 0);
            });
            angular.forEach(w.content.values.revenue, function(value) {
              return all_values_are_positive && (all_values_are_positive = value >= 0);
            });
          }
          lineOptions = {
            scaleBeginAtZero: all_values_are_positive,
            showXLabels: false
          };
          chartData = ChartFormatterSvc.lineChart(lineData, lineOptions, true);
        } else {
          pieData = [
            {
              label: "Expenses (" + ($scope.getCurrency()) + ")",
              value: $scope.getCurrentExpenses()
            }, {
              label: "Revenue (" + ($scope.getCurrency()) + ")",
              value: $scope.getCurrentRevenue()
            }
          ];
          pieOptions = {
            tooltipFontSize: 12,
            percentageInnerCutout: 0
          };
          chartData = ChartFormatterSvc.pieChart(pieData, pieOptions, true);
        }
        return $scope.drawTrigger.notify(chartData);
      }
    };
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetAccountsExpensesRevenue', function() {
    return {
      restrict: 'A',
      controller: 'WidgetAccountsExpensesRevenueCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

(function() {
  var module;

  module = angular.module('impac.components.widgets.accounts-payable-receivable', []);

  module.controller('WidgetAccountsPayableReceivableCtrl', function($scope, $q, ChartFormatterSvc, $filter) {
    var settingsPromises, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    $scope.timeRangeDeferred = $q.defer();
    $scope.histModeDeferred = $q.defer();
    $scope.chartDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise, $scope.timeRangeDeferred.promise, $scope.histModeDeferred.promise, $scope.chartDeferred.promise];
    w.initContext = function() {
      return $scope.isDataFound = (w.content != null) && (w.content.values != null);
    };
    $scope.getCurrentPayable = function() {
      if ($scope.isDataFound) {
        return _.last(w.content.values.payables);
      }
    };
    $scope.getCurrentReceivable = function() {
      if ($scope.isDataFound) {
        return _.last(w.content.values.receivables);
      }
    };
    $scope.getCurrency = function() {
      if ($scope.isDataFound) {
        return w.content.currency;
      }
    };
    $scope.drawTrigger = $q.defer();
    w.format = function() {
      var all_values_are_positive, chartData, dates, i, j, len, len1, lineData, lineOptions, period, ref, ref1, value;
      if ($scope.isDataFound) {
        period = null;
        if ((w.metadata != null) && (w.metadata.hist_parameters != null)) {
          period = w.metadata.hist_parameters.period;
        }
        dates = _.map(w.content.dates, function(date) {
          return $filter('mnoDate')(date, period);
        });
        lineData = [
          {
            title: "Payable",
            labels: dates,
            values: w.content.values.payables
          }, {
            title: "Receivable",
            labels: dates,
            values: w.content.values.receivables
          }
        ];
        all_values_are_positive = true;
        ref = w.content.values.payables;
        for (i = 0, len = ref.length; i < len; i++) {
          value = ref[i];
          all_values_are_positive && (all_values_are_positive = value >= 0);
        }
        ref1 = w.content.values.receivables;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          value = ref1[j];
          all_values_are_positive && (all_values_are_positive = value >= 0);
        }
        lineOptions = {
          scaleBeginAtZero: all_values_are_positive,
          showXLabels: false
        };
        chartData = ChartFormatterSvc.lineChart(lineData, lineOptions, true);
        return $scope.drawTrigger.notify(chartData);
      }
    };
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetAccountsPayableReceivable', function() {
    return {
      restrict: 'A',
      controller: 'WidgetAccountsPayableReceivableCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy9hY2NvdW50cy1wYXlhYmxlLXJlY2VpdmFibGUvYWNjb3VudHMtcGF5YWJsZS1yZWNlaXZhYmxlLmRpcmVjdGl2ZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBOztFQUFBLE1BQUEsR0FBUyxPQUFPLENBQUMsTUFBUixDQUFlLHNEQUFmLEVBQXNFLEVBQXRFOztFQUVULE1BQU0sQ0FBQyxVQUFQLENBQWtCLHFDQUFsQixFQUF5RCxTQUFDLE1BQUQsRUFBUyxFQUFULEVBQWEsaUJBQWIsRUFBZ0MsT0FBaEM7QUFFdkQsUUFBQTtJQUFBLENBQUEsR0FBSSxNQUFNLENBQUM7SUFJWCxNQUFNLENBQUMsV0FBUCxHQUFxQixFQUFFLENBQUMsS0FBSCxDQUFBO0lBQ3JCLE1BQU0sQ0FBQyxpQkFBUCxHQUEyQixFQUFFLENBQUMsS0FBSCxDQUFBO0lBQzNCLE1BQU0sQ0FBQyxnQkFBUCxHQUEwQixFQUFFLENBQUMsS0FBSCxDQUFBO0lBQzFCLE1BQU0sQ0FBQyxhQUFQLEdBQXVCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFFdkIsZ0JBQUEsR0FBbUIsQ0FDakIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQURGLEVBRWpCLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxPQUZSLEVBR2pCLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxPQUhQLEVBSWpCLE1BQU0sQ0FBQyxhQUFhLENBQUMsT0FKSjtJQVVuQixDQUFDLENBQUMsV0FBRixHQUFnQixTQUFBO2FBQ2QsTUFBTSxDQUFDLFdBQVAsR0FBcUIsbUJBQUEsSUFBYztJQURyQjtJQUdoQixNQUFNLENBQUMsaUJBQVAsR0FBMkIsU0FBQTtNQUN6QixJQUFxQyxNQUFNLENBQUMsV0FBNUM7ZUFBQSxDQUFDLENBQUMsSUFBRixDQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFFBQXhCLEVBQUE7O0lBRHlCO0lBRzNCLE1BQU0sQ0FBQyxvQkFBUCxHQUE4QixTQUFBO01BQzVCLElBQXdDLE1BQU0sQ0FBQyxXQUEvQztlQUFBLENBQUMsQ0FBQyxJQUFGLENBQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsV0FBeEIsRUFBQTs7SUFENEI7SUFHOUIsTUFBTSxDQUFDLFdBQVAsR0FBcUIsU0FBQTtNQUNuQixJQUFzQixNQUFNLENBQUMsV0FBN0I7ZUFBQSxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVY7O0lBRG1CO0lBTXJCLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFDckIsQ0FBQyxDQUFDLE1BQUYsR0FBVyxTQUFBO0FBQ1QsVUFBQTtNQUFBLElBQUcsTUFBTSxDQUFDLFdBQVY7UUFDRSxNQUFBLEdBQVM7UUFDVCxJQUE4QyxvQkFBQSxJQUFlLG9DQUE3RDtVQUFBLE1BQUEsR0FBUyxDQUFDLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxPQUFwQzs7UUFDQSxLQUFBLEdBQVEsQ0FBQyxDQUFDLEdBQUYsQ0FBTSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQWhCLEVBQXVCLFNBQUMsSUFBRDtpQkFDN0IsT0FBQSxDQUFRLFNBQVIsQ0FBQSxDQUFtQixJQUFuQixFQUF5QixNQUF6QjtRQUQ2QixDQUF2QjtRQUdSLFFBQUEsR0FBVztVQUNUO1lBQUMsS0FBQSxFQUFPLFNBQVI7WUFBbUIsTUFBQSxFQUFRLEtBQTNCO1lBQWtDLE1BQUEsRUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxRQUEzRDtXQURTLEVBRVQ7WUFBQyxLQUFBLEVBQU8sWUFBUjtZQUFzQixNQUFBLEVBQVEsS0FBOUI7WUFBcUMsTUFBQSxFQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFdBQTlEO1dBRlM7O1FBS1gsdUJBQUEsR0FBMEI7QUFDMUI7QUFBQSxhQUFBLHFDQUFBOztVQUNFLDRCQUFBLDBCQUE0QixLQUFBLElBQVM7QUFEdkM7QUFFQTtBQUFBLGFBQUEsd0NBQUE7O1VBQ0UsNEJBQUEsMEJBQTRCLEtBQUEsSUFBUztBQUR2QztRQUdBLFdBQUEsR0FBYztVQUNaLGdCQUFBLEVBQWtCLHVCQUROO1VBRVosV0FBQSxFQUFhLEtBRkQ7O1FBSWQsU0FBQSxHQUFZLGlCQUFpQixDQUFDLFNBQWxCLENBQTRCLFFBQTVCLEVBQXFDLFdBQXJDLEVBQWtELElBQWxEO2VBR1osTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFuQixDQUEwQixTQUExQixFQXhCRjs7SUFEUztXQThCWCxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQXRCLENBQThCLGdCQUE5QjtFQW5FdUQsQ0FBekQ7O0VBc0VBLE1BQU0sQ0FBQyxTQUFQLENBQWlCLGlDQUFqQixFQUFvRCxTQUFBO0FBQ2xELFdBQU87TUFDTCxRQUFBLEVBQVUsR0FETDtNQUVMLFVBQUEsRUFBWSxxQ0FGUDs7RUFEMkMsQ0FBcEQ7QUF4RUEiLCJmaWxlIjoiY29tcG9uZW50cy93aWRnZXRzL2FjY291bnRzLXBheWFibGUtcmVjZWl2YWJsZS9hY2NvdW50cy1wYXlhYmxlLXJlY2VpdmFibGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2ltcGFjLmNvbXBvbmVudHMud2lkZ2V0cy5hY2NvdW50cy1wYXlhYmxlLXJlY2VpdmFibGUnLFtdKVxuXG5tb2R1bGUuY29udHJvbGxlcignV2lkZ2V0QWNjb3VudHNQYXlhYmxlUmVjZWl2YWJsZUN0cmwnLCAoJHNjb3BlLCAkcSwgQ2hhcnRGb3JtYXR0ZXJTdmMsICRmaWx0ZXIpIC0+XG5cbiAgdyA9ICRzY29wZS53aWRnZXRcblxuICAjIERlZmluZSBzZXR0aW5nc1xuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICRzY29wZS5vcmdEZWZlcnJlZCA9ICRxLmRlZmVyKClcbiAgJHNjb3BlLnRpbWVSYW5nZURlZmVycmVkID0gJHEuZGVmZXIoKVxuICAkc2NvcGUuaGlzdE1vZGVEZWZlcnJlZCA9ICRxLmRlZmVyKClcbiAgJHNjb3BlLmNoYXJ0RGVmZXJyZWQgPSAkcS5kZWZlcigpXG5cbiAgc2V0dGluZ3NQcm9taXNlcyA9IFtcbiAgICAkc2NvcGUub3JnRGVmZXJyZWQucHJvbWlzZVxuICAgICRzY29wZS50aW1lUmFuZ2VEZWZlcnJlZC5wcm9taXNlXG4gICAgJHNjb3BlLmhpc3RNb2RlRGVmZXJyZWQucHJvbWlzZVxuICAgICRzY29wZS5jaGFydERlZmVycmVkLnByb21pc2VcbiAgXVxuXG5cbiAgIyBXaWRnZXQgc3BlY2lmaWMgbWV0aG9kc1xuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHcuaW5pdENvbnRleHQgPSAtPlxuICAgICRzY29wZS5pc0RhdGFGb3VuZCA9IHcuY29udGVudD8gJiYgdy5jb250ZW50LnZhbHVlcz9cblxuICAkc2NvcGUuZ2V0Q3VycmVudFBheWFibGUgPSAtPlxuICAgIF8ubGFzdCh3LmNvbnRlbnQudmFsdWVzLnBheWFibGVzKSBpZiAkc2NvcGUuaXNEYXRhRm91bmRcblxuICAkc2NvcGUuZ2V0Q3VycmVudFJlY2VpdmFibGUgPSAtPlxuICAgIF8ubGFzdCh3LmNvbnRlbnQudmFsdWVzLnJlY2VpdmFibGVzKSBpZiAkc2NvcGUuaXNEYXRhRm91bmRcblxuICAkc2NvcGUuZ2V0Q3VycmVuY3kgPSAtPlxuICAgIHcuY29udGVudC5jdXJyZW5jeSBpZiAkc2NvcGUuaXNEYXRhRm91bmRcblxuXG4gICMgQ2hhcnQgZm9ybWF0aW5nIGZ1bmN0aW9uXG4gICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgJHNjb3BlLmRyYXdUcmlnZ2VyID0gJHEuZGVmZXIoKVxuICB3LmZvcm1hdCA9IC0+XG4gICAgaWYgJHNjb3BlLmlzRGF0YUZvdW5kXG4gICAgICBwZXJpb2QgPSBudWxsXG4gICAgICBwZXJpb2QgPSB3Lm1ldGFkYXRhLmhpc3RfcGFyYW1ldGVycy5wZXJpb2QgaWYgdy5tZXRhZGF0YT8gJiYgdy5tZXRhZGF0YS5oaXN0X3BhcmFtZXRlcnM/XG4gICAgICBkYXRlcyA9IF8ubWFwIHcuY29udGVudC5kYXRlcywgKGRhdGUpIC0+XG4gICAgICAgICRmaWx0ZXIoJ21ub0RhdGUnKShkYXRlLCBwZXJpb2QpXG5cbiAgICAgIGxpbmVEYXRhID0gW1xuICAgICAgICB7dGl0bGU6IFwiUGF5YWJsZVwiLCBsYWJlbHM6IGRhdGVzLCB2YWx1ZXM6IHcuY29udGVudC52YWx1ZXMucGF5YWJsZXMgfSxcbiAgICAgICAge3RpdGxlOiBcIlJlY2VpdmFibGVcIiwgbGFiZWxzOiBkYXRlcywgdmFsdWVzOiB3LmNvbnRlbnQudmFsdWVzLnJlY2VpdmFibGVzIH0sXG4gICAgICBdXG5cbiAgICAgIGFsbF92YWx1ZXNfYXJlX3Bvc2l0aXZlID0gdHJ1ZVxuICAgICAgZm9yIHZhbHVlIGluIHcuY29udGVudC52YWx1ZXMucGF5YWJsZXNcbiAgICAgICAgYWxsX3ZhbHVlc19hcmVfcG9zaXRpdmUgJiY9IHZhbHVlID49IDBcbiAgICAgIGZvciB2YWx1ZSBpbiB3LmNvbnRlbnQudmFsdWVzLnJlY2VpdmFibGVzXG4gICAgICAgIGFsbF92YWx1ZXNfYXJlX3Bvc2l0aXZlICYmPSB2YWx1ZSA+PSAwXG5cbiAgICAgIGxpbmVPcHRpb25zID0ge1xuICAgICAgICBzY2FsZUJlZ2luQXRaZXJvOiBhbGxfdmFsdWVzX2FyZV9wb3NpdGl2ZSxcbiAgICAgICAgc2hvd1hMYWJlbHM6IGZhbHNlLFxuICAgICAgfVxuICAgICAgY2hhcnREYXRhID0gQ2hhcnRGb3JtYXR0ZXJTdmMubGluZUNoYXJ0KGxpbmVEYXRhLGxpbmVPcHRpb25zLCB0cnVlKVxuICAgICAgXG4gICAgICAjIGNhbGxzIGNoYXJ0LmRyYXcoKVxuICAgICAgJHNjb3BlLmRyYXdUcmlnZ2VyLm5vdGlmeShjaGFydERhdGEpXG5cblxuICAjIFdpZGdldCBpcyByZWFkeTogY2FuIHRyaWdnZXIgdGhlIFwid2FpdCBmb3Igc2V0dGlnbnMgdG8gYmUgcmVhZHlcIlxuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICRzY29wZS53aWRnZXREZWZlcnJlZC5yZXNvbHZlKHNldHRpbmdzUHJvbWlzZXMpXG4pXG5cbm1vZHVsZS5kaXJlY3RpdmUoJ3dpZGdldEFjY291bnRzUGF5YWJsZVJlY2VpdmFibGUnLCAtPlxuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgY29udHJvbGxlcjogJ1dpZGdldEFjY291bnRzUGF5YWJsZVJlY2VpdmFibGVDdHJsJ1xuICB9XG4pIl19

(function() {
  var module;

  module = angular.module('impac.components.widgets.accounts-profit-and-loss', []);

  module.controller('WidgetAccountsProfitAndLossCtrl', function($scope, $q, ChartFormatterSvc, $filter, ImpacWidgetsSvc) {
    var selectedElementsSetting, settingsPromises, unCollapsedSetting, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    $scope.timeRangeDeferred = $q.defer();
    $scope.widthDeferred = $q.defer();
    $scope.chartDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise, $scope.timeRangeDeferred.promise, $scope.widthDeferred.promise, $scope.chartDeferred.promise];
    w.initContext = function() {
      if ($scope.isDataFound = angular.isDefined(w.content) && !_.isEmpty(w.content.summary) && !_.isEmpty(w.content.dates)) {
        $scope.dates = w.content.dates;
        $scope.unCollapsed = w.metadata.unCollapsed || [];
        if (w.metadata.selectedElements) {
          $scope.selectedElements = [];
          angular.forEach(w.metadata.selectedElements, function(sElem) {
            var foundElem;
            foundElem = _.find(w.content.summary, function(statement) {
              return statement.name === sElem.name;
            });
            if (!foundElem) {
              angular.forEach(w.content.summary, function(statement) {
                if (statement.accounts != null) {
                  return foundElem || (foundElem = _.find(statement.accounts, function(account) {
                    return sElem.id === account.id;
                  }));
                }
              });
            }
            if (foundElem) {
              return $scope.selectedElements.push(foundElem);
            }
          });
        }
        if (!(($scope.selectedElements != null) && $scope.selectedElements.length > 0)) {
          return w.width = 6;
        }
      }
    };
    $scope.getElementChartColor = function(index) {
      return ChartFormatterSvc.getColor(index);
    };
    $scope.getLastDate = function() {
      if ($scope.dates != null) {
        return $scope.dates[$scope.dates.length - 1];
      }
    };
    $scope.getPrevDate = function() {
      if ($scope.dates != null) {
        return $scope.dates[$scope.dates.length - 2];
      }
    };
    $scope.getLastValue = function(element) {
      if (element.totals != null) {
        return _.last(element.totals);
      }
    };
    $scope.getPeriod = function() {
      var period;
      period = 'MONTHLY';
      if ((w.metadata != null) && (w.metadata.hist_parameters != null) && (w.metadata.hist_parameters.period != null)) {
        period = w.metadata.hist_parameters.period;
      }
      switch (period.toUpperCase()) {
        case "DAILY":
          return "day";
        default:
          return period.toLowerCase().replace('ly', '');
      }
    };
    $scope.getClassColor = function(aTotal) {
      if (parseInt(aTotal) > 0) {
        return 'positive';
      } else if (parseInt(aTotal) < 0) {
        return 'negative';
      } else {
        return null;
      }
    };
    $scope.getName = function(element) {
      if ((element != null) && (element.name != null)) {
        return element.name.replace(/_/g, " ");
      }
    };
    $scope.toggleSelectedElement = function(element) {
      if ($scope.isSelected(element)) {
        $scope.selectedElements = _.reject($scope.selectedElements, function(sElem) {
          if (element.id) {
            return sElem.id === element.id;
          } else {
            return sElem.name === element.name;
          }
        });
        w.format();
        if (w.isExpanded() && $scope.selectedElements.length === 0) {
          return w.toggleExpanded();
        } else {
          return ImpacWidgetsSvc.updateWidgetSettings(w, false);
        }
      } else {
        $scope.selectedElements || ($scope.selectedElements = []);
        $scope.selectedElements.push(element);
        w.format();
        if (!w.isExpanded()) {
          return w.toggleExpanded();
        } else {
          return ImpacWidgetsSvc.updateWidgetSettings(w, false);
        }
      }
    };
    $scope.isSelected = function(element) {
      if ((element != null) && ($scope.selectedElements != null)) {
        if (_.find($scope.selectedElements, function(sElem) {
          if (element.id) {
            return sElem.id === element.id;
          } else {
            return sElem.name === element.name;
          }
        })) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    };
    $scope.toggleCollapsed = function(element) {
      if ((element != null) && (element.name != null)) {
        if (_.find($scope.unCollapsed, (function(name) {
          return element.name === name;
        }))) {
          $scope.unCollapsed = _.reject($scope.unCollapsed, function(name) {
            return name === element.name;
          });
        } else {
          $scope.unCollapsed.push(element.name);
        }
        return ImpacWidgetsSvc.updateWidgetSettings(w, false);
      }
    };
    $scope.isCollapsed = function(element) {
      if ((element != null) && (element.name != null)) {
        if (_.find($scope.unCollapsed, (function(name) {
          return element.name === name;
        }))) {
          return false;
        } else {
          return true;
        }
      }
    };
    $scope.hasElements = function() {
      return ($scope.selectedElements != null) && $scope.selectedElements.length > 0;
    };
    $scope.drawTrigger = $q.defer();
    w.format = function() {
      var all_values_are_positive, chartData, inputData, options;
      if ($scope.isDataFound && ($scope.selectedElements != null) && $scope.selectedElements.length > 0) {
        all_values_are_positive = true;
        inputData = [];
        angular.forEach($scope.selectedElements, function(sElem) {
          var data, dates, period;
          data = angular.copy(sElem);
          period = null;
          if ((w.metadata != null) && (w.metadata.hist_parameters != null)) {
            period = w.metadata.hist_parameters.period;
          }
          dates = _.map(w.content.dates, function(date) {
            return $filter('mnoDate')(date, period);
          });
          inputData.push({
            title: data.name,
            labels: dates,
            values: data.totals
          });
          return angular.forEach(data.totals, function(value) {
            return all_values_are_positive && (all_values_are_positive = value >= 0);
          });
        });
        options = {
          scaleBeginAtZero: all_values_are_positive,
          showXLabels: true,
          datasetFill: $scope.selectedElements.length === 1,
          pointDot: $scope.selectedElements.length === 1
        };
        chartData = ChartFormatterSvc.lineChart(inputData, options);
        return $scope.drawTrigger.notify(chartData);
      }
    };
    unCollapsedSetting = {};
    unCollapsedSetting.initialized = false;
    unCollapsedSetting.initialize = function() {
      return unCollapsedSetting.initialized = true;
    };
    unCollapsedSetting.toMetadata = function() {
      return {
        unCollapsed: $scope.unCollapsed
      };
    };
    w.settings.push(unCollapsedSetting);
    selectedElementsSetting = {};
    selectedElementsSetting.initialized = false;
    selectedElementsSetting.initialize = function() {
      return selectedElementsSetting.initialized = true;
    };
    selectedElementsSetting.toMetadata = function() {
      return {
        selectedElements: $scope.selectedElements
      };
    };
    w.settings.push(selectedElementsSetting);
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetAccountsProfitAndLoss', function() {
    return {
      restrict: 'A',
      controller: 'WidgetAccountsProfitAndLossCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

(function() {
  var module;

  module = angular.module('impac.components.widgets.hr-employee-details', []);

  module.controller('WidgetHrEmployeeDetailsCtrl', function($scope, $q, $filter) {
    var settingsPromises, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    $scope.widthDeferred = $q.defer();
    $scope.paramSelectorDeferred1 = $q.defer();
    $scope.paramSelectorDeferred2 = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise, $scope.widthDeferred.promise, $scope.paramSelectorDeferred1.promise, $scope.paramSelectorDeferred2.promise];
    w.initContext = function() {
      if ($scope.isDataFound = !_.isEmpty(w.content) && !_.isEmpty(w.content.employees)) {
        $scope.periodOptions = [
          {
            label: 'Yearly',
            value: 'yearly'
          }, {
            label: 'Monthly',
            value: 'monthly'
          }, {
            label: 'Weekly',
            value: 'weekly'
          }, {
            label: 'Hourly',
            value: 'hourly'
          }
        ];
        if (w.metadata && w.metadata.period) {
          $scope.period = angular.copy(_.find($scope.periodOptions, function(o) {
            return o.value === w.metadata.period.toLowerCase();
          }) || $scope.periodOptions[0]);
        } else {
          $scope.period = angular.copy($scope.periodOptions[0]);
        }
        $scope.employeesOptions = _.map(w.content.employees, function(e) {
          return {
            value: e.uid,
            label: e.lastname + " " + e.firstname
          };
        });
        return $scope.selectedEmployee = {
          value: $scope.getEmployee().uid,
          label: ($scope.getEmployee().lastname) + " " + ($scope.getEmployee().firstname)
        };
      }
    };
    $scope.getSingleCompanyName = function() {
      var org, orgUid;
      if (w.content && w.content.organizations) {
        orgUid = w.content.organizations[0];
        org = _.find($scope.parentDashboard.data_sources, function(o) {
          return o.uid === orgUid;
        });
        if (org != null) {
          return org.label;
        }
      }
    };
    $scope.getEmployee = function() {
      var employee;
      if (!$scope.isDataFound) {
        return false;
      }
      if (w.metadata && w.metadata.employee_uid) {
        employee = angular.copy(_.find(w.content.employees, function(e) {
          return e.uid === w.metadata.employee_uid;
        }) || w.content.employees[0]);
      } else {
        employee = angular.copy(w.content.employees[0]);
      }
      employee.salary && (employee.salary = $filter('mnoCurrency')(employee.salary.amount, employee.salary.currency));
      return employee;
    };
    $scope.formatAddress = function(anAddress) {
      if (angular.isDefined(anAddress)) {
        return anAddress.replace(/, /g, ',\n');
      }
    };
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetHrEmployeeDetails', function() {
    return {
      restrict: 'A',
      controller: 'WidgetHrEmployeeDetailsCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy9oci1lbXBsb3llZS1kZXRhaWxzL2hyLWVtcGxveWVlLWRldGFpbHMuZGlyZWN0aXZlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUE7O0VBQUEsTUFBQSxHQUFTLE9BQU8sQ0FBQyxNQUFSLENBQWUsOENBQWYsRUFBOEQsRUFBOUQ7O0VBRVQsTUFBTSxDQUFDLFVBQVAsQ0FBa0IsNkJBQWxCLEVBQWlELFNBQUMsTUFBRCxFQUFTLEVBQVQsRUFBYSxPQUFiO0FBRS9DLFFBQUE7SUFBQSxDQUFBLEdBQUksTUFBTSxDQUFDO0lBSVgsTUFBTSxDQUFDLFdBQVAsR0FBcUIsRUFBRSxDQUFDLEtBQUgsQ0FBQTtJQUNyQixNQUFNLENBQUMsYUFBUCxHQUF1QixFQUFFLENBQUMsS0FBSCxDQUFBO0lBQ3ZCLE1BQU0sQ0FBQyxzQkFBUCxHQUFnQyxFQUFFLENBQUMsS0FBSCxDQUFBO0lBQ2hDLE1BQU0sQ0FBQyxzQkFBUCxHQUFnQyxFQUFFLENBQUMsS0FBSCxDQUFBO0lBRWhDLGdCQUFBLEdBQW1CLENBQ2pCLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FERixFQUVqQixNQUFNLENBQUMsYUFBYSxDQUFDLE9BRkosRUFHakIsTUFBTSxDQUFDLHNCQUFzQixDQUFDLE9BSGIsRUFJakIsTUFBTSxDQUFDLHNCQUFzQixDQUFDLE9BSmI7SUFVbkIsQ0FBQyxDQUFDLFdBQUYsR0FBZ0IsU0FBQTtNQUNkLElBQUcsTUFBTSxDQUFDLFdBQVAsR0FBcUIsQ0FBQyxDQUFDLENBQUMsT0FBRixDQUFVLENBQUMsQ0FBQyxPQUFaLENBQUQsSUFBeUIsQ0FBQyxDQUFDLENBQUMsT0FBRixDQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBcEIsQ0FBbEQ7UUFFRSxNQUFNLENBQUMsYUFBUCxHQUF1QjtVQUNyQjtZQUFDLEtBQUEsRUFBTyxRQUFSO1lBQWtCLEtBQUEsRUFBTyxRQUF6QjtXQURxQixFQUVyQjtZQUFDLEtBQUEsRUFBTyxTQUFSO1lBQW1CLEtBQUEsRUFBTyxTQUExQjtXQUZxQixFQUdyQjtZQUFDLEtBQUEsRUFBTyxRQUFSO1lBQWtCLEtBQUEsRUFBTyxRQUF6QjtXQUhxQixFQUlyQjtZQUFDLEtBQUEsRUFBTyxRQUFSO1lBQWtCLEtBQUEsRUFBTyxRQUF6QjtXQUpxQjs7UUFNdkIsSUFBRyxDQUFDLENBQUMsUUFBRixJQUFjLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBNUI7VUFDRSxNQUFNLENBQUMsTUFBUCxHQUFnQixPQUFPLENBQUMsSUFBUixDQUFhLENBQUMsQ0FBQyxJQUFGLENBQU8sTUFBTSxDQUFDLGFBQWQsRUFBNkIsU0FBQyxDQUFEO21CQUN4RCxDQUFDLENBQUMsS0FBRixLQUFXLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFdBQWxCLENBQUE7VUFENkMsQ0FBN0IsQ0FBQSxJQUV4QixNQUFNLENBQUMsYUFBYyxDQUFBLENBQUEsQ0FGVixFQURsQjtTQUFBLE1BQUE7VUFLRSxNQUFNLENBQUMsTUFBUCxHQUFnQixPQUFPLENBQUMsSUFBUixDQUFhLE1BQU0sQ0FBQyxhQUFjLENBQUEsQ0FBQSxDQUFsQyxFQUxsQjs7UUFPQSxNQUFNLENBQUMsZ0JBQVAsR0FBMEIsQ0FBQyxDQUFDLEdBQUYsQ0FBTSxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQWhCLEVBQTJCLFNBQUMsQ0FBRDtpQkFDbkQ7WUFDRSxLQUFBLEVBQU8sQ0FBQyxDQUFDLEdBRFg7WUFFRSxLQUFBLEVBQVUsQ0FBQyxDQUFDLFFBQUgsR0FBWSxHQUFaLEdBQWUsQ0FBQyxDQUFDLFNBRjVCOztRQURtRCxDQUEzQjtlQU0xQixNQUFNLENBQUMsZ0JBQVAsR0FBMEI7VUFDeEIsS0FBQSxFQUFPLE1BQU0sQ0FBQyxXQUFQLENBQUEsQ0FBb0IsQ0FBQyxHQURKO1VBRXhCLEtBQUEsRUFBUyxDQUFDLE1BQU0sQ0FBQyxXQUFQLENBQUEsQ0FBb0IsQ0FBQyxRQUF0QixDQUFBLEdBQStCLEdBQS9CLEdBQWlDLENBQUMsTUFBTSxDQUFDLFdBQVAsQ0FBQSxDQUFvQixDQUFDLFNBQXRCLENBRmxCO1VBckI1Qjs7SUFEYztJQTJCaEIsTUFBTSxDQUFDLG9CQUFQLEdBQThCLFNBQUE7QUFDNUIsVUFBQTtNQUFBLElBQUcsQ0FBQyxDQUFDLE9BQUYsSUFBYSxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQTFCO1FBQ0UsTUFBQSxHQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYyxDQUFBLENBQUE7UUFDakMsR0FBQSxHQUFNLENBQUMsQ0FBQyxJQUFGLENBQU8sTUFBTSxDQUFDLGVBQWUsQ0FBQyxZQUE5QixFQUE0QyxTQUFDLENBQUQ7aUJBQ2hELENBQUMsQ0FBQyxHQUFGLEtBQVM7UUFEdUMsQ0FBNUM7UUFHTixJQUFvQixXQUFwQjtBQUFBLGlCQUFPLEdBQUcsQ0FBQyxNQUFYO1NBTEY7O0lBRDRCO0lBUTlCLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLFNBQUE7QUFDbkIsVUFBQTtNQUFBLElBQUEsQ0FBb0IsTUFBTSxDQUFDLFdBQTNCO0FBQUEsZUFBTyxNQUFQOztNQUVBLElBQUcsQ0FBQyxDQUFDLFFBQUYsSUFBYyxDQUFDLENBQUMsUUFBUSxDQUFDLFlBQTVCO1FBQ0UsUUFBQSxHQUFXLE9BQU8sQ0FBQyxJQUFSLENBQWEsQ0FBQyxDQUFDLElBQUYsQ0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQWpCLEVBQTRCLFNBQUMsQ0FBRDtpQkFDbEQsQ0FBQyxDQUFDLEdBQUYsS0FBUyxDQUFDLENBQUMsUUFBUSxDQUFDO1FBRDhCLENBQTVCLENBQUEsSUFFbkIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFVLENBQUEsQ0FBQSxDQUZkLEVBRGI7T0FBQSxNQUFBO1FBS0UsUUFBQSxHQUFXLE9BQU8sQ0FBQyxJQUFSLENBQWEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFVLENBQUEsQ0FBQSxDQUFqQyxFQUxiOztNQU9BLFFBQVEsQ0FBQyxXQUFULFFBQVEsQ0FBQyxTQUFXLE9BQUEsQ0FBUSxhQUFSLENBQUEsQ0FBdUIsUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUF2QyxFQUE4QyxRQUFRLENBQUMsTUFBTSxDQUFDLFFBQTlEO0FBQ3BCLGFBQU87SUFYWTtJQWFyQixNQUFNLENBQUMsYUFBUCxHQUF1QixTQUFDLFNBQUQ7TUFDckIsSUFBeUMsT0FBTyxDQUFDLFNBQVIsQ0FBa0IsU0FBbEIsQ0FBekM7QUFBQSxlQUFPLFNBQVMsQ0FBQyxPQUFWLENBQWtCLEtBQWxCLEVBQXdCLEtBQXhCLEVBQVA7O0lBRHFCO1dBTXZCLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBdEIsQ0FBOEIsZ0JBQTlCO0VBM0UrQyxDQUFqRDs7RUE4RUEsTUFBTSxDQUFDLFNBQVAsQ0FBaUIseUJBQWpCLEVBQTRDLFNBQUE7QUFDMUMsV0FBTztNQUNMLFFBQUEsRUFBVSxHQURMO01BRUwsVUFBQSxFQUFZLDZCQUZQOztFQURtQyxDQUE1QztBQWhGQSIsImZpbGUiOiJjb21wb25lbnRzL3dpZGdldHMvaHItZW1wbG95ZWUtZGV0YWlscy9oci1lbXBsb3llZS1kZXRhaWxzLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdpbXBhYy5jb21wb25lbnRzLndpZGdldHMuaHItZW1wbG95ZWUtZGV0YWlscycsW10pXG5cbm1vZHVsZS5jb250cm9sbGVyKCdXaWRnZXRIckVtcGxveWVlRGV0YWlsc0N0cmwnLCAoJHNjb3BlLCAkcSwgJGZpbHRlcikgLT5cblxuICB3ID0gJHNjb3BlLndpZGdldFxuXG4gICMgRGVmaW5lIHNldHRpbmdzXG4gICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgJHNjb3BlLm9yZ0RlZmVycmVkID0gJHEuZGVmZXIoKVxuICAkc2NvcGUud2lkdGhEZWZlcnJlZCA9ICRxLmRlZmVyKClcbiAgJHNjb3BlLnBhcmFtU2VsZWN0b3JEZWZlcnJlZDEgPSAkcS5kZWZlcigpXG4gICRzY29wZS5wYXJhbVNlbGVjdG9yRGVmZXJyZWQyID0gJHEuZGVmZXIoKVxuXG4gIHNldHRpbmdzUHJvbWlzZXMgPSBbXG4gICAgJHNjb3BlLm9yZ0RlZmVycmVkLnByb21pc2VcbiAgICAkc2NvcGUud2lkdGhEZWZlcnJlZC5wcm9taXNlXG4gICAgJHNjb3BlLnBhcmFtU2VsZWN0b3JEZWZlcnJlZDEucHJvbWlzZVxuICAgICRzY29wZS5wYXJhbVNlbGVjdG9yRGVmZXJyZWQyLnByb21pc2VcbiAgXVxuXG5cbiAgIyBXaWRnZXQgc3BlY2lmaWMgbWV0aG9kc1xuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHcuaW5pdENvbnRleHQgPSAtPlxuICAgIGlmICRzY29wZS5pc0RhdGFGb3VuZCA9ICFfLmlzRW1wdHkody5jb250ZW50KSAmJiAhXy5pc0VtcHR5KHcuY29udGVudC5lbXBsb3llZXMpXG5cbiAgICAgICRzY29wZS5wZXJpb2RPcHRpb25zID0gW1xuICAgICAgICB7bGFiZWw6ICdZZWFybHknLCB2YWx1ZTogJ3llYXJseSd9LFxuICAgICAgICB7bGFiZWw6ICdNb250aGx5JywgdmFsdWU6ICdtb250aGx5J30sXG4gICAgICAgIHtsYWJlbDogJ1dlZWtseScsIHZhbHVlOiAnd2Vla2x5J30sXG4gICAgICAgIHtsYWJlbDogJ0hvdXJseScsIHZhbHVlOiAnaG91cmx5J31cbiAgICAgIF1cbiAgICAgIGlmIHcubWV0YWRhdGEgJiYgdy5tZXRhZGF0YS5wZXJpb2RcbiAgICAgICAgJHNjb3BlLnBlcmlvZCA9IGFuZ3VsYXIuY29weShfLmZpbmQoJHNjb3BlLnBlcmlvZE9wdGlvbnMsIChvKSAtPlxuICAgICAgICAgIG8udmFsdWUgPT0gdy5tZXRhZGF0YS5wZXJpb2QudG9Mb3dlckNhc2UoKVxuICAgICAgICApIHx8ICRzY29wZS5wZXJpb2RPcHRpb25zWzBdKVxuICAgICAgZWxzZVxuICAgICAgICAkc2NvcGUucGVyaW9kID0gYW5ndWxhci5jb3B5KCRzY29wZS5wZXJpb2RPcHRpb25zWzBdKVxuXG4gICAgICAkc2NvcGUuZW1wbG95ZWVzT3B0aW9ucyA9IF8ubWFwKHcuY29udGVudC5lbXBsb3llZXMsIChlKSAtPlxuICAgICAgICB7XG4gICAgICAgICAgdmFsdWU6IGUudWlkLFxuICAgICAgICAgIGxhYmVsOiBcIiN7ZS5sYXN0bmFtZX0gI3tlLmZpcnN0bmFtZX1cIixcbiAgICAgICAgfVxuICAgICAgKVxuICAgICAgJHNjb3BlLnNlbGVjdGVkRW1wbG95ZWUgPSB7XG4gICAgICAgIHZhbHVlOiAkc2NvcGUuZ2V0RW1wbG95ZWUoKS51aWQsXG4gICAgICAgIGxhYmVsOiBcIiN7JHNjb3BlLmdldEVtcGxveWVlKCkubGFzdG5hbWV9ICN7JHNjb3BlLmdldEVtcGxveWVlKCkuZmlyc3RuYW1lfVwiLFxuICAgICAgfVxuXG4gICRzY29wZS5nZXRTaW5nbGVDb21wYW55TmFtZSA9IC0+XG4gICAgaWYgdy5jb250ZW50ICYmIHcuY29udGVudC5vcmdhbml6YXRpb25zXG4gICAgICBvcmdVaWQgPSB3LmNvbnRlbnQub3JnYW5pemF0aW9uc1swXVxuICAgICAgb3JnID0gXy5maW5kKCRzY29wZS5wYXJlbnREYXNoYm9hcmQuZGF0YV9zb3VyY2VzLCAobykgLT5cbiAgICAgICAgby51aWQgPT0gb3JnVWlkXG4gICAgICApXG4gICAgICByZXR1cm4gb3JnLmxhYmVsIGlmIG9yZz9cblxuICAkc2NvcGUuZ2V0RW1wbG95ZWUgPSAtPlxuICAgIHJldHVybiBmYWxzZSB1bmxlc3MgJHNjb3BlLmlzRGF0YUZvdW5kXG5cbiAgICBpZiB3Lm1ldGFkYXRhICYmIHcubWV0YWRhdGEuZW1wbG95ZWVfdWlkXG4gICAgICBlbXBsb3llZSA9IGFuZ3VsYXIuY29weShfLmZpbmQody5jb250ZW50LmVtcGxveWVlcywgKGUpIC0+XG4gICAgICAgIGUudWlkID09IHcubWV0YWRhdGEuZW1wbG95ZWVfdWlkXG4gICAgICApIHx8IHcuY29udGVudC5lbXBsb3llZXNbMF0pXG4gICAgZWxzZVxuICAgICAgZW1wbG95ZWUgPSBhbmd1bGFyLmNvcHkody5jb250ZW50LmVtcGxveWVlc1swXSlcblxuICAgIGVtcGxveWVlLnNhbGFyeSAmJj0gJGZpbHRlcignbW5vQ3VycmVuY3knKShlbXBsb3llZS5zYWxhcnkuYW1vdW50LGVtcGxveWVlLnNhbGFyeS5jdXJyZW5jeSlcbiAgICByZXR1cm4gZW1wbG95ZWVcblxuICAkc2NvcGUuZm9ybWF0QWRkcmVzcyA9IChhbkFkZHJlc3MpIC0+XG4gICAgcmV0dXJuIGFuQWRkcmVzcy5yZXBsYWNlKC8sIC9nLCcsXFxuJykgaWYgYW5ndWxhci5pc0RlZmluZWQoYW5BZGRyZXNzKVxuXG5cbiAgIyBXaWRnZXQgaXMgcmVhZHk6IGNhbiB0cmlnZ2VyIHRoZSBcIndhaXQgZm9yIHNldHRpZ25zIHRvIGJlIHJlYWR5XCJcbiAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAkc2NvcGUud2lkZ2V0RGVmZXJyZWQucmVzb2x2ZShzZXR0aW5nc1Byb21pc2VzKVxuKVxuXG5tb2R1bGUuZGlyZWN0aXZlKCd3aWRnZXRIckVtcGxveWVlRGV0YWlscycsIC0+XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBjb250cm9sbGVyOiAnV2lkZ2V0SHJFbXBsb3llZURldGFpbHNDdHJsJ1xuICB9XG4pXG4iXX0=

(function() {
  var module;

  module = angular.module('impac.components.widgets.hr-employees-list', []);

  module.controller('WidgetHrEmployeesListCtrl', function($scope, $q, $filter) {
    var settingsPromises, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    $scope.paramSelectorDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise, $scope.paramSelectorDeferred.promise];
    w.initContext = function() {
      if ($scope.isDataFound = !_.isEmpty(w.content) && !_.isEmpty(w.content.total) && !_.isEmpty(w.content.employees)) {
        $scope.periodOptions = [
          {
            label: 'Yearly',
            value: 'yearly'
          }, {
            label: 'Monthly',
            value: 'monthly'
          }, {
            label: 'Weekly',
            value: 'weekly'
          }, {
            label: 'Hourly',
            value: 'hourly'
          }
        ];
        return $scope.period = angular.copy(_.find($scope.periodOptions, function(o) {
          return o.value === w.content.total.period.toLowerCase();
        }) || $scope.periodOptions[0]);
      }
    };
    $scope.getSingleCompanyName = function() {
      var org, orgUid;
      if (w.content && w.content.organizations) {
        orgUid = w.content.organizations[0];
        org = _.find($scope.parentDashboard.data_sources, function(o) {
          return o.uid === orgUid;
        });
        return org.label;
      }
    };
    $scope.getEmployeeSalary = function(anEmployee) {
      if (anEmployee.salary != null) {
        return $filter('mnoCurrency')(anEmployee.salary.amount, w.content.total.currency);
      } else {
        return '-';
      }
    };
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetHrEmployeesList', function() {
    return {
      restrict: 'A',
      controller: 'WidgetHrEmployeesListCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy9oci1lbXBsb3llZXMtbGlzdC9oci1lbXBsb3llZXMtbGlzdC5kaXJlY3RpdmUuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQTs7RUFBQSxNQUFBLEdBQVMsT0FBTyxDQUFDLE1BQVIsQ0FBZSw0Q0FBZixFQUE0RCxFQUE1RDs7RUFFVCxNQUFNLENBQUMsVUFBUCxDQUFrQiwyQkFBbEIsRUFBK0MsU0FBQyxNQUFELEVBQVMsRUFBVCxFQUFhLE9BQWI7QUFFN0MsUUFBQTtJQUFBLENBQUEsR0FBSSxNQUFNLENBQUM7SUFJWCxNQUFNLENBQUMsV0FBUCxHQUFxQixFQUFFLENBQUMsS0FBSCxDQUFBO0lBQ3JCLE1BQU0sQ0FBQyxxQkFBUCxHQUErQixFQUFFLENBQUMsS0FBSCxDQUFBO0lBRS9CLGdCQUFBLEdBQW1CLENBQ2pCLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FERixFQUVqQixNQUFNLENBQUMscUJBQXFCLENBQUMsT0FGWjtJQVFuQixDQUFDLENBQUMsV0FBRixHQUFnQixTQUFBO01BQ2QsSUFBRyxNQUFNLENBQUMsV0FBUCxHQUFxQixDQUFDLENBQUMsQ0FBQyxPQUFGLENBQVUsQ0FBQyxDQUFDLE9BQVosQ0FBRCxJQUF5QixDQUFDLENBQUMsQ0FBQyxPQUFGLENBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFwQixDQUExQixJQUF3RCxDQUFDLENBQUMsQ0FBQyxPQUFGLENBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFwQixDQUFqRjtRQUNFLE1BQU0sQ0FBQyxhQUFQLEdBQXVCO1VBQ3JCO1lBQUMsS0FBQSxFQUFPLFFBQVI7WUFBa0IsS0FBQSxFQUFPLFFBQXpCO1dBRHFCLEVBRXJCO1lBQUMsS0FBQSxFQUFPLFNBQVI7WUFBbUIsS0FBQSxFQUFPLFNBQTFCO1dBRnFCLEVBR3JCO1lBQUMsS0FBQSxFQUFPLFFBQVI7WUFBa0IsS0FBQSxFQUFPLFFBQXpCO1dBSHFCLEVBSXJCO1lBQUMsS0FBQSxFQUFPLFFBQVI7WUFBa0IsS0FBQSxFQUFPLFFBQXpCO1dBSnFCOztlQU12QixNQUFNLENBQUMsTUFBUCxHQUFnQixPQUFPLENBQUMsSUFBUixDQUFhLENBQUMsQ0FBQyxJQUFGLENBQU8sTUFBTSxDQUFDLGFBQWQsRUFBNkIsU0FBQyxDQUFEO2lCQUN4RCxDQUFDLENBQUMsS0FBRixLQUFXLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxXQUF2QixDQUFBO1FBRDZDLENBQTdCLENBQUEsSUFFeEIsTUFBTSxDQUFDLGFBQWMsQ0FBQSxDQUFBLENBRlYsRUFQbEI7O0lBRGM7SUFZaEIsTUFBTSxDQUFDLG9CQUFQLEdBQThCLFNBQUE7QUFDNUIsVUFBQTtNQUFBLElBQUcsQ0FBQyxDQUFDLE9BQUYsSUFBYSxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQTFCO1FBQ0UsTUFBQSxHQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYyxDQUFBLENBQUE7UUFDakMsR0FBQSxHQUFNLENBQUMsQ0FBQyxJQUFGLENBQU8sTUFBTSxDQUFDLGVBQWUsQ0FBQyxZQUE5QixFQUE0QyxTQUFDLENBQUQ7aUJBQ2hELENBQUMsQ0FBQyxHQUFGLEtBQVM7UUFEdUMsQ0FBNUM7QUFHTixlQUFPLEdBQUcsQ0FBQyxNQUxiOztJQUQ0QjtJQVE5QixNQUFNLENBQUMsaUJBQVAsR0FBMkIsU0FBQyxVQUFEO01BQ3pCLElBQUcseUJBQUg7QUFDRSxlQUFPLE9BQUEsQ0FBUSxhQUFSLENBQUEsQ0FBdUIsVUFBVSxDQUFDLE1BQU0sQ0FBQyxNQUF6QyxFQUFnRCxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFoRSxFQURUO09BQUEsTUFBQTtBQUdFLGVBQU8sSUFIVDs7SUFEeUI7V0FTM0IsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUF0QixDQUE4QixnQkFBOUI7RUE5QzZDLENBQS9DOztFQWlEQSxNQUFNLENBQUMsU0FBUCxDQUFpQix1QkFBakIsRUFBMEMsU0FBQTtBQUN4QyxXQUFPO01BQ0wsUUFBQSxFQUFVLEdBREw7TUFFTCxVQUFBLEVBQVksMkJBRlA7O0VBRGlDLENBQTFDO0FBbkRBIiwiZmlsZSI6ImNvbXBvbmVudHMvd2lkZ2V0cy9oci1lbXBsb3llZXMtbGlzdC9oci1lbXBsb3llZXMtbGlzdC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnaW1wYWMuY29tcG9uZW50cy53aWRnZXRzLmhyLWVtcGxveWVlcy1saXN0JyxbXSlcblxubW9kdWxlLmNvbnRyb2xsZXIoJ1dpZGdldEhyRW1wbG95ZWVzTGlzdEN0cmwnLCAoJHNjb3BlLCAkcSwgJGZpbHRlcikgLT5cblxuICB3ID0gJHNjb3BlLndpZGdldFxuXG4gICMgRGVmaW5lIHNldHRpbmdzXG4gICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgJHNjb3BlLm9yZ0RlZmVycmVkID0gJHEuZGVmZXIoKVxuICAkc2NvcGUucGFyYW1TZWxlY3RvckRlZmVycmVkID0gJHEuZGVmZXIoKVxuXG4gIHNldHRpbmdzUHJvbWlzZXMgPSBbXG4gICAgJHNjb3BlLm9yZ0RlZmVycmVkLnByb21pc2VcbiAgICAkc2NvcGUucGFyYW1TZWxlY3RvckRlZmVycmVkLnByb21pc2VcbiAgXVxuXG5cbiAgIyBXaWRnZXQgc3BlY2lmaWMgbWV0aG9kc1xuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHcuaW5pdENvbnRleHQgPSAtPlxuICAgIGlmICRzY29wZS5pc0RhdGFGb3VuZCA9ICFfLmlzRW1wdHkody5jb250ZW50KSAmJiAhXy5pc0VtcHR5KHcuY29udGVudC50b3RhbCkgJiYgIV8uaXNFbXB0eSh3LmNvbnRlbnQuZW1wbG95ZWVzKVxuICAgICAgJHNjb3BlLnBlcmlvZE9wdGlvbnMgPSBbXG4gICAgICAgIHtsYWJlbDogJ1llYXJseScsIHZhbHVlOiAneWVhcmx5J30sXG4gICAgICAgIHtsYWJlbDogJ01vbnRobHknLCB2YWx1ZTogJ21vbnRobHknfSxcbiAgICAgICAge2xhYmVsOiAnV2Vla2x5JywgdmFsdWU6ICd3ZWVrbHknfSxcbiAgICAgICAge2xhYmVsOiAnSG91cmx5JywgdmFsdWU6ICdob3VybHknfVxuICAgICAgXVxuICAgICAgJHNjb3BlLnBlcmlvZCA9IGFuZ3VsYXIuY29weShfLmZpbmQoJHNjb3BlLnBlcmlvZE9wdGlvbnMsIChvKSAtPlxuICAgICAgICBvLnZhbHVlID09IHcuY29udGVudC50b3RhbC5wZXJpb2QudG9Mb3dlckNhc2UoKVxuICAgICAgKSB8fCAkc2NvcGUucGVyaW9kT3B0aW9uc1swXSlcblxuICAkc2NvcGUuZ2V0U2luZ2xlQ29tcGFueU5hbWUgPSAtPlxuICAgIGlmIHcuY29udGVudCAmJiB3LmNvbnRlbnQub3JnYW5pemF0aW9uc1xuICAgICAgb3JnVWlkID0gdy5jb250ZW50Lm9yZ2FuaXphdGlvbnNbMF1cbiAgICAgIG9yZyA9IF8uZmluZCgkc2NvcGUucGFyZW50RGFzaGJvYXJkLmRhdGFfc291cmNlcywgKG8pIC0+XG4gICAgICAgIG8udWlkID09IG9yZ1VpZFxuICAgICAgKVxuICAgICAgcmV0dXJuIG9yZy5sYWJlbFxuXG4gICRzY29wZS5nZXRFbXBsb3llZVNhbGFyeSA9IChhbkVtcGxveWVlKSAtPlxuICAgIGlmIGFuRW1wbG95ZWUuc2FsYXJ5P1xuICAgICAgcmV0dXJuICRmaWx0ZXIoJ21ub0N1cnJlbmN5JykoYW5FbXBsb3llZS5zYWxhcnkuYW1vdW50LHcuY29udGVudC50b3RhbC5jdXJyZW5jeSlcbiAgICBlbHNlXG4gICAgICByZXR1cm4gJy0nXG5cblxuICAjIFdpZGdldCBpcyByZWFkeTogY2FuIHRyaWdnZXIgdGhlIFwid2FpdCBmb3Igc2V0dGlnbnMgdG8gYmUgcmVhZHlcIlxuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICRzY29wZS53aWRnZXREZWZlcnJlZC5yZXNvbHZlKHNldHRpbmdzUHJvbWlzZXMpXG4pXG5cbm1vZHVsZS5kaXJlY3RpdmUoJ3dpZGdldEhyRW1wbG95ZWVzTGlzdCcsIC0+XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBjb250cm9sbGVyOiAnV2lkZ2V0SHJFbXBsb3llZXNMaXN0Q3RybCdcbiAgfVxuKVxuIl19

(function() {
  var module;

  module = angular.module('impac.components.widgets.hr-leaves-balance', []);

  module.controller('WidgetHrLeavesBalanceCtrl', function($scope, $q) {
    var settingsPromises, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    $scope.paramSelectorDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise, $scope.paramSelectorDeferred.promise];
    w.initContext = function() {
      if ($scope.isDataFound = !_.isEmpty(w.content) && !_.isEmpty(w.content.employees)) {
        $scope.employeesOptions = _.map(w.content.employees, function(e) {
          return {
            value: e.uid,
            label: e.lastname + " " + e.firstname
          };
        });
        return $scope.selectedEmployee = {
          value: $scope.getEmployee().uid,
          label: ($scope.getEmployee().lastname) + " " + ($scope.getEmployee().firstname)
        };
      }
    };
    $scope.getEmployee = function() {
      var e;
      if (!$scope.isDataFound) {
        return false;
      }
      e = w.content.employees[0];
      if (w.metadata && w.metadata.employee_id) {
        e = _.find(w.content.employees, function(e) {
          return e.uid === w.metadata.employee_id;
        }) || w.content.employees[0];
      }
      return angular.copy(e);
    };
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetHrLeavesBalance', function() {
    return {
      restrict: 'A',
      controller: 'WidgetHrLeavesBalanceCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy9oci1sZWF2ZXMtYmFsYW5jZS9oci1sZWF2ZXMtYmFsYW5jZS5kaXJlY3RpdmUuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBO0FBQUEsTUFBQTs7RUFBQSxNQUFBLEdBQVMsT0FBTyxDQUFDLE1BQVIsQ0FBZSw0Q0FBZixFQUE0RCxFQUE1RDs7RUFFVCxNQUFNLENBQUMsVUFBUCxDQUFrQiwyQkFBbEIsRUFBK0MsU0FBQyxNQUFELEVBQVMsRUFBVDtBQUU3QyxRQUFBO0lBQUEsQ0FBQSxHQUFJLE1BQU0sQ0FBQztJQUlYLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFDckIsTUFBTSxDQUFDLHFCQUFQLEdBQStCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFFL0IsZ0JBQUEsR0FBbUIsQ0FDakIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQURGLEVBRWpCLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxPQUZaO0lBUW5CLENBQUMsQ0FBQyxXQUFGLEdBQWdCLFNBQUE7TUFDZCxJQUFHLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLENBQUMsQ0FBQyxDQUFDLE9BQUYsQ0FBVSxDQUFDLENBQUMsT0FBWixDQUFELElBQXlCLENBQUMsQ0FBQyxDQUFDLE9BQUYsQ0FBVSxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQXBCLENBQWxEO1FBQ0UsTUFBTSxDQUFDLGdCQUFQLEdBQTBCLENBQUMsQ0FBQyxHQUFGLENBQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFoQixFQUEyQixTQUFDLENBQUQ7aUJBQ25EO1lBQ0UsS0FBQSxFQUFPLENBQUMsQ0FBQyxHQURYO1lBRUUsS0FBQSxFQUFVLENBQUMsQ0FBQyxRQUFILEdBQVksR0FBWixHQUFlLENBQUMsQ0FBQyxTQUY1Qjs7UUFEbUQsQ0FBM0I7ZUFNMUIsTUFBTSxDQUFDLGdCQUFQLEdBQTBCO1VBQ3hCLEtBQUEsRUFBTyxNQUFNLENBQUMsV0FBUCxDQUFBLENBQW9CLENBQUMsR0FESjtVQUV4QixLQUFBLEVBQVMsQ0FBQyxNQUFNLENBQUMsV0FBUCxDQUFBLENBQW9CLENBQUMsUUFBdEIsQ0FBQSxHQUErQixHQUEvQixHQUFpQyxDQUFDLE1BQU0sQ0FBQyxXQUFQLENBQUEsQ0FBb0IsQ0FBQyxTQUF0QixDQUZsQjtVQVA1Qjs7SUFEYztJQWFoQixNQUFNLENBQUMsV0FBUCxHQUFxQixTQUFBO0FBQ25CLFVBQUE7TUFBQSxJQUFBLENBQW9CLE1BQU0sQ0FBQyxXQUEzQjtBQUFBLGVBQU8sTUFBUDs7TUFFQSxDQUFBLEdBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFVLENBQUEsQ0FBQTtNQUN4QixJQUFHLENBQUMsQ0FBQyxRQUFGLElBQWMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxXQUE1QjtRQUNFLENBQUEsR0FBSSxDQUFDLENBQUMsSUFBRixDQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBakIsRUFBNEIsU0FBQyxDQUFEO2lCQUM5QixDQUFDLENBQUMsR0FBRixLQUFTLENBQUMsQ0FBQyxRQUFRLENBQUM7UUFEVSxDQUE1QixDQUFBLElBRUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFVLENBQUEsQ0FBQSxFQUgzQjs7QUFLQSxhQUFPLE9BQU8sQ0FBQyxJQUFSLENBQWEsQ0FBYjtJQVRZO1dBY3JCLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBdEIsQ0FBOEIsZ0JBQTlCO0VBNUM2QyxDQUEvQzs7RUErQ0EsTUFBTSxDQUFDLFNBQVAsQ0FBaUIsdUJBQWpCLEVBQTBDLFNBQUE7QUFDeEMsV0FBTztNQUNMLFFBQUEsRUFBVSxHQURMO01BRUwsVUFBQSxFQUFZLDJCQUZQOztFQURpQyxDQUExQztBQWpEQSIsImZpbGUiOiJjb21wb25lbnRzL3dpZGdldHMvaHItbGVhdmVzLWJhbGFuY2UvaHItbGVhdmVzLWJhbGFuY2UuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiIyBUT0RPOiBmYWN0b3Igd2l0aCBzdXBlcmFubnVhdGlvbiBhY2NydWFscyAoZXhhY3Qgc2FtZSBjb250cm9sbGVyKVxuXG5tb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnaW1wYWMuY29tcG9uZW50cy53aWRnZXRzLmhyLWxlYXZlcy1iYWxhbmNlJyxbXSlcblxubW9kdWxlLmNvbnRyb2xsZXIoJ1dpZGdldEhyTGVhdmVzQmFsYW5jZUN0cmwnLCAoJHNjb3BlLCAkcSkgLT5cblxuICB3ID0gJHNjb3BlLndpZGdldFxuXG4gICMgRGVmaW5lIHNldHRpbmdzXG4gICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgJHNjb3BlLm9yZ0RlZmVycmVkID0gJHEuZGVmZXIoKVxuICAkc2NvcGUucGFyYW1TZWxlY3RvckRlZmVycmVkID0gJHEuZGVmZXIoKVxuXG4gIHNldHRpbmdzUHJvbWlzZXMgPSBbXG4gICAgJHNjb3BlLm9yZ0RlZmVycmVkLnByb21pc2VcbiAgICAkc2NvcGUucGFyYW1TZWxlY3RvckRlZmVycmVkLnByb21pc2VcbiAgXVxuXG5cbiAgIyBXaWRnZXQgc3BlY2lmaWMgbWV0aG9kc1xuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHcuaW5pdENvbnRleHQgPSAtPlxuICAgIGlmICRzY29wZS5pc0RhdGFGb3VuZCA9ICFfLmlzRW1wdHkody5jb250ZW50KSAmJiAhXy5pc0VtcHR5KHcuY29udGVudC5lbXBsb3llZXMpXG4gICAgICAkc2NvcGUuZW1wbG95ZWVzT3B0aW9ucyA9IF8ubWFwKHcuY29udGVudC5lbXBsb3llZXMsIChlKSAtPlxuICAgICAgICB7XG4gICAgICAgICAgdmFsdWU6IGUudWlkLFxuICAgICAgICAgIGxhYmVsOiBcIiN7ZS5sYXN0bmFtZX0gI3tlLmZpcnN0bmFtZX1cIixcbiAgICAgICAgfVxuICAgICAgKVxuICAgICAgJHNjb3BlLnNlbGVjdGVkRW1wbG95ZWUgPSB7XG4gICAgICAgIHZhbHVlOiAkc2NvcGUuZ2V0RW1wbG95ZWUoKS51aWQsXG4gICAgICAgIGxhYmVsOiBcIiN7JHNjb3BlLmdldEVtcGxveWVlKCkubGFzdG5hbWV9ICN7JHNjb3BlLmdldEVtcGxveWVlKCkuZmlyc3RuYW1lfVwiLFxuICAgICAgfVxuXG4gICRzY29wZS5nZXRFbXBsb3llZSA9IC0+XG4gICAgcmV0dXJuIGZhbHNlIHVubGVzcyAkc2NvcGUuaXNEYXRhRm91bmRcblxuICAgIGUgPSB3LmNvbnRlbnQuZW1wbG95ZWVzWzBdXG4gICAgaWYgdy5tZXRhZGF0YSAmJiB3Lm1ldGFkYXRhLmVtcGxveWVlX2lkXG4gICAgICBlID0gXy5maW5kKHcuY29udGVudC5lbXBsb3llZXMsIChlKSAtPlxuICAgICAgICBlLnVpZCA9PSB3Lm1ldGFkYXRhLmVtcGxveWVlX2lkXG4gICAgICApIHx8IHcuY29udGVudC5lbXBsb3llZXNbMF1cblxuICAgIHJldHVybiBhbmd1bGFyLmNvcHkoZSlcblxuXG4gICMgV2lkZ2V0IGlzIHJlYWR5OiBjYW4gdHJpZ2dlciB0aGUgXCJ3YWl0IGZvciBzZXR0aWducyB0byBiZSByZWFkeVwiXG4gICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgJHNjb3BlLndpZGdldERlZmVycmVkLnJlc29sdmUoc2V0dGluZ3NQcm9taXNlcylcbilcblxubW9kdWxlLmRpcmVjdGl2ZSgnd2lkZ2V0SHJMZWF2ZXNCYWxhbmNlJywgLT5cbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIGNvbnRyb2xsZXI6ICdXaWRnZXRIckxlYXZlc0JhbGFuY2VDdHJsJ1xuICB9XG4pXG4iXX0=

(function() {
  var module;

  module = angular.module('impac.components.widgets.hr-leaves-schedule', []);

  module.controller('WidgetHrLeavesScheduleCtrl', function($scope, $q, ChartFormatterSvc) {
    var settingsPromises, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise];
    w.initContext = function() {
      var eventsArray;
      if ($scope.isDataFound = angular.isDefined(w.content) && !_.isEmpty(w.content.summary)) {
        eventsArray = [];
        angular.forEach(w.content.summary, function(leave) {
          return eventsArray.push({
            title: leave.employee_name + " - " + leave.title,
            start: leave.start_date,
            end: leave.end_date
          });
        });
        return $scope.eventSources = angular.copy(eventsArray);
      }
    };
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetHrLeavesSchedule', function() {
    return {
      restrict: 'A',
      controller: 'WidgetHrLeavesScheduleCtrl'
    };
  });

  module.directive('widgetComponentCalendar', function() {
    return {
      scope: {
        events: '=ngModel'
      },
      restrict: 'A',
      link: function(scope, element) {
        var calendarOptions, getEvents;
        scope.eventSources = [];
        calendarOptions = {
          header: {
            left: "prev",
            center: "title",
            right: "next"
          },
          contentHeight: 204
        };
        getEvents = function() {
          return scope.events;
        };
        return scope.$watch(getEvents, function(events) {
          if (events.length > 0) {
            element.fullCalendar('destroy');
            angular.extend(calendarOptions, {
              events: scope.events
            });
            return element.fullCalendar(calendarOptions);
          }
        }, true);
      }
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy9oci1sZWF2ZXMtc2NoZWR1bGUvaHItbGVhdmVzLXNjaGVkdWxlLmRpcmVjdGl2ZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBOztFQUFBLE1BQUEsR0FBUyxPQUFPLENBQUMsTUFBUixDQUFlLDZDQUFmLEVBQTZELEVBQTdEOztFQUVULE1BQU0sQ0FBQyxVQUFQLENBQWtCLDRCQUFsQixFQUFnRCxTQUFDLE1BQUQsRUFBUyxFQUFULEVBQWEsaUJBQWI7QUFFOUMsUUFBQTtJQUFBLENBQUEsR0FBSSxNQUFNLENBQUM7SUFJWCxNQUFNLENBQUMsV0FBUCxHQUFxQixFQUFFLENBQUMsS0FBSCxDQUFBO0lBRXJCLGdCQUFBLEdBQW1CLENBQ2pCLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FERjtJQU9uQixDQUFDLENBQUMsV0FBRixHQUFnQixTQUFBO0FBQ2QsVUFBQTtNQUFBLElBQUcsTUFBTSxDQUFDLFdBQVAsR0FBcUIsT0FBTyxDQUFDLFNBQVIsQ0FBa0IsQ0FBQyxDQUFDLE9BQXBCLENBQUEsSUFBZ0MsQ0FBQyxDQUFDLENBQUMsT0FBRixDQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBcEIsQ0FBekQ7UUFFRSxXQUFBLEdBQWM7UUFDZCxPQUFPLENBQUMsT0FBUixDQUFnQixDQUFDLENBQUMsT0FBTyxDQUFDLE9BQTFCLEVBQW1DLFNBQUMsS0FBRDtpQkFDakMsV0FBVyxDQUFDLElBQVosQ0FDRTtZQUNFLEtBQUEsRUFBVSxLQUFLLENBQUMsYUFBUCxHQUFxQixLQUFyQixHQUEwQixLQUFLLENBQUMsS0FEM0M7WUFFRSxLQUFBLEVBQU8sS0FBSyxDQUFDLFVBRmY7WUFHRSxHQUFBLEVBQUssS0FBSyxDQUFDLFFBSGI7V0FERjtRQURpQyxDQUFuQztlQVNBLE1BQU0sQ0FBQyxZQUFQLEdBQXNCLE9BQU8sQ0FBQyxJQUFSLENBQWEsV0FBYixFQVp4Qjs7SUFEYztXQWtCaEIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUF0QixDQUE4QixnQkFBOUI7RUFqQzhDLENBQWhEOztFQW9DQSxNQUFNLENBQUMsU0FBUCxDQUFpQix3QkFBakIsRUFBMkMsU0FBQTtBQUN6QyxXQUFPO01BQ0wsUUFBQSxFQUFVLEdBREw7TUFFTCxVQUFBLEVBQVksNEJBRlA7O0VBRGtDLENBQTNDOztFQU9BLE1BQU0sQ0FBQyxTQUFQLENBQWlCLHlCQUFqQixFQUE0QyxTQUFBO0FBQzFDLFdBQU87TUFDTCxLQUFBLEVBQU87UUFDTCxNQUFBLEVBQVEsVUFESDtPQURGO01BSUwsUUFBQSxFQUFVLEdBSkw7TUFLTCxJQUFBLEVBQU0sU0FBQyxLQUFELEVBQVEsT0FBUjtBQUNKLFlBQUE7UUFBQSxLQUFLLENBQUMsWUFBTixHQUFxQjtRQUVyQixlQUFBLEdBQWtCO1VBQ2hCLE1BQUEsRUFBUTtZQUNOLElBQUEsRUFBTSxNQURBO1lBRU4sTUFBQSxFQUFRLE9BRkY7WUFHTixLQUFBLEVBQU8sTUFIRDtXQURRO1VBTWhCLGFBQUEsRUFBZSxHQU5DOztRQVVsQixTQUFBLEdBQVksU0FBQTtBQUNWLGlCQUFPLEtBQUssQ0FBQztRQURIO2VBR1osS0FBSyxDQUFDLE1BQU4sQ0FBYSxTQUFiLEVBQXdCLFNBQUMsTUFBRDtVQUN0QixJQUFHLE1BQU0sQ0FBQyxNQUFQLEdBQWdCLENBQW5CO1lBQ0UsT0FBTyxDQUFDLFlBQVIsQ0FBcUIsU0FBckI7WUFDQSxPQUFPLENBQUMsTUFBUixDQUFlLGVBQWYsRUFBZ0M7Y0FBQyxNQUFBLEVBQVEsS0FBSyxDQUFDLE1BQWY7YUFBaEM7bUJBQ0EsT0FBTyxDQUFDLFlBQVIsQ0FBcUIsZUFBckIsRUFIRjs7UUFEc0IsQ0FBeEIsRUFLQyxJQUxEO01BaEJJLENBTEQ7O0VBRG1DLENBQTVDO0FBN0NBIiwiZmlsZSI6ImNvbXBvbmVudHMvd2lkZ2V0cy9oci1sZWF2ZXMtc2NoZWR1bGUvaHItbGVhdmVzLXNjaGVkdWxlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdpbXBhYy5jb21wb25lbnRzLndpZGdldHMuaHItbGVhdmVzLXNjaGVkdWxlJyxbXSlcblxubW9kdWxlLmNvbnRyb2xsZXIoJ1dpZGdldEhyTGVhdmVzU2NoZWR1bGVDdHJsJywgKCRzY29wZSwgJHEsIENoYXJ0Rm9ybWF0dGVyU3ZjKSAtPlxuXG4gIHcgPSAkc2NvcGUud2lkZ2V0XG5cbiAgIyBEZWZpbmUgc2V0dGluZ3NcbiAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAkc2NvcGUub3JnRGVmZXJyZWQgPSAkcS5kZWZlcigpXG5cbiAgc2V0dGluZ3NQcm9taXNlcyA9IFtcbiAgICAkc2NvcGUub3JnRGVmZXJyZWQucHJvbWlzZVxuICBdXG5cblxuICAjIFdpZGdldCBzcGVjaWZpYyBtZXRob2RzXG4gICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgdy5pbml0Q29udGV4dCA9IC0+XG4gICAgaWYgJHNjb3BlLmlzRGF0YUZvdW5kID0gYW5ndWxhci5pc0RlZmluZWQody5jb250ZW50KSAmJiAhXy5pc0VtcHR5KHcuY29udGVudC5zdW1tYXJ5KVxuXG4gICAgICBldmVudHNBcnJheSA9IFtdXG4gICAgICBhbmd1bGFyLmZvckVhY2gody5jb250ZW50LnN1bW1hcnksIChsZWF2ZSkgLT5cbiAgICAgICAgZXZlbnRzQXJyYXkucHVzaChcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0aXRsZTogXCIje2xlYXZlLmVtcGxveWVlX25hbWV9IC0gI3tsZWF2ZS50aXRsZX1cIixcbiAgICAgICAgICAgIHN0YXJ0OiBsZWF2ZS5zdGFydF9kYXRlLFxuICAgICAgICAgICAgZW5kOiBsZWF2ZS5lbmRfZGF0ZVxuICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgKVxuICAgICAgJHNjb3BlLmV2ZW50U291cmNlcyA9IGFuZ3VsYXIuY29weShldmVudHNBcnJheSlcblxuXG4gICMgV2lkZ2V0IGlzIHJlYWR5OiBjYW4gdHJpZ2dlciB0aGUgXCJ3YWl0IGZvciBzZXR0aWducyB0byBiZSByZWFkeVwiXG4gICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgJHNjb3BlLndpZGdldERlZmVycmVkLnJlc29sdmUoc2V0dGluZ3NQcm9taXNlcylcbilcblxubW9kdWxlLmRpcmVjdGl2ZSgnd2lkZ2V0SHJMZWF2ZXNTY2hlZHVsZScsIC0+XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBjb250cm9sbGVyOiAnV2lkZ2V0SHJMZWF2ZXNTY2hlZHVsZUN0cmwnXG4gIH1cbilcblxubW9kdWxlLmRpcmVjdGl2ZSgnd2lkZ2V0Q29tcG9uZW50Q2FsZW5kYXInLCAtPlxuICByZXR1cm4ge1xuICAgIHNjb3BlOiB7XG4gICAgICBldmVudHM6ICc9bmdNb2RlbCdcbiAgICB9XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBsaW5rOiAoc2NvcGUsIGVsZW1lbnQpIC0+XG4gICAgICBzY29wZS5ldmVudFNvdXJjZXMgPSBbXVxuXG4gICAgICBjYWxlbmRhck9wdGlvbnMgPSB7XG4gICAgICAgIGhlYWRlcjoge1xuICAgICAgICAgIGxlZnQ6IFwicHJldlwiLFxuICAgICAgICAgIGNlbnRlcjogXCJ0aXRsZVwiLFxuICAgICAgICAgIHJpZ2h0OiBcIm5leHRcIixcbiAgICAgICAgfSxcbiAgICAgICAgY29udGVudEhlaWdodDogMjA0LFxuICAgICAgICAjIGFzcGVjdFJhdGlvOiAzLFxuICAgICAgfVxuXG4gICAgICBnZXRFdmVudHMgPSAtPlxuICAgICAgICByZXR1cm4gc2NvcGUuZXZlbnRzXG5cbiAgICAgIHNjb3BlLiR3YXRjaCBnZXRFdmVudHMsIChldmVudHMpIC0+XG4gICAgICAgIGlmIGV2ZW50cy5sZW5ndGggPiAwXG4gICAgICAgICAgZWxlbWVudC5mdWxsQ2FsZW5kYXIoJ2Rlc3Ryb3knKVxuICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKGNhbGVuZGFyT3B0aW9ucywge2V2ZW50czogc2NvcGUuZXZlbnRzfSlcbiAgICAgICAgICBlbGVtZW50LmZ1bGxDYWxlbmRhcihjYWxlbmRhck9wdGlvbnMpXG4gICAgICAsdHJ1ZVxuICB9XG4pIl19

(function() {
  var module;

  module = angular.module('impac.components.widgets.hr-payroll-summary', []);

  module.controller('WidgetHrPayrollSummaryCtrl', function($scope, $q, ChartFormatterSvc, $filter, ImpacWidgetsSvc) {
    var selectedElementsSetting, settingsPromises, unCollapsedSetting, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    $scope.timeRangeDeferred = $q.defer();
    $scope.widthDeferred = $q.defer();
    $scope.histModeDeferred = $q.defer();
    $scope.chartDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise, $scope.timeRangeDeferred.promise, $scope.widthDeferred.promise, $scope.histModeDeferred.promise, $scope.chartDeferred.promise];
    w.initContext = function() {
      if ($scope.isDataFound = angular.isDefined(w.content) && !_.isEmpty(w.content.summary) && !_.isEmpty(w.content.dates)) {
        $scope.unCollapsed = w.metadata.unCollapsed || [];
        if (w.metadata.selectedElements) {
          $scope.selectedElements = [];
          angular.forEach(w.metadata.selectedElements, function(sElem) {
            var foundElem;
            foundElem = _.find(w.content.summary, function(statement) {
              return statement.name === sElem.name;
            });
            if (!foundElem) {
              angular.forEach(w.content.summary, function(statement) {
                if (statement.employees != null) {
                  return foundElem || (foundElem = _.find(statement.employees, function(employee) {
                    return sElem.id === employee.id;
                  }));
                }
              });
            }
            if (foundElem) {
              return $scope.selectedElements.push(foundElem);
            }
          });
        }
        if (!(($scope.selectedElements != null) && $scope.selectedElements.length > 0)) {
          return w.width = 6;
        }
      }
    };
    $scope.getElementChartColor = function(index) {
      return ChartFormatterSvc.getColor(index);
    };
    $scope.getLastValue = function(element) {
      if (element.totals != null) {
        return element.totals[element.totals.length - 2];
      }
    };
    $scope.getTotalSum = function(element) {
      if (element.totals != null) {
        return _.reduce(element.totals, function(memo, num) {
          return memo + num;
        }, 0);
      }
    };
    $scope.getName = function(element) {
      if ((element != null) && (element.name != null)) {
        if (element.name === "total_leaves") {
          return "Total Leaves Accruals";
        }
        if (element.name === "total_super") {
          return "Total Superannuation Accruals";
        }
        if (element.name === "total_reimbursement") {
          return "Total Reimbursements";
        }
        if (element.name === "total_tax") {
          return "Total Taxes";
        }
        if (element.name === "total_timeoff") {
          return "Total Time Off";
        }
        return element.name.replace(/_/g, " ");
      }
    };
    $scope.getTrackedField = function() {
      var allFieldsEquals, field;
      if (!_.isEmpty($scope.selectedElements) && ($scope.selectedElements[0].id != null)) {
        field = $scope.selectedElements[0].id.split('-')[0];
        allFieldsEquals = true;
        angular.forEach($scope.selectedElements, function(element) {
          return allFieldsEquals && (allFieldsEquals = element.id && field === element.id.split('-')[0]);
        });
        if (allFieldsEquals) {
          return $scope.getName({
            name: field
          });
        } else {
          return null;
        }
      }
    };
    $scope.formatDate = function(date) {
      if (w.content.hist_parameters != null) {
        switch (w.content.hist_parameters.period) {
          case 'DAILY':
            return $filter('date')(date, 'dd-MMM');
          case 'WEEKLY':
            return $filter('date')(date, 'dd-MMM');
          case 'MONTHLY':
            return $filter('date')(date, 'MMM');
          case 'QUARTERLY':
            return $filter('date')(date, 'MMM-yy');
          case 'YEARLY':
            return $filter('date')(date, 'yyyy');
          default:
            return $filter('date')(date, 'MMM');
        }
      } else {
        return $filter('date')(date, 'MMM');
      }
    };
    $scope.toggleSelectedElement = function(element) {
      if ($scope.isSelected(element)) {
        $scope.selectedElements = _.reject($scope.selectedElements, function(sElem) {
          if (element.id) {
            return sElem.id === element.id;
          } else {
            return sElem.name === element.name;
          }
        });
        w.format();
        if (w.isExpanded() && $scope.selectedElements.length === 0) {
          return w.toggleExpanded();
        } else {
          return ImpacWidgetsSvc.updateWidgetSettings(w, false);
        }
      } else {
        $scope.selectedElements || ($scope.selectedElements = []);
        $scope.selectedElements.push(element);
        w.format();
        if (!w.isExpanded()) {
          return w.toggleExpanded();
        } else {
          return ImpacWidgetsSvc.updateWidgetSettings(w, false);
        }
      }
    };
    $scope.isSelected = function(element) {
      if ((element != null) && ($scope.selectedElements != null)) {
        if (_.find($scope.selectedElements, function(sElem) {
          if (element.id) {
            return sElem.id === element.id;
          } else {
            return sElem.name === element.name;
          }
        })) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    };
    $scope.toggleCollapsed = function(element) {
      if ((element != null) && (element.name != null)) {
        if (_.find($scope.unCollapsed, (function(name) {
          return element.name === name;
        }))) {
          $scope.unCollapsed = _.reject($scope.unCollapsed, function(name) {
            return name === element.name;
          });
        } else {
          $scope.unCollapsed.push(element.name);
        }
        return ImpacWidgetsSvc.updateWidgetSettings(w, false);
      }
    };
    $scope.isCollapsed = function(element) {
      if ((element != null) && (element.name != null)) {
        if (_.find($scope.unCollapsed, (function(name) {
          return element.name === name;
        }))) {
          return false;
        } else {
          return true;
        }
      }
    };
    $scope.hasElements = function() {
      return ($scope.selectedElements != null) && $scope.selectedElements.length > 0;
    };
    $scope.drawTrigger = $q.defer();
    w.format = function() {
      var all_values_are_positive, chartData, inputData, labels, options, pieData, pieOptions;
      if ($scope.isDataFound && $scope.hasElements()) {
        if (w.isHistoryMode) {
          all_values_are_positive = true;
          inputData = [];
          labels = _.map(w.content.dates, function(date) {
            if (w.metadata.hist_parameters && w.metadata.hist_parameters.period === "YEARLY") {
              return $filter('date')(date, 'yyyy');
            } else if (w.metadata.hist_parameters && w.metadata.hist_parameters.period === "QUARTERLY") {
              return $filter('date')(date, 'MMM-yy');
            } else if (w.metadata.hist_parameters && (w.metadata.hist_parameters.period === "WEEKLY" || w.metadata.hist_parameters.period === "DAILY")) {
              return $filter('date')(date, 'dd-MMM');
            } else {
              return $filter('date')(date, 'MMM');
            }
          });
          angular.forEach($scope.selectedElements, function(sElem) {
            var data;
            data = angular.copy(sElem);
            inputData.push({
              title: data.name,
              labels: labels,
              values: data.totals
            });
            return angular.forEach(data.totals, function(value) {
              return all_values_are_positive && (all_values_are_positive = value >= 0);
            });
          });
          options = {
            scaleBeginAtZero: all_values_are_positive,
            showXLabels: true,
            datasetFill: $scope.selectedElements.length === 1,
            pointDot: $scope.selectedElements.length === 1,
            currency: 'hide'
          };
          chartData = ChartFormatterSvc.lineChart(inputData, options);
        } else {
          pieData = _.map($scope.selectedElements, function(elem) {
            return {
              label: $filter('titleize')($scope.getName({
                name: elem.name
              })),
              value: $scope.getLastValue(elem)
            };
          });
          pieOptions = {
            showTooltips: true,
            percentageInnerCutout: 50,
            tooltipFontSize: 12,
            currency: 'hide'
          };
          chartData = ChartFormatterSvc.pieChart(pieData, pieOptions);
        }
        return $scope.drawTrigger.notify(chartData);
      }
    };
    unCollapsedSetting = {};
    unCollapsedSetting.initialized = false;
    unCollapsedSetting.initialize = function() {
      return unCollapsedSetting.initialized = true;
    };
    unCollapsedSetting.toMetadata = function() {
      return {
        unCollapsed: $scope.unCollapsed
      };
    };
    w.settings.push(unCollapsedSetting);
    selectedElementsSetting = {};
    selectedElementsSetting.initialized = false;
    selectedElementsSetting.initialize = function() {
      return selectedElementsSetting.initialized = true;
    };
    selectedElementsSetting.toMetadata = function() {
      return {
        selectedElements: $scope.selectedElements
      };
    };
    w.settings.push(selectedElementsSetting);
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetHrPayrollSummary', function() {
    return {
      restrict: 'A',
      controller: 'WidgetHrPayrollSummaryCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

(function() {
  var module;

  module = angular.module('impac.components.widgets.hr-payroll-taxes', []);

  module.controller('WidgetHrPayrollTaxesCtrl', function($scope, $q, ChartFormatterSvc, $filter) {
    var settingsPromises, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    $scope.timeRangeDeferred = $q.defer();
    $scope.histModeDeferred = $q.defer();
    $scope.chartDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise, $scope.timeRangeDeferred.promise, $scope.histModeDeferred.promise, $scope.chartDeferred.promise];
    w.initContext = function() {
      return $scope.isDataFound = (w.content != null) && !_.isEmpty(w.content.total_tax) && !_.isEmpty(w.content.dates);
    };
    $scope.getCurrentPrice = function() {
      if ($scope.isDataFound) {
        return _.last(w.content.total_tax);
      }
    };
    $scope.getCurrency = function() {
      if ($scope.isDataFound) {
        return w.content.currency || "USD";
      }
    };
    $scope.getPeriod = function() {
      var period, period_param;
      if ($scope.isDataFound && w.content.hist_parameters) {
        period_param = w.content.hist_parameters.period || "MONTHLY";
        period = "day";
        if (period_param !== "DAILY") {
          period = period_param.substr(0, period_param.length - 2).toLowerCase();
        }
        return "(current " + period + ")";
      }
    };
    $scope.drawTrigger = $q.defer();
    w.format = function() {
      var all_values_are_positive, chartData, dates, inputData, options, period;
      if ($scope.isDataFound) {
        period = null;
        if ((w.metadata != null) && (w.metadata.hist_parameters != null)) {
          period = w.metadata.hist_parameters.period;
        }
        dates = _.map(w.content.dates, function(date) {
          return $filter('mnoDate')(date, period);
        });
        inputData = {
          title: "Payroll Taxes",
          labels: dates,
          values: w.content.total_tax
        };
        all_values_are_positive = true;
        angular.forEach(w.content.total_tax, function(value) {
          return all_values_are_positive && (all_values_are_positive = value >= 0);
        });
        options = {
          scaleBeginAtZero: all_values_are_positive,
          showXLabels: false
        };
        chartData = ChartFormatterSvc.lineChart([inputData], options);
        return $scope.drawTrigger.notify(chartData);
      }
    };
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetHrPayrollTaxes', function() {
    return {
      restrict: 'A',
      controller: 'WidgetHrPayrollTaxesCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy9oci1wYXlyb2xsLXRheGVzL2hyLXBheXJvbGwtdGF4ZXMuZGlyZWN0aXZlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUE7O0VBQUEsTUFBQSxHQUFTLE9BQU8sQ0FBQyxNQUFSLENBQWUsMkNBQWYsRUFBMkQsRUFBM0Q7O0VBRVQsTUFBTSxDQUFDLFVBQVAsQ0FBa0IsMEJBQWxCLEVBQThDLFNBQUMsTUFBRCxFQUFTLEVBQVQsRUFBYSxpQkFBYixFQUFnQyxPQUFoQztBQUU1QyxRQUFBO0lBQUEsQ0FBQSxHQUFJLE1BQU0sQ0FBQztJQUlYLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFDckIsTUFBTSxDQUFDLGlCQUFQLEdBQTJCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFDM0IsTUFBTSxDQUFDLGdCQUFQLEdBQTBCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFDMUIsTUFBTSxDQUFDLGFBQVAsR0FBdUIsRUFBRSxDQUFDLEtBQUgsQ0FBQTtJQUV2QixnQkFBQSxHQUFtQixDQUNqQixNQUFNLENBQUMsV0FBVyxDQUFDLE9BREYsRUFFakIsTUFBTSxDQUFDLGlCQUFpQixDQUFDLE9BRlIsRUFHakIsTUFBTSxDQUFDLGdCQUFnQixDQUFDLE9BSFAsRUFJakIsTUFBTSxDQUFDLGFBQWEsQ0FBQyxPQUpKO0lBVW5CLENBQUMsQ0FBQyxXQUFGLEdBQWdCLFNBQUE7YUFDZCxNQUFNLENBQUMsV0FBUCxHQUFxQixtQkFBQSxJQUFjLENBQUMsQ0FBQyxDQUFDLE9BQUYsQ0FBVSxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQXBCLENBQWYsSUFBaUQsQ0FBQyxDQUFDLENBQUMsT0FBRixDQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBcEI7SUFEekQ7SUFHaEIsTUFBTSxDQUFDLGVBQVAsR0FBeUIsU0FBQTtNQUN2QixJQUFxQyxNQUFNLENBQUMsV0FBNUM7QUFBQSxlQUFPLENBQUMsQ0FBQyxJQUFGLENBQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFqQixFQUFQOztJQUR1QjtJQUd6QixNQUFNLENBQUMsV0FBUCxHQUFxQixTQUFBO01BQ25CLElBQXNDLE1BQU0sQ0FBQyxXQUE3QztBQUFBLGVBQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFWLElBQXNCLE1BQTdCOztJQURtQjtJQUdyQixNQUFNLENBQUMsU0FBUCxHQUFtQixTQUFBO0FBQ2pCLFVBQUE7TUFBQSxJQUFHLE1BQU0sQ0FBQyxXQUFQLElBQXNCLENBQUMsQ0FBQyxPQUFPLENBQUMsZUFBbkM7UUFDRSxZQUFBLEdBQWUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsTUFBMUIsSUFBb0M7UUFDbkQsTUFBQSxHQUFTO1FBQ1QsSUFBdUUsWUFBQSxLQUFnQixPQUF2RjtVQUFBLE1BQUEsR0FBUyxZQUFZLENBQUMsTUFBYixDQUFvQixDQUFwQixFQUFzQixZQUFZLENBQUMsTUFBYixHQUFvQixDQUExQyxDQUE0QyxDQUFDLFdBQTdDLENBQUEsRUFBVDs7QUFDQSxlQUFPLFdBQUEsR0FBWSxNQUFaLEdBQW1CLElBSjVCOztJQURpQjtJQVVuQixNQUFNLENBQUMsV0FBUCxHQUFxQixFQUFFLENBQUMsS0FBSCxDQUFBO0lBQ3JCLENBQUMsQ0FBQyxNQUFGLEdBQVcsU0FBQTtBQUNULFVBQUE7TUFBQSxJQUFHLE1BQU0sQ0FBQyxXQUFWO1FBRUUsTUFBQSxHQUFTO1FBQ1QsSUFBOEMsb0JBQUEsSUFBZSxvQ0FBN0Q7VUFBQSxNQUFBLEdBQVMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsT0FBcEM7O1FBQ0EsS0FBQSxHQUFRLENBQUMsQ0FBQyxHQUFGLENBQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFoQixFQUF1QixTQUFDLElBQUQ7aUJBQzdCLE9BQUEsQ0FBUSxTQUFSLENBQUEsQ0FBbUIsSUFBbkIsRUFBeUIsTUFBekI7UUFENkIsQ0FBdkI7UUFHUixTQUFBLEdBQVk7VUFBQyxLQUFBLEVBQU8sZUFBUjtVQUF5QixNQUFBLEVBQVEsS0FBakM7VUFBd0MsTUFBQSxFQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBMUQ7O1FBQ1osdUJBQUEsR0FBMEI7UUFDMUIsT0FBTyxDQUFDLE9BQVIsQ0FBZ0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUExQixFQUFxQyxTQUFDLEtBQUQ7aUJBQ25DLDRCQUFBLDBCQUE0QixLQUFBLElBQVM7UUFERixDQUFyQztRQUlBLE9BQUEsR0FBVTtVQUNSLGdCQUFBLEVBQWtCLHVCQURWO1VBRVIsV0FBQSxFQUFhLEtBRkw7O1FBSVYsU0FBQSxHQUFZLGlCQUFpQixDQUFDLFNBQWxCLENBQTRCLENBQUMsU0FBRCxDQUE1QixFQUF3QyxPQUF4QztlQUdaLE1BQU0sQ0FBQyxXQUFXLENBQUMsTUFBbkIsQ0FBMEIsU0FBMUIsRUFwQkY7O0lBRFM7V0EwQlgsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUF0QixDQUE4QixnQkFBOUI7RUFuRTRDLENBQTlDOztFQXNFQSxNQUFNLENBQUMsU0FBUCxDQUFpQixzQkFBakIsRUFBeUMsU0FBQTtBQUN2QyxXQUFPO01BQ0wsUUFBQSxFQUFVLEdBREw7TUFFTCxVQUFBLEVBQVksMEJBRlA7O0VBRGdDLENBQXpDO0FBeEVBIiwiZmlsZSI6ImNvbXBvbmVudHMvd2lkZ2V0cy9oci1wYXlyb2xsLXRheGVzL2hyLXBheXJvbGwtdGF4ZXMuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2ltcGFjLmNvbXBvbmVudHMud2lkZ2V0cy5oci1wYXlyb2xsLXRheGVzJyxbXSlcblxubW9kdWxlLmNvbnRyb2xsZXIoJ1dpZGdldEhyUGF5cm9sbFRheGVzQ3RybCcsICgkc2NvcGUsICRxLCBDaGFydEZvcm1hdHRlclN2YywgJGZpbHRlcikgLT5cblxuICB3ID0gJHNjb3BlLndpZGdldFxuXG4gICMgRGVmaW5lIHNldHRpbmdzXG4gICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgJHNjb3BlLm9yZ0RlZmVycmVkID0gJHEuZGVmZXIoKVxuICAkc2NvcGUudGltZVJhbmdlRGVmZXJyZWQgPSAkcS5kZWZlcigpXG4gICRzY29wZS5oaXN0TW9kZURlZmVycmVkID0gJHEuZGVmZXIoKVxuICAkc2NvcGUuY2hhcnREZWZlcnJlZCA9ICRxLmRlZmVyKClcblxuICBzZXR0aW5nc1Byb21pc2VzID0gW1xuICAgICRzY29wZS5vcmdEZWZlcnJlZC5wcm9taXNlXG4gICAgJHNjb3BlLnRpbWVSYW5nZURlZmVycmVkLnByb21pc2VcbiAgICAkc2NvcGUuaGlzdE1vZGVEZWZlcnJlZC5wcm9taXNlXG4gICAgJHNjb3BlLmNoYXJ0RGVmZXJyZWQucHJvbWlzZVxuICBdXG5cblxuICAjIFdpZGdldCBzcGVjaWZpYyBtZXRob2RzXG4gICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgdy5pbml0Q29udGV4dCA9IC0+XG4gICAgJHNjb3BlLmlzRGF0YUZvdW5kID0gdy5jb250ZW50PyAmJiAhXy5pc0VtcHR5KHcuY29udGVudC50b3RhbF90YXgpICYmICFfLmlzRW1wdHkody5jb250ZW50LmRhdGVzKVxuXG4gICRzY29wZS5nZXRDdXJyZW50UHJpY2UgPSAtPlxuICAgIHJldHVybiBfLmxhc3Qgdy5jb250ZW50LnRvdGFsX3RheCBpZiAkc2NvcGUuaXNEYXRhRm91bmRcblxuICAkc2NvcGUuZ2V0Q3VycmVuY3kgPSAtPlxuICAgIHJldHVybiB3LmNvbnRlbnQuY3VycmVuY3kgfHwgXCJVU0RcIiBpZiAkc2NvcGUuaXNEYXRhRm91bmRcblxuICAkc2NvcGUuZ2V0UGVyaW9kID0gLT5cbiAgICBpZiAkc2NvcGUuaXNEYXRhRm91bmQgJiYgdy5jb250ZW50Lmhpc3RfcGFyYW1ldGVyc1xuICAgICAgcGVyaW9kX3BhcmFtID0gdy5jb250ZW50Lmhpc3RfcGFyYW1ldGVycy5wZXJpb2QgfHwgXCJNT05USExZXCJcbiAgICAgIHBlcmlvZCA9IFwiZGF5XCJcbiAgICAgIHBlcmlvZCA9IHBlcmlvZF9wYXJhbS5zdWJzdHIoMCxwZXJpb2RfcGFyYW0ubGVuZ3RoLTIpLnRvTG93ZXJDYXNlKCkgaWYgcGVyaW9kX3BhcmFtICE9IFwiREFJTFlcIlxuICAgICAgcmV0dXJuIFwiKGN1cnJlbnQgI3twZXJpb2R9KVwiXG5cblxuICAjIENoYXJ0IGZvcm1hdGluZyBmdW5jdGlvblxuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICRzY29wZS5kcmF3VHJpZ2dlciA9ICRxLmRlZmVyKClcbiAgdy5mb3JtYXQgPSAtPlxuICAgIGlmICRzY29wZS5pc0RhdGFGb3VuZFxuXG4gICAgICBwZXJpb2QgPSBudWxsXG4gICAgICBwZXJpb2QgPSB3Lm1ldGFkYXRhLmhpc3RfcGFyYW1ldGVycy5wZXJpb2QgaWYgdy5tZXRhZGF0YT8gJiYgdy5tZXRhZGF0YS5oaXN0X3BhcmFtZXRlcnM/XG4gICAgICBkYXRlcyA9IF8ubWFwIHcuY29udGVudC5kYXRlcywgKGRhdGUpIC0+XG4gICAgICAgICRmaWx0ZXIoJ21ub0RhdGUnKShkYXRlLCBwZXJpb2QpXG5cbiAgICAgIGlucHV0RGF0YSA9IHt0aXRsZTogXCJQYXlyb2xsIFRheGVzXCIsIGxhYmVsczogZGF0ZXMsIHZhbHVlczogdy5jb250ZW50LnRvdGFsX3RheH1cbiAgICAgIGFsbF92YWx1ZXNfYXJlX3Bvc2l0aXZlID0gdHJ1ZVxuICAgICAgYW5ndWxhci5mb3JFYWNoKHcuY29udGVudC50b3RhbF90YXgsICh2YWx1ZSkgLT5cbiAgICAgICAgYWxsX3ZhbHVlc19hcmVfcG9zaXRpdmUgJiY9IHZhbHVlID49IDBcbiAgICAgIClcblxuICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgc2NhbGVCZWdpbkF0WmVybzogYWxsX3ZhbHVlc19hcmVfcG9zaXRpdmUsXG4gICAgICAgIHNob3dYTGFiZWxzOiBmYWxzZSxcbiAgICAgIH1cbiAgICAgIGNoYXJ0RGF0YSA9IENoYXJ0Rm9ybWF0dGVyU3ZjLmxpbmVDaGFydChbaW5wdXREYXRhXSxvcHRpb25zKVxuICAgICAgXG4gICAgICAjIGNhbGxzIGNoYXJ0LmRyYXcoKVxuICAgICAgJHNjb3BlLmRyYXdUcmlnZ2VyLm5vdGlmeShjaGFydERhdGEpXG5cblxuICAjIFdpZGdldCBpcyByZWFkeTogY2FuIHRyaWdnZXIgdGhlIFwid2FpdCBmb3Igc2V0dGlnbnMgdG8gYmUgcmVhZHlcIlxuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICRzY29wZS53aWRnZXREZWZlcnJlZC5yZXNvbHZlKHNldHRpbmdzUHJvbWlzZXMpXG4pXG5cbm1vZHVsZS5kaXJlY3RpdmUoJ3dpZGdldEhyUGF5cm9sbFRheGVzJywgLT5cbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIGNvbnRyb2xsZXI6ICdXaWRnZXRIclBheXJvbGxUYXhlc0N0cmwnLFxuICB9XG4pIl19

(function() {
  var module;

  module = angular.module('impac.components.widgets.hr-salaries-summary', []);

  module.controller('WidgetHrSalariesSummaryCtrl', function($scope, $q, ChartFormatterSvc) {
    var settingsPromises, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    $scope.widthDeferred = $q.defer();
    $scope.paramSelectorDeferred1 = $q.defer();
    $scope.paramSelectorDeferred2 = $q.defer();
    $scope.chartDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise, $scope.widthDeferred.promise, $scope.paramSelectorDeferred1.promise, $scope.paramSelectorDeferred2.promise, $scope.chartDeferred.promise];
    w.initContext = function() {
      if ($scope.isDataFound = !_.isEmpty(w.content) && (w.content.summary != null) && !_.isEmpty(w.content.summary.data)) {
        $scope.periodOptions = [
          {
            label: 'Yearly',
            value: 'yearly'
          }, {
            label: 'Monthly',
            value: 'monthly'
          }, {
            label: 'Weekly',
            value: 'weekly'
          }, {
            label: 'Hourly',
            value: 'hourly'
          }
        ];
        $scope.period = angular.copy(_.find($scope.periodOptions, function(o) {
          return o.value === w.content.total.period.toLowerCase();
        }) || $scope.periodOptions[0]);
        $scope.filterOptions = [
          {
            label: 'Gender',
            value: 'gender'
          }, {
            label: 'Age Range',
            value: 'age_range'
          }, {
            label: 'Job Title',
            value: 'job_title'
          }
        ];
        return $scope.filter = angular.copy(_.find($scope.filterOptions, function(o) {
          return o.value === w.content.summary.filter;
        }) || $scope.filterOptions[0]);
      }
    };
    $scope.getColorByIndex = function(index) {
      return ChartFormatterSvc.getColor(index);
    };
    $scope.drawTrigger = $q.defer();
    w.format = function() {
      var barData, barOptions, chartData, lineData, lineOptions;
      if ($scope.isDataFound) {
        barData = {
          labels: _.map(w.content.summary.data, function(elem) {
            return elem.label;
          }),
          values: _.map(w.content.summary.data, function(elem) {
            return elem.value;
          })
        };
        if ($scope.filter.value === 'gender') {
          barOptions = {
            showTooltips: false
          };
          chartData = ChartFormatterSvc.barChart(barData, barOptions);
        } else if ($scope.filter.value === 'job_title') {
          barOptions = {
            showTooltips: false,
            showXLabels: false,
            barDatasetSpacing: 15
          };
          chartData = ChartFormatterSvc.barChart(barData, barOptions);
        } else if ($scope.filter.value === 'age_range') {
          if (_.last(barData.labels) === "unknown") {
            barData.labels.pop();
            barData.values.pop();
          }
          lineData = [
            {
              title: "Average salary",
              labels: barData.labels,
              values: barData.values
            }
          ];
          lineOptions = {
            scaleBeginAtZero: true,
            showXLabels: false
          };
          chartData = ChartFormatterSvc.lineChart(lineData, lineOptions);
        } else {
          return {
            error: {
              message: "wrong filter",
              code: 400
            }
          };
        }
        return $scope.drawTrigger.notify(chartData);
      }
    };
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetHrSalariesSummary', function() {
    return {
      restrict: 'A',
      controller: 'WidgetHrSalariesSummaryCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

(function() {
  var module;

  module = angular.module('impac.components.widgets.hr-superannuation-accruals', []);

  module.controller('WidgetHrSuperannuationAccrualsCtrl', function($scope, $q) {
    var settingsPromises, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    $scope.paramSelectorDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise, $scope.paramSelectorDeferred.promise];
    w.initContext = function() {
      if ($scope.isDataFound = !_.isEmpty(w.content) && !_.isEmpty(w.content.employees)) {
        $scope.employeesOptions = _.map(w.content.employees, function(e) {
          return {
            value: e.uid,
            label: e.lastname + " " + e.firstname
          };
        });
        return $scope.selectedEmployee = {
          value: $scope.getEmployee().uid,
          label: ($scope.getEmployee().lastname) + " " + ($scope.getEmployee().firstname)
        };
      }
    };
    $scope.getEmployee = function() {
      var e;
      if (!$scope.isDataFound) {
        return false;
      }
      e = w.content.employees[0];
      if (w.metadata && w.metadata.employee_id) {
        e = _.find(w.content.employees, function(e) {
          return e.uid === w.metadata.employee_id;
        }) || w.content.employees[0];
      }
      return angular.copy(e);
    };
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetHrSuperannuationAccruals', function() {
    return {
      restrict: 'A',
      controller: 'WidgetHrSuperannuationAccrualsCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy9oci1zdXBlcmFubnVhdGlvbi1hY2NydWFscy9oci1zdXBlcmFubnVhdGlvbi1hY2NydWFscy5kaXJlY3RpdmUuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQTs7RUFBQSxNQUFBLEdBQVMsT0FBTyxDQUFDLE1BQVIsQ0FBZSxxREFBZixFQUFxRSxFQUFyRTs7RUFFVCxNQUFNLENBQUMsVUFBUCxDQUFrQixvQ0FBbEIsRUFBd0QsU0FBQyxNQUFELEVBQVMsRUFBVDtBQUV0RCxRQUFBO0lBQUEsQ0FBQSxHQUFJLE1BQU0sQ0FBQztJQUlYLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFDckIsTUFBTSxDQUFDLHFCQUFQLEdBQStCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFFL0IsZ0JBQUEsR0FBbUIsQ0FDakIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQURGLEVBRWpCLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxPQUZaO0lBUW5CLENBQUMsQ0FBQyxXQUFGLEdBQWdCLFNBQUE7TUFDZCxJQUFHLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLENBQUMsQ0FBQyxDQUFDLE9BQUYsQ0FBVSxDQUFDLENBQUMsT0FBWixDQUFELElBQXlCLENBQUMsQ0FBQyxDQUFDLE9BQUYsQ0FBVSxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQXBCLENBQWxEO1FBQ0UsTUFBTSxDQUFDLGdCQUFQLEdBQTBCLENBQUMsQ0FBQyxHQUFGLENBQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFoQixFQUEyQixTQUFDLENBQUQ7aUJBQ25EO1lBQ0UsS0FBQSxFQUFPLENBQUMsQ0FBQyxHQURYO1lBRUUsS0FBQSxFQUFVLENBQUMsQ0FBQyxRQUFILEdBQVksR0FBWixHQUFlLENBQUMsQ0FBQyxTQUY1Qjs7UUFEbUQsQ0FBM0I7ZUFNMUIsTUFBTSxDQUFDLGdCQUFQLEdBQTBCO1VBQ3hCLEtBQUEsRUFBTyxNQUFNLENBQUMsV0FBUCxDQUFBLENBQW9CLENBQUMsR0FESjtVQUV4QixLQUFBLEVBQVMsQ0FBQyxNQUFNLENBQUMsV0FBUCxDQUFBLENBQW9CLENBQUMsUUFBdEIsQ0FBQSxHQUErQixHQUEvQixHQUFpQyxDQUFDLE1BQU0sQ0FBQyxXQUFQLENBQUEsQ0FBb0IsQ0FBQyxTQUF0QixDQUZsQjtVQVA1Qjs7SUFEYztJQWFoQixNQUFNLENBQUMsV0FBUCxHQUFxQixTQUFBO0FBQ25CLFVBQUE7TUFBQSxJQUFBLENBQW9CLE1BQU0sQ0FBQyxXQUEzQjtBQUFBLGVBQU8sTUFBUDs7TUFFQSxDQUFBLEdBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFVLENBQUEsQ0FBQTtNQUN4QixJQUFHLENBQUMsQ0FBQyxRQUFGLElBQWMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxXQUE1QjtRQUNFLENBQUEsR0FBSSxDQUFDLENBQUMsSUFBRixDQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBakIsRUFBNEIsU0FBQyxDQUFEO2lCQUM5QixDQUFDLENBQUMsR0FBRixLQUFTLENBQUMsQ0FBQyxRQUFRLENBQUM7UUFEVSxDQUE1QixDQUFBLElBRUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFVLENBQUEsQ0FBQSxFQUgzQjs7QUFLQSxhQUFPLE9BQU8sQ0FBQyxJQUFSLENBQWEsQ0FBYjtJQVRZO1dBY3JCLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBdEIsQ0FBOEIsZ0JBQTlCO0VBNUNzRCxDQUF4RDs7RUErQ0EsTUFBTSxDQUFDLFNBQVAsQ0FBaUIsZ0NBQWpCLEVBQW1ELFNBQUE7QUFDakQsV0FBTztNQUNMLFFBQUEsRUFBVSxHQURMO01BRUwsVUFBQSxFQUFZLG9DQUZQOztFQUQwQyxDQUFuRDtBQWpEQSIsImZpbGUiOiJjb21wb25lbnRzL3dpZGdldHMvaHItc3VwZXJhbm51YXRpb24tYWNjcnVhbHMvaHItc3VwZXJhbm51YXRpb24tYWNjcnVhbHMuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2ltcGFjLmNvbXBvbmVudHMud2lkZ2V0cy5oci1zdXBlcmFubnVhdGlvbi1hY2NydWFscycsW10pXG5cbm1vZHVsZS5jb250cm9sbGVyKCdXaWRnZXRIclN1cGVyYW5udWF0aW9uQWNjcnVhbHNDdHJsJywgKCRzY29wZSwgJHEpIC0+XG5cbiAgdyA9ICRzY29wZS53aWRnZXRcblxuICAjIERlZmluZSBzZXR0aW5nc1xuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICRzY29wZS5vcmdEZWZlcnJlZCA9ICRxLmRlZmVyKClcbiAgJHNjb3BlLnBhcmFtU2VsZWN0b3JEZWZlcnJlZCA9ICRxLmRlZmVyKClcblxuICBzZXR0aW5nc1Byb21pc2VzID0gW1xuICAgICRzY29wZS5vcmdEZWZlcnJlZC5wcm9taXNlXG4gICAgJHNjb3BlLnBhcmFtU2VsZWN0b3JEZWZlcnJlZC5wcm9taXNlXG4gIF1cblxuXG4gICMgV2lkZ2V0IHNwZWNpZmljIG1ldGhvZHNcbiAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICB3LmluaXRDb250ZXh0ID0gLT5cbiAgICBpZiAkc2NvcGUuaXNEYXRhRm91bmQgPSAhXy5pc0VtcHR5KHcuY29udGVudCkgJiYgIV8uaXNFbXB0eSh3LmNvbnRlbnQuZW1wbG95ZWVzKVxuICAgICAgJHNjb3BlLmVtcGxveWVlc09wdGlvbnMgPSBfLm1hcCh3LmNvbnRlbnQuZW1wbG95ZWVzLCAoZSkgLT5cbiAgICAgICAge1xuICAgICAgICAgIHZhbHVlOiBlLnVpZCxcbiAgICAgICAgICBsYWJlbDogXCIje2UubGFzdG5hbWV9ICN7ZS5maXJzdG5hbWV9XCIsXG4gICAgICAgIH1cbiAgICAgIClcbiAgICAgICRzY29wZS5zZWxlY3RlZEVtcGxveWVlID0ge1xuICAgICAgICB2YWx1ZTogJHNjb3BlLmdldEVtcGxveWVlKCkudWlkLFxuICAgICAgICBsYWJlbDogXCIjeyRzY29wZS5nZXRFbXBsb3llZSgpLmxhc3RuYW1lfSAjeyRzY29wZS5nZXRFbXBsb3llZSgpLmZpcnN0bmFtZX1cIixcbiAgICAgIH1cblxuICAkc2NvcGUuZ2V0RW1wbG95ZWUgPSAtPlxuICAgIHJldHVybiBmYWxzZSB1bmxlc3MgJHNjb3BlLmlzRGF0YUZvdW5kXG5cbiAgICBlID0gdy5jb250ZW50LmVtcGxveWVlc1swXVxuICAgIGlmIHcubWV0YWRhdGEgJiYgdy5tZXRhZGF0YS5lbXBsb3llZV9pZFxuICAgICAgZSA9IF8uZmluZCh3LmNvbnRlbnQuZW1wbG95ZWVzLCAoZSkgLT5cbiAgICAgICAgZS51aWQgPT0gdy5tZXRhZGF0YS5lbXBsb3llZV9pZFxuICAgICAgKSB8fCB3LmNvbnRlbnQuZW1wbG95ZWVzWzBdXG5cbiAgICByZXR1cm4gYW5ndWxhci5jb3B5KGUpXG5cblxuICAjIFdpZGdldCBpcyByZWFkeTogY2FuIHRyaWdnZXIgdGhlIFwid2FpdCBmb3Igc2V0dGlnbnMgdG8gYmUgcmVhZHlcIlxuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICRzY29wZS53aWRnZXREZWZlcnJlZC5yZXNvbHZlKHNldHRpbmdzUHJvbWlzZXMpXG4pXG5cbm1vZHVsZS5kaXJlY3RpdmUoJ3dpZGdldEhyU3VwZXJhbm51YXRpb25BY2NydWFscycsIC0+XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBjb250cm9sbGVyOiAnV2lkZ2V0SHJTdXBlcmFubnVhdGlvbkFjY3J1YWxzQ3RybCdcbiAgfVxuKVxuIl19

(function() {
  var module;

  module = angular.module('impac.components.widgets.hr-timesheets', []);

  module.controller('WidgetHrTimesheetsCtrl', function($scope, $q, ChartFormatterSvc, ImpacWidgetsSvc) {
    var settingsPromises, unCollapsedSetting, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    $scope.timeRangeDeferred = $q.defer();
    $scope.paramSelectorDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise, $scope.timeRangeDeferred.promise, $scope.paramSelectorDeferred.promise];
    w.initContext = function() {
      if ($scope.isDataFound = angular.isDefined(w.content) && !_.isEmpty(w.content.employees) && !_.isEmpty(w.content.dates)) {
        $scope.employeesOptions = _.map(w.content.employees, function(e) {
          return {
            value: e.id,
            label: e.lastname + " " + e.firstname
          };
        });
        $scope.selectedEmployee = {
          value: $scope.getEmployee().id,
          label: ($scope.getEmployee().lastname) + " " + ($scope.getEmployee().firstname)
        };
        return $scope.unCollapsed = w.metadata.unCollapsed || [];
      }
    };
    $scope.toggleCollapsed = function(categoryName) {
      if (categoryName != null) {
        if (_.find($scope.unCollapsed, (function(name) {
          return categoryName === name;
        }))) {
          $scope.unCollapsed = _.reject($scope.unCollapsed, function(name) {
            return name === categoryName;
          });
        } else {
          $scope.unCollapsed.push(categoryName);
        }
        return ImpacWidgetsSvc.updateWidgetSettings(w, false);
      }
    };
    $scope.isCollapsed = function(categoryName) {
      if (categoryName != null) {
        if (_.find($scope.unCollapsed, (function(name) {
          return categoryName === name;
        }))) {
          return false;
        } else {
          return true;
        }
      }
    };
    $scope.getEmployee = function() {
      if (!$scope.isDataFound) {
        return false;
      }
      if (w.metadata && w.metadata.employee_id) {
        return _.find(w.content.employees, function(e) {
          return e.id === w.metadata.employee_id;
        }) || w.content.employees[0];
      } else {
        return w.content.employees[0];
      }
    };
    $scope.getEmployeeTimeWorked = function() {
      var employee;
      if (employee = $scope.getEmployee()) {
        return _.find(w.content.employees, function(e) {
          return e.id === employee.id;
        }).total_time_worked;
      }
    };
    $scope.getEmployeeTimeOff = function() {
      var employee;
      if (employee = $scope.getEmployee()) {
        return _.find(w.content.employees, function(e) {
          return e.id === employee.id;
        }).total_time_off;
      }
    };
    unCollapsedSetting = {};
    unCollapsedSetting.initialized = false;
    unCollapsedSetting.initialize = function() {
      return unCollapsedSetting.initialized = true;
    };
    unCollapsedSetting.toMetadata = function() {
      return {
        unCollapsed: $scope.unCollapsed
      };
    };
    w.settings.push(unCollapsedSetting);
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetHrTimesheets', function() {
    return {
      restrict: 'A',
      controller: 'WidgetHrTimesheetsCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

(function() {
  var module;

  module = angular.module('impac.components.widgets.hr-workforce-summary', []);

  module.controller('WidgetHrWorkforceSummaryCtrl', function($scope, $q, ChartFormatterSvc, $filter) {
    var settingsPromises, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    $scope.widthDeferred = $q.defer();
    $scope.paramSelectorDeferred1 = $q.defer();
    $scope.paramSelectorDeferred2 = $q.defer();
    $scope.chartDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise, $scope.widthDeferred.promise, $scope.paramSelectorDeferred1.promise, $scope.paramSelectorDeferred2.promise, $scope.chartDeferred.promise];
    w.initContext = function() {
      if ($scope.isDataFound = !_.isEmpty(w.content) && (w.content.summary != null) && !_.isEmpty(w.content.summary.data)) {
        $scope.periodOptions = [
          {
            label: 'Yearly',
            value: 'yearly'
          }, {
            label: 'Monthly',
            value: 'monthly'
          }, {
            label: 'Weekly',
            value: 'weekly'
          }, {
            label: 'Hourly',
            value: 'hourly'
          }
        ];
        $scope.period = angular.copy(_.find($scope.periodOptions, function(o) {
          return o.value === w.content.total.period.toLowerCase();
        }) || $scope.periodOptions[0]);
        $scope.filterOptions = [
          {
            label: 'Gender',
            value: 'gender'
          }, {
            label: 'Age Range',
            value: 'age_range'
          }, {
            label: 'Salary Range',
            value: 'salary_range'
          }, {
            label: 'Job Title',
            value: 'job_title'
          }
        ];
        return $scope.filter = angular.copy(_.find($scope.filterOptions, function(o) {
          return o.value === w.content.summary.filter;
        }) || $scope.filterOptions[0]);
      }
    };
    $scope.getTotalWorkforce = function() {
      if ($scope.isDataFound) {
        return w.content.total.amount;
      }
    };
    $scope.getNumberOfEmployees = function() {
      if ($scope.isDataFound) {
        return w.content.total.employees;
      }
    };
    $scope.getCurrency = function() {
      if ($scope.isDataFound) {
        return w.content.total.currency;
      }
    };
    $scope.formatSalaryRange = function(aRange) {
      var range1, range2;
      range1 = $filter('mnoCurrency')(aRange.label.split('-')[0], aRange.currency, false);
      range2 = $filter('mnoCurrency')(aRange.label.split('-')[1], aRange.currency, false);
      return [range1, range2].join(" - ");
    };
    $scope.getColorByIndex = function(index) {
      return ChartFormatterSvc.getColor(index);
    };
    $scope.drawTrigger = $q.defer();
    w.format = function() {
      var barData, barOptions, chartData, pieData, pieOptions;
      if ($scope.isDataFound) {
        if ($scope.filter.value === 'salary_range') {
          barData = {
            labels: _.map(w.content.summary.data, function(elem) {
              return $scope.formatSalaryRange(elem);
            }),
            values: _.map(w.content.summary.data, function(elem) {
              return elem.value;
            })
          };
          barOptions = {
            showTooltips: false,
            showXLabels: false,
            barDatasetSpacing: 15
          };
          chartData = ChartFormatterSvc.barChart(barData, barOptions);
        } else {
          pieData = _.map(w.content.summary.data, function(elem) {
            return {
              label: elem.label,
              value: elem.value
            };
          });
          pieOptions = {
            showTooltips: true,
            percentageInnerCutout: 50,
            tooltipFontSize: 12
          };
          chartData = ChartFormatterSvc.pieChart(pieData, pieOptions);
        }
        return $scope.drawTrigger.notify(chartData);
      }
    };
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetHrWorkforceSummary', function() {
    return {
      restrict: 'A',
      controller: 'WidgetHrWorkforceSummaryCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

(function() {
  var module;

  module = angular.module('impac.components.widgets.invoices-list', []);

  module.controller('WidgetInvoicesListCtrl', function($scope, $q, $filter) {
    var settingsPromises, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    $scope.limitEntriesDeferred = $q.defer();
    $scope.datesPickerDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise, $scope.limitEntriesDeferred.promise, $scope.datesPickerDeferred.promise];
    w.initContext = function() {
      var d, date, dates, j, len, m, maxDate, minDate, newDate, parsedDate, y;
      $scope.isDataFound = !_.isEmpty(w.content) && !_.isEmpty(w.content.entities);
      if ($scope.isDataFound && $scope.orderBy === 'due ') {
        if ($scope.entityType === 'suppliers') {
          $scope.limitEntriesLabel = 'creditors';
        } else {
          $scope.limitEntriesLabel = 'debtors';
        }
      }
      if ((w.metadata != null) && (w.metadata.limit_entries != null)) {
        $scope.limitEntriesSelected = w.metadata.limit_entries;
      }
      if ($scope.isDataFound) {
        maxDate = new Date();
        minDate = false;
        dates = _.flatten(_.map(w.content.entities, (function(e) {
          return _.map(e.invoices, (function(i) {
            return i.invoice_date;
          }));
        })));
        for (j = 0, len = dates.length; j < len; j++) {
          date = dates[j];
          if (!_.isEmpty(date)) {
            parsedDate = date.split('-');
            y = parsedDate[0];
            m = parsedDate[1] - 1;
            d = parsedDate[2];
            newDate = new Date(y, m, d);
            minDate || (minDate = newDate);
            minDate = Math.min(minDate, newDate);
            maxDate = Math.max(maxDate, newDate);
          }
        }
        minDate || (minDate = new Date(new Date().getFullYear() - 10, 0, 1));
        $scope.defaultFrom = $filter('date')(minDate, 'yyyy-MM-dd');
        return $scope.defaultTo = $filter('date')(maxDate, 'yyyy-MM-dd');
      }
    };
    $scope.entityType = w.metadata.entity;
    $scope.entityTypeCap = _.capitalize(w.metadata.entity);
    if (_.isEmpty(w.metadata.order_by) || w.metadata.order_by === 'name' || w.metadata.order_by === 'total_invoiced') {
      $scope.orderBy = '';
    } else {
      $scope.orderBy = _.last(w.metadata.order_by.split('_')).concat(" ");
    }
    $scope.getInvoices = function(entity) {
      var count, tooltip;
      tooltip = ["<strong>" + entity.name + "</strong>"];
      count = 1;
      angular.forEach(entity.invoices, function(i) {
        var paid, txn;
        if (i.transaction_no !== "") {
          txn = " (" + i.transaction_no + ")";
        } else {
          txn = "";
        }
        if (i.tooltip_status === "partially paid") {
          paid = " (" + $filter('mnoCurrency')(i.paid, i.currency, true) + " over " + $filter('mnoCurrency')(i.invoiced, i.currency, true) + ")";
        } else {
          paid = " (" + $filter('mnoCurrency')(i.invoiced, i.currency, true) + ")";
        }
        tooltip.push("#" + count + txn + " - " + i.tooltip_status + paid);
        return count++;
      });
      return tooltip.join("<br />");
    };
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetInvoicesList', function() {
    return {
      restrict: 'A',
      controller: 'WidgetInvoicesListCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

(function() {
  var module;

  module = angular.module('impac.components.widgets.invoices-aged-payables-receivables', []);

  module.controller('WidgetInvoicesAgedPayablesReceivablesCtrl', function($scope, $q, $log, $filter, ChartFormatterSvc, ImpacWidgetsSvc) {
    var selectedElementsSetting, settingsPromises, unCollapsedSetting, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    $scope.timeRangeDeferred = $q.defer();
    $scope.widthDeferred = $q.defer();
    $scope.chartDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise, $scope.timeRangeDeferred.promise, $scope.widthDeferred.promise, $scope.chartDeferred.promise];
    w.initContext = function() {
      if ($scope.isDataFound = angular.isDefined(w.content) && (!_.isEmpty(w.content.payables) || !_.isEmpty(w.content.receivables)) && !_.isEmpty(w.content.dates)) {
        $scope.unCollapsed = w.metadata.unCollapsed || [];
        if (w.metadata.selectedElements) {
          $scope.selectedElements = [];
          angular.forEach(w.metadata.selectedElements, function(sElem) {
            var foundElem;
            if (sElem.name === "aged_payables") {
              foundElem = w.content.payables;
            }
            if (sElem.name === "aged_receivables" && !foundElem) {
              foundElem = w.content.receivables;
            }
            if (!foundElem) {
              foundElem = _.find(w.content.payables.suppliers, function(supplier) {
                return supplier.id === sElem.id;
              });
            }
            if (!foundElem) {
              foundElem = _.find(w.content.receivables.customers, function(customer) {
                return customer.id === sElem.id;
              });
            }
            if (foundElem) {
              return $scope.selectedElements.push(foundElem);
            }
          });
        }
        if (!(($scope.selectedElements != null) && $scope.selectedElements.length > 0)) {
          return w.width = 6;
        }
      }
    };
    $scope.getElementChartColor = function(index) {
      if (index != null) {
        return ChartFormatterSvc.getColor(index);
      }
    };
    $scope.getLastValue = function(element) {
      if ((element != null) && (element.totals != null)) {
        return _.last(element.totals);
      }
    };
    $scope.getTotalSum = function(element) {
      if ((element != null) && (element.totals != null)) {
        return _.reduce(element.totals, function(memo, num) {
          return memo + num;
        }, 0);
      }
    };
    $scope.getName = function(element) {
      if ((element != null) && (element.name != null)) {
        return element.name.replace(/_/g, " ");
      }
    };
    $scope.getPeriod = function() {
      var period, period_param;
      if ($scope.isDataFound && w.content.hist_parameters) {
        period_param = w.content.hist_parameters.period || "MONTHLY";
        period = "day";
        if (period_param !== "DAILY") {
          period = period_param.substr(0, period_param.length - 2).toLowerCase();
        }
        return "current " + period;
      } else {
        return "current month";
      }
    };
    $scope.toggleSelectedElement = function(element) {
      if ($scope.isSelected(element)) {
        $scope.selectedElements = _.reject($scope.selectedElements, function(sElem) {
          if (element.id) {
            return sElem.id === element.id;
          } else {
            return sElem.name === element.name;
          }
        });
        w.format();
        if (w.isExpanded() && $scope.selectedElements.length === 0) {
          return w.toggleExpanded();
        } else {
          return ImpacWidgetsSvc.updateWidgetSettings(w, false);
        }
      } else {
        $scope.selectedElements || ($scope.selectedElements = []);
        $scope.selectedElements.push(element);
        w.format();
        if (!w.isExpanded()) {
          return w.toggleExpanded();
        } else {
          return ImpacWidgetsSvc.updateWidgetSettings(w, false);
        }
      }
    };
    $scope.isSelected = function(element) {
      if ((element != null) && ($scope.selectedElements != null)) {
        if (_.find($scope.selectedElements, function(sElem) {
          if (element.id) {
            return sElem.id === element.id;
          } else {
            return sElem.name === element.name;
          }
        })) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    };
    $scope.toggleCollapsed = function(element) {
      if ((element != null) && (element.name != null)) {
        if (_.find($scope.unCollapsed, (function(name) {
          return element.name === name;
        }))) {
          $scope.unCollapsed = _.reject($scope.unCollapsed, function(name) {
            return name === element.name;
          });
        } else {
          $scope.unCollapsed.push(element.name);
        }
        return ImpacWidgetsSvc.updateWidgetSettings(w, false);
      }
    };
    $scope.isCollapsed = function(element) {
      if ((element != null) && (element.name != null)) {
        if (_.find($scope.unCollapsed, (function(name) {
          return element.name === name;
        }))) {
          return false;
        } else {
          return true;
        }
      }
    };
    $scope.hasElements = function() {
      return ($scope.selectedElements != null) && $scope.selectedElements.length > 0;
    };
    $scope.drawTrigger = $q.defer();
    w.format = function() {
      var all_values_are_positive, chartData, dates, inputData, options, period;
      if ($scope.isDataFound && ($scope.selectedElements != null) && $scope.selectedElements.length > 0) {
        all_values_are_positive = true;
        inputData = [];
        period = null;
        if ((w.metadata != null) && (w.metadata.hist_parameters != null)) {
          period = w.metadata.hist_parameters.period;
        }
        dates = _.map(w.content.dates, function(date) {
          return $filter('mnoDate')(date, period);
        });
        angular.forEach($scope.selectedElements, function(sElem) {
          var data;
          data = angular.copy(sElem);
          inputData.push({
            title: data.name,
            labels: dates,
            values: data.totals
          });
          return angular.forEach(data.totals, function(value) {
            return all_values_are_positive && (all_values_are_positive = value >= 0);
          });
        });
        options = {
          scaleBeginAtZero: all_values_are_positive,
          showXLabels: true,
          datasetFill: $scope.selectedElements.length === 1,
          pointDot: $scope.selectedElements.length === 1
        };
        chartData = ChartFormatterSvc.lineChart(inputData, options);
        return $scope.drawTrigger.notify(chartData);
      }
    };
    unCollapsedSetting = {};
    unCollapsedSetting.initialized = false;
    unCollapsedSetting.initialize = function() {
      return unCollapsedSetting.initialized = true;
    };
    unCollapsedSetting.toMetadata = function() {
      return {
        unCollapsed: $scope.unCollapsed
      };
    };
    w.settings.push(unCollapsedSetting);
    selectedElementsSetting = {};
    selectedElementsSetting.initialized = false;
    selectedElementsSetting.initialize = function() {
      return selectedElementsSetting.initialized = true;
    };
    selectedElementsSetting.toMetadata = function() {
      return {
        selectedElements: $scope.selectedElements
      };
    };
    w.settings.push(selectedElementsSetting);
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetInvoicesAgedPayablesReceivables', function() {
    return {
      restrict: 'A',
      controller: 'WidgetInvoicesAgedPayablesReceivablesCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

(function() {
  var module;

  module = angular.module('impac.components.widgets.invoices-summary', []);

  module.controller('WidgetInvoicesSummaryCtrl', function($scope, $q, ChartFormatterSvc) {
    var settingsPromises, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    $scope.chartFiltersDeferred = $q.defer();
    $scope.chartDeferred = $q.defer();
    $scope.datesPickerDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise, $scope.chartFiltersDeferred.promise, $scope.chartDeferred.promise, $scope.datesPickerDeferred.promise];
    $scope.defaultFrom = (new Date().getFullYear() - 10) + "-01-01";
    w.initContext = function() {
      return $scope.isDataFound = !_.isEmpty(w.content) && !_.isEmpty(w.content.summary);
    };
    $scope.drawTrigger = $q.defer();
    w.format = function() {
      var chartData, pieData, pieOptions;
      if ($scope.isDataFound) {
        pieData = _.map(w.content.summary, function(entity) {
          return {
            label: entity.name,
            value: entity.total
          };
        });
        pieOptions = {
          percentageInnerCutout: 50,
          tooltipFontSize: 12
        };
        chartData = ChartFormatterSvc.pieChart(pieData, pieOptions);
        return $scope.drawTrigger.notify(chartData);
      }
    };
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetInvoicesSummary', function() {
    return {
      restrict: 'A',
      controller: 'WidgetInvoicesSummaryCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy9pbnZvaWNlcy1zdW1tYXJ5L2ludm9pY2VzLXN1bW1hcnkuZGlyZWN0aXZlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUE7O0VBQUEsTUFBQSxHQUFTLE9BQU8sQ0FBQyxNQUFSLENBQWUsMkNBQWYsRUFBMkQsRUFBM0Q7O0VBRVQsTUFBTSxDQUFDLFVBQVAsQ0FBa0IsMkJBQWxCLEVBQStDLFNBQUMsTUFBRCxFQUFTLEVBQVQsRUFBYSxpQkFBYjtBQUU3QyxRQUFBO0lBQUEsQ0FBQSxHQUFJLE1BQU0sQ0FBQztJQUlYLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFDckIsTUFBTSxDQUFDLG9CQUFQLEdBQThCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFDOUIsTUFBTSxDQUFDLGFBQVAsR0FBdUIsRUFBRSxDQUFDLEtBQUgsQ0FBQTtJQUN2QixNQUFNLENBQUMsbUJBQVAsR0FBNkIsRUFBRSxDQUFDLEtBQUgsQ0FBQTtJQUU3QixnQkFBQSxHQUFtQixDQUNqQixNQUFNLENBQUMsV0FBVyxDQUFDLE9BREYsRUFFakIsTUFBTSxDQUFDLG9CQUFvQixDQUFDLE9BRlgsRUFHakIsTUFBTSxDQUFDLGFBQWEsQ0FBQyxPQUhKLEVBSWpCLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxPQUpWO0lBT25CLE1BQU0sQ0FBQyxXQUFQLEdBQXVCLENBQUssSUFBQSxJQUFBLENBQUEsQ0FBTSxDQUFDLFdBQVAsQ0FBQSxDQUFKLEdBQTJCLEVBQTVCLENBQUEsR0FBK0I7SUFLdEQsQ0FBQyxDQUFDLFdBQUYsR0FBZ0IsU0FBQTthQUNkLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLENBQUMsQ0FBQyxDQUFDLE9BQUYsQ0FBVSxDQUFDLENBQUMsT0FBWixDQUFELElBQXlCLENBQUMsQ0FBQyxDQUFDLE9BQUYsQ0FBVSxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQXBCO0lBRGpDO0lBTWhCLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFDckIsQ0FBQyxDQUFDLE1BQUYsR0FBVyxTQUFBO0FBQ1QsVUFBQTtNQUFBLElBQUcsTUFBTSxDQUFDLFdBQVY7UUFDRSxPQUFBLEdBQVUsQ0FBQyxDQUFDLEdBQUYsQ0FBTSxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQWhCLEVBQXlCLFNBQUMsTUFBRDtpQkFDakM7WUFDRSxLQUFBLEVBQU8sTUFBTSxDQUFDLElBRGhCO1lBRUUsS0FBQSxFQUFPLE1BQU0sQ0FBQyxLQUZoQjs7UUFEaUMsQ0FBekI7UUFLVixVQUFBLEdBQWE7VUFDWCxxQkFBQSxFQUF1QixFQURaO1VBRVgsZUFBQSxFQUFpQixFQUZOOztRQUliLFNBQUEsR0FBWSxpQkFBaUIsQ0FBQyxRQUFsQixDQUEyQixPQUEzQixFQUFvQyxVQUFwQztlQUdaLE1BQU0sQ0FBQyxXQUFXLENBQUMsTUFBbkIsQ0FBMEIsU0FBMUIsRUFiRjs7SUFEUztXQW1CWCxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQXRCLENBQThCLGdCQUE5QjtFQWpENkMsQ0FBL0M7O0VBb0RBLE1BQU0sQ0FBQyxTQUFQLENBQWlCLHVCQUFqQixFQUEwQyxTQUFBO0FBQ3hDLFdBQU87TUFDTCxRQUFBLEVBQVUsR0FETDtNQUVMLFVBQUEsRUFBWSwyQkFGUDs7RUFEaUMsQ0FBMUM7QUF0REEiLCJmaWxlIjoiY29tcG9uZW50cy93aWRnZXRzL2ludm9pY2VzLXN1bW1hcnkvaW52b2ljZXMtc3VtbWFyeS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnaW1wYWMuY29tcG9uZW50cy53aWRnZXRzLmludm9pY2VzLXN1bW1hcnknLFtdKVxuXG5tb2R1bGUuY29udHJvbGxlcignV2lkZ2V0SW52b2ljZXNTdW1tYXJ5Q3RybCcsICgkc2NvcGUsICRxLCBDaGFydEZvcm1hdHRlclN2YykgLT5cblxuICB3ID0gJHNjb3BlLndpZGdldFxuXG4gICMgRGVmaW5lIHNldHRpbmdzXG4gICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgJHNjb3BlLm9yZ0RlZmVycmVkID0gJHEuZGVmZXIoKVxuICAkc2NvcGUuY2hhcnRGaWx0ZXJzRGVmZXJyZWQgPSAkcS5kZWZlcigpXG4gICRzY29wZS5jaGFydERlZmVycmVkID0gJHEuZGVmZXIoKVxuICAkc2NvcGUuZGF0ZXNQaWNrZXJEZWZlcnJlZCA9ICRxLmRlZmVyKClcblxuICBzZXR0aW5nc1Byb21pc2VzID0gW1xuICAgICRzY29wZS5vcmdEZWZlcnJlZC5wcm9taXNlXG4gICAgJHNjb3BlLmNoYXJ0RmlsdGVyc0RlZmVycmVkLnByb21pc2VcbiAgICAkc2NvcGUuY2hhcnREZWZlcnJlZC5wcm9taXNlXG4gICAgJHNjb3BlLmRhdGVzUGlja2VyRGVmZXJyZWQucHJvbWlzZVxuICBdXG5cbiAgJHNjb3BlLmRlZmF1bHRGcm9tID0gXCIje25ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKSAtIDEwfS0wMS0wMVwiXG5cblxuICAjIFdpZGdldCBzcGVjaWZpYyBtZXRob2RzXG4gICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgdy5pbml0Q29udGV4dCA9IC0+XG4gICAgJHNjb3BlLmlzRGF0YUZvdW5kID0gIV8uaXNFbXB0eSh3LmNvbnRlbnQpICYmICFfLmlzRW1wdHkody5jb250ZW50LnN1bW1hcnkpXG5cblxuICAjIENoYXJ0IGZvcm1hdGluZyBmdW5jdGlvblxuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICRzY29wZS5kcmF3VHJpZ2dlciA9ICRxLmRlZmVyKClcbiAgdy5mb3JtYXQgPSAtPlxuICAgIGlmICRzY29wZS5pc0RhdGFGb3VuZFxuICAgICAgcGllRGF0YSA9IF8ubWFwIHcuY29udGVudC5zdW1tYXJ5LCAoZW50aXR5KSAtPlxuICAgICAgICB7XG4gICAgICAgICAgbGFiZWw6IGVudGl0eS5uYW1lLFxuICAgICAgICAgIHZhbHVlOiBlbnRpdHkudG90YWwsXG4gICAgICAgIH1cbiAgICAgIHBpZU9wdGlvbnMgPSB7XG4gICAgICAgIHBlcmNlbnRhZ2VJbm5lckN1dG91dDogNTAsXG4gICAgICAgIHRvb2x0aXBGb250U2l6ZTogMTIsXG4gICAgICB9XG4gICAgICBjaGFydERhdGEgPSBDaGFydEZvcm1hdHRlclN2Yy5waWVDaGFydChwaWVEYXRhLCBwaWVPcHRpb25zKVxuICAgICAgXG4gICAgICAjIGNhbGxzIGNoYXJ0LmRyYXcoKVxuICAgICAgJHNjb3BlLmRyYXdUcmlnZ2VyLm5vdGlmeShjaGFydERhdGEpXG5cblxuICAjIFdpZGdldCBpcyByZWFkeTogY2FuIHRyaWdnZXIgdGhlIFwid2FpdCBmb3Igc2V0dGlnbnMgdG8gYmUgcmVhZHlcIlxuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICRzY29wZS53aWRnZXREZWZlcnJlZC5yZXNvbHZlKHNldHRpbmdzUHJvbWlzZXMpXG4pXG5cbm1vZHVsZS5kaXJlY3RpdmUoJ3dpZGdldEludm9pY2VzU3VtbWFyeScsIC0+XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBjb250cm9sbGVyOiAnV2lkZ2V0SW52b2ljZXNTdW1tYXJ5Q3RybCdcbiAgfVxuKVxuIl19

(function() {
  var module;

  module = angular.module('impac.components.widgets.sales-aged', []);

  module.controller('WidgetSalesAgedCtrl', function($scope, $q, ChartFormatterSvc, $filter) {
    var settingsPromises, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    $scope.timeRangeDeferred = $q.defer();
    $scope.paramSelectorDeferred = $q.defer();
    $scope.chartDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise, $scope.timeRangeDeferred.promise, $scope.paramSelectorDeferred.promise, $scope.chartDeferred.promise];
    w.initContext = function() {
      if ($scope.isDataFound = angular.isDefined(w.content) && !_.isEmpty(w.content.aged_sales) && !_.isEmpty(w.content.dates)) {
        $scope.filterOptions = [
          {
            label: 'value sold (incl. taxes)',
            value: 'gross_value_sold'
          }, {
            label: 'value sold (excl. taxes)',
            value: 'net_value_sold'
          }, {
            label: 'quantity sold',
            value: 'quantity_sold'
          }
        ];
        return $scope.filter = angular.copy(_.find($scope.filterOptions, function(o) {
          return w.metadata && w.metadata.filter === o.value;
        }) || $scope.filterOptions[0]);
      }
    };
    $scope.getTotal = function(anIndex) {
      if ($scope.isDataFound && anIndex >= 0 && anIndex < w.content.aged_sales[$scope.filter.value].length) {
        return w.content.aged_sales[$scope.filter.value][anIndex];
      }
    };
    $scope.getLastDate = function() {
      if ($scope.isDataFound) {
        return _.last(w.content.dates);
      }
    };
    $scope.getClassColor = function(prev, value) {
      if (value < prev) {
        return 'negative';
      } else if (value > prev) {
        return 'positive';
      } else {
        return null;
      }
    };
    $scope.drawTrigger = $q.defer();
    w.format = function() {
      var all_values_are_positive, chartData, inputData, options, period, values;
      if ($scope.isDataFound) {
        all_values_are_positive = true;
        inputData = [];
        values = w.content.aged_sales[$scope.filter.value];
        period = null;
        if ((w.metadata != null) && (w.metadata.hist_parameters != null)) {
          period = w.metadata.hist_parameters.period;
        }
        $scope.formattedDates = _.map(w.content.dates, function(date) {
          return $filter('mnoDate')(date, period);
        });
        inputData.push({
          title: $scope.filter.label,
          labels: $scope.formattedDates,
          values: values
        });
        angular.forEach(values, function(value) {
          return all_values_are_positive && (all_values_are_positive = value >= 0);
        });
        options = {
          scaleBeginAtZero: all_values_are_positive,
          showXLabels: true,
          datasetFill: true,
          pointDot: true
        };
        if ($scope.filter.value.indexOf('quantity') > -1) {
          angular.merge(options, {
            currency: 'hide'
          });
        }
        chartData = ChartFormatterSvc.lineChart(inputData, options);
        return $scope.drawTrigger.notify(chartData);
      }
    };
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetSalesAged', function() {
    return {
      restrict: 'A',
      controller: 'WidgetSalesAgedCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

(function() {
  var module;

  module = angular.module('impac.components.widgets.sales-break-even', []);

  module.controller('WidgetSalesBreakEvenCtrl', function($scope, $q, ChartFormatterSvc, $filter) {
    var settingsPromises, thresholdSetting, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    $scope.timeRangeDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise, $scope.timeRangeDeferred.promise];
    w.initContext = function() {
      $scope.isDataFound = angular.isDefined(w.content) && !_.isEmpty(w.content.sales);
      return $scope.threshold = w.metadata.threshold;
    };
    w.processError = function(error) {
      if (error.code === 404) {
        return $scope.isDataFound = false;
      }
    };
    $scope.getProjectedDate = function() {
      var date;
      if ($scope.isDataFound && w.content.break_even) {
        if (("" + w.content.break_even.projected_date).match('After')) {
          date = angular.copy(w.content.break_even.projected_date).replace('After ', '');
          return "> " + ($filter('date')(date, 'd-MM-yy'));
        } else {
          return w.content.break_even.projected_date;
        }
      }
    };
    $scope.getOpportunitiesToClose = function() {
      var opps;
      if ($scope.isDataFound && w.content.break_even) {
        if (("" + w.content.break_even.opportunities_to_close).match('>')) {
          opps = angular.copy(w.content.break_even.opportunities_to_close).replace('>', '');
          return "> " + opps;
        } else {
          return w.content.break_even.opportunities_to_close;
        }
      }
    };
    $scope.isTargetMet = function() {
      if ($scope.isDataFound && w.content.break_even) {
        return w.content.break_even.variance < 0;
      }
    };
    $scope.getVariance = function() {
      if ($scope.isDataFound && w.content.break_even) {
        return Math.abs(w.content.break_even.variance);
      }
    };
    thresholdSetting = {};
    thresholdSetting.initialized = false;
    thresholdSetting.initialize = function() {
      return thresholdSetting.initialized = true;
    };
    thresholdSetting.toMetadata = function() {
      return {
        threshold: $scope.threshold
      };
    };
    w.settings.push(thresholdSetting);
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetSalesBreakEven', function() {
    return {
      restrict: 'A',
      controller: 'WidgetSalesBreakEvenCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy9zYWxlcy1icmVhay1ldmVuL3NhbGVzLWJyZWFrLWV2ZW4uZGlyZWN0aXZlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUE7O0VBQUEsTUFBQSxHQUFTLE9BQU8sQ0FBQyxNQUFSLENBQWUsMkNBQWYsRUFBMkQsRUFBM0Q7O0VBRVQsTUFBTSxDQUFDLFVBQVAsQ0FBa0IsMEJBQWxCLEVBQThDLFNBQUMsTUFBRCxFQUFTLEVBQVQsRUFBYSxpQkFBYixFQUFnQyxPQUFoQztBQUU1QyxRQUFBO0lBQUEsQ0FBQSxHQUFJLE1BQU0sQ0FBQztJQUlYLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFDckIsTUFBTSxDQUFDLGlCQUFQLEdBQTJCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFFM0IsZ0JBQUEsR0FBbUIsQ0FDakIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQURGLEVBRWpCLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxPQUZSO0lBUW5CLENBQUMsQ0FBQyxXQUFGLEdBQWdCLFNBQUE7TUFDZCxNQUFNLENBQUMsV0FBUCxHQUFxQixPQUFPLENBQUMsU0FBUixDQUFrQixDQUFDLENBQUMsT0FBcEIsQ0FBQSxJQUFnQyxDQUFDLENBQUMsQ0FBQyxPQUFGLENBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFwQjthQUN0RCxNQUFNLENBQUMsU0FBUCxHQUFtQixDQUFDLENBQUMsUUFBUSxDQUFDO0lBRmhCO0lBS2hCLENBQUMsQ0FBQyxZQUFGLEdBQWlCLFNBQUMsS0FBRDtNQUVmLElBQUcsS0FBSyxDQUFDLElBQU4sS0FBYyxHQUFqQjtlQUNFLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLE1BRHZCOztJQUZlO0lBS2pCLE1BQU0sQ0FBQyxnQkFBUCxHQUEwQixTQUFBO0FBQ3hCLFVBQUE7TUFBQSxJQUFHLE1BQU0sQ0FBQyxXQUFQLElBQXNCLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBbkM7UUFDRSxJQUFHLENBQUEsRUFBQSxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLGNBQXhCLENBQXdDLENBQUMsS0FBekMsQ0FBK0MsT0FBL0MsQ0FBSDtVQUNFLElBQUEsR0FBTyxPQUFPLENBQUMsSUFBUixDQUFhLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLGNBQWxDLENBQWlELENBQUMsT0FBbEQsQ0FBMEQsUUFBMUQsRUFBb0UsRUFBcEU7QUFDUCxpQkFBTyxJQUFBLEdBQUksQ0FBQyxPQUFBLENBQVEsTUFBUixDQUFBLENBQWdCLElBQWhCLEVBQXNCLFNBQXRCLENBQUQsRUFGYjtTQUFBLE1BQUE7QUFJRSxpQkFBTyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxlQUo5QjtTQURGOztJQUR3QjtJQVExQixNQUFNLENBQUMsdUJBQVAsR0FBaUMsU0FBQTtBQUMvQixVQUFBO01BQUEsSUFBRyxNQUFNLENBQUMsV0FBUCxJQUFzQixDQUFDLENBQUMsT0FBTyxDQUFDLFVBQW5DO1FBQ0UsSUFBRyxDQUFBLEVBQUEsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxzQkFBeEIsQ0FBZ0QsQ0FBQyxLQUFqRCxDQUF1RCxHQUF2RCxDQUFIO1VBQ0UsSUFBQSxHQUFPLE9BQU8sQ0FBQyxJQUFSLENBQWEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsc0JBQWxDLENBQXlELENBQUMsT0FBMUQsQ0FBa0UsR0FBbEUsRUFBdUUsRUFBdkU7QUFDUCxpQkFBTyxJQUFBLEdBQUssS0FGZDtTQUFBLE1BQUE7QUFJRSxpQkFBTyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyx1QkFKOUI7U0FERjs7SUFEK0I7SUFRakMsTUFBTSxDQUFDLFdBQVAsR0FBcUIsU0FBQTtNQUNuQixJQUFHLE1BQU0sQ0FBQyxXQUFQLElBQXNCLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBbkM7QUFDRSxlQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLFFBQXJCLEdBQWdDLEVBRDFDOztJQURtQjtJQUlyQixNQUFNLENBQUMsV0FBUCxHQUFxQixTQUFBO01BQ25CLElBQUcsTUFBTSxDQUFDLFdBQVAsSUFBc0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFuQztBQUNFLGVBQU8sSUFBSSxDQUFDLEdBQUwsQ0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxRQUE5QixFQURUOztJQURtQjtJQU1yQixnQkFBQSxHQUFtQjtJQUNuQixnQkFBZ0IsQ0FBQyxXQUFqQixHQUErQjtJQUUvQixnQkFBZ0IsQ0FBQyxVQUFqQixHQUE4QixTQUFBO2FBQzVCLGdCQUFnQixDQUFDLFdBQWpCLEdBQStCO0lBREg7SUFHOUIsZ0JBQWdCLENBQUMsVUFBakIsR0FBOEIsU0FBQTthQUM1QjtRQUFDLFNBQUEsRUFBVyxNQUFNLENBQUMsU0FBbkI7O0lBRDRCO0lBRzlCLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBWCxDQUFnQixnQkFBaEI7V0FLQSxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQXRCLENBQThCLGdCQUE5QjtFQW5FNEMsQ0FBOUM7O0VBc0VBLE1BQU0sQ0FBQyxTQUFQLENBQWlCLHNCQUFqQixFQUF5QyxTQUFBO0FBQ3ZDLFdBQU87TUFDTCxRQUFBLEVBQVUsR0FETDtNQUVMLFVBQUEsRUFBWSwwQkFGUDs7RUFEZ0MsQ0FBekM7QUF4RUEiLCJmaWxlIjoiY29tcG9uZW50cy93aWRnZXRzL3NhbGVzLWJyZWFrLWV2ZW4vc2FsZXMtYnJlYWstZXZlbi5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnaW1wYWMuY29tcG9uZW50cy53aWRnZXRzLnNhbGVzLWJyZWFrLWV2ZW4nLFtdKVxuXG5tb2R1bGUuY29udHJvbGxlcignV2lkZ2V0U2FsZXNCcmVha0V2ZW5DdHJsJywgKCRzY29wZSwgJHEsIENoYXJ0Rm9ybWF0dGVyU3ZjLCAkZmlsdGVyKSAtPlxuXG4gIHcgPSAkc2NvcGUud2lkZ2V0XG5cbiAgIyBEZWZpbmUgc2V0dGluZ3NcbiAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAkc2NvcGUub3JnRGVmZXJyZWQgPSAkcS5kZWZlcigpXG4gICRzY29wZS50aW1lUmFuZ2VEZWZlcnJlZCA9ICRxLmRlZmVyKClcblxuICBzZXR0aW5nc1Byb21pc2VzID0gW1xuICAgICRzY29wZS5vcmdEZWZlcnJlZC5wcm9taXNlXG4gICAgJHNjb3BlLnRpbWVSYW5nZURlZmVycmVkLnByb21pc2VcbiAgXVxuXG5cbiAgIyBXaWRnZXQgc3BlY2lmaWMgbWV0aG9kc1xuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHcuaW5pdENvbnRleHQgPSAtPlxuICAgICRzY29wZS5pc0RhdGFGb3VuZCA9IGFuZ3VsYXIuaXNEZWZpbmVkKHcuY29udGVudCkgJiYgIV8uaXNFbXB0eSh3LmNvbnRlbnQuc2FsZXMpXG4gICAgJHNjb3BlLnRocmVzaG9sZCA9IHcubWV0YWRhdGEudGhyZXNob2xkXG5cbiAgIyBUT0RPOiBzaG91bGQgaXQgYmUgbWFuYWdlZCBpbiBhIHNlcnZpY2U/IGluIHRoZSB3aWRnZXQgZGlyZWN0aXZlPyBNdXN0IGlzTG9hZGluZyBhbmQgaXNEYXRhRm91bmQgYmUgYm91bmQgdG8gdGhlIHdpZGdldCBvYmplY3Qgb3IgdG8gdGhlIHNjb3BlP1xuICB3LnByb2Nlc3NFcnJvciA9IChlcnJvcikgLT5cbiAgICAjIFRPRE86IGJldHRlciBlcnJvciBtYW5hZ2VtZW50XG4gICAgaWYgZXJyb3IuY29kZSA9PSA0MDRcbiAgICAgICRzY29wZS5pc0RhdGFGb3VuZCA9IGZhbHNlXG5cbiAgJHNjb3BlLmdldFByb2plY3RlZERhdGUgPSAtPlxuICAgIGlmICRzY29wZS5pc0RhdGFGb3VuZCAmJiB3LmNvbnRlbnQuYnJlYWtfZXZlblxuICAgICAgaWYgXCIje3cuY29udGVudC5icmVha19ldmVuLnByb2plY3RlZF9kYXRlfVwiLm1hdGNoKCdBZnRlcicpXG4gICAgICAgIGRhdGUgPSBhbmd1bGFyLmNvcHkody5jb250ZW50LmJyZWFrX2V2ZW4ucHJvamVjdGVkX2RhdGUpLnJlcGxhY2UoJ0FmdGVyICcsICcnKVxuICAgICAgICByZXR1cm4gXCI+ICN7JGZpbHRlcignZGF0ZScpKGRhdGUsICdkLU1NLXl5Jyl9XCJcbiAgICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIHcuY29udGVudC5icmVha19ldmVuLnByb2plY3RlZF9kYXRlXG5cbiAgJHNjb3BlLmdldE9wcG9ydHVuaXRpZXNUb0Nsb3NlID0gLT5cbiAgICBpZiAkc2NvcGUuaXNEYXRhRm91bmQgJiYgdy5jb250ZW50LmJyZWFrX2V2ZW5cbiAgICAgIGlmIFwiI3t3LmNvbnRlbnQuYnJlYWtfZXZlbi5vcHBvcnR1bml0aWVzX3RvX2Nsb3NlfVwiLm1hdGNoKCc+JylcbiAgICAgICAgb3BwcyA9IGFuZ3VsYXIuY29weSh3LmNvbnRlbnQuYnJlYWtfZXZlbi5vcHBvcnR1bml0aWVzX3RvX2Nsb3NlKS5yZXBsYWNlKCc+JywgJycpXG4gICAgICAgIHJldHVybiBcIj4gI3tvcHBzfVwiXG4gICAgICBlbHNlXG4gICAgICAgIHJldHVybiB3LmNvbnRlbnQuYnJlYWtfZXZlbi5vcHBvcnR1bml0aWVzX3RvX2Nsb3NlXG5cbiAgJHNjb3BlLmlzVGFyZ2V0TWV0ID0gLT5cbiAgICBpZiAkc2NvcGUuaXNEYXRhRm91bmQgJiYgdy5jb250ZW50LmJyZWFrX2V2ZW5cbiAgICAgIHJldHVybiAody5jb250ZW50LmJyZWFrX2V2ZW4udmFyaWFuY2UgPCAwKVxuXG4gICRzY29wZS5nZXRWYXJpYW5jZSA9IC0+XG4gICAgaWYgJHNjb3BlLmlzRGF0YUZvdW5kICYmIHcuY29udGVudC5icmVha19ldmVuXG4gICAgICByZXR1cm4gTWF0aC5hYnMody5jb250ZW50LmJyZWFrX2V2ZW4udmFyaWFuY2UpXG5cbiAgIyBNaW5pLXNldHRpbmdzXG4gICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgdGhyZXNob2xkU2V0dGluZyA9IHt9XG4gIHRocmVzaG9sZFNldHRpbmcuaW5pdGlhbGl6ZWQgPSBmYWxzZVxuXG4gIHRocmVzaG9sZFNldHRpbmcuaW5pdGlhbGl6ZSA9IC0+XG4gICAgdGhyZXNob2xkU2V0dGluZy5pbml0aWFsaXplZCA9IHRydWVcblxuICB0aHJlc2hvbGRTZXR0aW5nLnRvTWV0YWRhdGEgPSAtPlxuICAgIHt0aHJlc2hvbGQ6ICRzY29wZS50aHJlc2hvbGR9XG5cbiAgdy5zZXR0aW5ncy5wdXNoKHRocmVzaG9sZFNldHRpbmcpXG5cblxuICAjIFdpZGdldCBpcyByZWFkeTogY2FuIHRyaWdnZXIgdGhlIFwid2FpdCBmb3Igc2V0dGlnbnMgdG8gYmUgcmVhZHlcIlxuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICRzY29wZS53aWRnZXREZWZlcnJlZC5yZXNvbHZlKHNldHRpbmdzUHJvbWlzZXMpXG4pXG5cbm1vZHVsZS5kaXJlY3RpdmUoJ3dpZGdldFNhbGVzQnJlYWtFdmVuJywgLT5cbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIGNvbnRyb2xsZXI6ICdXaWRnZXRTYWxlc0JyZWFrRXZlbkN0cmwnXG4gIH1cbikiXX0=

(function() {
  var module;

  module = angular.module('impac.components.widgets.sales-comparison', []);

  module.controller('WidgetSalesComparisonCtrl', function($scope, $q, $filter, ChartFormatterSvc, ImpacWidgetsSvc) {
    var selectedElementsSetting, settingsPromises, unCollapsedSetting, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    $scope.timeRangeDeferred = $q.defer();
    $scope.widthDeferred = $q.defer();
    $scope.paramSelectorDeferred1 = $q.defer();
    $scope.paramSelectorDeferred2 = $q.defer();
    $scope.chartDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise, $scope.timeRangeDeferred.promise, $scope.widthDeferred.promise, $scope.paramSelectorDeferred1, $scope.paramSelectorDeferred2, $scope.chartDeferred.promise];
    w.initContext = function() {
      $scope.isDataFound = angular.isDefined(w.content) && !_.isEmpty(w.content.sales_comparison) && !_.isEmpty(w.content.dates);
      if ($scope.isDataFound) {
        $scope.unCollapsed = w.metadata.unCollapsed || [];
        $scope.filterOptions = [
          {
            label: 'value sold (incl. taxes)',
            value: 'gross_value_sold'
          }, {
            label: 'value sold (excl. taxes)',
            value: 'net_value_sold'
          }, {
            label: 'quantity sold',
            value: 'quantity_sold'
          }
        ];
        $scope.filter = angular.copy(_.find($scope.filterOptions, function(o) {
          return w.metadata && w.metadata.filter === o.value;
        }) || $scope.filterOptions[0]);
        $scope.criteriaOptions = [
          {
            label: 'products',
            value: 'default'
          }, {
            label: 'locations',
            value: 'location'
          }, {
            label: 'industries',
            value: 'industry'
          }, {
            label: 'customers',
            value: 'customer'
          }
        ];
        $scope.criteria = angular.copy(_.find($scope.criteriaOptions, function(o) {
          return w.metadata && w.metadata.criteria === o.value;
        }) || $scope.criteriaOptions[0]);
        if (w.metadata.selectedElements) {
          $scope.selectedElements = [];
          return angular.forEach(w.metadata.selectedElements, function(sElem) {
            var foundElem;
            foundElem = _.find(w.content.sales_comparison, function(statement) {
              return statement.name === sElem.name;
            });
            if (!foundElem) {
              angular.forEach(w.content.sales_comparison, function(statement) {
                if (statement.sales != null) {
                  return foundElem || (foundElem = _.find(statement.sales, function(sale) {
                    return sElem.id === sale.id;
                  }));
                }
              });
            }
            if (foundElem) {
              return $scope.selectedElements.push(foundElem);
            }
          });
        }
      }
    };
    $scope.getLastDate = function() {
      if ($scope.isDataFound) {
        return _.last(w.content.dates);
      }
    };
    $scope.getTotalForPeriod = function(element) {
      if ((element.totals != null) && $scope.filter) {
        return _.reduce(element.totals[$scope.filter.value], function(memo, total) {
          return memo + total;
        }, 0);
      }
    };
    $scope.getElementChartColor = function(index) {
      return ChartFormatterSvc.getColor(index);
    };
    $scope.toggleSelectedElement = function(element) {
      if ($scope.isSelected(element)) {
        $scope.selectedElements = _.reject($scope.selectedElements, function(sElem) {
          if (element.id) {
            return sElem.id === element.id;
          } else {
            return sElem.name === element.name;
          }
        });
        w.format();
        if (w.isExpanded() && $scope.selectedElements.length === 0) {
          return w.toggleExpanded();
        } else {
          return ImpacWidgetsSvc.updateWidgetSettings(w, false);
        }
      } else {
        $scope.selectedElements || ($scope.selectedElements = []);
        $scope.selectedElements.push(element);
        w.format();
        if (!w.isExpanded()) {
          return w.toggleExpanded();
        } else {
          return ImpacWidgetsSvc.updateWidgetSettings(w, false);
        }
      }
    };
    $scope.isSelected = function(element) {
      if ((element != null) && ($scope.selectedElements != null)) {
        if (_.find($scope.selectedElements, function(sElem) {
          if (element.id) {
            return sElem.id === element.id;
          } else {
            return sElem.name === element.name;
          }
        })) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    };
    $scope.toggleCollapsed = function(element) {
      if ((element != null) && (element.name != null)) {
        if (_.find($scope.unCollapsed, (function(name) {
          return element.name === name;
        }))) {
          $scope.unCollapsed = _.reject($scope.unCollapsed, function(name) {
            return name === element.name;
          });
        } else {
          $scope.unCollapsed.push(element.name);
        }
        return ImpacWidgetsSvc.updateWidgetSettings(w, false);
      }
    };
    $scope.isCollapsed = function(element) {
      if ((element != null) && (element.name != null)) {
        if (_.find($scope.unCollapsed, (function(name) {
          return element.name === name;
        }))) {
          return false;
        } else {
          return true;
        }
      }
    };
    $scope.hasElements = function() {
      return ($scope.selectedElements != null) && $scope.selectedElements.length > 0;
    };
    $scope.drawTrigger = $q.defer();
    w.format = function() {
      var all_values_are_positive, chartData, inputData, options;
      if ($scope.isDataFound && ($scope.selectedElements != null) && $scope.selectedElements.length > 0) {
        all_values_are_positive = true;
        inputData = [];
        angular.forEach($scope.selectedElements, function(sElem) {
          var data, dates, period;
          data = angular.copy(sElem);
          period = null;
          if ((w.metadata != null) && (w.metadata.hist_parameters != null)) {
            period = w.metadata.hist_parameters.period;
          }
          dates = _.map(w.content.dates, function(date) {
            return $filter('mnoDate')(date, period);
          });
          inputData.push({
            title: data.name,
            labels: dates,
            values: data.totals[$scope.filter.value]
          });
          return angular.forEach(data.totals, function(value) {
            return all_values_are_positive && (all_values_are_positive = value >= 0);
          });
        });
        options = {
          scaleBeginAtZero: all_values_are_positive,
          showXLabels: true,
          datasetFill: false,
          pointDot: false
        };
        if ($scope.filter.value.indexOf('quantity') > -1) {
          angular.merge(options, {
            currency: 'hide'
          });
        }
        chartData = ChartFormatterSvc.lineChart(inputData, options);
        return $scope.drawTrigger.notify(chartData);
      }
    };
    unCollapsedSetting = {};
    unCollapsedSetting.initialized = false;
    unCollapsedSetting.initialize = function() {
      return unCollapsedSetting.initialized = true;
    };
    unCollapsedSetting.toMetadata = function() {
      return {
        unCollapsed: $scope.unCollapsed
      };
    };
    w.settings.push(unCollapsedSetting);
    selectedElementsSetting = {};
    selectedElementsSetting.initialized = false;
    selectedElementsSetting.initialize = function() {
      return selectedElementsSetting.initialized = true;
    };
    selectedElementsSetting.toMetadata = function() {
      return {
        selectedElements: $scope.selectedElements
      };
    };
    w.settings.push(selectedElementsSetting);
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetSalesComparison', function() {
    return {
      restrict: 'A',
      controller: 'WidgetSalesComparisonCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy9zYWxlcy1jb21wYXJpc29uL3NhbGVzLWNvbXBhcmlzb24uZGlyZWN0aXZlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUE7O0VBQUEsTUFBQSxHQUFTLE9BQU8sQ0FBQyxNQUFSLENBQWUsMkNBQWYsRUFBMkQsRUFBM0Q7O0VBRVQsTUFBTSxDQUFDLFVBQVAsQ0FBa0IsMkJBQWxCLEVBQStDLFNBQUMsTUFBRCxFQUFTLEVBQVQsRUFBYSxPQUFiLEVBQXNCLGlCQUF0QixFQUF5QyxlQUF6QztBQUU3QyxRQUFBO0lBQUEsQ0FBQSxHQUFJLE1BQU0sQ0FBQztJQUlYLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFDckIsTUFBTSxDQUFDLGlCQUFQLEdBQTJCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFDM0IsTUFBTSxDQUFDLGFBQVAsR0FBdUIsRUFBRSxDQUFDLEtBQUgsQ0FBQTtJQUN2QixNQUFNLENBQUMsc0JBQVAsR0FBZ0MsRUFBRSxDQUFDLEtBQUgsQ0FBQTtJQUNoQyxNQUFNLENBQUMsc0JBQVAsR0FBZ0MsRUFBRSxDQUFDLEtBQUgsQ0FBQTtJQUNoQyxNQUFNLENBQUMsYUFBUCxHQUF1QixFQUFFLENBQUMsS0FBSCxDQUFBO0lBRXZCLGdCQUFBLEdBQW1CLENBQ2pCLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FERixFQUVqQixNQUFNLENBQUMsaUJBQWlCLENBQUMsT0FGUixFQUdqQixNQUFNLENBQUMsYUFBYSxDQUFDLE9BSEosRUFJakIsTUFBTSxDQUFDLHNCQUpVLEVBS2pCLE1BQU0sQ0FBQyxzQkFMVSxFQU1qQixNQUFNLENBQUMsYUFBYSxDQUFDLE9BTko7SUFZbkIsQ0FBQyxDQUFDLFdBQUYsR0FBZ0IsU0FBQTtNQUNkLE1BQU0sQ0FBQyxXQUFQLEdBQXNCLE9BQU8sQ0FBQyxTQUFSLENBQWtCLENBQUMsQ0FBQyxPQUFwQixDQUFBLElBQWdDLENBQUMsQ0FBQyxDQUFDLE9BQUYsQ0FBVSxDQUFDLENBQUMsT0FBTyxDQUFDLGdCQUFwQixDQUFqQyxJQUEwRSxDQUFDLENBQUMsQ0FBQyxPQUFGLENBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFwQjtNQUNqRyxJQUFHLE1BQU0sQ0FBQyxXQUFWO1FBQ0UsTUFBTSxDQUFDLFdBQVAsR0FBcUIsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxXQUFYLElBQTBCO1FBRS9DLE1BQU0sQ0FBQyxhQUFQLEdBQXVCO1VBQ3JCO1lBQUMsS0FBQSxFQUFPLDBCQUFSO1lBQW9DLEtBQUEsRUFBTyxrQkFBM0M7V0FEcUIsRUFFckI7WUFBQyxLQUFBLEVBQU8sMEJBQVI7WUFBb0MsS0FBQSxFQUFPLGdCQUEzQztXQUZxQixFQUdyQjtZQUFDLEtBQUEsRUFBTyxlQUFSO1lBQXlCLEtBQUEsRUFBTyxlQUFoQztXQUhxQjs7UUFLdkIsTUFBTSxDQUFDLE1BQVAsR0FBZ0IsT0FBTyxDQUFDLElBQVIsQ0FBYSxDQUFDLENBQUMsSUFBRixDQUFPLE1BQU0sQ0FBQyxhQUFkLEVBQTZCLFNBQUMsQ0FBRDtpQkFDeEQsQ0FBQyxDQUFDLFFBQUYsSUFBYyxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQVgsS0FBcUIsQ0FBQyxDQUFDO1FBRG1CLENBQTdCLENBQUEsSUFFeEIsTUFBTSxDQUFDLGFBQWMsQ0FBQSxDQUFBLENBRlY7UUFJaEIsTUFBTSxDQUFDLGVBQVAsR0FBeUI7VUFDdkI7WUFBQyxLQUFBLEVBQU8sVUFBUjtZQUFvQixLQUFBLEVBQU8sU0FBM0I7V0FEdUIsRUFFdkI7WUFBQyxLQUFBLEVBQU8sV0FBUjtZQUFxQixLQUFBLEVBQU8sVUFBNUI7V0FGdUIsRUFHdkI7WUFBQyxLQUFBLEVBQU8sWUFBUjtZQUFzQixLQUFBLEVBQU8sVUFBN0I7V0FIdUIsRUFJdkI7WUFBQyxLQUFBLEVBQU8sV0FBUjtZQUFxQixLQUFBLEVBQU8sVUFBNUI7V0FKdUI7O1FBTXpCLE1BQU0sQ0FBQyxRQUFQLEdBQWtCLE9BQU8sQ0FBQyxJQUFSLENBQWEsQ0FBQyxDQUFDLElBQUYsQ0FBTyxNQUFNLENBQUMsZUFBZCxFQUErQixTQUFDLENBQUQ7aUJBQzVELENBQUMsQ0FBQyxRQUFGLElBQWMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFYLEtBQXVCLENBQUMsQ0FBQztRQURxQixDQUEvQixDQUFBLElBRTFCLE1BQU0sQ0FBQyxlQUFnQixDQUFBLENBQUEsQ0FGVjtRQUlsQixJQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsZ0JBQWQ7VUFDRSxNQUFNLENBQUMsZ0JBQVAsR0FBMEI7aUJBQzFCLE9BQU8sQ0FBQyxPQUFSLENBQWdCLENBQUMsQ0FBQyxRQUFRLENBQUMsZ0JBQTNCLEVBQTZDLFNBQUMsS0FBRDtBQUMzQyxnQkFBQTtZQUFBLFNBQUEsR0FBWSxDQUFDLENBQUMsSUFBRixDQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsZ0JBQWpCLEVBQW1DLFNBQUMsU0FBRDtxQkFDN0MsU0FBUyxDQUFDLElBQVYsS0FBa0IsS0FBSyxDQUFDO1lBRHFCLENBQW5DO1lBSVosSUFBRyxDQUFDLFNBQUo7Y0FDRSxPQUFPLENBQUMsT0FBUixDQUFnQixDQUFDLENBQUMsT0FBTyxDQUFDLGdCQUExQixFQUE0QyxTQUFDLFNBQUQ7Z0JBQzFDLElBRUssdUJBRkw7eUJBQUEsY0FBQSxZQUFjLENBQUMsQ0FBQyxJQUFGLENBQU8sU0FBUyxDQUFDLEtBQWpCLEVBQXdCLFNBQUMsSUFBRDsyQkFDcEMsS0FBSyxDQUFDLEVBQU4sS0FBWSxJQUFJLENBQUM7a0JBRG1CLENBQXhCLEdBQWQ7O2NBRDBDLENBQTVDLEVBREY7O1lBT0EsSUFBMkMsU0FBM0M7cUJBQUEsTUFBTSxDQUFDLGdCQUFnQixDQUFDLElBQXhCLENBQTZCLFNBQTdCLEVBQUE7O1VBWjJDLENBQTdDLEVBRkY7U0F0QkY7O0lBRmM7SUF5Q2hCLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLFNBQUE7TUFDbkIsSUFBMkIsTUFBTSxDQUFDLFdBQWxDO2VBQUEsQ0FBQyxDQUFDLElBQUYsQ0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQWpCLEVBQUE7O0lBRG1CO0lBR3JCLE1BQU0sQ0FBQyxpQkFBUCxHQUEyQixTQUFDLE9BQUQ7TUFDekIsSUFFUSx3QkFBQSxJQUFtQixNQUFNLENBQUMsTUFGbEM7ZUFBQSxDQUFDLENBQUMsTUFBRixDQUFTLE9BQU8sQ0FBQyxNQUFPLENBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFkLENBQXhCLEVBQThDLFNBQUMsSUFBRCxFQUFNLEtBQU47aUJBQzVDLElBQUEsR0FBTztRQURxQyxDQUE5QyxFQUVFLENBRkYsRUFBQTs7SUFEeUI7SUFLM0IsTUFBTSxDQUFDLG9CQUFQLEdBQThCLFNBQUMsS0FBRDthQUM1QixpQkFBaUIsQ0FBQyxRQUFsQixDQUEyQixLQUEzQjtJQUQ0QjtJQUs5QixNQUFNLENBQUMscUJBQVAsR0FBK0IsU0FBQyxPQUFEO01BQzdCLElBQUcsTUFBTSxDQUFDLFVBQVAsQ0FBa0IsT0FBbEIsQ0FBSDtRQUNFLE1BQU0sQ0FBQyxnQkFBUCxHQUEwQixDQUFDLENBQUMsTUFBRixDQUFTLE1BQU0sQ0FBQyxnQkFBaEIsRUFBa0MsU0FBQyxLQUFEO1VBQzFELElBQUcsT0FBTyxDQUFDLEVBQVg7bUJBQ0UsS0FBSyxDQUFDLEVBQU4sS0FBWSxPQUFPLENBQUMsR0FEdEI7V0FBQSxNQUFBO21CQUdFLEtBQUssQ0FBQyxJQUFOLEtBQWMsT0FBTyxDQUFDLEtBSHhCOztRQUQwRCxDQUFsQztRQU0xQixDQUFDLENBQUMsTUFBRixDQUFBO1FBQ0EsSUFBRyxDQUFDLENBQUMsVUFBRixDQUFBLENBQUEsSUFBa0IsTUFBTSxDQUFDLGdCQUFnQixDQUFDLE1BQXhCLEtBQWtDLENBQXZEO2lCQUNFLENBQUMsQ0FBQyxjQUFGLENBQUEsRUFERjtTQUFBLE1BQUE7aUJBR0UsZUFBZSxDQUFDLG9CQUFoQixDQUFxQyxDQUFyQyxFQUF1QyxLQUF2QyxFQUhGO1NBUkY7T0FBQSxNQUFBO1FBYUUsTUFBTSxDQUFDLHFCQUFQLE1BQU0sQ0FBQyxtQkFBcUI7UUFDNUIsTUFBTSxDQUFDLGdCQUFnQixDQUFDLElBQXhCLENBQTZCLE9BQTdCO1FBQ0EsQ0FBQyxDQUFDLE1BQUYsQ0FBQTtRQUNBLElBQUcsQ0FBQyxDQUFDLENBQUMsVUFBRixDQUFBLENBQUo7aUJBQ0UsQ0FBQyxDQUFDLGNBQUYsQ0FBQSxFQURGO1NBQUEsTUFBQTtpQkFHRSxlQUFlLENBQUMsb0JBQWhCLENBQXFDLENBQXJDLEVBQXVDLEtBQXZDLEVBSEY7U0FoQkY7O0lBRDZCO0lBc0IvQixNQUFNLENBQUMsVUFBUCxHQUFvQixTQUFDLE9BQUQ7TUFDbEIsSUFBRyxpQkFBQSxJQUFZLGlDQUFmO1FBQ0UsSUFBRyxDQUFDLENBQUMsSUFBRixDQUFPLE1BQU0sQ0FBQyxnQkFBZCxFQUFnQyxTQUFDLEtBQUQ7VUFDakMsSUFBRyxPQUFPLENBQUMsRUFBWDttQkFDRSxLQUFLLENBQUMsRUFBTixLQUFZLE9BQU8sQ0FBQyxHQUR0QjtXQUFBLE1BQUE7bUJBR0UsS0FBSyxDQUFDLElBQU4sS0FBYyxPQUFPLENBQUMsS0FIeEI7O1FBRGlDLENBQWhDLENBQUg7QUFNRSxpQkFBTyxLQU5UO1NBQUEsTUFBQTtBQVFFLGlCQUFPLE1BUlQ7U0FERjtPQUFBLE1BQUE7QUFXRSxlQUFPLE1BWFQ7O0lBRGtCO0lBY3BCLE1BQU0sQ0FBQyxlQUFQLEdBQXlCLFNBQUMsT0FBRDtNQUN2QixJQUFHLGlCQUFBLElBQVksc0JBQWY7UUFDRSxJQUFHLENBQUMsQ0FBQyxJQUFGLENBQU8sTUFBTSxDQUFDLFdBQWQsRUFBMkIsQ0FBQyxTQUFDLElBQUQ7aUJBQVUsT0FBTyxDQUFDLElBQVIsS0FBZ0I7UUFBMUIsQ0FBRCxDQUEzQixDQUFIO1VBQ0UsTUFBTSxDQUFDLFdBQVAsR0FBcUIsQ0FBQyxDQUFDLE1BQUYsQ0FBUyxNQUFNLENBQUMsV0FBaEIsRUFBNkIsU0FBQyxJQUFEO21CQUNoRCxJQUFBLEtBQVEsT0FBTyxDQUFDO1VBRGdDLENBQTdCLEVBRHZCO1NBQUEsTUFBQTtVQUtFLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBbkIsQ0FBd0IsT0FBTyxDQUFDLElBQWhDLEVBTEY7O2VBTUEsZUFBZSxDQUFDLG9CQUFoQixDQUFxQyxDQUFyQyxFQUF1QyxLQUF2QyxFQVBGOztJQUR1QjtJQVV6QixNQUFNLENBQUMsV0FBUCxHQUFxQixTQUFDLE9BQUQ7TUFDbkIsSUFBRyxpQkFBQSxJQUFZLHNCQUFmO1FBQ0UsSUFBRyxDQUFDLENBQUMsSUFBRixDQUFPLE1BQU0sQ0FBQyxXQUFkLEVBQTJCLENBQUMsU0FBQyxJQUFEO2lCQUFVLE9BQU8sQ0FBQyxJQUFSLEtBQWdCO1FBQTFCLENBQUQsQ0FBM0IsQ0FBSDtBQUNFLGlCQUFPLE1BRFQ7U0FBQSxNQUFBO0FBR0UsaUJBQU8sS0FIVDtTQURGOztJQURtQjtJQU9yQixNQUFNLENBQUMsV0FBUCxHQUFxQixTQUFBO2FBQ25CLGlDQUFBLElBQTRCLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxNQUF4QixHQUFpQztJQUQxQztJQU9yQixNQUFNLENBQUMsV0FBUCxHQUFxQixFQUFFLENBQUMsS0FBSCxDQUFBO0lBQ3JCLENBQUMsQ0FBQyxNQUFGLEdBQVcsU0FBQTtBQUNULFVBQUE7TUFBQSxJQUFHLE1BQU0sQ0FBQyxXQUFQLElBQXNCLGlDQUF0QixJQUFrRCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsTUFBeEIsR0FBaUMsQ0FBdEY7UUFDRSx1QkFBQSxHQUEwQjtRQUUxQixTQUFBLEdBQVk7UUFDWixPQUFPLENBQUMsT0FBUixDQUFnQixNQUFNLENBQUMsZ0JBQXZCLEVBQXlDLFNBQUMsS0FBRDtBQUN2QyxjQUFBO1VBQUEsSUFBQSxHQUFPLE9BQU8sQ0FBQyxJQUFSLENBQWEsS0FBYjtVQUVQLE1BQUEsR0FBUztVQUNULElBQThDLG9CQUFBLElBQWUsb0NBQTdEO1lBQUEsTUFBQSxHQUFTLENBQUMsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLE9BQXBDOztVQUNBLEtBQUEsR0FBUSxDQUFDLENBQUMsR0FBRixDQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBaEIsRUFBdUIsU0FBQyxJQUFEO21CQUM3QixPQUFBLENBQVEsU0FBUixDQUFBLENBQW1CLElBQW5CLEVBQXlCLE1BQXpCO1VBRDZCLENBQXZCO1VBR1IsU0FBUyxDQUFDLElBQVYsQ0FBZTtZQUFDLEtBQUEsRUFBTyxJQUFJLENBQUMsSUFBYjtZQUFtQixNQUFBLEVBQVEsS0FBM0I7WUFBa0MsTUFBQSxFQUFRLElBQUksQ0FBQyxNQUFPLENBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFkLENBQXREO1dBQWY7aUJBRUEsT0FBTyxDQUFDLE9BQVIsQ0FBZ0IsSUFBSSxDQUFDLE1BQXJCLEVBQTZCLFNBQUMsS0FBRDttQkFDM0IsNEJBQUEsMEJBQTRCLEtBQUEsSUFBUztVQURWLENBQTdCO1FBVnVDLENBQXpDO1FBZUEsT0FBQSxHQUFVO1VBQ1IsZ0JBQUEsRUFBa0IsdUJBRFY7VUFFUixXQUFBLEVBQWEsSUFGTDtVQUdSLFdBQUEsRUFBYSxLQUhMO1VBSVIsUUFBQSxFQUFVLEtBSkY7O1FBTVYsSUFBOEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBcEIsQ0FBNEIsVUFBNUIsQ0FBQSxHQUEwQyxDQUFDLENBQXpGO1VBQUEsT0FBTyxDQUFDLEtBQVIsQ0FBYyxPQUFkLEVBQXVCO1lBQUMsUUFBQSxFQUFVLE1BQVg7V0FBdkIsRUFBQTs7UUFFQSxTQUFBLEdBQVksaUJBQWlCLENBQUMsU0FBbEIsQ0FBNEIsU0FBNUIsRUFBc0MsT0FBdEM7ZUFHWixNQUFNLENBQUMsV0FBVyxDQUFDLE1BQW5CLENBQTBCLFNBQTFCLEVBOUJGOztJQURTO0lBb0NYLGtCQUFBLEdBQXFCO0lBQ3JCLGtCQUFrQixDQUFDLFdBQW5CLEdBQWlDO0lBRWpDLGtCQUFrQixDQUFDLFVBQW5CLEdBQWdDLFNBQUE7YUFDOUIsa0JBQWtCLENBQUMsV0FBbkIsR0FBaUM7SUFESDtJQUdoQyxrQkFBa0IsQ0FBQyxVQUFuQixHQUFnQyxTQUFBO2FBQzlCO1FBQUMsV0FBQSxFQUFhLE1BQU0sQ0FBQyxXQUFyQjs7SUFEOEI7SUFHaEMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFYLENBQWdCLGtCQUFoQjtJQUVBLHVCQUFBLEdBQTBCO0lBQzFCLHVCQUF1QixDQUFDLFdBQXhCLEdBQXNDO0lBRXRDLHVCQUF1QixDQUFDLFVBQXhCLEdBQXFDLFNBQUE7YUFDbkMsdUJBQXVCLENBQUMsV0FBeEIsR0FBc0M7SUFESDtJQUdyQyx1QkFBdUIsQ0FBQyxVQUF4QixHQUFxQyxTQUFBO2FBQ25DO1FBQUMsZ0JBQUEsRUFBa0IsTUFBTSxDQUFDLGdCQUExQjs7SUFEbUM7SUFHckMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFYLENBQWdCLHVCQUFoQjtXQUtBLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBdEIsQ0FBOEIsZ0JBQTlCO0VBek02QyxDQUEvQzs7RUE0TUEsTUFBTSxDQUFDLFNBQVAsQ0FBaUIsdUJBQWpCLEVBQTBDLFNBQUE7QUFDeEMsV0FBTztNQUNMLFFBQUEsRUFBVSxHQURMO01BRUwsVUFBQSxFQUFZLDJCQUZQOztFQURpQyxDQUExQztBQTlNQSIsImZpbGUiOiJjb21wb25lbnRzL3dpZGdldHMvc2FsZXMtY29tcGFyaXNvbi9zYWxlcy1jb21wYXJpc29uLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdpbXBhYy5jb21wb25lbnRzLndpZGdldHMuc2FsZXMtY29tcGFyaXNvbicsW10pXG5cbm1vZHVsZS5jb250cm9sbGVyKCdXaWRnZXRTYWxlc0NvbXBhcmlzb25DdHJsJywgKCRzY29wZSwgJHEsICRmaWx0ZXIsIENoYXJ0Rm9ybWF0dGVyU3ZjLCBJbXBhY1dpZGdldHNTdmMpIC0+XG5cbiAgdyA9ICRzY29wZS53aWRnZXRcblxuICAjIERlZmluZSBzZXR0aW5nc1xuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICRzY29wZS5vcmdEZWZlcnJlZCA9ICRxLmRlZmVyKClcbiAgJHNjb3BlLnRpbWVSYW5nZURlZmVycmVkID0gJHEuZGVmZXIoKVxuICAkc2NvcGUud2lkdGhEZWZlcnJlZCA9ICRxLmRlZmVyKClcbiAgJHNjb3BlLnBhcmFtU2VsZWN0b3JEZWZlcnJlZDEgPSAkcS5kZWZlcigpXG4gICRzY29wZS5wYXJhbVNlbGVjdG9yRGVmZXJyZWQyID0gJHEuZGVmZXIoKVxuICAkc2NvcGUuY2hhcnREZWZlcnJlZCA9ICRxLmRlZmVyKClcblxuICBzZXR0aW5nc1Byb21pc2VzID0gW1xuICAgICRzY29wZS5vcmdEZWZlcnJlZC5wcm9taXNlXG4gICAgJHNjb3BlLnRpbWVSYW5nZURlZmVycmVkLnByb21pc2VcbiAgICAkc2NvcGUud2lkdGhEZWZlcnJlZC5wcm9taXNlXG4gICAgJHNjb3BlLnBhcmFtU2VsZWN0b3JEZWZlcnJlZDFcbiAgICAkc2NvcGUucGFyYW1TZWxlY3RvckRlZmVycmVkMlxuICAgICRzY29wZS5jaGFydERlZmVycmVkLnByb21pc2VcbiAgXVxuXG5cbiAgIyBXaWRnZXQgc3BlY2lmaWMgbWV0aG9kc1xuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHcuaW5pdENvbnRleHQgPSAtPlxuICAgICRzY29wZS5pc0RhdGFGb3VuZCA9IChhbmd1bGFyLmlzRGVmaW5lZCh3LmNvbnRlbnQpICYmICFfLmlzRW1wdHkody5jb250ZW50LnNhbGVzX2NvbXBhcmlzb24pICYmICFfLmlzRW1wdHkody5jb250ZW50LmRhdGVzKSlcbiAgICBpZiAkc2NvcGUuaXNEYXRhRm91bmRcbiAgICAgICRzY29wZS51bkNvbGxhcHNlZCA9IHcubWV0YWRhdGEudW5Db2xsYXBzZWQgfHwgW11cblxuICAgICAgJHNjb3BlLmZpbHRlck9wdGlvbnMgPSBbXG4gICAgICAgIHtsYWJlbDogJ3ZhbHVlIHNvbGQgKGluY2wuIHRheGVzKScsIHZhbHVlOiAnZ3Jvc3NfdmFsdWVfc29sZCd9LFxuICAgICAgICB7bGFiZWw6ICd2YWx1ZSBzb2xkIChleGNsLiB0YXhlcyknLCB2YWx1ZTogJ25ldF92YWx1ZV9zb2xkJ30sXG4gICAgICAgIHtsYWJlbDogJ3F1YW50aXR5IHNvbGQnLCB2YWx1ZTogJ3F1YW50aXR5X3NvbGQnfSxcbiAgICAgIF1cbiAgICAgICRzY29wZS5maWx0ZXIgPSBhbmd1bGFyLmNvcHkoXy5maW5kKCRzY29wZS5maWx0ZXJPcHRpb25zLCAobykgLT5cbiAgICAgICAgdy5tZXRhZGF0YSAmJiB3Lm1ldGFkYXRhLmZpbHRlciA9PSBvLnZhbHVlXG4gICAgICApIHx8ICRzY29wZS5maWx0ZXJPcHRpb25zWzBdKVxuXG4gICAgICAkc2NvcGUuY3JpdGVyaWFPcHRpb25zID0gW1xuICAgICAgICB7bGFiZWw6ICdwcm9kdWN0cycsIHZhbHVlOiAnZGVmYXVsdCd9LFxuICAgICAgICB7bGFiZWw6ICdsb2NhdGlvbnMnLCB2YWx1ZTogJ2xvY2F0aW9uJ30sXG4gICAgICAgIHtsYWJlbDogJ2luZHVzdHJpZXMnLCB2YWx1ZTogJ2luZHVzdHJ5J30sXG4gICAgICAgIHtsYWJlbDogJ2N1c3RvbWVycycsIHZhbHVlOiAnY3VzdG9tZXInfSxcbiAgICAgIF1cbiAgICAgICRzY29wZS5jcml0ZXJpYSA9IGFuZ3VsYXIuY29weShfLmZpbmQoJHNjb3BlLmNyaXRlcmlhT3B0aW9ucywgKG8pIC0+XG4gICAgICAgIHcubWV0YWRhdGEgJiYgdy5tZXRhZGF0YS5jcml0ZXJpYSA9PSBvLnZhbHVlXG4gICAgICApIHx8ICRzY29wZS5jcml0ZXJpYU9wdGlvbnNbMF0pXG5cbiAgICAgIGlmIHcubWV0YWRhdGEuc2VsZWN0ZWRFbGVtZW50c1xuICAgICAgICAkc2NvcGUuc2VsZWN0ZWRFbGVtZW50cyA9IFtdXG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaCh3Lm1ldGFkYXRhLnNlbGVjdGVkRWxlbWVudHMsIChzRWxlbSkgLT5cbiAgICAgICAgICBmb3VuZEVsZW0gPSBfLmZpbmQody5jb250ZW50LnNhbGVzX2NvbXBhcmlzb24sIChzdGF0ZW1lbnQpLT5cbiAgICAgICAgICAgIHN0YXRlbWVudC5uYW1lID09IHNFbGVtLm5hbWVcbiAgICAgICAgICApXG5cbiAgICAgICAgICBpZiAhZm91bmRFbGVtXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2gody5jb250ZW50LnNhbGVzX2NvbXBhcmlzb24sIChzdGF0ZW1lbnQpIC0+XG4gICAgICAgICAgICAgIGZvdW5kRWxlbSB8fD0gXy5maW5kKHN0YXRlbWVudC5zYWxlcywgKHNhbGUpLT5cbiAgICAgICAgICAgICAgICBzRWxlbS5pZCA9PSBzYWxlLmlkXG4gICAgICAgICAgICAgICkgaWYgc3RhdGVtZW50LnNhbGVzP1xuICAgICAgICAgICAgKVxuXG4gICAgICAgICAgJHNjb3BlLnNlbGVjdGVkRWxlbWVudHMucHVzaChmb3VuZEVsZW0pIGlmIGZvdW5kRWxlbVxuICAgICAgICApXG5cbiAgJHNjb3BlLmdldExhc3REYXRlID0gLT5cbiAgICBfLmxhc3Qody5jb250ZW50LmRhdGVzKSBpZiAkc2NvcGUuaXNEYXRhRm91bmRcblxuICAkc2NvcGUuZ2V0VG90YWxGb3JQZXJpb2QgPSAoZWxlbWVudCkgLT5cbiAgICBfLnJlZHVjZShlbGVtZW50LnRvdGFsc1skc2NvcGUuZmlsdGVyLnZhbHVlXSwgKG1lbW8sdG90YWwpIC0+XG4gICAgICBtZW1vICsgdG90YWxcbiAgICAsIDApIGlmIGVsZW1lbnQudG90YWxzPyAmJiAkc2NvcGUuZmlsdGVyXG5cbiAgJHNjb3BlLmdldEVsZW1lbnRDaGFydENvbG9yID0gKGluZGV4KSAtPlxuICAgIENoYXJ0Rm9ybWF0dGVyU3ZjLmdldENvbG9yKGluZGV4KVxuXG4gICMgLS0tPlxuICAjIFRPRE8gc2VsZWN0ZWRFbGVtZW50IGFuZCBjb2xsYXBzZWQgc2hvdWxkIGJlIGZhY3Rvcml6ZWQgYXMgc2V0dGluZ3Mgb3IgJ2NvbW1vbnMnXG4gICRzY29wZS50b2dnbGVTZWxlY3RlZEVsZW1lbnQgPSAoZWxlbWVudCkgLT5cbiAgICBpZiAkc2NvcGUuaXNTZWxlY3RlZChlbGVtZW50KVxuICAgICAgJHNjb3BlLnNlbGVjdGVkRWxlbWVudHMgPSBfLnJlamVjdCgkc2NvcGUuc2VsZWN0ZWRFbGVtZW50cywgKHNFbGVtKSAtPlxuICAgICAgICBpZiBlbGVtZW50LmlkXG4gICAgICAgICAgc0VsZW0uaWQgPT0gZWxlbWVudC5pZFxuICAgICAgICBlbHNlXG4gICAgICAgICAgc0VsZW0ubmFtZSA9PSBlbGVtZW50Lm5hbWVcbiAgICAgIClcbiAgICAgIHcuZm9ybWF0KClcbiAgICAgIGlmIHcuaXNFeHBhbmRlZCgpICYmICRzY29wZS5zZWxlY3RlZEVsZW1lbnRzLmxlbmd0aCA9PSAwXG4gICAgICAgIHcudG9nZ2xlRXhwYW5kZWQoKVxuICAgICAgZWxzZVxuICAgICAgICBJbXBhY1dpZGdldHNTdmMudXBkYXRlV2lkZ2V0U2V0dGluZ3ModyxmYWxzZSlcbiAgICBlbHNlXG4gICAgICAkc2NvcGUuc2VsZWN0ZWRFbGVtZW50cyB8fD0gW11cbiAgICAgICRzY29wZS5zZWxlY3RlZEVsZW1lbnRzLnB1c2goZWxlbWVudClcbiAgICAgIHcuZm9ybWF0KClcbiAgICAgIGlmICF3LmlzRXhwYW5kZWQoKVxuICAgICAgICB3LnRvZ2dsZUV4cGFuZGVkKClcbiAgICAgIGVsc2VcbiAgICAgICAgSW1wYWNXaWRnZXRzU3ZjLnVwZGF0ZVdpZGdldFNldHRpbmdzKHcsZmFsc2UpXG5cbiAgJHNjb3BlLmlzU2VsZWN0ZWQgPSAoZWxlbWVudCkgLT5cbiAgICBpZiBlbGVtZW50PyAmJiAkc2NvcGUuc2VsZWN0ZWRFbGVtZW50cz9cbiAgICAgIGlmIF8uZmluZCgkc2NvcGUuc2VsZWN0ZWRFbGVtZW50cywgKHNFbGVtKSAtPlxuICAgICAgICBpZiBlbGVtZW50LmlkXG4gICAgICAgICAgc0VsZW0uaWQgPT0gZWxlbWVudC5pZFxuICAgICAgICBlbHNlXG4gICAgICAgICAgc0VsZW0ubmFtZSA9PSBlbGVtZW50Lm5hbWVcbiAgICAgIClcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgZWxzZVxuICAgICAgcmV0dXJuIGZhbHNlXG5cbiAgJHNjb3BlLnRvZ2dsZUNvbGxhcHNlZCA9IChlbGVtZW50KSAtPlxuICAgIGlmIGVsZW1lbnQ/ICYmIGVsZW1lbnQubmFtZT9cbiAgICAgIGlmIF8uZmluZCgkc2NvcGUudW5Db2xsYXBzZWQsICgobmFtZSkgLT4gZWxlbWVudC5uYW1lID09IG5hbWUpKVxuICAgICAgICAkc2NvcGUudW5Db2xsYXBzZWQgPSBfLnJlamVjdCgkc2NvcGUudW5Db2xsYXBzZWQsIChuYW1lKSAtPlxuICAgICAgICAgIG5hbWUgPT0gZWxlbWVudC5uYW1lXG4gICAgICAgIClcbiAgICAgIGVsc2VcbiAgICAgICAgJHNjb3BlLnVuQ29sbGFwc2VkLnB1c2goZWxlbWVudC5uYW1lKVxuICAgICAgSW1wYWNXaWRnZXRzU3ZjLnVwZGF0ZVdpZGdldFNldHRpbmdzKHcsZmFsc2UpXG5cbiAgJHNjb3BlLmlzQ29sbGFwc2VkID0gKGVsZW1lbnQpIC0+XG4gICAgaWYgZWxlbWVudD8gJiYgZWxlbWVudC5uYW1lP1xuICAgICAgaWYgXy5maW5kKCRzY29wZS51bkNvbGxhcHNlZCwgKChuYW1lKSAtPiBlbGVtZW50Lm5hbWUgPT0gbmFtZSkpXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgZWxzZVxuICAgICAgICByZXR1cm4gdHJ1ZVxuXG4gICRzY29wZS5oYXNFbGVtZW50cyA9IC0+XG4gICAgJHNjb3BlLnNlbGVjdGVkRWxlbWVudHM/ICYmICRzY29wZS5zZWxlY3RlZEVsZW1lbnRzLmxlbmd0aCA+IDBcbiAgIyA8LS0tXG5cblxuICAjIENoYXJ0IGZvcm1hdGluZyBmdW5jdGlvblxuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICRzY29wZS5kcmF3VHJpZ2dlciA9ICRxLmRlZmVyKClcbiAgdy5mb3JtYXQgPSAtPlxuICAgIGlmICRzY29wZS5pc0RhdGFGb3VuZCAmJiAkc2NvcGUuc2VsZWN0ZWRFbGVtZW50cz8gJiYgJHNjb3BlLnNlbGVjdGVkRWxlbWVudHMubGVuZ3RoID4gMFxuICAgICAgYWxsX3ZhbHVlc19hcmVfcG9zaXRpdmUgPSB0cnVlXG5cbiAgICAgIGlucHV0RGF0YSA9IFtdXG4gICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLnNlbGVjdGVkRWxlbWVudHMsIChzRWxlbSkgLT5cbiAgICAgICAgZGF0YSA9IGFuZ3VsYXIuY29weShzRWxlbSlcblxuICAgICAgICBwZXJpb2QgPSBudWxsXG4gICAgICAgIHBlcmlvZCA9IHcubWV0YWRhdGEuaGlzdF9wYXJhbWV0ZXJzLnBlcmlvZCBpZiB3Lm1ldGFkYXRhPyAmJiB3Lm1ldGFkYXRhLmhpc3RfcGFyYW1ldGVycz9cbiAgICAgICAgZGF0ZXMgPSBfLm1hcCB3LmNvbnRlbnQuZGF0ZXMsIChkYXRlKSAtPlxuICAgICAgICAgICRmaWx0ZXIoJ21ub0RhdGUnKShkYXRlLCBwZXJpb2QpXG5cbiAgICAgICAgaW5wdXREYXRhLnB1c2goe3RpdGxlOiBkYXRhLm5hbWUsIGxhYmVsczogZGF0ZXMsIHZhbHVlczogZGF0YS50b3RhbHNbJHNjb3BlLmZpbHRlci52YWx1ZV19KVxuXG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaChkYXRhLnRvdGFscywgKHZhbHVlKSAtPlxuICAgICAgICAgIGFsbF92YWx1ZXNfYXJlX3Bvc2l0aXZlICYmPSB2YWx1ZSA+PSAwXG4gICAgICAgIClcbiAgICAgIClcblxuICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgc2NhbGVCZWdpbkF0WmVybzogYWxsX3ZhbHVlc19hcmVfcG9zaXRpdmUsXG4gICAgICAgIHNob3dYTGFiZWxzOiB0cnVlLFxuICAgICAgICBkYXRhc2V0RmlsbDogZmFsc2UsXG4gICAgICAgIHBvaW50RG90OiBmYWxzZSxcbiAgICAgIH1cbiAgICAgIGFuZ3VsYXIubWVyZ2Uob3B0aW9ucywge2N1cnJlbmN5OiAnaGlkZSd9KSBpZiAkc2NvcGUuZmlsdGVyLnZhbHVlLmluZGV4T2YoJ3F1YW50aXR5JykgPiAtMVxuXG4gICAgICBjaGFydERhdGEgPSBDaGFydEZvcm1hdHRlclN2Yy5saW5lQ2hhcnQoaW5wdXREYXRhLG9wdGlvbnMpXG5cbiAgICAgICMgY2FsbHMgY2hhcnQuZHJhdygpXG4gICAgICAkc2NvcGUuZHJhd1RyaWdnZXIubm90aWZ5KGNoYXJ0RGF0YSlcblxuXG4gICMgTWluaS1zZXR0aW5nc1xuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHVuQ29sbGFwc2VkU2V0dGluZyA9IHt9XG4gIHVuQ29sbGFwc2VkU2V0dGluZy5pbml0aWFsaXplZCA9IGZhbHNlXG5cbiAgdW5Db2xsYXBzZWRTZXR0aW5nLmluaXRpYWxpemUgPSAtPlxuICAgIHVuQ29sbGFwc2VkU2V0dGluZy5pbml0aWFsaXplZCA9IHRydWVcblxuICB1bkNvbGxhcHNlZFNldHRpbmcudG9NZXRhZGF0YSA9IC0+XG4gICAge3VuQ29sbGFwc2VkOiAkc2NvcGUudW5Db2xsYXBzZWR9XG5cbiAgdy5zZXR0aW5ncy5wdXNoKHVuQ29sbGFwc2VkU2V0dGluZylcblxuICBzZWxlY3RlZEVsZW1lbnRzU2V0dGluZyA9IHt9XG4gIHNlbGVjdGVkRWxlbWVudHNTZXR0aW5nLmluaXRpYWxpemVkID0gZmFsc2VcblxuICBzZWxlY3RlZEVsZW1lbnRzU2V0dGluZy5pbml0aWFsaXplID0gLT5cbiAgICBzZWxlY3RlZEVsZW1lbnRzU2V0dGluZy5pbml0aWFsaXplZCA9IHRydWVcblxuICBzZWxlY3RlZEVsZW1lbnRzU2V0dGluZy50b01ldGFkYXRhID0gLT5cbiAgICB7c2VsZWN0ZWRFbGVtZW50czogJHNjb3BlLnNlbGVjdGVkRWxlbWVudHN9XG5cbiAgdy5zZXR0aW5ncy5wdXNoKHNlbGVjdGVkRWxlbWVudHNTZXR0aW5nKVxuXG5cbiAgIyBXaWRnZXQgaXMgcmVhZHk6IGNhbiB0cmlnZ2VyIHRoZSBcIndhaXQgZm9yIHNldHRpZ25zIHRvIGJlIHJlYWR5XCJcbiAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAkc2NvcGUud2lkZ2V0RGVmZXJyZWQucmVzb2x2ZShzZXR0aW5nc1Byb21pc2VzKVxuKVxuXG5tb2R1bGUuZGlyZWN0aXZlKCd3aWRnZXRTYWxlc0NvbXBhcmlzb24nLCAtPlxuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgY29udHJvbGxlcjogJ1dpZGdldFNhbGVzQ29tcGFyaXNvbkN0cmwnXG4gIH1cbikiXX0=

(function() {
  var module;

  module = angular.module('impac.components.widgets.sales-customer-details', []);

  module.controller('WidgetSalesCustomerDetailsCtrl', function($scope, $q) {
    var settingsPromises, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    $scope.timeRangeDeferred = $q.defer();
    $scope.widthDeferred = $q.defer();
    $scope.paramSelectorDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise, $scope.timeRangeDeferred.promise, $scope.widthDeferred.promise, $scope.paramSelectorDeferred.promise];
    w.initContext = function() {
      $scope.isDataFound = (w.content != null) && !_.isEmpty(w.content.customers);
      if ($scope.isDataFound) {
        $scope.customersOptions = _.map(w.content.customers, function(e) {
          return {
            value: e.uid,
            label: e.name
          };
        });
        return $scope.selectedCustomer = {
          value: $scope.getCustomer().uid,
          label: $scope.getCustomer().name
        };
      }
    };
    $scope.getCustomer = function() {
      var customer;
      if (!$scope.isDataFound) {
        return false;
      }
      if (w.metadata && w.metadata.customer_uid) {
        customer = angular.copy(_.find(w.content.customers, function(e) {
          return e.uid === w.metadata.customer_uid;
        }) || w.content.customers[0]);
      } else {
        customer = angular.copy(w.content.customers[0]);
      }
      return customer;
    };
    $scope.formatAddress = function(anAddress) {
      if (angular.isDefined(anAddress)) {
        return anAddress.replace(/, /g, ',\n');
      }
    };
    $scope.getFromDate = function() {
      if ($scope.isDataFound) {
        return w.content.from;
      }
    };
    $scope.getToDate = function() {
      if ($scope.isDataFound) {
        return w.content.to;
      }
    };
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetSalesCustomerDetails', function() {
    return {
      restrict: 'A',
      controller: 'WidgetSalesCustomerDetailsCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy9zYWxlcy1jdXN0b21lci1kZXRhaWxzL3NhbGVzLWN1c3RvbWVyLWRldGFpbHMuZGlyZWN0aXZlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUE7O0VBQUEsTUFBQSxHQUFTLE9BQU8sQ0FBQyxNQUFSLENBQWUsaURBQWYsRUFBaUUsRUFBakU7O0VBRVQsTUFBTSxDQUFDLFVBQVAsQ0FBa0IsZ0NBQWxCLEVBQW9ELFNBQUMsTUFBRCxFQUFTLEVBQVQ7QUFFbEQsUUFBQTtJQUFBLENBQUEsR0FBSSxNQUFNLENBQUM7SUFJWCxNQUFNLENBQUMsV0FBUCxHQUFxQixFQUFFLENBQUMsS0FBSCxDQUFBO0lBQ3JCLE1BQU0sQ0FBQyxpQkFBUCxHQUEyQixFQUFFLENBQUMsS0FBSCxDQUFBO0lBQzNCLE1BQU0sQ0FBQyxhQUFQLEdBQXVCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFDdkIsTUFBTSxDQUFDLHFCQUFQLEdBQStCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFFL0IsZ0JBQUEsR0FBbUIsQ0FDakIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQURGLEVBRWpCLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxPQUZSLEVBR2pCLE1BQU0sQ0FBQyxhQUFhLENBQUMsT0FISixFQUlqQixNQUFNLENBQUMscUJBQXFCLENBQUMsT0FKWjtJQVVuQixDQUFDLENBQUMsV0FBRixHQUFnQixTQUFBO01BQ2QsTUFBTSxDQUFDLFdBQVAsR0FBcUIsbUJBQUEsSUFBYyxDQUFDLENBQUMsQ0FBQyxPQUFGLENBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFwQjtNQUVwQyxJQUFHLE1BQU0sQ0FBQyxXQUFWO1FBQ0UsTUFBTSxDQUFDLGdCQUFQLEdBQTBCLENBQUMsQ0FBQyxHQUFGLENBQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFoQixFQUEyQixTQUFDLENBQUQ7aUJBQ25EO1lBQ0UsS0FBQSxFQUFPLENBQUMsQ0FBQyxHQURYO1lBRUUsS0FBQSxFQUFPLENBQUMsQ0FBQyxJQUZYOztRQURtRCxDQUEzQjtlQU0xQixNQUFNLENBQUMsZ0JBQVAsR0FBMEI7VUFDeEIsS0FBQSxFQUFPLE1BQU0sQ0FBQyxXQUFQLENBQUEsQ0FBb0IsQ0FBQyxHQURKO1VBRXhCLEtBQUEsRUFBTyxNQUFNLENBQUMsV0FBUCxDQUFBLENBQW9CLENBQUMsSUFGSjtVQVA1Qjs7SUFIYztJQWVoQixNQUFNLENBQUMsV0FBUCxHQUFxQixTQUFBO0FBQ25CLFVBQUE7TUFBQSxJQUFBLENBQW9CLE1BQU0sQ0FBQyxXQUEzQjtBQUFBLGVBQU8sTUFBUDs7TUFFQSxJQUFHLENBQUMsQ0FBQyxRQUFGLElBQWMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxZQUE1QjtRQUNFLFFBQUEsR0FBVyxPQUFPLENBQUMsSUFBUixDQUFhLENBQUMsQ0FBQyxJQUFGLENBQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFqQixFQUE0QixTQUFDLENBQUQ7aUJBQ2xELENBQUMsQ0FBQyxHQUFGLEtBQVMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztRQUQ4QixDQUE1QixDQUFBLElBRW5CLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBVSxDQUFBLENBQUEsQ0FGZCxFQURiO09BQUEsTUFBQTtRQUtFLFFBQUEsR0FBVyxPQUFPLENBQUMsSUFBUixDQUFhLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBVSxDQUFBLENBQUEsQ0FBakMsRUFMYjs7QUFPQSxhQUFPO0lBVlk7SUFZckIsTUFBTSxDQUFDLGFBQVAsR0FBdUIsU0FBQyxTQUFEO01BQ3JCLElBQXlDLE9BQU8sQ0FBQyxTQUFSLENBQWtCLFNBQWxCLENBQXpDO0FBQUEsZUFBTyxTQUFTLENBQUMsT0FBVixDQUFrQixLQUFsQixFQUF3QixLQUF4QixFQUFQOztJQURxQjtJQUd2QixNQUFNLENBQUMsV0FBUCxHQUFxQixTQUFBO01BQ25CLElBQXlCLE1BQU0sQ0FBQyxXQUFoQztBQUFBLGVBQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFqQjs7SUFEbUI7SUFHckIsTUFBTSxDQUFDLFNBQVAsR0FBbUIsU0FBQTtNQUNqQixJQUF1QixNQUFNLENBQUMsV0FBOUI7QUFBQSxlQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBakI7O0lBRGlCO1dBTW5CLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBdEIsQ0FBOEIsZ0JBQTlCO0VBNURrRCxDQUFwRDs7RUErREEsTUFBTSxDQUFDLFNBQVAsQ0FBaUIsNEJBQWpCLEVBQStDLFNBQUE7QUFDN0MsV0FBTztNQUNMLFFBQUEsRUFBVSxHQURMO01BRUwsVUFBQSxFQUFZLGdDQUZQOztFQURzQyxDQUEvQztBQWpFQSIsImZpbGUiOiJjb21wb25lbnRzL3dpZGdldHMvc2FsZXMtY3VzdG9tZXItZGV0YWlscy9zYWxlcy1jdXN0b21lci1kZXRhaWxzLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdpbXBhYy5jb21wb25lbnRzLndpZGdldHMuc2FsZXMtY3VzdG9tZXItZGV0YWlscycsW10pXG5cbm1vZHVsZS5jb250cm9sbGVyKCdXaWRnZXRTYWxlc0N1c3RvbWVyRGV0YWlsc0N0cmwnLCAoJHNjb3BlLCAkcSkgLT5cblxuICB3ID0gJHNjb3BlLndpZGdldFxuXG4gICMgRGVmaW5lIHNldHRpbmdzXG4gICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgJHNjb3BlLm9yZ0RlZmVycmVkID0gJHEuZGVmZXIoKVxuICAkc2NvcGUudGltZVJhbmdlRGVmZXJyZWQgPSAkcS5kZWZlcigpXG4gICRzY29wZS53aWR0aERlZmVycmVkID0gJHEuZGVmZXIoKVxuICAkc2NvcGUucGFyYW1TZWxlY3RvckRlZmVycmVkID0gJHEuZGVmZXIoKVxuXG4gIHNldHRpbmdzUHJvbWlzZXMgPSBbXG4gICAgJHNjb3BlLm9yZ0RlZmVycmVkLnByb21pc2VcbiAgICAkc2NvcGUudGltZVJhbmdlRGVmZXJyZWQucHJvbWlzZVxuICAgICRzY29wZS53aWR0aERlZmVycmVkLnByb21pc2VcbiAgICAkc2NvcGUucGFyYW1TZWxlY3RvckRlZmVycmVkLnByb21pc2VcbiAgXVxuXG5cbiAgIyBXaWRnZXQgc3BlY2lmaWMgbWV0aG9kc1xuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHcuaW5pdENvbnRleHQgPSAtPlxuICAgICRzY29wZS5pc0RhdGFGb3VuZCA9IHcuY29udGVudD8gJiYgIV8uaXNFbXB0eSh3LmNvbnRlbnQuY3VzdG9tZXJzKVxuXG4gICAgaWYgJHNjb3BlLmlzRGF0YUZvdW5kXG4gICAgICAkc2NvcGUuY3VzdG9tZXJzT3B0aW9ucyA9IF8ubWFwKHcuY29udGVudC5jdXN0b21lcnMsIChlKSAtPlxuICAgICAgICB7XG4gICAgICAgICAgdmFsdWU6IGUudWlkLFxuICAgICAgICAgIGxhYmVsOiBlLm5hbWUsXG4gICAgICAgIH1cbiAgICAgIClcbiAgICAgICRzY29wZS5zZWxlY3RlZEN1c3RvbWVyID0ge1xuICAgICAgICB2YWx1ZTogJHNjb3BlLmdldEN1c3RvbWVyKCkudWlkLFxuICAgICAgICBsYWJlbDogJHNjb3BlLmdldEN1c3RvbWVyKCkubmFtZSxcbiAgICAgIH1cblxuICAkc2NvcGUuZ2V0Q3VzdG9tZXIgPSAtPlxuICAgIHJldHVybiBmYWxzZSB1bmxlc3MgJHNjb3BlLmlzRGF0YUZvdW5kXG5cbiAgICBpZiB3Lm1ldGFkYXRhICYmIHcubWV0YWRhdGEuY3VzdG9tZXJfdWlkXG4gICAgICBjdXN0b21lciA9IGFuZ3VsYXIuY29weShfLmZpbmQody5jb250ZW50LmN1c3RvbWVycywgKGUpIC0+XG4gICAgICAgIGUudWlkID09IHcubWV0YWRhdGEuY3VzdG9tZXJfdWlkXG4gICAgICApIHx8IHcuY29udGVudC5jdXN0b21lcnNbMF0pXG4gICAgZWxzZVxuICAgICAgY3VzdG9tZXIgPSBhbmd1bGFyLmNvcHkody5jb250ZW50LmN1c3RvbWVyc1swXSlcblxuICAgIHJldHVybiBjdXN0b21lclxuXG4gICRzY29wZS5mb3JtYXRBZGRyZXNzID0gKGFuQWRkcmVzcykgLT5cbiAgICByZXR1cm4gYW5BZGRyZXNzLnJlcGxhY2UoLywgL2csJyxcXG4nKSBpZiBhbmd1bGFyLmlzRGVmaW5lZChhbkFkZHJlc3MpXG5cbiAgJHNjb3BlLmdldEZyb21EYXRlID0gLT5cbiAgICByZXR1cm4gdy5jb250ZW50LmZyb20gaWYgJHNjb3BlLmlzRGF0YUZvdW5kXG5cbiAgJHNjb3BlLmdldFRvRGF0ZSA9IC0+XG4gICAgcmV0dXJuIHcuY29udGVudC50byBpZiAkc2NvcGUuaXNEYXRhRm91bmRcblxuXG4gICMgV2lkZ2V0IGlzIHJlYWR5OiBjYW4gdHJpZ2dlciB0aGUgXCJ3YWl0IGZvciBzZXR0aWducyB0byBiZSByZWFkeVwiXG4gICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgJHNjb3BlLndpZGdldERlZmVycmVkLnJlc29sdmUoc2V0dGluZ3NQcm9taXNlcylcbilcblxubW9kdWxlLmRpcmVjdGl2ZSgnd2lkZ2V0U2FsZXNDdXN0b21lckRldGFpbHMnLCAtPlxuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgY29udHJvbGxlcjogJ1dpZGdldFNhbGVzQ3VzdG9tZXJEZXRhaWxzQ3RybCdcbiAgfVxuKSJdfQ==

(function() {
  var module,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  module = angular.module('impac.components.widgets.sales-cycle', []);

  module.controller('WidgetSalesCycleCtrl', function($scope, $q, ChartFormatterSvc, $filter) {
    var settingsPromises, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    $scope.paramsPickerDeferred = $q.defer();
    $scope.timeRangeDeferred = $q.defer();
    $scope.chartDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise, $scope.paramsPickerDeferred.promise, $scope.timeRangeDeferred.promise, $scope.chartDeferred.promise];
    w.initContext = function() {
      if ($scope.isDataFound = angular.isDefined(w.content) && !_.isEmpty(w.content.status_average_durations)) {
        $scope.unit = (w.metadata.unit || w.content.unit || "days").toLowerCase();
        $scope.statusOptions = _.compact(_.map(w.metadata.status_selection, function(status) {
          if (angular.isDefined(w.content.status_average_durations[status])) {
            return {
              label: status,
              selected: true
            };
          }
        }));
        return angular.forEach(w.content.status_average_durations, function(value, status) {
          if (w.metadata.status_selection && !(indexOf.call(w.metadata.status_selection, status) >= 0)) {
            return $scope.statusOptions.push({
              label: status,
              selected: false
            });
          } else if (_.isEmpty(w.metadata.status_selection)) {
            return $scope.statusOptions.push({
              label: status,
              selected: true
            });
          }
        });
      }
    };
    w.processError = function(error) {
      if (error.code === 404) {
        return $scope.isDataFound = false;
      }
    };
    $scope.drawTrigger = $q.defer();
    w.format = function() {
      var chartData, pieData, pieOptions;
      if ($scope.isDataFound) {
        pieData = _.compact(_.map($scope.statusOptions, function(statusOption) {
          var value;
          value = w.content.status_average_durations[statusOption.label];
          if (statusOption.selected && angular.isDefined(value)) {
            return {
              label: ($filter('titleize')(statusOption.label)) + ": " + value + " " + $scope.unit,
              value: value
            };
          }
        }));
        pieOptions = {
          percentageInnerCutout: 50,
          tooltipFontSize: 12,
          currency: w.content.unit
        };
        chartData = ChartFormatterSvc.pieChart(pieData, pieOptions);
        return $scope.drawTrigger.notify(chartData);
      }
    };
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetSalesCycle', function() {
    return {
      restrict: 'A',
      controller: 'WidgetSalesCycleCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy9zYWxlcy1jeWNsZS9zYWxlcy1jeWNsZS5kaXJlY3RpdmUuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQSxNQUFBO0lBQUE7O0VBQUEsTUFBQSxHQUFTLE9BQU8sQ0FBQyxNQUFSLENBQWUsc0NBQWYsRUFBc0QsRUFBdEQ7O0VBRVQsTUFBTSxDQUFDLFVBQVAsQ0FBa0Isc0JBQWxCLEVBQTBDLFNBQUMsTUFBRCxFQUFTLEVBQVQsRUFBYSxpQkFBYixFQUFnQyxPQUFoQztBQUV4QyxRQUFBO0lBQUEsQ0FBQSxHQUFJLE1BQU0sQ0FBQztJQUlYLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFDckIsTUFBTSxDQUFDLG9CQUFQLEdBQThCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFDOUIsTUFBTSxDQUFDLGlCQUFQLEdBQTJCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFDM0IsTUFBTSxDQUFDLGFBQVAsR0FBdUIsRUFBRSxDQUFDLEtBQUgsQ0FBQTtJQUV2QixnQkFBQSxHQUFtQixDQUNqQixNQUFNLENBQUMsV0FBVyxDQUFDLE9BREYsRUFFakIsTUFBTSxDQUFDLG9CQUFvQixDQUFDLE9BRlgsRUFHakIsTUFBTSxDQUFDLGlCQUFpQixDQUFDLE9BSFIsRUFJakIsTUFBTSxDQUFDLGFBQWEsQ0FBQyxPQUpKO0lBVW5CLENBQUMsQ0FBQyxXQUFGLEdBQWdCLFNBQUE7TUFDZCxJQUFHLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLE9BQU8sQ0FBQyxTQUFSLENBQWtCLENBQUMsQ0FBQyxPQUFwQixDQUFBLElBQWdDLENBQUMsQ0FBQyxDQUFDLE9BQUYsQ0FBVSxDQUFDLENBQUMsT0FBTyxDQUFDLHdCQUFwQixDQUF6RDtRQUNFLE1BQU0sQ0FBQyxJQUFQLEdBQWMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQVgsSUFBbUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUE3QixJQUFxQyxNQUF0QyxDQUE2QyxDQUFDLFdBQTlDLENBQUE7UUFFZCxNQUFNLENBQUMsYUFBUCxHQUF1QixDQUFDLENBQUMsT0FBRixDQUFVLENBQUMsQ0FBQyxHQUFGLENBQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxnQkFBakIsRUFBbUMsU0FBQyxNQUFEO1VBQ2xFLElBQW1DLE9BQU8sQ0FBQyxTQUFSLENBQWtCLENBQUMsQ0FBQyxPQUFPLENBQUMsd0JBQXlCLENBQUEsTUFBQSxDQUFyRCxDQUFuQzttQkFBQTtjQUFDLEtBQUEsRUFBTyxNQUFSO2NBQWdCLFFBQUEsRUFBVSxJQUExQjtjQUFBOztRQURrRSxDQUFuQyxDQUFWO2VBR3ZCLE9BQU8sQ0FBQyxPQUFSLENBQWdCLENBQUMsQ0FBQyxPQUFPLENBQUMsd0JBQTFCLEVBQW9ELFNBQUMsS0FBRCxFQUFRLE1BQVI7VUFDbEQsSUFBRyxDQUFDLENBQUMsUUFBUSxDQUFDLGdCQUFYLElBQStCLENBQUMsQ0FBQyxhQUFVLENBQUMsQ0FBQyxRQUFRLENBQUMsZ0JBQXJCLEVBQUEsTUFBQSxNQUFELENBQW5DO21CQUNFLE1BQU0sQ0FBQyxhQUFhLENBQUMsSUFBckIsQ0FBMEI7Y0FBQyxLQUFBLEVBQU8sTUFBUjtjQUFnQixRQUFBLEVBQVUsS0FBMUI7YUFBMUIsRUFERjtXQUFBLE1BRUssSUFBRyxDQUFDLENBQUMsT0FBRixDQUFVLENBQUMsQ0FBQyxRQUFRLENBQUMsZ0JBQXJCLENBQUg7bUJBQ0gsTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFyQixDQUEwQjtjQUFDLEtBQUEsRUFBTyxNQUFSO2NBQWdCLFFBQUEsRUFBVSxJQUExQjthQUExQixFQURHOztRQUg2QyxDQUFwRCxFQU5GOztJQURjO0lBY2hCLENBQUMsQ0FBQyxZQUFGLEdBQWlCLFNBQUMsS0FBRDtNQUVmLElBQUcsS0FBSyxDQUFDLElBQU4sS0FBYyxHQUFqQjtlQUNFLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLE1BRHZCOztJQUZlO0lBUWpCLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFDckIsQ0FBQyxDQUFDLE1BQUYsR0FBVyxTQUFBO0FBQ1QsVUFBQTtNQUFBLElBQUcsTUFBTSxDQUFDLFdBQVY7UUFDRSxPQUFBLEdBQVUsQ0FBQyxDQUFDLE9BQUYsQ0FBVSxDQUFDLENBQUMsR0FBRixDQUFNLE1BQU0sQ0FBQyxhQUFiLEVBQTRCLFNBQUMsWUFBRDtBQUM5QyxjQUFBO1VBQUEsS0FBQSxHQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsd0JBQXlCLENBQUEsWUFBWSxDQUFDLEtBQWI7VUFFM0MsSUFHSyxZQUFZLENBQUMsUUFBYixJQUF5QixPQUFPLENBQUMsU0FBUixDQUFrQixLQUFsQixDQUg5QjttQkFBQTtjQUNFLEtBQUEsRUFBUyxDQUFDLE9BQUEsQ0FBUSxVQUFSLENBQUEsQ0FBb0IsWUFBWSxDQUFDLEtBQWpDLENBQUQsQ0FBQSxHQUF5QyxJQUF6QyxHQUE2QyxLQUE3QyxHQUFtRCxHQUFuRCxHQUFzRCxNQUFNLENBQUMsSUFEeEU7Y0FFRSxLQUFBLEVBQU8sS0FGVDtjQUFBOztRQUg4QyxDQUE1QixDQUFWO1FBUVYsVUFBQSxHQUFhO1VBQ1gscUJBQUEsRUFBdUIsRUFEWjtVQUVYLGVBQUEsRUFBaUIsRUFGTjtVQUdYLFFBQUEsRUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLElBSFQ7O1FBS2IsU0FBQSxHQUFZLGlCQUFpQixDQUFDLFFBQWxCLENBQTJCLE9BQTNCLEVBQW9DLFVBQXBDO2VBR1osTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFuQixDQUEwQixTQUExQixFQWpCRjs7SUFEUztXQXVCWCxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQXRCLENBQThCLGdCQUE5QjtFQW5Fd0MsQ0FBMUM7O0VBc0VBLE1BQU0sQ0FBQyxTQUFQLENBQWlCLGtCQUFqQixFQUFxQyxTQUFBO0FBQ25DLFdBQU87TUFDTCxRQUFBLEVBQVUsR0FETDtNQUVMLFVBQUEsRUFBWSxzQkFGUDs7RUFENEIsQ0FBckM7QUF4RUEiLCJmaWxlIjoiY29tcG9uZW50cy93aWRnZXRzL3NhbGVzLWN5Y2xlL3NhbGVzLWN5Y2xlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdpbXBhYy5jb21wb25lbnRzLndpZGdldHMuc2FsZXMtY3ljbGUnLFtdKVxuXG5tb2R1bGUuY29udHJvbGxlcignV2lkZ2V0U2FsZXNDeWNsZUN0cmwnLCAoJHNjb3BlLCAkcSwgQ2hhcnRGb3JtYXR0ZXJTdmMsICRmaWx0ZXIpIC0+XG5cbiAgdyA9ICRzY29wZS53aWRnZXRcblxuICAjIERlZmluZSBzZXR0aW5nc1xuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICRzY29wZS5vcmdEZWZlcnJlZCA9ICRxLmRlZmVyKClcbiAgJHNjb3BlLnBhcmFtc1BpY2tlckRlZmVycmVkID0gJHEuZGVmZXIoKVxuICAkc2NvcGUudGltZVJhbmdlRGVmZXJyZWQgPSAkcS5kZWZlcigpXG4gICRzY29wZS5jaGFydERlZmVycmVkID0gJHEuZGVmZXIoKVxuXG4gIHNldHRpbmdzUHJvbWlzZXMgPSBbXG4gICAgJHNjb3BlLm9yZ0RlZmVycmVkLnByb21pc2VcbiAgICAkc2NvcGUucGFyYW1zUGlja2VyRGVmZXJyZWQucHJvbWlzZVxuICAgICRzY29wZS50aW1lUmFuZ2VEZWZlcnJlZC5wcm9taXNlXG4gICAgJHNjb3BlLmNoYXJ0RGVmZXJyZWQucHJvbWlzZVxuICBdXG5cblxuICAjIFdpZGdldCBzcGVjaWZpYyBtZXRob2RzXG4gICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgdy5pbml0Q29udGV4dCA9IC0+XG4gICAgaWYgJHNjb3BlLmlzRGF0YUZvdW5kID0gYW5ndWxhci5pc0RlZmluZWQody5jb250ZW50KSAmJiAhXy5pc0VtcHR5KHcuY29udGVudC5zdGF0dXNfYXZlcmFnZV9kdXJhdGlvbnMpXG4gICAgICAkc2NvcGUudW5pdCA9ICh3Lm1ldGFkYXRhLnVuaXQgfHwgdy5jb250ZW50LnVuaXQgfHwgXCJkYXlzXCIpLnRvTG93ZXJDYXNlKClcblxuICAgICAgJHNjb3BlLnN0YXR1c09wdGlvbnMgPSBfLmNvbXBhY3QgXy5tYXAgdy5tZXRhZGF0YS5zdGF0dXNfc2VsZWN0aW9uLCAoc3RhdHVzKSAtPlxuICAgICAgICB7bGFiZWw6IHN0YXR1cywgc2VsZWN0ZWQ6IHRydWV9IGlmIGFuZ3VsYXIuaXNEZWZpbmVkKHcuY29udGVudC5zdGF0dXNfYXZlcmFnZV9kdXJhdGlvbnNbc3RhdHVzXSlcblxuICAgICAgYW5ndWxhci5mb3JFYWNoIHcuY29udGVudC5zdGF0dXNfYXZlcmFnZV9kdXJhdGlvbnMsICh2YWx1ZSwgc3RhdHVzKSAtPlxuICAgICAgICBpZiB3Lm1ldGFkYXRhLnN0YXR1c19zZWxlY3Rpb24gJiYgIShzdGF0dXMgaW4gdy5tZXRhZGF0YS5zdGF0dXNfc2VsZWN0aW9uKVxuICAgICAgICAgICRzY29wZS5zdGF0dXNPcHRpb25zLnB1c2goe2xhYmVsOiBzdGF0dXMsIHNlbGVjdGVkOiBmYWxzZX0pXG4gICAgICAgIGVsc2UgaWYgXy5pc0VtcHR5KHcubWV0YWRhdGEuc3RhdHVzX3NlbGVjdGlvbilcbiAgICAgICAgICAkc2NvcGUuc3RhdHVzT3B0aW9ucy5wdXNoKHtsYWJlbDogc3RhdHVzLCBzZWxlY3RlZDogdHJ1ZX0pXG5cbiAgIyBUT0RPOiBzaG91bGQgaXQgYmUgbWFuYWdlZCBpbiBhIHNlcnZpY2U/IGluIHRoZSB3aWRnZXQgZGlyZWN0aXZlPyBNdXN0IGlzTG9hZGluZyBhbmQgaXNEYXRhRm91bmQgYmUgYm91bmQgdG8gdGhlIHdpZGdldCBvYmplY3Qgb3IgdG8gdGhlIHNjb3BlP1xuICB3LnByb2Nlc3NFcnJvciA9IChlcnJvcikgLT5cbiAgICAjIFRPRE86IGJldHRlciBlcnJvciBtYW5hZ2VtZW50XG4gICAgaWYgZXJyb3IuY29kZSA9PSA0MDRcbiAgICAgICRzY29wZS5pc0RhdGFGb3VuZCA9IGZhbHNlXG5cblxuICAjIENoYXJ0IGZvcm1hdGluZyBmdW5jdGlvblxuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICRzY29wZS5kcmF3VHJpZ2dlciA9ICRxLmRlZmVyKClcbiAgdy5mb3JtYXQgPSAtPlxuICAgIGlmICRzY29wZS5pc0RhdGFGb3VuZFxuICAgICAgcGllRGF0YSA9IF8uY29tcGFjdCBfLm1hcCAkc2NvcGUuc3RhdHVzT3B0aW9ucywgKHN0YXR1c09wdGlvbikgLT5cbiAgICAgICAgdmFsdWUgPSB3LmNvbnRlbnQuc3RhdHVzX2F2ZXJhZ2VfZHVyYXRpb25zW3N0YXR1c09wdGlvbi5sYWJlbF1cblxuICAgICAgICB7XG4gICAgICAgICAgbGFiZWw6IFwiI3skZmlsdGVyKCd0aXRsZWl6ZScpKHN0YXR1c09wdGlvbi5sYWJlbCl9OiAje3ZhbHVlfSAjeyRzY29wZS51bml0fVwiLFxuICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICB9IGlmIHN0YXR1c09wdGlvbi5zZWxlY3RlZCAmJiBhbmd1bGFyLmlzRGVmaW5lZCh2YWx1ZSlcblxuICAgICAgcGllT3B0aW9ucyA9IHtcbiAgICAgICAgcGVyY2VudGFnZUlubmVyQ3V0b3V0OiA1MCxcbiAgICAgICAgdG9vbHRpcEZvbnRTaXplOiAxMixcbiAgICAgICAgY3VycmVuY3k6IHcuY29udGVudC51bml0XG4gICAgICB9XG4gICAgICBjaGFydERhdGEgPSBDaGFydEZvcm1hdHRlclN2Yy5waWVDaGFydChwaWVEYXRhLCBwaWVPcHRpb25zKVxuICAgICAgXG4gICAgICAjIGNhbGxzIGNoYXJ0LmRyYXcoKVxuICAgICAgJHNjb3BlLmRyYXdUcmlnZ2VyLm5vdGlmeShjaGFydERhdGEpXG5cblxuICAjIFdpZGdldCBpcyByZWFkeTogY2FuIHRyaWdnZXIgdGhlIFwid2FpdCBmb3Igc2V0dGlnbnMgdG8gYmUgcmVhZHlcIlxuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICRzY29wZS53aWRnZXREZWZlcnJlZC5yZXNvbHZlKHNldHRpbmdzUHJvbWlzZXMpXG4pXG5cbm1vZHVsZS5kaXJlY3RpdmUoJ3dpZGdldFNhbGVzQ3ljbGUnLCAtPlxuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgY29udHJvbGxlcjogJ1dpZGdldFNhbGVzQ3ljbGVDdHJsJ1xuICB9XG4pXG4iXX0=

(function() {
  var module;

  module = angular.module('impac.components.widgets.sales-forecast', []);

  module.controller('WidgetSalesForecastCtrl', function($scope, $q, ChartFormatterSvc, $filter) {
    var settingsPromises, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    $scope.chartDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise, $scope.chartDeferred.promise];
    w.initContext = function() {
      return $scope.isDataFound = angular.isDefined(w.content) && !_.isEmpty(w.content.dates) && !_.isEmpty(w.content.totals);
    };
    w.processError = function(error) {
      if (error.code === 404) {
        return $scope.isDataFound = false;
      }
    };
    $scope.getOpportunityAmount = function(anOpp) {
      if ($scope.isDataFound && !_.isEmpty(anOpp)) {
        if (anOpp.amount && anOpp.amount.amount) {
          return anOpp.amount.amount;
        } else {
          return '-';
        }
      }
    };
    $scope.getOpportunityCurrency = function(anOpp) {
      if ($scope.isDataFound && !_.isEmpty(anOpp)) {
        if (anOpp.amount && anOpp.amount.currency) {
          return anOpp.amount.currency;
        } else if (w.content.currency) {
          return w.content.currency;
        } else {
          return 'AUD';
        }
      }
    };
    $scope.drawTrigger = $q.defer();
    w.format = function() {
      var all_values_are_positive, chartData, formattedDates, inputData, options, period;
      if ($scope.isDataFound) {
        all_values_are_positive = true;
        period = null;
        if ((w.metadata != null) && (w.metadata.hist_parameters != null)) {
          period = w.metadata.hist_parameters.period;
        }
        formattedDates = _.map(w.content.dates, function(aDate) {
          return $filter('mnoDate')(aDate, period);
        });
        inputData = [
          {
            title: 'Sales Performance',
            labels: formattedDates,
            values: w.content.totals
          }
        ];
        angular.forEach(w.content.totals, function(value) {
          return all_values_are_positive && (all_values_are_positive = value >= 0);
        });
        options = {
          scaleBeginAtZero: all_values_are_positive,
          showXLabels: true,
          datasetFill: true,
          pointDot: false
        };
        chartData = ChartFormatterSvc.lineChart(inputData, options);
        return $scope.drawTrigger.notify(chartData);
      }
    };
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetSalesForecast', function() {
    return {
      restrict: 'A',
      controller: 'WidgetSalesForecastCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy9zYWxlcy1mb3JlY2FzdC9zYWxlcy1mb3JlY2FzdC5kaXJlY3RpdmUuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQTs7RUFBQSxNQUFBLEdBQVMsT0FBTyxDQUFDLE1BQVIsQ0FBZSx5Q0FBZixFQUF5RCxFQUF6RDs7RUFFVCxNQUFNLENBQUMsVUFBUCxDQUFrQix5QkFBbEIsRUFBNkMsU0FBQyxNQUFELEVBQVMsRUFBVCxFQUFhLGlCQUFiLEVBQWdDLE9BQWhDO0FBRTNDLFFBQUE7SUFBQSxDQUFBLEdBQUksTUFBTSxDQUFDO0lBSVgsTUFBTSxDQUFDLFdBQVAsR0FBcUIsRUFBRSxDQUFDLEtBQUgsQ0FBQTtJQUNyQixNQUFNLENBQUMsYUFBUCxHQUF1QixFQUFFLENBQUMsS0FBSCxDQUFBO0lBRXZCLGdCQUFBLEdBQW1CLENBQ2pCLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FERixFQUVqQixNQUFNLENBQUMsYUFBYSxDQUFDLE9BRko7SUFRbkIsQ0FBQyxDQUFDLFdBQUYsR0FBZ0IsU0FBQTthQUNkLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLE9BQU8sQ0FBQyxTQUFSLENBQWtCLENBQUMsQ0FBQyxPQUFwQixDQUFBLElBQWdDLENBQUMsQ0FBQyxDQUFDLE9BQUYsQ0FBVSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQXBCLENBQWpDLElBQStELENBQUMsQ0FBQyxDQUFDLE9BQUYsQ0FBVSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQXBCO0lBRHZFO0lBSWhCLENBQUMsQ0FBQyxZQUFGLEdBQWlCLFNBQUMsS0FBRDtNQUVmLElBQUcsS0FBSyxDQUFDLElBQU4sS0FBYyxHQUFqQjtlQUNFLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLE1BRHZCOztJQUZlO0lBS2pCLE1BQU0sQ0FBQyxvQkFBUCxHQUE4QixTQUFDLEtBQUQ7TUFDNUIsSUFBRyxNQUFNLENBQUMsV0FBUCxJQUFzQixDQUFDLENBQUMsQ0FBQyxPQUFGLENBQVUsS0FBVixDQUExQjtRQUNFLElBQUcsS0FBSyxDQUFDLE1BQU4sSUFBZ0IsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFoQztBQUNFLGlCQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FEdEI7U0FBQSxNQUFBO0FBR0UsaUJBQU8sSUFIVDtTQURGOztJQUQ0QjtJQU85QixNQUFNLENBQUMsc0JBQVAsR0FBZ0MsU0FBQyxLQUFEO01BQzlCLElBQUcsTUFBTSxDQUFDLFdBQVAsSUFBc0IsQ0FBQyxDQUFDLENBQUMsT0FBRixDQUFVLEtBQVYsQ0FBMUI7UUFDRSxJQUFHLEtBQUssQ0FBQyxNQUFOLElBQWdCLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBaEM7QUFDRSxpQkFBTyxLQUFLLENBQUMsTUFBTSxDQUFDLFNBRHRCO1NBQUEsTUFFSyxJQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBYjtBQUNILGlCQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FEZDtTQUFBLE1BQUE7QUFHSCxpQkFBTyxNQUhKO1NBSFA7O0lBRDhCO0lBWWhDLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFDckIsQ0FBQyxDQUFDLE1BQUYsR0FBVyxTQUFBO0FBQ1QsVUFBQTtNQUFBLElBQUcsTUFBTSxDQUFDLFdBQVY7UUFDRSx1QkFBQSxHQUEwQjtRQUUxQixNQUFBLEdBQVM7UUFDVCxJQUE4QyxvQkFBQSxJQUFlLG9DQUE3RDtVQUFBLE1BQUEsR0FBUyxDQUFDLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxPQUFwQzs7UUFDQSxjQUFBLEdBQWlCLENBQUMsQ0FBQyxHQUFGLENBQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFoQixFQUF1QixTQUFDLEtBQUQ7aUJBQ3RDLE9BQUEsQ0FBUSxTQUFSLENBQUEsQ0FBbUIsS0FBbkIsRUFBMEIsTUFBMUI7UUFEc0MsQ0FBdkI7UUFHakIsU0FBQSxHQUFZO1VBQUM7WUFDWCxLQUFBLEVBQU8sbUJBREk7WUFFWCxNQUFBLEVBQVEsY0FGRztZQUdYLE1BQUEsRUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BSFA7V0FBRDs7UUFNWixPQUFPLENBQUMsT0FBUixDQUFnQixDQUFDLENBQUMsT0FBTyxDQUFDLE1BQTFCLEVBQWtDLFNBQUMsS0FBRDtpQkFDaEMsNEJBQUEsMEJBQTRCLEtBQUEsSUFBUztRQURMLENBQWxDO1FBSUEsT0FBQSxHQUFVO1VBQ1IsZ0JBQUEsRUFBa0IsdUJBRFY7VUFFUixXQUFBLEVBQWEsSUFGTDtVQUdSLFdBQUEsRUFBYSxJQUhMO1VBSVIsUUFBQSxFQUFVLEtBSkY7O1FBT1YsU0FBQSxHQUFZLGlCQUFpQixDQUFDLFNBQWxCLENBQTRCLFNBQTVCLEVBQXNDLE9BQXRDO2VBR1osTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFuQixDQUEwQixTQUExQixFQTVCRjs7SUFEUztXQWtDWCxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQXRCLENBQThCLGdCQUE5QjtFQWhGMkMsQ0FBN0M7O0VBbUZBLE1BQU0sQ0FBQyxTQUFQLENBQWlCLHFCQUFqQixFQUF3QyxTQUFBO0FBQ3RDLFdBQU87TUFDTCxRQUFBLEVBQVUsR0FETDtNQUVMLFVBQUEsRUFBWSx5QkFGUDs7RUFEK0IsQ0FBeEM7QUFyRkEiLCJmaWxlIjoiY29tcG9uZW50cy93aWRnZXRzL3NhbGVzLWZvcmVjYXN0L3NhbGVzLWZvcmVjYXN0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdpbXBhYy5jb21wb25lbnRzLndpZGdldHMuc2FsZXMtZm9yZWNhc3QnLFtdKVxuXG5tb2R1bGUuY29udHJvbGxlcignV2lkZ2V0U2FsZXNGb3JlY2FzdEN0cmwnLCAoJHNjb3BlLCAkcSwgQ2hhcnRGb3JtYXR0ZXJTdmMsICRmaWx0ZXIpIC0+XG5cbiAgdyA9ICRzY29wZS53aWRnZXRcblxuICAjIERlZmluZSBzZXR0aW5nc1xuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICRzY29wZS5vcmdEZWZlcnJlZCA9ICRxLmRlZmVyKClcbiAgJHNjb3BlLmNoYXJ0RGVmZXJyZWQgPSAkcS5kZWZlcigpXG5cbiAgc2V0dGluZ3NQcm9taXNlcyA9IFtcbiAgICAkc2NvcGUub3JnRGVmZXJyZWQucHJvbWlzZVxuICAgICRzY29wZS5jaGFydERlZmVycmVkLnByb21pc2VcbiAgXVxuXG5cbiAgIyBXaWRnZXQgc3BlY2lmaWMgbWV0aG9kc1xuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHcuaW5pdENvbnRleHQgPSAtPlxuICAgICRzY29wZS5pc0RhdGFGb3VuZCA9IGFuZ3VsYXIuaXNEZWZpbmVkKHcuY29udGVudCkgJiYgIV8uaXNFbXB0eSh3LmNvbnRlbnQuZGF0ZXMpICYmICFfLmlzRW1wdHkody5jb250ZW50LnRvdGFscylcblxuICAjIFRPRE86IHNob3VsZCBpdCBiZSBtYW5hZ2VkIGluIGEgc2VydmljZT8gaW4gdGhlIHdpZGdldCBkaXJlY3RpdmU/IE11c3QgaXNMb2FkaW5nIGFuZCBpc0RhdGFGb3VuZCBiZSBib3VuZCB0byB0aGUgd2lkZ2V0IG9iamVjdCBvciB0byB0aGUgc2NvcGU/XG4gIHcucHJvY2Vzc0Vycm9yID0gKGVycm9yKSAtPlxuICAgICMgVE9ETzogYmV0dGVyIGVycm9yIG1hbmFnZW1lbnRcbiAgICBpZiBlcnJvci5jb2RlID09IDQwNFxuICAgICAgJHNjb3BlLmlzRGF0YUZvdW5kID0gZmFsc2VcblxuICAkc2NvcGUuZ2V0T3Bwb3J0dW5pdHlBbW91bnQgPSAoYW5PcHApIC0+XG4gICAgaWYgJHNjb3BlLmlzRGF0YUZvdW5kICYmICFfLmlzRW1wdHkoYW5PcHApXG4gICAgICBpZiBhbk9wcC5hbW91bnQgJiYgYW5PcHAuYW1vdW50LmFtb3VudFxuICAgICAgICByZXR1cm4gYW5PcHAuYW1vdW50LmFtb3VudFxuICAgICAgZWxzZVxuICAgICAgICByZXR1cm4gJy0nXG5cbiAgJHNjb3BlLmdldE9wcG9ydHVuaXR5Q3VycmVuY3kgPSAoYW5PcHApIC0+XG4gICAgaWYgJHNjb3BlLmlzRGF0YUZvdW5kICYmICFfLmlzRW1wdHkoYW5PcHApXG4gICAgICBpZiBhbk9wcC5hbW91bnQgJiYgYW5PcHAuYW1vdW50LmN1cnJlbmN5XG4gICAgICAgIHJldHVybiBhbk9wcC5hbW91bnQuY3VycmVuY3lcbiAgICAgIGVsc2UgaWYgdy5jb250ZW50LmN1cnJlbmN5XG4gICAgICAgIHJldHVybiB3LmNvbnRlbnQuY3VycmVuY3lcbiAgICAgIGVsc2VcbiAgICAgICAgcmV0dXJuICdBVUQnXG5cblxuICAjIENoYXJ0IGZvcm1hdGluZyBmdW5jdGlvblxuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICRzY29wZS5kcmF3VHJpZ2dlciA9ICRxLmRlZmVyKClcbiAgdy5mb3JtYXQgPSAtPlxuICAgIGlmICRzY29wZS5pc0RhdGFGb3VuZFxuICAgICAgYWxsX3ZhbHVlc19hcmVfcG9zaXRpdmUgPSB0cnVlXG5cbiAgICAgIHBlcmlvZCA9IG51bGxcbiAgICAgIHBlcmlvZCA9IHcubWV0YWRhdGEuaGlzdF9wYXJhbWV0ZXJzLnBlcmlvZCBpZiB3Lm1ldGFkYXRhPyAmJiB3Lm1ldGFkYXRhLmhpc3RfcGFyYW1ldGVycz9cbiAgICAgIGZvcm1hdHRlZERhdGVzID0gXy5tYXAgdy5jb250ZW50LmRhdGVzLCAoYURhdGUpIC0+XG4gICAgICAgICRmaWx0ZXIoJ21ub0RhdGUnKShhRGF0ZSwgcGVyaW9kKVxuXG4gICAgICBpbnB1dERhdGEgPSBbe1xuICAgICAgICB0aXRsZTogJ1NhbGVzIFBlcmZvcm1hbmNlJyxcbiAgICAgICAgbGFiZWxzOiBmb3JtYXR0ZWREYXRlcyxcbiAgICAgICAgdmFsdWVzOiB3LmNvbnRlbnQudG90YWxzXG4gICAgICB9XVxuXG4gICAgICBhbmd1bGFyLmZvckVhY2gody5jb250ZW50LnRvdGFscywgKHZhbHVlKSAtPlxuICAgICAgICBhbGxfdmFsdWVzX2FyZV9wb3NpdGl2ZSAmJj0gdmFsdWUgPj0gMFxuICAgICAgKVxuXG4gICAgICBvcHRpb25zID0ge1xuICAgICAgICBzY2FsZUJlZ2luQXRaZXJvOiBhbGxfdmFsdWVzX2FyZV9wb3NpdGl2ZSxcbiAgICAgICAgc2hvd1hMYWJlbHM6IHRydWUsXG4gICAgICAgIGRhdGFzZXRGaWxsOiB0cnVlLFxuICAgICAgICBwb2ludERvdDogZmFsc2UsXG4gICAgICB9XG5cbiAgICAgIGNoYXJ0RGF0YSA9IENoYXJ0Rm9ybWF0dGVyU3ZjLmxpbmVDaGFydChpbnB1dERhdGEsb3B0aW9ucylcbiAgICAgIFxuICAgICAgIyBjYWxscyBjaGFydC5kcmF3KClcbiAgICAgICRzY29wZS5kcmF3VHJpZ2dlci5ub3RpZnkoY2hhcnREYXRhKVxuXG5cbiAgIyBXaWRnZXQgaXMgcmVhZHk6IGNhbiB0cmlnZ2VyIHRoZSBcIndhaXQgZm9yIHNldHRpZ25zIHRvIGJlIHJlYWR5XCJcbiAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAkc2NvcGUud2lkZ2V0RGVmZXJyZWQucmVzb2x2ZShzZXR0aW5nc1Byb21pc2VzKVxuKVxuXG5tb2R1bGUuZGlyZWN0aXZlKCd3aWRnZXRTYWxlc0ZvcmVjYXN0JywgLT5cbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIGNvbnRyb2xsZXI6ICdXaWRnZXRTYWxlc0ZvcmVjYXN0Q3RybCdcbiAgfVxuKVxuIl19

(function() {
  var module;

  module = angular.module('impac.components.widgets.sales-growth', []);

  module.controller('WidgetSalesGrowthCtrl', function($scope, $q, ChartFormatterSvc, $filter) {
    var settingsPromises, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    $scope.timeRangeDeferred = $q.defer();
    $scope.paramSelectorDeferred1 = $q.defer();
    $scope.paramSelectorDeferred2 = $q.defer();
    $scope.chartDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise, $scope.timeRangeDeferred.promise, $scope.paramSelectorDeferred1.promise, $scope.paramSelectorDeferred2.promise, $scope.chartDeferred.promise];
    $scope.isDataQuantity = true;
    w.initContext = function() {
      if ($scope.isDataFound = angular.isDefined(w.content) && !_.isEmpty(w.content.summary) && !_.isEmpty(w.content.dates)) {
        $scope.productOptions = _.flatten(_.map(w.content.summary, function(product) {
          return {
            label: product.code,
            value: product.id
          };
        }));
        $scope.product = angular.copy(_.find($scope.productOptions, function(o) {
          return o.value === w.content.product;
        }) || {
          label: "SELECT PRODUCT",
          value: -1
        });
        $scope.filterOptions = [
          {
            label: 'value sold (incl. taxes)',
            value: 'gross_value_sold'
          }, {
            label: 'value sold (excl. taxes)',
            value: 'net_value_sold'
          }, {
            label: 'quantity sold',
            value: 'quantity_sold'
          }, {
            label: 'value purchased (incl. taxes)',
            value: 'gross_value_purchased'
          }, {
            label: 'value purchased (excl. taxes)',
            value: 'net_value_purchased'
          }, {
            label: 'quantity purchased',
            value: 'quantity_purchased'
          }
        ];
        $scope.filter = angular.copy(_.find($scope.filterOptions, function(o) {
          return o.value === w.content.filter;
        }) || $scope.filterOptions[0]);
        return $scope.isDataQuantity = $scope.filter.value.match('quantity');
      }
    };
    $scope.getSelectedProduct = function() {
      if ($scope.isDataFound) {
        return _.find(w.content.summary, function(product) {
          return product.id === $scope.product.value;
        });
      }
    };
    $scope.getCurrentValue = function() {
      if ($scope.getSelectedProduct() != null) {
        return _.last($scope.getSelectedProduct().totals);
      }
    };
    $scope.getCurrentDate = function() {
      if ($scope.isDataFound) {
        return _.last(w.content.dates);
      }
    };
    $scope.drawTrigger = $q.defer();
    w.format = function() {
      var all_values_are_positive, chartData, data, dates, inputData, options, period;
      if ($scope.isDataFound && $scope.product && (data = $scope.getSelectedProduct())) {
        period = null;
        if ((w.metadata != null) && (w.metadata.hist_parameters != null)) {
          period = w.metadata.hist_parameters.period;
        }
        dates = _.map(w.content.dates, function(date) {
          return $filter('mnoDate')(date, period);
        });
        inputData = {
          title: data.name,
          labels: dates,
          values: data.totals
        };
        all_values_are_positive = true;
        angular.forEach(data.totals, function(value) {
          return all_values_are_positive && (all_values_are_positive = value >= 0);
        });
        options = {
          scaleBeginAtZero: all_values_are_positive,
          showXLabels: false
        };
        if ($scope.filter.value.indexOf('quantity') > -1) {
          angular.merge(options, {
            currency: 'hide'
          });
        }
        chartData = ChartFormatterSvc.lineChart([inputData], options);
        return $scope.drawTrigger.notify(chartData);
      }
    };
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetSalesGrowth', function() {
    return {
      restrict: 'A',
      controller: 'WidgetSalesGrowthCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

(function() {
  var module,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  module = angular.module('impac.components.widgets.sales-leads-funnel', []);

  module.controller('WidgetSalesLeadsFunnelCtrl', function($scope, $q, ChartFormatterSvc, $filter, ImpacWidgetsSvc) {
    var hasOneLead, selectedStatusSetting, settingsPromises, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    $scope.timeRangeDeferred = $q.defer();
    $scope.paramsPickerDeferred = $q.defer();
    $scope.widthDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise, $scope.timeRangeDeferred.promise, $scope.paramsPickerDeferred.promise, $scope.widthDeferred.promise];
    hasOneLead = function(leadsPerStatus) {
      var reducedHash, total, totalsArray;
      reducedHash = _.mapValues(leadsPerStatus, function(statusHash) {
        return statusHash.total;
      });
      totalsArray = _.compact(_.values(reducedHash));
      total = _.reduce(totalsArray, function(total, n) {
        if (total == null) {
          total = 0;
        }
        return total + n;
      });
      return (total != null) && total > 0;
    };
    w.initContext = function() {
      if ($scope.isDataFound = angular.isDefined(w.content) && !_.isEmpty(w.content.leads_per_status) && hasOneLead(w.content.leads_per_status)) {
        $scope.statusOptions = _.compact(_.map(w.metadata.status_selection, function(status) {
          if (angular.isDefined(w.content.leads_per_status[status])) {
            return {
              label: status,
              selected: true
            };
          }
        }));
        return angular.forEach(w.content.leads_per_status, function(value, status) {
          if (w.metadata.status_selection && !(indexOf.call(w.metadata.status_selection, status) >= 0)) {
            return $scope.statusOptions.push({
              label: status,
              selected: false
            });
          } else if (_.isEmpty(w.metadata.status_selection)) {
            return $scope.statusOptions.push({
              label: status,
              selected: true
            });
          }
        });
      }
    };
    w.processError = function(error) {
      if (error.code === 404) {
        return $scope.isDataFound = false;
      }
    };
    $scope.getImpacColor = function(index) {
      return ChartFormatterSvc.getColor(index);
    };
    $scope.toggleSelectStatus = function(aStatus) {
      if ($scope.selectedStatus && $scope.selectedStatus === aStatus) {
        $scope.selectedStatus = null;
      } else {
        $scope.selectedStatus = aStatus;
      }
      if (!w.isExpanded() && $scope.selectedStatus) {
        return w.toggleExpanded();
      } else {
        return ImpacWidgetsSvc.updateWidgetSettings(w, false);
      }
    };
    $scope.isSelected = function(aStatus) {
      return $scope.selectedStatus && aStatus === $scope.selectedStatus;
    };
    $scope.getSelectedLeads = function() {
      if ($scope.isDataFound && $scope.selectedStatus) {
        return w.content.leads_per_status[$scope.selectedStatus].leads;
      }
    };
    $scope.getLeadDescription = function(aLead) {
      var nameLineArray, tooltip;
      tooltip = [];
      nameLineArray = ["<strong>"];
      if (aLead.first_name) {
        nameLineArray.push($filter('titleize')(aLead.first_name));
      }
      if (aLead.last_name) {
        nameLineArray.push($filter('titleize')(aLead.last_name));
      }
      nameLineArray.push("</strong>");
      tooltip.push(nameLineArray.join(' '));
      tooltip.push("Status: " + ($filter('titleize')(aLead.lead_status)));
      if (aLead.organization) {
        tooltip.push("Organization: " + ($filter('titleize')(aLead.organization)));
      }
      if (aLead.opportunities) {
        tooltip.push("<strong>Opportunities:</strong>");
        angular.forEach(aLead.opportunities, function(opp) {
          var oppLineArray;
          oppLineArray = [];
          if (opp.code) {
            oppLineArray.push("#" + opp.code);
          }
          if (opp.name) {
            oppLineArray.push("" + opp.name);
          }
          if (opp.amount) {
            oppLineArray.push($filter('mnoCurrency')(opp.amount.total_amount, "USD", false));
          }
          if (opp.probability) {
            oppLineArray.push(opp.probability + "%");
          }
          if (opp.sales_stage) {
            oppLineArray.push("" + opp.sales_stage);
          }
          return tooltip.push(oppLineArray.join(' - '));
        });
      }
      return tooltip.join("<br />");
    };
    selectedStatusSetting = {};
    selectedStatusSetting.initialized = false;
    selectedStatusSetting.initialize = function() {
      if (!_.isEmpty(w.content) && angular.isDefined(w.content.leads_per_status[w.metadata.selected_status])) {
        $scope.selectedStatus = w.metadata.selected_status;
      }
      return selectedStatusSetting.initialized = true;
    };
    selectedStatusSetting.toMetadata = function() {
      return {
        selected_status: $scope.selectedStatus
      };
    };
    w.settings.push(selectedStatusSetting);
    w.format = function() {
      var max;
      if ($scope.isDataFound) {
        max = 0;
        angular.forEach($scope.statusOptions, function(statusOption) {
          var value;
          value = w.content.leads_per_status[statusOption.label].total;
          if (statusOption.selected && angular.isDefined(value) && value > max) {
            return max = value;
          }
        });
        if (max > 0) {
          return $scope.funnel = _.compact(_.map($scope.statusOptions, function(statusOption, index) {
            var coloredWidth, statusWidth, value;
            value = w.content.leads_per_status[statusOption.label].total;
            coloredWidth = (100 * (value / max) - 10).toFixed();
            if (coloredWidth < 8) {
              statusWidth = 92;
            } else {
              statusWidth = 100 - coloredWidth;
            }
            if (statusOption.selected && angular.isDefined(value)) {
              return {
                status: statusOption.label,
                number: value,
                coloredWidth: {
                  width: coloredWidth + "%"
                },
                statusWidth: {
                  width: statusWidth + "%"
                }
              };
            }
          }));
        }
      }
    };
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetSalesLeadsFunnel', function() {
    return {
      restrict: 'A',
      controller: 'WidgetSalesLeadsFunnelCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

(function() {
  var module;

  module = angular.module('impac.components.widgets.sales-leads-list', []);

  module.controller('WidgetSalesLeadsListCtrl', function($scope, $q, ChartFormatterSvc, $filter) {
    var settingsPromises, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise];
    w.initContext = function() {
      return $scope.isDataFound = angular.isDefined(w.content) && !_.isEmpty(w.content.leads);
    };
    w.processError = function(error) {
      if (error.code === 404) {
        return $scope.isDataFound = false;
      }
    };
    $scope.getLeadDescription = function(aLead) {
      var nameLineArray, tooltip;
      tooltip = [];
      nameLineArray = ["<strong>"];
      if (aLead.first_name) {
        nameLineArray.push($filter('titleize')(aLead.first_name));
      }
      if (aLead.last_name) {
        nameLineArray.push($filter('titleize')(aLead.last_name));
      }
      nameLineArray.push("</strong>");
      tooltip.push(nameLineArray.join(' '));
      tooltip.push("Status: " + ($filter('titleize')(aLead.lead_status)));
      if (aLead.organization) {
        tooltip.push("Organization: " + ($filter('titleize')(aLead.organization)));
      }
      if (aLead.opportunities) {
        tooltip.push("<strong>Opportunities:</strong>");
        angular.forEach(aLead.opportunities, function(opp) {
          var oppLineArray;
          oppLineArray = [];
          if (opp.code) {
            oppLineArray.push("#" + opp.code);
          }
          if (opp.name) {
            oppLineArray.push("" + opp.name);
          }
          if (opp.amount) {
            oppLineArray.push($filter('mnoCurrency')(opp.amount.total_amount, "USD", false));
          }
          if (opp.probability) {
            oppLineArray.push(opp.probability + "%");
          }
          if (opp.sales_stage) {
            oppLineArray.push("" + opp.sales_stage);
          }
          return tooltip.push(oppLineArray.join(' - '));
        });
      }
      return tooltip.join("<br />");
    };
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetSalesLeadsList', function() {
    return {
      restrict: 'A',
      controller: 'WidgetSalesLeadsListCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy9zYWxlcy1sZWFkcy1saXN0L3NhbGVzLWxlYWRzLWxpc3QuZGlyZWN0aXZlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUE7O0VBQUEsTUFBQSxHQUFTLE9BQU8sQ0FBQyxNQUFSLENBQWUsMkNBQWYsRUFBMkQsRUFBM0Q7O0VBRVQsTUFBTSxDQUFDLFVBQVAsQ0FBa0IsMEJBQWxCLEVBQThDLFNBQUMsTUFBRCxFQUFTLEVBQVQsRUFBYSxpQkFBYixFQUFnQyxPQUFoQztBQUU1QyxRQUFBO0lBQUEsQ0FBQSxHQUFJLE1BQU0sQ0FBQztJQUlYLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFFckIsZ0JBQUEsR0FBbUIsQ0FDakIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQURGO0lBT25CLENBQUMsQ0FBQyxXQUFGLEdBQWdCLFNBQUE7YUFDZCxNQUFNLENBQUMsV0FBUCxHQUFxQixPQUFPLENBQUMsU0FBUixDQUFrQixDQUFDLENBQUMsT0FBcEIsQ0FBQSxJQUFnQyxDQUFDLENBQUMsQ0FBQyxPQUFGLENBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFwQjtJQUR4QztJQUloQixDQUFDLENBQUMsWUFBRixHQUFpQixTQUFDLEtBQUQ7TUFFZixJQUFHLEtBQUssQ0FBQyxJQUFOLEtBQWMsR0FBakI7ZUFDRSxNQUFNLENBQUMsV0FBUCxHQUFxQixNQUR2Qjs7SUFGZTtJQUtqQixNQUFNLENBQUMsa0JBQVAsR0FBNEIsU0FBQyxLQUFEO0FBQzFCLFVBQUE7TUFBQSxPQUFBLEdBQVU7TUFFVixhQUFBLEdBQWdCLENBQUMsVUFBRDtNQUNoQixJQUE2RCxLQUFLLENBQUMsVUFBbkU7UUFBQSxhQUFhLENBQUMsSUFBZCxDQUFtQixPQUFBLENBQVEsVUFBUixDQUFBLENBQW9CLEtBQUssQ0FBQyxVQUExQixDQUFuQixFQUFBOztNQUNBLElBQTRELEtBQUssQ0FBQyxTQUFsRTtRQUFBLGFBQWEsQ0FBQyxJQUFkLENBQW1CLE9BQUEsQ0FBUSxVQUFSLENBQUEsQ0FBb0IsS0FBSyxDQUFDLFNBQTFCLENBQW5CLEVBQUE7O01BQ0EsYUFBYSxDQUFDLElBQWQsQ0FBbUIsV0FBbkI7TUFFQSxPQUFPLENBQUMsSUFBUixDQUFhLGFBQWEsQ0FBQyxJQUFkLENBQW1CLEdBQW5CLENBQWI7TUFDQSxPQUFPLENBQUMsSUFBUixDQUFhLFVBQUEsR0FBVSxDQUFDLE9BQUEsQ0FBUSxVQUFSLENBQUEsQ0FBb0IsS0FBSyxDQUFDLFdBQTFCLENBQUQsQ0FBdkI7TUFDQSxJQUE0RSxLQUFLLENBQUMsWUFBbEY7UUFBQSxPQUFPLENBQUMsSUFBUixDQUFhLGdCQUFBLEdBQWdCLENBQUMsT0FBQSxDQUFRLFVBQVIsQ0FBQSxDQUFvQixLQUFLLENBQUMsWUFBMUIsQ0FBRCxDQUE3QixFQUFBOztNQUVBLElBQUcsS0FBSyxDQUFDLGFBQVQ7UUFDRSxPQUFPLENBQUMsSUFBUixDQUFhLGlDQUFiO1FBQ0EsT0FBTyxDQUFDLE9BQVIsQ0FBZ0IsS0FBSyxDQUFDLGFBQXRCLEVBQXFDLFNBQUMsR0FBRDtBQUNuQyxjQUFBO1VBQUEsWUFBQSxHQUFlO1VBQ2YsSUFBcUMsR0FBRyxDQUFDLElBQXpDO1lBQUEsWUFBWSxDQUFDLElBQWIsQ0FBa0IsR0FBQSxHQUFJLEdBQUcsQ0FBQyxJQUExQixFQUFBOztVQUNBLElBQW9DLEdBQUcsQ0FBQyxJQUF4QztZQUFBLFlBQVksQ0FBQyxJQUFiLENBQWtCLEVBQUEsR0FBRyxHQUFHLENBQUMsSUFBekIsRUFBQTs7VUFFQSxJQUFvRixHQUFHLENBQUMsTUFBeEY7WUFBQSxZQUFZLENBQUMsSUFBYixDQUFrQixPQUFBLENBQVEsYUFBUixDQUFBLENBQXVCLEdBQUcsQ0FBQyxNQUFNLENBQUMsWUFBbEMsRUFBZ0QsS0FBaEQsRUFBdUQsS0FBdkQsQ0FBbEIsRUFBQTs7VUFDQSxJQUE0QyxHQUFHLENBQUMsV0FBaEQ7WUFBQSxZQUFZLENBQUMsSUFBYixDQUFxQixHQUFHLENBQUMsV0FBTCxHQUFpQixHQUFyQyxFQUFBOztVQUNBLElBQTJDLEdBQUcsQ0FBQyxXQUEvQztZQUFBLFlBQVksQ0FBQyxJQUFiLENBQWtCLEVBQUEsR0FBRyxHQUFHLENBQUMsV0FBekIsRUFBQTs7aUJBQ0EsT0FBTyxDQUFDLElBQVIsQ0FBYSxZQUFZLENBQUMsSUFBYixDQUFrQixLQUFsQixDQUFiO1FBUm1DLENBQXJDLEVBRkY7O0FBWUEsYUFBTyxPQUFPLENBQUMsSUFBUixDQUFhLFFBQWI7SUF4Qm1CO1dBNkI1QixNQUFNLENBQUMsY0FBYyxDQUFDLE9BQXRCLENBQThCLGdCQUE5QjtFQXJENEMsQ0FBOUM7O0VBd0RBLE1BQU0sQ0FBQyxTQUFQLENBQWlCLHNCQUFqQixFQUF5QyxTQUFBO0FBQ3ZDLFdBQU87TUFDTCxRQUFBLEVBQVUsR0FETDtNQUVMLFVBQUEsRUFBWSwwQkFGUDs7RUFEZ0MsQ0FBekM7QUExREEiLCJmaWxlIjoiY29tcG9uZW50cy93aWRnZXRzL3NhbGVzLWxlYWRzLWxpc3Qvc2FsZXMtbGVhZHMtbGlzdC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnaW1wYWMuY29tcG9uZW50cy53aWRnZXRzLnNhbGVzLWxlYWRzLWxpc3QnLFtdKVxuXG5tb2R1bGUuY29udHJvbGxlcignV2lkZ2V0U2FsZXNMZWFkc0xpc3RDdHJsJywgKCRzY29wZSwgJHEsIENoYXJ0Rm9ybWF0dGVyU3ZjLCAkZmlsdGVyKSAtPlxuXG4gIHcgPSAkc2NvcGUud2lkZ2V0XG5cbiAgIyBEZWZpbmUgc2V0dGluZ3NcbiAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAkc2NvcGUub3JnRGVmZXJyZWQgPSAkcS5kZWZlcigpXG5cbiAgc2V0dGluZ3NQcm9taXNlcyA9IFtcbiAgICAkc2NvcGUub3JnRGVmZXJyZWQucHJvbWlzZVxuICBdXG5cblxuICAjIFdpZGdldCBzcGVjaWZpYyBtZXRob2RzXG4gICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgdy5pbml0Q29udGV4dCA9IC0+XG4gICAgJHNjb3BlLmlzRGF0YUZvdW5kID0gYW5ndWxhci5pc0RlZmluZWQody5jb250ZW50KSAmJiAhXy5pc0VtcHR5KHcuY29udGVudC5sZWFkcylcblxuICAjIFRPRE86IHNob3VsZCBpdCBiZSBtYW5hZ2VkIGluIGEgc2VydmljZT8gaW4gdGhlIHdpZGdldCBkaXJlY3RpdmU/IE11c3QgaXNMb2FkaW5nIGFuZCBpc0RhdGFGb3VuZCBiZSBib3VuZCB0byB0aGUgd2lkZ2V0IG9iamVjdCBvciB0byB0aGUgc2NvcGU/XG4gIHcucHJvY2Vzc0Vycm9yID0gKGVycm9yKSAtPlxuICAgICMgVE9ETzogYmV0dGVyIGVycm9yIG1hbmFnZW1lbnRcbiAgICBpZiBlcnJvci5jb2RlID09IDQwNFxuICAgICAgJHNjb3BlLmlzRGF0YUZvdW5kID0gZmFsc2VcblxuICAkc2NvcGUuZ2V0TGVhZERlc2NyaXB0aW9uID0gKGFMZWFkKSAtPlxuICAgIHRvb2x0aXAgPSBbXVxuXG4gICAgbmFtZUxpbmVBcnJheSA9IFtcIjxzdHJvbmc+XCJdXG4gICAgbmFtZUxpbmVBcnJheS5wdXNoKCRmaWx0ZXIoJ3RpdGxlaXplJykoYUxlYWQuZmlyc3RfbmFtZSkpIGlmIGFMZWFkLmZpcnN0X25hbWVcbiAgICBuYW1lTGluZUFycmF5LnB1c2goJGZpbHRlcigndGl0bGVpemUnKShhTGVhZC5sYXN0X25hbWUpKSBpZiBhTGVhZC5sYXN0X25hbWVcbiAgICBuYW1lTGluZUFycmF5LnB1c2goXCI8L3N0cm9uZz5cIilcblxuICAgIHRvb2x0aXAucHVzaChuYW1lTGluZUFycmF5LmpvaW4oJyAnKSlcbiAgICB0b29sdGlwLnB1c2goXCJTdGF0dXM6ICN7JGZpbHRlcigndGl0bGVpemUnKShhTGVhZC5sZWFkX3N0YXR1cyl9XCIpXG4gICAgdG9vbHRpcC5wdXNoKFwiT3JnYW5pemF0aW9uOiAjeyRmaWx0ZXIoJ3RpdGxlaXplJykoYUxlYWQub3JnYW5pemF0aW9uKX1cIikgaWYgYUxlYWQub3JnYW5pemF0aW9uXG5cbiAgICBpZiBhTGVhZC5vcHBvcnR1bml0aWVzXG4gICAgICB0b29sdGlwLnB1c2goXCI8c3Ryb25nPk9wcG9ydHVuaXRpZXM6PC9zdHJvbmc+XCIpXG4gICAgICBhbmd1bGFyLmZvckVhY2ggYUxlYWQub3Bwb3J0dW5pdGllcywgKG9wcCkgLT5cbiAgICAgICAgb3BwTGluZUFycmF5ID0gW11cbiAgICAgICAgb3BwTGluZUFycmF5LnB1c2goXCIjI3tvcHAuY29kZX1cIikgaWYgb3BwLmNvZGVcbiAgICAgICAgb3BwTGluZUFycmF5LnB1c2goXCIje29wcC5uYW1lfVwiKSBpZiBvcHAubmFtZVxuICAgICAgICAjIFRPRE8gY3VycmVuY3lcbiAgICAgICAgb3BwTGluZUFycmF5LnB1c2goJGZpbHRlcignbW5vQ3VycmVuY3knKShvcHAuYW1vdW50LnRvdGFsX2Ftb3VudCwgXCJVU0RcIiwgZmFsc2UpKSBpZiBvcHAuYW1vdW50XG4gICAgICAgIG9wcExpbmVBcnJheS5wdXNoKFwiI3tvcHAucHJvYmFiaWxpdHl9JVwiKSBpZiBvcHAucHJvYmFiaWxpdHlcbiAgICAgICAgb3BwTGluZUFycmF5LnB1c2goXCIje29wcC5zYWxlc19zdGFnZX1cIikgaWYgb3BwLnNhbGVzX3N0YWdlXG4gICAgICAgIHRvb2x0aXAucHVzaChvcHBMaW5lQXJyYXkuam9pbignIC0gJykpXG5cbiAgICByZXR1cm4gdG9vbHRpcC5qb2luKFwiPGJyIC8+XCIpXG5cblxuICAjIFdpZGdldCBpcyByZWFkeTogY2FuIHRyaWdnZXIgdGhlIFwid2FpdCBmb3Igc2V0dGlnbnMgdG8gYmUgcmVhZHlcIlxuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICRzY29wZS53aWRnZXREZWZlcnJlZC5yZXNvbHZlKHNldHRpbmdzUHJvbWlzZXMpXG4pXG5cbm1vZHVsZS5kaXJlY3RpdmUoJ3dpZGdldFNhbGVzTGVhZHNMaXN0JywgLT5cbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIGNvbnRyb2xsZXI6ICdXaWRnZXRTYWxlc0xlYWRzTGlzdEN0cmwnXG4gIH1cbikiXX0=

(function() {
  var module;

  module = angular.module('impac.components.widgets.sales-list', []);

  module.controller('WidgetSalesListCtrl', function($scope, $q, ChartFormatterSvc, ImpacWidgetsSvc) {
    var settingsPromises, unCollapsedSetting, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    $scope.paramSelectorDeferred = $q.defer();
    $scope.datesPickerDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise, $scope.paramSelectorDeferred.promise, $scope.datesPickerDeferred.promise];
    w.initContext = function() {
      $scope.isDataFound = angular.isDefined(w.content) && !_.isEmpty(w.content.summary);
      $scope.filterOptions = [
        {
          label: 'value sold (incl. taxes)',
          value: 'gross_value_sold'
        }, {
          label: 'value sold (excl. taxes)',
          value: 'net_value_sold'
        }, {
          label: 'quantity sold',
          value: 'quantity_sold'
        }, {
          label: 'value purchased (incl. taxes)',
          value: 'gross_value_purchased'
        }, {
          label: 'value purchased (excl. taxes)',
          value: 'net_value_purchased'
        }, {
          label: 'quantity purchased',
          value: 'quantity_purchased'
        }
      ];
      $scope.filter = angular.copy(_.find($scope.filterOptions, function(o) {
        return o.value === w.metadata.filter;
      }) || $scope.filterOptions[0]);
      return $scope.unCollapsed = w.metadata.unCollapsed || [];
    };
    $scope.toggleCollapsed = function(categoryName) {
      if (categoryName != null) {
        if (_.find($scope.unCollapsed, (function(name) {
          return categoryName === name;
        }))) {
          $scope.unCollapsed = _.reject($scope.unCollapsed, function(name) {
            return name === categoryName;
          });
        } else {
          $scope.unCollapsed.push(categoryName);
        }
        return ImpacWidgetsSvc.updateWidgetSettings(w, false);
      }
    };
    $scope.isCollapsed = function(categoryName) {
      if (categoryName != null) {
        if (_.find($scope.unCollapsed, (function(name) {
          return categoryName === name;
        }))) {
          return false;
        } else {
          return true;
        }
      }
    };
    unCollapsedSetting = {};
    unCollapsedSetting.initialized = false;
    unCollapsedSetting.initialize = function() {
      return unCollapsedSetting.initialized = true;
    };
    unCollapsedSetting.toMetadata = function() {
      return {
        unCollapsed: $scope.unCollapsed
      };
    };
    w.settings.push(unCollapsedSetting);
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetSalesList', function() {
    return {
      restrict: 'A',
      controller: 'WidgetSalesListCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy9zYWxlcy1saXN0L3NhbGVzLWxpc3QuZGlyZWN0aXZlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUE7O0VBQUEsTUFBQSxHQUFTLE9BQU8sQ0FBQyxNQUFSLENBQWUscUNBQWYsRUFBcUQsRUFBckQ7O0VBRVQsTUFBTSxDQUFDLFVBQVAsQ0FBa0IscUJBQWxCLEVBQXlDLFNBQUMsTUFBRCxFQUFTLEVBQVQsRUFBYSxpQkFBYixFQUFnQyxlQUFoQztBQUV2QyxRQUFBO0lBQUEsQ0FBQSxHQUFJLE1BQU0sQ0FBQztJQUlYLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFDckIsTUFBTSxDQUFDLHFCQUFQLEdBQStCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFDL0IsTUFBTSxDQUFDLG1CQUFQLEdBQTZCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFFN0IsZ0JBQUEsR0FBbUIsQ0FDakIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQURGLEVBRWpCLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxPQUZaLEVBR2pCLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxPQUhWO0lBU25CLENBQUMsQ0FBQyxXQUFGLEdBQWdCLFNBQUE7TUFDZCxNQUFNLENBQUMsV0FBUCxHQUFxQixPQUFPLENBQUMsU0FBUixDQUFrQixDQUFDLENBQUMsT0FBcEIsQ0FBQSxJQUFnQyxDQUFDLENBQUMsQ0FBQyxPQUFGLENBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFwQjtNQUV0RCxNQUFNLENBQUMsYUFBUCxHQUF1QjtRQUNyQjtVQUFDLEtBQUEsRUFBTywwQkFBUjtVQUFvQyxLQUFBLEVBQU8sa0JBQTNDO1NBRHFCLEVBRXJCO1VBQUMsS0FBQSxFQUFPLDBCQUFSO1VBQW9DLEtBQUEsRUFBTyxnQkFBM0M7U0FGcUIsRUFHckI7VUFBQyxLQUFBLEVBQU8sZUFBUjtVQUF5QixLQUFBLEVBQU8sZUFBaEM7U0FIcUIsRUFJckI7VUFBQyxLQUFBLEVBQU8sK0JBQVI7VUFBeUMsS0FBQSxFQUFPLHVCQUFoRDtTQUpxQixFQUtyQjtVQUFDLEtBQUEsRUFBTywrQkFBUjtVQUF5QyxLQUFBLEVBQU8scUJBQWhEO1NBTHFCLEVBTXJCO1VBQUMsS0FBQSxFQUFPLG9CQUFSO1VBQThCLEtBQUEsRUFBTyxvQkFBckM7U0FOcUI7O01BUXZCLE1BQU0sQ0FBQyxNQUFQLEdBQWdCLE9BQU8sQ0FBQyxJQUFSLENBQWEsQ0FBQyxDQUFDLElBQUYsQ0FBTyxNQUFNLENBQUMsYUFBZCxFQUE2QixTQUFDLENBQUQ7ZUFDeEQsQ0FBQyxDQUFDLEtBQUYsS0FBVyxDQUFDLENBQUMsUUFBUSxDQUFDO01BRGtDLENBQTdCLENBQUEsSUFFeEIsTUFBTSxDQUFDLGFBQWMsQ0FBQSxDQUFBLENBRlY7YUFJaEIsTUFBTSxDQUFDLFdBQVAsR0FBcUIsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxXQUFYLElBQTBCO0lBZmpDO0lBaUJoQixNQUFNLENBQUMsZUFBUCxHQUF5QixTQUFDLFlBQUQ7TUFDdkIsSUFBRyxvQkFBSDtRQUNFLElBQUcsQ0FBQyxDQUFDLElBQUYsQ0FBTyxNQUFNLENBQUMsV0FBZCxFQUEyQixDQUFDLFNBQUMsSUFBRDtpQkFBVSxZQUFBLEtBQWdCO1FBQTFCLENBQUQsQ0FBM0IsQ0FBSDtVQUNFLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLENBQUMsQ0FBQyxNQUFGLENBQVMsTUFBTSxDQUFDLFdBQWhCLEVBQTZCLFNBQUMsSUFBRDttQkFDaEQsSUFBQSxLQUFRO1VBRHdDLENBQTdCLEVBRHZCO1NBQUEsTUFBQTtVQUtFLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBbkIsQ0FBd0IsWUFBeEIsRUFMRjs7ZUFNQSxlQUFlLENBQUMsb0JBQWhCLENBQXFDLENBQXJDLEVBQXVDLEtBQXZDLEVBUEY7O0lBRHVCO0lBVXpCLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLFNBQUMsWUFBRDtNQUNuQixJQUFHLG9CQUFIO1FBQ0UsSUFBRyxDQUFDLENBQUMsSUFBRixDQUFPLE1BQU0sQ0FBQyxXQUFkLEVBQTJCLENBQUMsU0FBQyxJQUFEO2lCQUFVLFlBQUEsS0FBZ0I7UUFBMUIsQ0FBRCxDQUEzQixDQUFIO0FBQ0UsaUJBQU8sTUFEVDtTQUFBLE1BQUE7QUFHRSxpQkFBTyxLQUhUO1NBREY7O0lBRG1CO0lBVXJCLGtCQUFBLEdBQXFCO0lBQ3JCLGtCQUFrQixDQUFDLFdBQW5CLEdBQWlDO0lBRWpDLGtCQUFrQixDQUFDLFVBQW5CLEdBQWdDLFNBQUE7YUFDOUIsa0JBQWtCLENBQUMsV0FBbkIsR0FBaUM7SUFESDtJQUdoQyxrQkFBa0IsQ0FBQyxVQUFuQixHQUFnQyxTQUFBO2FBQzlCO1FBQUMsV0FBQSxFQUFhLE1BQU0sQ0FBQyxXQUFyQjs7SUFEOEI7SUFHaEMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFYLENBQWdCLGtCQUFoQjtXQUtBLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBdEIsQ0FBOEIsZ0JBQTlCO0VBdEV1QyxDQUF6Qzs7RUF5RUEsTUFBTSxDQUFDLFNBQVAsQ0FBaUIsaUJBQWpCLEVBQW9DLFNBQUE7QUFDbEMsV0FBTztNQUNMLFFBQUEsRUFBVSxHQURMO01BRUwsVUFBQSxFQUFZLHFCQUZQOztFQUQyQixDQUFwQztBQTNFQSIsImZpbGUiOiJjb21wb25lbnRzL3dpZGdldHMvc2FsZXMtbGlzdC9zYWxlcy1saXN0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdpbXBhYy5jb21wb25lbnRzLndpZGdldHMuc2FsZXMtbGlzdCcsW10pXG5cbm1vZHVsZS5jb250cm9sbGVyKCdXaWRnZXRTYWxlc0xpc3RDdHJsJywgKCRzY29wZSwgJHEsIENoYXJ0Rm9ybWF0dGVyU3ZjLCBJbXBhY1dpZGdldHNTdmMpIC0+XG5cbiAgdyA9ICRzY29wZS53aWRnZXRcblxuICAjIERlZmluZSBzZXR0aW5nc1xuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICRzY29wZS5vcmdEZWZlcnJlZCA9ICRxLmRlZmVyKClcbiAgJHNjb3BlLnBhcmFtU2VsZWN0b3JEZWZlcnJlZCA9ICRxLmRlZmVyKClcbiAgJHNjb3BlLmRhdGVzUGlja2VyRGVmZXJyZWQgPSAkcS5kZWZlcigpXG5cbiAgc2V0dGluZ3NQcm9taXNlcyA9IFtcbiAgICAkc2NvcGUub3JnRGVmZXJyZWQucHJvbWlzZVxuICAgICRzY29wZS5wYXJhbVNlbGVjdG9yRGVmZXJyZWQucHJvbWlzZVxuICAgICRzY29wZS5kYXRlc1BpY2tlckRlZmVycmVkLnByb21pc2VcbiAgXVxuXG5cbiAgIyBXaWRnZXQgc3BlY2lmaWMgbWV0aG9kc1xuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHcuaW5pdENvbnRleHQgPSAtPlxuICAgICRzY29wZS5pc0RhdGFGb3VuZCA9IGFuZ3VsYXIuaXNEZWZpbmVkKHcuY29udGVudCkgJiYgIV8uaXNFbXB0eSh3LmNvbnRlbnQuc3VtbWFyeSlcblxuICAgICRzY29wZS5maWx0ZXJPcHRpb25zID0gW1xuICAgICAge2xhYmVsOiAndmFsdWUgc29sZCAoaW5jbC4gdGF4ZXMpJywgdmFsdWU6ICdncm9zc192YWx1ZV9zb2xkJ30sXG4gICAgICB7bGFiZWw6ICd2YWx1ZSBzb2xkIChleGNsLiB0YXhlcyknLCB2YWx1ZTogJ25ldF92YWx1ZV9zb2xkJ30sXG4gICAgICB7bGFiZWw6ICdxdWFudGl0eSBzb2xkJywgdmFsdWU6ICdxdWFudGl0eV9zb2xkJ30sXG4gICAgICB7bGFiZWw6ICd2YWx1ZSBwdXJjaGFzZWQgKGluY2wuIHRheGVzKScsIHZhbHVlOiAnZ3Jvc3NfdmFsdWVfcHVyY2hhc2VkJ30sXG4gICAgICB7bGFiZWw6ICd2YWx1ZSBwdXJjaGFzZWQgKGV4Y2wuIHRheGVzKScsIHZhbHVlOiAnbmV0X3ZhbHVlX3B1cmNoYXNlZCd9LFxuICAgICAge2xhYmVsOiAncXVhbnRpdHkgcHVyY2hhc2VkJywgdmFsdWU6ICdxdWFudGl0eV9wdXJjaGFzZWQnfSxcbiAgICBdXG4gICAgJHNjb3BlLmZpbHRlciA9IGFuZ3VsYXIuY29weShfLmZpbmQoJHNjb3BlLmZpbHRlck9wdGlvbnMsIChvKSAtPlxuICAgICAgby52YWx1ZSA9PSB3Lm1ldGFkYXRhLmZpbHRlclxuICAgICkgfHwgJHNjb3BlLmZpbHRlck9wdGlvbnNbMF0pXG5cbiAgICAkc2NvcGUudW5Db2xsYXBzZWQgPSB3Lm1ldGFkYXRhLnVuQ29sbGFwc2VkIHx8IFtdXG5cbiAgJHNjb3BlLnRvZ2dsZUNvbGxhcHNlZCA9IChjYXRlZ29yeU5hbWUpIC0+XG4gICAgaWYgY2F0ZWdvcnlOYW1lP1xuICAgICAgaWYgXy5maW5kKCRzY29wZS51bkNvbGxhcHNlZCwgKChuYW1lKSAtPiBjYXRlZ29yeU5hbWUgPT0gbmFtZSkpXG4gICAgICAgICRzY29wZS51bkNvbGxhcHNlZCA9IF8ucmVqZWN0KCRzY29wZS51bkNvbGxhcHNlZCwgKG5hbWUpIC0+XG4gICAgICAgICAgbmFtZSA9PSBjYXRlZ29yeU5hbWVcbiAgICAgICAgKVxuICAgICAgZWxzZVxuICAgICAgICAkc2NvcGUudW5Db2xsYXBzZWQucHVzaChjYXRlZ29yeU5hbWUpXG4gICAgICBJbXBhY1dpZGdldHNTdmMudXBkYXRlV2lkZ2V0U2V0dGluZ3ModyxmYWxzZSlcblxuICAkc2NvcGUuaXNDb2xsYXBzZWQgPSAoY2F0ZWdvcnlOYW1lKSAtPlxuICAgIGlmIGNhdGVnb3J5TmFtZT9cbiAgICAgIGlmIF8uZmluZCgkc2NvcGUudW5Db2xsYXBzZWQsICgobmFtZSkgLT4gY2F0ZWdvcnlOYW1lID09IG5hbWUpKVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIHRydWVcblxuXG4gICMgTWluaS1zZXR0aW5nc1xuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHVuQ29sbGFwc2VkU2V0dGluZyA9IHt9XG4gIHVuQ29sbGFwc2VkU2V0dGluZy5pbml0aWFsaXplZCA9IGZhbHNlXG5cbiAgdW5Db2xsYXBzZWRTZXR0aW5nLmluaXRpYWxpemUgPSAtPlxuICAgIHVuQ29sbGFwc2VkU2V0dGluZy5pbml0aWFsaXplZCA9IHRydWVcblxuICB1bkNvbGxhcHNlZFNldHRpbmcudG9NZXRhZGF0YSA9IC0+XG4gICAge3VuQ29sbGFwc2VkOiAkc2NvcGUudW5Db2xsYXBzZWR9XG5cbiAgdy5zZXR0aW5ncy5wdXNoKHVuQ29sbGFwc2VkU2V0dGluZylcblxuXG4gICMgV2lkZ2V0IGlzIHJlYWR5OiBjYW4gdHJpZ2dlciB0aGUgXCJ3YWl0IGZvciBzZXR0aWducyB0byBiZSByZWFkeVwiXG4gICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgJHNjb3BlLndpZGdldERlZmVycmVkLnJlc29sdmUoc2V0dGluZ3NQcm9taXNlcylcbilcblxubW9kdWxlLmRpcmVjdGl2ZSgnd2lkZ2V0U2FsZXNMaXN0JywgLT5cbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIGNvbnRyb2xsZXI6ICdXaWRnZXRTYWxlc0xpc3RDdHJsJ1xuICB9XG4pIl19

(function() {
  var module;

  module = angular.module('impac.components.widgets.sales-margin', []);

  module.controller('WidgetSalesMarginCtrl', function($scope, $q, ChartFormatterSvc, $filter) {
    var settingsPromises, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    $scope.timeRangeDeferred = $q.defer();
    $scope.histModeDeferred = $q.defer();
    $scope.paramSelectorDeferred = $q.defer();
    $scope.chartDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise, $scope.timeRangeDeferred.promise, $scope.histModeDeferred.promise, $scope.paramSelectorDeferred.promise, $scope.chartDeferred.promise];
    w.initContext = function() {
      $scope.isDataFound = (w.content != null) && (w.content.margins != null) && (w.content.dates != null);
      $scope.filterOptions = [
        {
          label: 'Including taxes',
          value: 'gross_margin'
        }, {
          label: 'Excluding taxes',
          value: 'net_margin'
        }
      ];
      if ((w.metadata != null) && w.metadata.filter === "net_margin") {
        return $scope.filter = angular.copy($scope.filterOptions[1]);
      } else {
        return $scope.filter = angular.copy($scope.filterOptions[0]);
      }
    };
    $scope.getTotalMargin = function() {
      if ($scope.isDataFound) {
        if ((w.metadata != null) && w.metadata.filter === "net_margin") {
          return _.reduce(w.content.margins.net, function(memo, margin) {
            return memo + margin;
          }, 0);
        } else {
          return _.reduce(w.content.margins.gross, function(memo, margin) {
            return memo + margin;
          }, 0);
        }
      }
    };
    $scope.getCurrency = function() {
      if ($scope.isDataFound) {
        return w.content.currency || "USD";
      }
    };
    $scope.getTimeSpan = function() {
      var period;
      if ($scope.isDataFound) {
        period = null;
        if ((w.metadata != null) && (w.metadata.hist_parameters != null)) {
          period = w.metadata.hist_parameters.period;
        }
        return "From " + ($filter('mnoDate')(_.first(w.content.dates), period)) + " to " + ($filter('mnoDate')(_.last(w.content.dates), period));
      }
    };
    $scope.drawTrigger = $q.defer();
    w.format = function() {
      var all_values_are_positive, chartData, dates, inputData, options, period, values;
      if ($scope.isDataFound) {
        if ((w.metadata != null) && w.metadata.filter === "net_margin") {
          values = w.content.margins.net;
        } else {
          values = w.content.margins.gross;
        }
        period = null;
        if ((w.metadata != null) && (w.metadata.hist_parameters != null)) {
          period = w.metadata.hist_parameters.period;
        }
        dates = _.map(w.content.dates, function(date) {
          return $filter('mnoDate')(date, period);
        });
        inputData = {
          title: "Gross margin",
          labels: dates,
          values: values
        };
        all_values_are_positive = true;
        angular.forEach(values, function(value) {
          return all_values_are_positive && (all_values_are_positive = value >= 0);
        });
        options = {
          scaleBeginAtZero: all_values_are_positive,
          showXLabels: false
        };
        chartData = ChartFormatterSvc.lineChart([inputData], options);
        return $scope.drawTrigger.notify(chartData);
      }
    };
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetSalesMargin', function() {
    return {
      restrict: 'A',
      controller: 'WidgetSalesMarginCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

(function() {
  var module;

  module = angular.module('impac.components.widgets.sales-number-of-leads', []);

  module.controller('WidgetSalesNumberOfLeadsCtrl', function($scope, $q, ChartFormatterSvc, $filter) {
    var getVariation, settingsPromises, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    $scope.paramSelectorDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise, $scope.paramSelectorDeferred.promise];
    w.initContext = function() {
      if ($scope.isDataFound = angular.isDefined(w.content) && !_.isEmpty(w.content.number_of_leads)) {
        $scope.periodOptions = [
          {
            label: 'year',
            value: 'YEARLY'
          }, {
            label: 'quarter',
            value: 'QUARTERLY'
          }, {
            label: 'month',
            value: 'MONTHLY'
          }, {
            label: 'week',
            value: 'WEEKLY'
          }, {
            label: 'day',
            value: 'DAILY'
          }
        ];
        return $scope.period = angular.copy(_.find($scope.periodOptions, function(o) {
          return o.value === w.metadata.period;
        }) || $scope.periodOptions[3]);
      }
    };
    w.processError = function(error) {
      if (error.code === 404) {
        return $scope.isDataFound = false;
      }
    };
    $scope.formatNumberOfLeads = function(carac) {
      var color, formattedNominal, formattedVariation, n_hash, nominal, variation;
      formattedNominal = 0;
      formattedVariation = "- %";
      if (!$scope.isDataFound) {
        return {
          nominal: formattedNominal,
          variation: formattedVariation,
          color: ''
        };
      }
      n_hash = angular.copy(w.content.number_of_leads);
      nominal = 0;
      color = '';
      if (carac === "new" && n_hash.total && n_hash.total.length === 2) {
        nominal = n_hash.total[1] - n_hash.total[0];
        variation = getVariation(n_hash.total);
        if (variation > 0) {
          color = 'green';
        } else if (variation < 0) {
          color = 'red';
        }
      } else if (carac === "converted" && n_hash.converted && n_hash.converted.length === 2) {
        nominal = n_hash.converted[1];
        variation = getVariation(n_hash.converted);
        if (variation > 0) {
          color = 'green';
        } else if (variation < 0) {
          color = 'red';
        }
      } else if (carac === "lost" && n_hash.lost && n_hash.lost.length === 2) {
        nominal = n_hash.lost[1];
        variation = getVariation(n_hash.lost);
        if (variation < 0) {
          color = 'green';
        } else if (variation > 0) {
          color = 'red';
        }
      } else {
        return {
          nominal: formattedNominal,
          variation: formattedVariation,
          color: color
        };
      }
      if (nominal > 0) {
        formattedNominal = "+" + nominal;
      } else if (nominal < 0) {
        formattedNominal = nominal;
      }
      if (variation && variation > 0) {
        formattedVariation = "+" + (variation.toFixed(0)) + "%";
      } else if (variation && variation < 0) {
        formattedVariation = (variation.toFixed(0)) + "%";
      }
      return {
        nominal: formattedNominal,
        variation: formattedVariation,
        color: color
      };
    };
    getVariation = function(v_array) {
      var variation;
      if (v_array[0] !== 0) {
        return variation = 100 * ((v_array[1] / v_array[0]) - 1);
      } else {
        return variation = "- ";
      }
    };
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetSalesNumberOfLeads', function() {
    return {
      restrict: 'A',
      controller: 'WidgetSalesNumberOfLeadsCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

(function() {
  var module,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  module = angular.module('impac.components.widgets.sales-opportunities-funnel', []);

  module.controller('WidgetSalesOpportunitiesFunnelCtrl', function($scope, $q, ChartFormatterSvc, $filter, ImpacWidgetsSvc) {
    var hasOneOpportunity, selectedStatusSetting, settingsPromises, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    $scope.paramsPickerDeferred = $q.defer();
    $scope.widthDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise, $scope.paramsPickerDeferred.promise, $scope.widthDeferred.promise];
    hasOneOpportunity = function(oppsPerSalesStage) {
      var reducedHash, total, totalsArray;
      reducedHash = _.mapValues(oppsPerSalesStage, function(statusHash) {
        return statusHash.total;
      });
      totalsArray = _.compact(_.values(reducedHash));
      total = _.reduce(totalsArray, function(total, n) {
        if (total == null) {
          total = 0;
        }
        return total + n;
      });
      return (total != null) && total > 0;
    };
    w.initContext = function() {
      if ($scope.isDataFound = angular.isDefined(w.content) && !_.isEmpty(w.content.opps_per_sales_stage) && hasOneOpportunity(w.content.opps_per_sales_stage)) {
        $scope.statusOptions = _.compact(_.map(w.metadata.sales_stage_selection, function(status) {
          if (angular.isDefined(w.content.opps_per_sales_stage[status])) {
            return {
              label: status,
              selected: true
            };
          }
        }));
        return angular.forEach(w.content.opps_per_sales_stage, function(value, status) {
          if (w.metadata.sales_stage_selection && !(indexOf.call(w.metadata.sales_stage_selection, status) >= 0)) {
            return $scope.statusOptions.push({
              label: status,
              selected: false
            });
          } else if (_.isEmpty(w.metadata.sales_stage_selection)) {
            return $scope.statusOptions.push({
              label: status,
              selected: true
            });
          }
        });
      }
    };
    w.processError = function(error) {
      if (error.code === 404) {
        return $scope.isDataFound = false;
      }
    };
    $scope.getImpacColor = function(index) {
      return ChartFormatterSvc.getColor(index);
    };
    $scope.toggleSelectStatus = function(aStatus) {
      if ($scope.selectedStatus && $scope.selectedStatus === aStatus) {
        $scope.selectedStatus = null;
      } else {
        $scope.selectedStatus = aStatus;
      }
      if (!w.isExpanded() && $scope.selectedStatus) {
        return w.toggleExpanded();
      } else {
        return ImpacWidgetsSvc.updateWidgetSettings(w, false);
      }
    };
    $scope.isSelected = function(aStatus) {
      return $scope.selectedStatus && aStatus === $scope.selectedStatus;
    };
    $scope.getSelectedOpportunities = function() {
      if ($scope.isDataFound && $scope.selectedStatus) {
        return w.content.opps_per_sales_stage[$scope.selectedStatus].opps;
      }
    };
    $scope.getOppDetails = function(anOpp) {
      var oppDetails;
      oppDetails = [];
      if (anOpp.amount) {
        oppDetails.push($filter('mnoCurrency')(anOpp.amount.amount, anOpp.amount.currency || 'AUD'));
      }
      if (anOpp.probability) {
        oppDetails.push("prob. " + anOpp.probability + "%");
      }
      return oppDetails.join(' / ');
    };
    selectedStatusSetting = {};
    selectedStatusSetting.initialized = false;
    selectedStatusSetting.initialize = function() {
      if (!_.isEmpty(w.content) && angular.isDefined(w.content.opps_per_sales_stage[w.metadata.selected_status])) {
        $scope.selectedStatus = w.metadata.selected_status;
      }
      return selectedStatusSetting.initialized = true;
    };
    selectedStatusSetting.toMetadata = function() {
      return {
        selected_status: $scope.selectedStatus
      };
    };
    w.settings.push(selectedStatusSetting);
    w.format = function() {
      var max;
      if ($scope.isDataFound) {
        max = 0;
        angular.forEach($scope.statusOptions, function(statusOption) {
          var value;
          value = w.content.opps_per_sales_stage[statusOption.label].total;
          if (statusOption.selected && angular.isDefined(value) && value > max) {
            return max = value;
          }
        });
        if (max > 0) {
          return $scope.funnel = _.compact(_.map($scope.statusOptions, function(statusOption, index) {
            var coloredWidth, statusWidth, value;
            value = w.content.opps_per_sales_stage[statusOption.label].total;
            coloredWidth = (100 * (value / max) - 10).toFixed();
            if (coloredWidth < 8) {
              statusWidth = 92;
            } else {
              statusWidth = 100 - coloredWidth;
            }
            if (statusOption.selected && angular.isDefined(value)) {
              return {
                status: statusOption.label,
                number: value,
                coloredWidth: {
                  width: coloredWidth + "%"
                },
                statusWidth: {
                  width: statusWidth + "%"
                }
              };
            }
          }));
        }
      }
    };
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetSalesOpportunitiesFunnel', function() {
    return {
      restrict: 'A',
      controller: 'WidgetSalesOpportunitiesFunnelCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

(function() {
  var module;

  module = angular.module('impac.components.widgets.sales-performance', []);

  module.controller('WidgetSalesPerformanceCtrl', function($scope, $q, $filter, ChartFormatterSvc, ImpacWidgetsSvc) {
    var selectedElementSetting, settingsPromises, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    $scope.widthDeferred = $q.defer();
    $scope.chartDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise, $scope.widthDeferred.promise, $scope.chartDeferred.promise];
    w.initContext = function() {
      $scope.isDataFound = angular.isDefined(w.content) && !_.isEmpty(w.content.assignees);
      if ($scope.isDataFound && w.metadata.selectedElement) {
        return $scope.selectedElement = _.find(w.content.assignees, function(statement) {
          return statement.name === w.metadata.selectedElement.name;
        });
      }
    };
    w.processError = function(error) {
      if (error.code === 404) {
        return $scope.isDataFound = false;
      }
    };
    $scope.getWonOpportunities = function(element) {
      if ((element != null) && (element.opportunities != null)) {
        return _.select(element.opportunities, function(opp) {
          return opp.sales_stage.toLowerCase().match(/won/);
        });
      }
    };
    $scope.getLostOpportunities = function(element) {
      if ((element != null) && (element.opportunities != null)) {
        return _.select(element.opportunities, function(opp) {
          return !opp.sales_stage.toLowerCase().match(/won/);
        });
      }
    };
    $scope.getCloseDate = function(anOpp) {
      var period, theDate;
      if ((anOpp != null) && (anOpp.sales_stage_changes != null) && anOpp.sales_stage_changes.length > 0) {
        theDate = anOpp.sales_stage_changes[anOpp.sales_stage_changes.length - 1].updated_at;
        if (theDate.split(' ').length > 0) {
          theDate = theDate.split(' ')[0];
        }
        period = null;
        if ((w.metadata != null) && (w.metadata.hist_parameters != null)) {
          period = w.metadata.hist_parameters.period;
        }
        return $filter('mnoDate')(theDate, period);
      }
    };
    $scope.toggleSelectedElement = function(element) {
      if ($scope.isSelected(element)) {
        $scope.selectedElement = null;
        if (w.isExpanded()) {
          return w.toggleExpanded();
        } else {
          return ImpacWidgetsSvc.updateWidgetSettings(w, false);
        }
      } else {
        $scope.selectedElement = angular.copy(element);
        w.format();
        if (!w.isExpanded()) {
          return w.toggleExpanded();
        } else {
          return ImpacWidgetsSvc.updateWidgetSettings(w, false);
        }
      }
    };
    $scope.isSelected = function(element) {
      return (element != null) && ($scope.selectedElement != null) && ((element.name != null) && element.name === $scope.selectedElement.name);
    };
    selectedElementSetting = {};
    selectedElementSetting.initialized = false;
    selectedElementSetting.initialize = function() {
      return selectedElementSetting.initialized = true;
    };
    selectedElementSetting.toMetadata = function() {
      return {
        selectedElement: $scope.selectedElement
      };
    };
    w.settings.push(selectedElementSetting);
    $scope.drawTrigger = $q.defer();
    w.format = function() {
      var all_values_are_positive, chartData, data, dates, inputData, options, period;
      if ($scope.isDataFound && ($scope.selectedElement != null)) {
        data = angular.copy($scope.selectedElement);
        period = null;
        if ((w.metadata != null) && (w.metadata.hist_parameters != null)) {
          period = w.metadata.hist_parameters.period;
        }
        dates = _.map(w.content.dates, function(date) {
          return $filter('mnoDate')(date, period);
        });
        inputData = {
          title: data.name,
          labels: dates,
          values: data.totals
        };
        all_values_are_positive = true;
        angular.forEach(data.totals, function(value) {
          return all_values_are_positive && (all_values_are_positive = value >= 0);
        });
        options = {
          scaleBeginAtZero: all_values_are_positive,
          showXLabels: true
        };
        chartData = ChartFormatterSvc.lineChart([inputData], options);
        return $scope.drawTrigger.notify(chartData);
      }
    };
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetSalesPerformance', function() {
    return {
      restrict: 'A',
      controller: 'WidgetSalesPerformanceCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

(function() {
  var module;

  module = angular.module('impac.components.widgets.sales-segmented-turnover', []);

  module.controller('WidgetSalesSegmentedTurnoverCtrl', function($scope, $q, $filter, ChartFormatterSvc) {
    var settingsPromises, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    $scope.timeRangeDeferred = $q.defer();
    $scope.widthDeferred = $q.defer();
    $scope.paramSelectorDeferred = $q.defer();
    $scope.chartDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise, $scope.timeRangeDeferred.promise, $scope.widthDeferred.promise, $scope.paramSelectorDeferred.promise, $scope.chartDeferred.promise];
    w.initContext = function() {
      if ($scope.isDataFound = !_.isEmpty(w.content) && !_.isEmpty(w.content.dates) && !_.isEmpty(w.content.ranges)) {
        $scope.filterOptions = [
          {
            label: 'Gross revenue (incl. taxes)',
            value: 'gross'
          }, {
            label: 'Net revenue (excl. taxes)',
            value: 'net'
          }
        ];
        return $scope.filter = angular.copy(_.find($scope.filterOptions, function(o) {
          return o.value === w.content.filter;
        }) || $scope.filterOptions[0]);
      }
    };
    $scope.getAnalysis = function() {
      if ($scope.isDataFound) {
        if (w.content.ranges[0].percentage + w.content.ranges[1].percentage > 50) {
          return "Your less expensive products bring you most of your revenue.";
        } else if (w.content.ranges[3].percentage + w.content.ranges[4].percentage > 50) {
          return "Your most expensive products bring you most of your revenue.";
        } else {
          return "Your revenue is balanced between your different products segments.";
        }
      }
    };
    $scope.getColorByIndex = function(index) {
      return ChartFormatterSvc.getColor(index);
    };
    $scope.getRangeLabel = function(aLabel) {
      var prices;
      prices = aLabel.split('-');
      return _.map(prices, function(price) {
        return $filter('mnoCurrency')(price, w.content.currency, false);
      }).join(' - ');
    };
    $scope.getMaxRange = function() {
      var max, maxRange;
      if ($scope.isDataFound) {
        max = 0;
        maxRange = w.content.ranges[0];
        angular.forEach(w.content.ranges, function(range) {
          if (range.percentage > max) {
            maxRange = angular.copy(range);
          }
          return max = Math.max(max, range.percentage);
        });
        return maxRange;
      }
    };
    $scope.drawTrigger = $q.defer();
    w.format = function() {
      var barData, barOptions, chartData;
      if ($scope.isDataFound) {
        barData = {
          labels: _.map(w.content.ranges, function(elem) {
            return elem.label;
          }),
          values: _.map(w.content.ranges, function(elem) {
            return elem.value;
          })
        };
        barOptions = {
          showTooltips: false,
          showXLabels: false,
          barDatasetSpacing: 15
        };
        chartData = ChartFormatterSvc.barChart(barData, barOptions);
        return $scope.drawTrigger.notify(chartData);
      }
    };
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetSalesSegmentedTurnover', function() {
    return {
      restrict: 'A',
      controller: 'WidgetSalesSegmentedTurnoverCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

(function() {
  var module;

  module = angular.module('impac.components.widgets.sales-summary', []);

  module.controller('WidgetSalesSummaryCtrl', function($scope, $q, ChartFormatterSvc) {
    var settingsPromises, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    $scope.chartFiltersDeferred = $q.defer();
    $scope.paramSelectorDeferred = $q.defer();
    $scope.datesPickerDeferred = $q.defer();
    $scope.chartDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise, $scope.chartFiltersDeferred.promise, $scope.paramSelectorDeferred.promise, $scope.datesPickerDeferred.promise, $scope.chartDeferred.promise];
    w.initContext = function() {
      $scope.isDataFound = !_.isEmpty(w.content) && !_.isEmpty(w.content.hist_parameters);
      $scope.filterOptions = [
        {
          label: 'value sold (incl. taxes)',
          value: 'gross_value_sold'
        }, {
          label: 'value sold (excl. taxes)',
          value: 'net_value_sold'
        }, {
          label: 'quantity sold',
          value: 'quantity_sold'
        }, {
          label: 'value purchased (incl. taxes)',
          value: 'gross_value_purchased'
        }, {
          label: 'value purchased (excl. taxes)',
          value: 'net_value_purchased'
        }, {
          label: 'quantity purchased',
          value: 'quantity_purchased'
        }
      ];
      if (w.metadata.criteria === "customer") {
        $scope.filterOptions = [$scope.filterOptions[0], $scope.filterOptions[1], $scope.filterOptions[2]];
      }
      return $scope.filter = angular.copy(_.find($scope.filterOptions, function(o) {
        return o.value === w.metadata.filter;
      }) || $scope.filterOptions[0]);
    };
    $scope.drawTrigger = $q.defer();
    w.format = function() {
      var chartData, pieData, pieOptions;
      if ($scope.isDataFound) {
        pieData = _.map(w.content.summary, function(entity) {
          var label;
          if (entity.company) {
            label = (entity.code || entity.name || entity.location || entity.industry || entity.customer) + " (" + entity.company + ")";
          } else {
            label = entity.code || entity.name || entity.location || entity.industry || entity.customer;
          }
          return {
            label: label,
            value: entity.total
          };
        });
        pieOptions = {
          percentageInnerCutout: 50,
          tooltipFontSize: 12
        };
        if ($scope.filter.value.indexOf('quantity') > -1) {
          angular.merge(pieOptions, {
            currency: 'hide'
          });
        }
        chartData = ChartFormatterSvc.pieChart(pieData, pieOptions);
        return $scope.drawTrigger.notify(chartData);
      }
    };
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetSalesSummary', function() {
    return {
      restrict: 'A',
      controller: 'WidgetSalesSummaryCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy9zYWxlcy1zdW1tYXJ5L3NhbGVzLXN1bW1hcnkuZGlyZWN0aXZlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUE7O0VBQUEsTUFBQSxHQUFTLE9BQU8sQ0FBQyxNQUFSLENBQWUsd0NBQWYsRUFBd0QsRUFBeEQ7O0VBRVQsTUFBTSxDQUFDLFVBQVAsQ0FBa0Isd0JBQWxCLEVBQTRDLFNBQUMsTUFBRCxFQUFTLEVBQVQsRUFBYSxpQkFBYjtBQUUxQyxRQUFBO0lBQUEsQ0FBQSxHQUFJLE1BQU0sQ0FBQztJQUlYLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFDckIsTUFBTSxDQUFDLG9CQUFQLEdBQThCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFDOUIsTUFBTSxDQUFDLHFCQUFQLEdBQStCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFDL0IsTUFBTSxDQUFDLG1CQUFQLEdBQTZCLEVBQUUsQ0FBQyxLQUFILENBQUE7SUFDN0IsTUFBTSxDQUFDLGFBQVAsR0FBdUIsRUFBRSxDQUFDLEtBQUgsQ0FBQTtJQUV2QixnQkFBQSxHQUFtQixDQUNqQixNQUFNLENBQUMsV0FBVyxDQUFDLE9BREYsRUFFakIsTUFBTSxDQUFDLG9CQUFvQixDQUFDLE9BRlgsRUFHakIsTUFBTSxDQUFDLHFCQUFxQixDQUFDLE9BSFosRUFJakIsTUFBTSxDQUFDLG1CQUFtQixDQUFDLE9BSlYsRUFLakIsTUFBTSxDQUFDLGFBQWEsQ0FBQyxPQUxKO0lBV25CLENBQUMsQ0FBQyxXQUFGLEdBQWdCLFNBQUE7TUFDZCxNQUFNLENBQUMsV0FBUCxHQUFxQixDQUFDLENBQUMsQ0FBQyxPQUFGLENBQVUsQ0FBQyxDQUFDLE9BQVosQ0FBRCxJQUF5QixDQUFDLENBQUMsQ0FBQyxPQUFGLENBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxlQUFwQjtNQUUvQyxNQUFNLENBQUMsYUFBUCxHQUF1QjtRQUNyQjtVQUFDLEtBQUEsRUFBTywwQkFBUjtVQUFvQyxLQUFBLEVBQU8sa0JBQTNDO1NBRHFCLEVBRXJCO1VBQUMsS0FBQSxFQUFPLDBCQUFSO1VBQW9DLEtBQUEsRUFBTyxnQkFBM0M7U0FGcUIsRUFHckI7VUFBQyxLQUFBLEVBQU8sZUFBUjtVQUF5QixLQUFBLEVBQU8sZUFBaEM7U0FIcUIsRUFJckI7VUFBQyxLQUFBLEVBQU8sK0JBQVI7VUFBeUMsS0FBQSxFQUFPLHVCQUFoRDtTQUpxQixFQUtyQjtVQUFDLEtBQUEsRUFBTywrQkFBUjtVQUF5QyxLQUFBLEVBQU8scUJBQWhEO1NBTHFCLEVBTXJCO1VBQUMsS0FBQSxFQUFPLG9CQUFSO1VBQThCLEtBQUEsRUFBTyxvQkFBckM7U0FOcUI7O01BUXZCLElBSUssQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFYLEtBQXVCLFVBSjVCO1FBQUEsTUFBTSxDQUFDLGFBQVAsR0FBdUIsQ0FDckIsTUFBTSxDQUFDLGFBQWMsQ0FBQSxDQUFBLENBREEsRUFFckIsTUFBTSxDQUFDLGFBQWMsQ0FBQSxDQUFBLENBRkEsRUFHckIsTUFBTSxDQUFDLGFBQWMsQ0FBQSxDQUFBLENBSEEsRUFBdkI7O2FBTUEsTUFBTSxDQUFDLE1BQVAsR0FBZ0IsT0FBTyxDQUFDLElBQVIsQ0FBYSxDQUFDLENBQUMsSUFBRixDQUFPLE1BQU0sQ0FBQyxhQUFkLEVBQTZCLFNBQUMsQ0FBRDtlQUN4RCxDQUFDLENBQUMsS0FBRixLQUFXLENBQUMsQ0FBQyxRQUFRLENBQUM7TUFEa0MsQ0FBN0IsQ0FBQSxJQUV4QixNQUFNLENBQUMsYUFBYyxDQUFBLENBQUEsQ0FGVjtJQWpCRjtJQXdCaEIsTUFBTSxDQUFDLFdBQVAsR0FBcUIsRUFBRSxDQUFDLEtBQUgsQ0FBQTtJQUNyQixDQUFDLENBQUMsTUFBRixHQUFXLFNBQUE7QUFDVCxVQUFBO01BQUEsSUFBRyxNQUFNLENBQUMsV0FBVjtRQUNFLE9BQUEsR0FBVSxDQUFDLENBQUMsR0FBRixDQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBaEIsRUFBeUIsU0FBQyxNQUFEO0FBQ2pDLGNBQUE7VUFBQSxJQUFHLE1BQU0sQ0FBQyxPQUFWO1lBQ0UsS0FBQSxHQUFVLENBQUMsTUFBTSxDQUFDLElBQVAsSUFBZSxNQUFNLENBQUMsSUFBdEIsSUFBOEIsTUFBTSxDQUFDLFFBQXJDLElBQWlELE1BQU0sQ0FBQyxRQUF4RCxJQUFvRSxNQUFNLENBQUMsUUFBNUUsQ0FBQSxHQUFxRixJQUFyRixHQUF5RixNQUFNLENBQUMsT0FBaEcsR0FBd0csSUFEcEg7V0FBQSxNQUFBO1lBR0UsS0FBQSxHQUFRLE1BQU0sQ0FBQyxJQUFQLElBQWUsTUFBTSxDQUFDLElBQXRCLElBQThCLE1BQU0sQ0FBQyxRQUFyQyxJQUFpRCxNQUFNLENBQUMsUUFBeEQsSUFBb0UsTUFBTSxDQUFDLFNBSHJGOztpQkFJQTtZQUNFLEtBQUEsRUFBTyxLQURUO1lBRUUsS0FBQSxFQUFPLE1BQU0sQ0FBQyxLQUZoQjs7UUFMaUMsQ0FBekI7UUFTVixVQUFBLEdBQWE7VUFDWCxxQkFBQSxFQUF1QixFQURaO1VBRVgsZUFBQSxFQUFpQixFQUZOOztRQUliLElBQWlELE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQXBCLENBQTRCLFVBQTVCLENBQUEsR0FBMEMsQ0FBQyxDQUE1RjtVQUFBLE9BQU8sQ0FBQyxLQUFSLENBQWMsVUFBZCxFQUEwQjtZQUFDLFFBQUEsRUFBVSxNQUFYO1dBQTFCLEVBQUE7O1FBQ0EsU0FBQSxHQUFZLGlCQUFpQixDQUFDLFFBQWxCLENBQTJCLE9BQTNCLEVBQW9DLFVBQXBDO2VBR1osTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFuQixDQUEwQixTQUExQixFQWxCRjs7SUFEUztXQXdCWCxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQXRCLENBQThCLGdCQUE5QjtFQXhFMEMsQ0FBNUM7O0VBMkVBLE1BQU0sQ0FBQyxTQUFQLENBQWlCLG9CQUFqQixFQUF1QyxTQUFBO0FBQ3JDLFdBQU87TUFDTCxRQUFBLEVBQVUsR0FETDtNQUVMLFVBQUEsRUFBWSx3QkFGUDs7RUFEOEIsQ0FBdkM7QUE3RUEiLCJmaWxlIjoiY29tcG9uZW50cy93aWRnZXRzL3NhbGVzLXN1bW1hcnkvc2FsZXMtc3VtbWFyeS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnaW1wYWMuY29tcG9uZW50cy53aWRnZXRzLnNhbGVzLXN1bW1hcnknLFtdKVxuXG5tb2R1bGUuY29udHJvbGxlcignV2lkZ2V0U2FsZXNTdW1tYXJ5Q3RybCcsICgkc2NvcGUsICRxLCBDaGFydEZvcm1hdHRlclN2YykgLT5cblxuICB3ID0gJHNjb3BlLndpZGdldFxuXG4gICMgRGVmaW5lIHNldHRpbmdzXG4gICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgJHNjb3BlLm9yZ0RlZmVycmVkID0gJHEuZGVmZXIoKVxuICAkc2NvcGUuY2hhcnRGaWx0ZXJzRGVmZXJyZWQgPSAkcS5kZWZlcigpXG4gICRzY29wZS5wYXJhbVNlbGVjdG9yRGVmZXJyZWQgPSAkcS5kZWZlcigpXG4gICRzY29wZS5kYXRlc1BpY2tlckRlZmVycmVkID0gJHEuZGVmZXIoKVxuICAkc2NvcGUuY2hhcnREZWZlcnJlZCA9ICRxLmRlZmVyKClcblxuICBzZXR0aW5nc1Byb21pc2VzID0gW1xuICAgICRzY29wZS5vcmdEZWZlcnJlZC5wcm9taXNlXG4gICAgJHNjb3BlLmNoYXJ0RmlsdGVyc0RlZmVycmVkLnByb21pc2VcbiAgICAkc2NvcGUucGFyYW1TZWxlY3RvckRlZmVycmVkLnByb21pc2VcbiAgICAkc2NvcGUuZGF0ZXNQaWNrZXJEZWZlcnJlZC5wcm9taXNlXG4gICAgJHNjb3BlLmNoYXJ0RGVmZXJyZWQucHJvbWlzZVxuICBdXG5cblxuICAjIFdpZGdldCBzcGVjaWZpYyBtZXRob2RzXG4gICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgdy5pbml0Q29udGV4dCA9IC0+XG4gICAgJHNjb3BlLmlzRGF0YUZvdW5kID0gIV8uaXNFbXB0eSh3LmNvbnRlbnQpICYmICFfLmlzRW1wdHkody5jb250ZW50Lmhpc3RfcGFyYW1ldGVycylcblxuICAgICRzY29wZS5maWx0ZXJPcHRpb25zID0gW1xuICAgICAge2xhYmVsOiAndmFsdWUgc29sZCAoaW5jbC4gdGF4ZXMpJywgdmFsdWU6ICdncm9zc192YWx1ZV9zb2xkJ30sXG4gICAgICB7bGFiZWw6ICd2YWx1ZSBzb2xkIChleGNsLiB0YXhlcyknLCB2YWx1ZTogJ25ldF92YWx1ZV9zb2xkJ30sXG4gICAgICB7bGFiZWw6ICdxdWFudGl0eSBzb2xkJywgdmFsdWU6ICdxdWFudGl0eV9zb2xkJ30sXG4gICAgICB7bGFiZWw6ICd2YWx1ZSBwdXJjaGFzZWQgKGluY2wuIHRheGVzKScsIHZhbHVlOiAnZ3Jvc3NfdmFsdWVfcHVyY2hhc2VkJ30sXG4gICAgICB7bGFiZWw6ICd2YWx1ZSBwdXJjaGFzZWQgKGV4Y2wuIHRheGVzKScsIHZhbHVlOiAnbmV0X3ZhbHVlX3B1cmNoYXNlZCd9LFxuICAgICAge2xhYmVsOiAncXVhbnRpdHkgcHVyY2hhc2VkJywgdmFsdWU6ICdxdWFudGl0eV9wdXJjaGFzZWQnfSxcbiAgICBdXG4gICAgJHNjb3BlLmZpbHRlck9wdGlvbnMgPSBbXG4gICAgICAkc2NvcGUuZmlsdGVyT3B0aW9uc1swXSxcbiAgICAgICRzY29wZS5maWx0ZXJPcHRpb25zWzFdLFxuICAgICAgJHNjb3BlLmZpbHRlck9wdGlvbnNbMl1cbiAgICBdIGlmIHcubWV0YWRhdGEuY3JpdGVyaWEgPT0gXCJjdXN0b21lclwiXG5cbiAgICAkc2NvcGUuZmlsdGVyID0gYW5ndWxhci5jb3B5KF8uZmluZCgkc2NvcGUuZmlsdGVyT3B0aW9ucywgKG8pIC0+XG4gICAgICBvLnZhbHVlID09IHcubWV0YWRhdGEuZmlsdGVyXG4gICAgKSB8fCAkc2NvcGUuZmlsdGVyT3B0aW9uc1swXSlcblxuXG4gICMgQ2hhcnQgZm9ybWF0aW5nIGZ1bmN0aW9uXG4gICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgJHNjb3BlLmRyYXdUcmlnZ2VyID0gJHEuZGVmZXIoKVxuICB3LmZvcm1hdCA9IC0+XG4gICAgaWYgJHNjb3BlLmlzRGF0YUZvdW5kXG4gICAgICBwaWVEYXRhID0gXy5tYXAgdy5jb250ZW50LnN1bW1hcnksIChlbnRpdHkpIC0+XG4gICAgICAgIGlmIGVudGl0eS5jb21wYW55XG4gICAgICAgICAgbGFiZWwgPSBcIiN7ZW50aXR5LmNvZGUgfHwgZW50aXR5Lm5hbWUgfHwgZW50aXR5LmxvY2F0aW9uIHx8IGVudGl0eS5pbmR1c3RyeSB8fCBlbnRpdHkuY3VzdG9tZXJ9ICgje2VudGl0eS5jb21wYW55fSlcIlxuICAgICAgICBlbHNlXG4gICAgICAgICAgbGFiZWwgPSBlbnRpdHkuY29kZSB8fCBlbnRpdHkubmFtZSB8fCBlbnRpdHkubG9jYXRpb24gfHwgZW50aXR5LmluZHVzdHJ5IHx8IGVudGl0eS5jdXN0b21lclxuICAgICAgICB7XG4gICAgICAgICAgbGFiZWw6IGxhYmVsLFxuICAgICAgICAgIHZhbHVlOiBlbnRpdHkudG90YWwsXG4gICAgICAgIH1cbiAgICAgIHBpZU9wdGlvbnMgPSB7XG4gICAgICAgIHBlcmNlbnRhZ2VJbm5lckN1dG91dDogNTAsXG4gICAgICAgIHRvb2x0aXBGb250U2l6ZTogMTIsXG4gICAgICB9XG4gICAgICBhbmd1bGFyLm1lcmdlKHBpZU9wdGlvbnMsIHtjdXJyZW5jeTogJ2hpZGUnfSkgaWYgJHNjb3BlLmZpbHRlci52YWx1ZS5pbmRleE9mKCdxdWFudGl0eScpID4gLTFcbiAgICAgIGNoYXJ0RGF0YSA9IENoYXJ0Rm9ybWF0dGVyU3ZjLnBpZUNoYXJ0KHBpZURhdGEsIHBpZU9wdGlvbnMpXG5cbiAgICAgICMgY2FsbHMgY2hhcnQuZHJhdygpXG4gICAgICAkc2NvcGUuZHJhd1RyaWdnZXIubm90aWZ5KGNoYXJ0RGF0YSlcblxuXG4gICMgV2lkZ2V0IGlzIHJlYWR5OiBjYW4gdHJpZ2dlciB0aGUgXCJ3YWl0IGZvciBzZXR0aWducyB0byBiZSByZWFkeVwiXG4gICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgJHNjb3BlLndpZGdldERlZmVycmVkLnJlc29sdmUoc2V0dGluZ3NQcm9taXNlcylcbilcblxubW9kdWxlLmRpcmVjdGl2ZSgnd2lkZ2V0U2FsZXNTdW1tYXJ5JywgLT5cbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIGNvbnRyb2xsZXI6ICdXaWRnZXRTYWxlc1N1bW1hcnlDdHJsJ1xuICB9XG4pXG4iXX0=

(function() {
  var module;

  module = angular.module('impac.components.widgets.sales-top-opportunities', []);

  module.controller('WidgetSalesTopOpportunitiesCtrl', function($scope, $q, ChartFormatterSvc, $filter) {
    var settingsPromises, w;
    w = $scope.widget;
    $scope.orgDeferred = $q.defer();
    settingsPromises = [$scope.orgDeferred.promise];
    w.initContext = function() {
      return $scope.isDataFound = angular.isDefined(w.content) && !_.isEmpty(w.content.opportunities);
    };
    w.processError = function(error) {
      if (error.code === 404) {
        return $scope.isDataFound = false;
      }
    };
    $scope.getOppDetails = function(anOpp) {
      var oppDetails;
      oppDetails = [];
      if (anOpp.amount) {
        oppDetails.push($filter('mnoCurrency')(anOpp.amount.amount, anOpp.amount.currency || 'AUD'));
      }
      if (anOpp.probability) {
        oppDetails.push("proba " + anOpp.probability + "%");
      }
      if (anOpp.sales_stage) {
        oppDetails.push(anOpp.sales_stage);
      }
      return oppDetails.join(' / ');
    };
    $scope.getOppClass = function(index) {
      switch (index) {
        case 0:
          return 'first';
        case 1:
          return 'second';
        case 2:
          return 'second';
        default:
          return '';
      }
    };
    return $scope.widgetDeferred.resolve(settingsPromises);
  });

  module.directive('widgetSalesTopOpportunities', function() {
    return {
      restrict: 'A',
      controller: 'WidgetSalesTopOpportunitiesCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy9zYWxlcy10b3Atb3Bwb3J0dW5pdGllcy9zYWxlcy10b3Atb3Bwb3J0dW5pdGllcy5kaXJlY3RpdmUuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQTs7RUFBQSxNQUFBLEdBQVMsT0FBTyxDQUFDLE1BQVIsQ0FBZSxrREFBZixFQUFrRSxFQUFsRTs7RUFFVCxNQUFNLENBQUMsVUFBUCxDQUFrQixpQ0FBbEIsRUFBcUQsU0FBQyxNQUFELEVBQVMsRUFBVCxFQUFhLGlCQUFiLEVBQWdDLE9BQWhDO0FBRW5ELFFBQUE7SUFBQSxDQUFBLEdBQUksTUFBTSxDQUFDO0lBSVgsTUFBTSxDQUFDLFdBQVAsR0FBcUIsRUFBRSxDQUFDLEtBQUgsQ0FBQTtJQUVyQixnQkFBQSxHQUFtQixDQUNqQixNQUFNLENBQUMsV0FBVyxDQUFDLE9BREY7SUFPbkIsQ0FBQyxDQUFDLFdBQUYsR0FBZ0IsU0FBQTthQUNkLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLE9BQU8sQ0FBQyxTQUFSLENBQWtCLENBQUMsQ0FBQyxPQUFwQixDQUFBLElBQWdDLENBQUMsQ0FBQyxDQUFDLE9BQUYsQ0FBVSxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQXBCO0lBRHhDO0lBSWhCLENBQUMsQ0FBQyxZQUFGLEdBQWlCLFNBQUMsS0FBRDtNQUVmLElBQUcsS0FBSyxDQUFDLElBQU4sS0FBYyxHQUFqQjtlQUNFLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLE1BRHZCOztJQUZlO0lBS2pCLE1BQU0sQ0FBQyxhQUFQLEdBQXVCLFNBQUMsS0FBRDtBQUNyQixVQUFBO01BQUEsVUFBQSxHQUFhO01BQ2IsSUFBZ0csS0FBSyxDQUFDLE1BQXRHO1FBQUEsVUFBVSxDQUFDLElBQVgsQ0FBZ0IsT0FBQSxDQUFRLGFBQVIsQ0FBQSxDQUF1QixLQUFLLENBQUMsTUFBTSxDQUFDLE1BQXBDLEVBQTRDLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBYixJQUF5QixLQUFyRSxDQUFoQixFQUFBOztNQUNBLElBQWtELEtBQUssQ0FBQyxXQUF4RDtRQUFBLFVBQVUsQ0FBQyxJQUFYLENBQWdCLFFBQUEsR0FBUyxLQUFLLENBQUMsV0FBZixHQUEyQixHQUEzQyxFQUFBOztNQUNBLElBQXNDLEtBQUssQ0FBQyxXQUE1QztRQUFBLFVBQVUsQ0FBQyxJQUFYLENBQWdCLEtBQUssQ0FBQyxXQUF0QixFQUFBOztBQUVBLGFBQU8sVUFBVSxDQUFDLElBQVgsQ0FBZ0IsS0FBaEI7SUFOYztJQVF2QixNQUFNLENBQUMsV0FBUCxHQUFxQixTQUFDLEtBQUQ7QUFDbkIsY0FBTyxLQUFQO0FBQUEsYUFDTyxDQURQO0FBQ2MsaUJBQU87QUFEckIsYUFFTyxDQUZQO0FBRWMsaUJBQU87QUFGckIsYUFHTyxDQUhQO0FBR2MsaUJBQU87QUFIckI7QUFJTyxpQkFBTztBQUpkO0lBRG1CO1dBVXJCLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBdEIsQ0FBOEIsZ0JBQTlCO0VBMUNtRCxDQUFyRDs7RUE2Q0EsTUFBTSxDQUFDLFNBQVAsQ0FBaUIsNkJBQWpCLEVBQWdELFNBQUE7QUFDOUMsV0FBTztNQUNMLFFBQUEsRUFBVSxHQURMO01BRUwsVUFBQSxFQUFZLGlDQUZQOztFQUR1QyxDQUFoRDtBQS9DQSIsImZpbGUiOiJjb21wb25lbnRzL3dpZGdldHMvc2FsZXMtdG9wLW9wcG9ydHVuaXRpZXMvc2FsZXMtdG9wLW9wcG9ydHVuaXRpZXMuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2ltcGFjLmNvbXBvbmVudHMud2lkZ2V0cy5zYWxlcy10b3Atb3Bwb3J0dW5pdGllcycsW10pXG5cbm1vZHVsZS5jb250cm9sbGVyKCdXaWRnZXRTYWxlc1RvcE9wcG9ydHVuaXRpZXNDdHJsJywgKCRzY29wZSwgJHEsIENoYXJ0Rm9ybWF0dGVyU3ZjLCAkZmlsdGVyKSAtPlxuXG4gIHcgPSAkc2NvcGUud2lkZ2V0XG5cbiAgIyBEZWZpbmUgc2V0dGluZ3NcbiAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAkc2NvcGUub3JnRGVmZXJyZWQgPSAkcS5kZWZlcigpXG5cbiAgc2V0dGluZ3NQcm9taXNlcyA9IFtcbiAgICAkc2NvcGUub3JnRGVmZXJyZWQucHJvbWlzZVxuICBdXG5cblxuICAjIFdpZGdldCBzcGVjaWZpYyBtZXRob2RzXG4gICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgdy5pbml0Q29udGV4dCA9IC0+XG4gICAgJHNjb3BlLmlzRGF0YUZvdW5kID0gYW5ndWxhci5pc0RlZmluZWQody5jb250ZW50KSAmJiAhXy5pc0VtcHR5KHcuY29udGVudC5vcHBvcnR1bml0aWVzKVxuXG4gICMgVE9ETzogc2hvdWxkIGl0IGJlIG1hbmFnZWQgaW4gYSBzZXJ2aWNlPyBpbiB0aGUgd2lkZ2V0IGRpcmVjdGl2ZT8gTXVzdCBpc0xvYWRpbmcgYW5kIGlzRGF0YUZvdW5kIGJlIGJvdW5kIHRvIHRoZSB3aWRnZXQgb2JqZWN0IG9yIHRvIHRoZSBzY29wZT9cbiAgdy5wcm9jZXNzRXJyb3IgPSAoZXJyb3IpIC0+XG4gICAgIyBUT0RPOiBiZXR0ZXIgZXJyb3IgbWFuYWdlbWVudFxuICAgIGlmIGVycm9yLmNvZGUgPT0gNDA0XG4gICAgICAkc2NvcGUuaXNEYXRhRm91bmQgPSBmYWxzZVxuXG4gICRzY29wZS5nZXRPcHBEZXRhaWxzID0gKGFuT3BwKSAtPlxuICAgIG9wcERldGFpbHMgPSBbXVxuICAgIG9wcERldGFpbHMucHVzaCgkZmlsdGVyKCdtbm9DdXJyZW5jeScpKGFuT3BwLmFtb3VudC5hbW91bnQsIGFuT3BwLmFtb3VudC5jdXJyZW5jeSB8fCAnQVVEJykpIGlmIGFuT3BwLmFtb3VudFxuICAgIG9wcERldGFpbHMucHVzaChcInByb2JhICN7YW5PcHAucHJvYmFiaWxpdHl9JVwiKSBpZiBhbk9wcC5wcm9iYWJpbGl0eVxuICAgIG9wcERldGFpbHMucHVzaChhbk9wcC5zYWxlc19zdGFnZSkgaWYgYW5PcHAuc2FsZXNfc3RhZ2VcblxuICAgIHJldHVybiBvcHBEZXRhaWxzLmpvaW4oJyAvICcpXG5cbiAgJHNjb3BlLmdldE9wcENsYXNzID0gKGluZGV4KSAtPlxuICAgIHN3aXRjaCBpbmRleFxuICAgICAgd2hlbiAwIHRoZW4gcmV0dXJuICdmaXJzdCdcbiAgICAgIHdoZW4gMSB0aGVuIHJldHVybiAnc2Vjb25kJ1xuICAgICAgd2hlbiAyIHRoZW4gcmV0dXJuICdzZWNvbmQnXG4gICAgICBlbHNlIHJldHVybiAnJ1xuXG5cbiAgIyBXaWRnZXQgaXMgcmVhZHk6IGNhbiB0cmlnZ2VyIHRoZSBcIndhaXQgZm9yIHNldHRpZ25zIHRvIGJlIHJlYWR5XCJcbiAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAkc2NvcGUud2lkZ2V0RGVmZXJyZWQucmVzb2x2ZShzZXR0aW5nc1Byb21pc2VzKVxuKVxuXG5tb2R1bGUuZGlyZWN0aXZlKCd3aWRnZXRTYWxlc1RvcE9wcG9ydHVuaXRpZXMnLCAtPlxuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgY29udHJvbGxlcjogJ1dpZGdldFNhbGVzVG9wT3Bwb3J0dW5pdGllc0N0cmwnXG4gIH1cbikiXX0=

(function() {
  var module;

  module = angular.module('impac.components.widgets-common.data-not-found', []);

  module.directive('commonDataNotFound', function($templateCache, $log, $http, ImpacAssets, ImpacTheming, ImpacMainSvc) {
    return {
      restrict: 'A',
      scope: {
        widgetEngine: '=',
        onDisplayAlerts: '&'
      },
      link: function(scope, element) {
        var baseDir, dir, hasMyobEssentialsOnly, image;
        scope.content = ImpacTheming.get().dataNotFoundConfig;
        baseDir = ImpacAssets.get('dataNotFound');
        if (scope.widgetEngine && baseDir.length > 0) {
          dir = baseDir.split('');
          dir = dir[dir.length - 1] !== '/' ? dir.concat('/').join('') : dir.join('');
          image = _.find(element.children().first().children(), function(elem) {
            return elem.id === 'not-found-bg';
          });
          image.onerror = function() {
            $log.warn("Missing data-not-found image for " + scope.widgetEngine);
            return image.remove();
          };
          image.src = dir + scope.widgetEngine + '.png';
        }
        hasMyobEssentialsOnly = ImpacMainSvc.config.currentOrganization.has_myob_essentials_only;
        scope.showAlertsTrigger = hasMyobEssentialsOnly && scope.widgetEngine.match(/.*accounts\/.*/);
        return scope.hasCallbackUrl = scope.content.linkUrlCallback != null;
      },
      template: $templateCache.get('widgets-common/data-not-found.tmpl.html')
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy1jb21tb24vZGF0YS1ub3QtZm91bmQvZGF0YS1ub3QtZm91bmQuZGlyZWN0aXZlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUE7O0VBQUEsTUFBQSxHQUFTLE9BQU8sQ0FBQyxNQUFSLENBQWUsZ0RBQWYsRUFBZ0UsRUFBaEU7O0VBRVQsTUFBTSxDQUFDLFNBQVAsQ0FBaUIsb0JBQWpCLEVBQXVDLFNBQUMsY0FBRCxFQUFpQixJQUFqQixFQUF1QixLQUF2QixFQUE4QixXQUE5QixFQUEyQyxZQUEzQyxFQUF5RCxZQUF6RDtBQUNyQyxXQUFPO01BQ0wsUUFBQSxFQUFVLEdBREw7TUFFTCxLQUFBLEVBQU87UUFDTCxZQUFBLEVBQWMsR0FEVDtRQUVMLGVBQUEsRUFBaUIsR0FGWjtPQUZGO01BTUwsSUFBQSxFQUFNLFNBQUMsS0FBRCxFQUFRLE9BQVI7QUFDSixZQUFBO1FBQUEsS0FBSyxDQUFDLE9BQU4sR0FBZ0IsWUFBWSxDQUFDLEdBQWIsQ0FBQSxDQUFrQixDQUFDO1FBQ25DLE9BQUEsR0FBVSxXQUFXLENBQUMsR0FBWixDQUFnQixjQUFoQjtRQUNWLElBQUcsS0FBSyxDQUFDLFlBQU4sSUFBdUIsT0FBTyxDQUFDLE1BQVIsR0FBaUIsQ0FBM0M7VUFFRSxHQUFBLEdBQU0sT0FBTyxDQUFDLEtBQVIsQ0FBYyxFQUFkO1VBQ04sR0FBQSxHQUFTLEdBQUksQ0FBQSxHQUFHLENBQUMsTUFBSixHQUFhLENBQWIsQ0FBSixLQUF1QixHQUExQixHQUNELEdBQUcsQ0FBQyxNQUFKLENBQVcsR0FBWCxDQUFlLENBQUMsSUFBaEIsQ0FBcUIsRUFBckIsQ0FEQyxHQUVELEdBQUcsQ0FBQyxJQUFKLENBQVMsRUFBVDtVQUVMLEtBQUEsR0FBUSxDQUFDLENBQUMsSUFBRixDQUFPLE9BQU8sQ0FBQyxRQUFSLENBQUEsQ0FBa0IsQ0FBQyxLQUFuQixDQUFBLENBQTBCLENBQUMsUUFBM0IsQ0FBQSxDQUFQLEVBQThDLFNBQUMsSUFBRDttQkFDcEQsSUFBSSxDQUFDLEVBQUwsS0FBVztVQUR5QyxDQUE5QztVQUdSLEtBQUssQ0FBQyxPQUFOLEdBQWdCLFNBQUE7WUFDZCxJQUFJLENBQUMsSUFBTCxDQUFVLG1DQUFBLEdBQW9DLEtBQUssQ0FBQyxZQUFwRDttQkFDQSxLQUFLLENBQUMsTUFBTixDQUFBO1VBRmM7VUFJaEIsS0FBSyxDQUFDLEdBQU4sR0FBWSxHQUFBLEdBQU0sS0FBSyxDQUFDLFlBQVosR0FBMkIsT0FkekM7O1FBZ0JBLHFCQUFBLEdBQXdCLFlBQVksQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUM7UUFDaEUsS0FBSyxDQUFDLGlCQUFOLEdBQTJCLHFCQUFBLElBQXlCLEtBQUssQ0FBQyxZQUFZLENBQUMsS0FBbkIsQ0FBeUIsZ0JBQXpCO2VBQ3BELEtBQUssQ0FBQyxjQUFOLEdBQXVCO01BckJuQixDQU5EO01BNkJMLFFBQUEsRUFBVSxjQUFjLENBQUMsR0FBZixDQUFtQix5Q0FBbkIsQ0E3Qkw7O0VBRDhCLENBQXZDO0FBRkEiLCJmaWxlIjoiY29tcG9uZW50cy93aWRnZXRzLWNvbW1vbi9kYXRhLW5vdC1mb3VuZC9kYXRhLW5vdC1mb3VuZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnaW1wYWMuY29tcG9uZW50cy53aWRnZXRzLWNvbW1vbi5kYXRhLW5vdC1mb3VuZCcsW10pXG5cbm1vZHVsZS5kaXJlY3RpdmUoJ2NvbW1vbkRhdGFOb3RGb3VuZCcsICgkdGVtcGxhdGVDYWNoZSwgJGxvZywgJGh0dHAsIEltcGFjQXNzZXRzLCBJbXBhY1RoZW1pbmcsIEltcGFjTWFpblN2YykgLT5cbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHNjb3BlOiB7XG4gICAgICB3aWRnZXRFbmdpbmU6ICc9J1xuICAgICAgb25EaXNwbGF5QWxlcnRzOiAnJidcbiAgICB9LFxuICAgIGxpbms6IChzY29wZSwgZWxlbWVudCkgLT5cbiAgICAgIHNjb3BlLmNvbnRlbnQgPSBJbXBhY1RoZW1pbmcuZ2V0KCkuZGF0YU5vdEZvdW5kQ29uZmlnXG4gICAgICBiYXNlRGlyID0gSW1wYWNBc3NldHMuZ2V0KCdkYXRhTm90Rm91bmQnKVxuICAgICAgaWYgc2NvcGUud2lkZ2V0RW5naW5lIGFuZCBiYXNlRGlyLmxlbmd0aCA+IDBcbiAgICAgICAgIyBjaGVja3MgZm9yIHRyYWlsaW5nIHNsYXNoIGFuZCBjb3JyZWN0cy5cbiAgICAgICAgZGlyID0gYmFzZURpci5zcGxpdCgnJylcbiAgICAgICAgZGlyID0gaWYgZGlyW2Rpci5sZW5ndGggLSAxXSAhPSAnLydcbiAgICAgICAgdGhlbiBkaXIuY29uY2F0KCcvJykuam9pbignJylcbiAgICAgICAgZWxzZSBkaXIuam9pbignJylcblxuICAgICAgICBpbWFnZSA9IF8uZmluZCBlbGVtZW50LmNoaWxkcmVuKCkuZmlyc3QoKS5jaGlsZHJlbigpLCAoZWxlbSkgLT5cbiAgICAgICAgICBlbGVtLmlkID09ICdub3QtZm91bmQtYmcnXG5cbiAgICAgICAgaW1hZ2Uub25lcnJvciA9IC0+XG4gICAgICAgICAgJGxvZy53YXJuKFwiTWlzc2luZyBkYXRhLW5vdC1mb3VuZCBpbWFnZSBmb3IgI3tzY29wZS53aWRnZXRFbmdpbmV9XCIpXG4gICAgICAgICAgaW1hZ2UucmVtb3ZlKClcblxuICAgICAgICBpbWFnZS5zcmMgPSBkaXIgKyBzY29wZS53aWRnZXRFbmdpbmUgKyAnLnBuZydcblxuICAgICAgaGFzTXlvYkVzc2VudGlhbHNPbmx5ID0gSW1wYWNNYWluU3ZjLmNvbmZpZy5jdXJyZW50T3JnYW5pemF0aW9uLmhhc19teW9iX2Vzc2VudGlhbHNfb25seVxuICAgICAgc2NvcGUuc2hvd0FsZXJ0c1RyaWdnZXIgPSAoaGFzTXlvYkVzc2VudGlhbHNPbmx5ICYmIHNjb3BlLndpZGdldEVuZ2luZS5tYXRjaCgvLiphY2NvdW50c1xcLy4qLykpXG4gICAgICBzY29wZS5oYXNDYWxsYmFja1VybCA9IHNjb3BlLmNvbnRlbnQubGlua1VybENhbGxiYWNrP1xuXG4gICAgdGVtcGxhdGU6ICR0ZW1wbGF0ZUNhY2hlLmdldCgnd2lkZ2V0cy1jb21tb24vZGF0YS1ub3QtZm91bmQudG1wbC5odG1sJyksXG4gIH1cbilcbiJdfQ==

(function() {
  var module;

  module = angular.module('impac.components.widgets-common.editable-title', []);

  module.controller('CommonEditableTitleCtrl', function($scope, ImpacWidgetsSvc) {
    var w;
    w = $scope.parentWidget;
    return $scope.updateName = function() {
      var data;
      if (w.name.length === 0) {
        w.name = w.originalName;
        return "Incorrect name";
      } else {
        data = {
          name: w.name
        };
        return ImpacWidgetsSvc.update(w, data).then(function(success) {
          return true;
        }, function(error) {
          return w.name = w.originalName;
        });
      }
    };
  });

  module.directive('commonEditableTitle', function($templateCache) {
    return {
      restrict: 'A',
      scope: {
        parentWidget: '='
      },
      template: $templateCache.get('widgets-common/editable-title.tmpl.html'),
      controller: 'CommonEditableTitleCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy1jb21tb24vZWRpdGFibGUtdGl0bGUvZWRpdGFibGUtdGl0bGUuZGlyZWN0aXZlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUE7O0VBQUEsTUFBQSxHQUFTLE9BQU8sQ0FBQyxNQUFSLENBQWUsZ0RBQWYsRUFBZ0UsRUFBaEU7O0VBRVQsTUFBTSxDQUFDLFVBQVAsQ0FBa0IseUJBQWxCLEVBQTZDLFNBQUMsTUFBRCxFQUFTLGVBQVQ7QUFFekMsUUFBQTtJQUFBLENBQUEsR0FBSSxNQUFNLENBQUM7V0FFWCxNQUFNLENBQUMsVUFBUCxHQUFvQixTQUFBO0FBQ2xCLFVBQUE7TUFBQSxJQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBUCxLQUFpQixDQUFwQjtRQUNFLENBQUMsQ0FBQyxJQUFGLEdBQVMsQ0FBQyxDQUFDO0FBQ1gsZUFBTyxpQkFGVDtPQUFBLE1BQUE7UUFJRSxJQUFBLEdBQU87VUFBRSxJQUFBLEVBQU0sQ0FBQyxDQUFDLElBQVY7O2VBQ1AsZUFBZSxDQUFDLE1BQWhCLENBQXVCLENBQXZCLEVBQXlCLElBQXpCLENBQThCLENBQUMsSUFBL0IsQ0FDRSxTQUFDLE9BQUQ7QUFDRSxpQkFBTztRQURULENBREYsRUFHRSxTQUFDLEtBQUQ7aUJBQ0UsQ0FBQyxDQUFDLElBQUYsR0FBUyxDQUFDLENBQUM7UUFEYixDQUhGLEVBTEY7O0lBRGtCO0VBSnFCLENBQTdDOztFQWtCQSxNQUFNLENBQUMsU0FBUCxDQUFpQixxQkFBakIsRUFBd0MsU0FBQyxjQUFEO0FBQ3RDLFdBQU87TUFDTCxRQUFBLEVBQVUsR0FETDtNQUVMLEtBQUEsRUFBTztRQUNMLFlBQUEsRUFBYyxHQURUO09BRkY7TUFLTCxRQUFBLEVBQVUsY0FBYyxDQUFDLEdBQWYsQ0FBbUIseUNBQW5CLENBTEw7TUFNTCxVQUFBLEVBQVkseUJBTlA7O0VBRCtCLENBQXhDO0FBcEJBIiwiZmlsZSI6ImNvbXBvbmVudHMvd2lkZ2V0cy1jb21tb24vZWRpdGFibGUtdGl0bGUvZWRpdGFibGUtdGl0bGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2ltcGFjLmNvbXBvbmVudHMud2lkZ2V0cy1jb21tb24uZWRpdGFibGUtdGl0bGUnLFtdKVxuXG5tb2R1bGUuY29udHJvbGxlcignQ29tbW9uRWRpdGFibGVUaXRsZUN0cmwnLCAoJHNjb3BlLCBJbXBhY1dpZGdldHNTdmMpIC0+XG5cbiAgICB3ID0gJHNjb3BlLnBhcmVudFdpZGdldFxuXG4gICAgJHNjb3BlLnVwZGF0ZU5hbWUgPSAtPlxuICAgICAgaWYgdy5uYW1lLmxlbmd0aCA9PSAwXG4gICAgICAgIHcubmFtZSA9IHcub3JpZ2luYWxOYW1lXG4gICAgICAgIHJldHVybiBcIkluY29ycmVjdCBuYW1lXCJcbiAgICAgIGVsc2VcbiAgICAgICAgZGF0YSA9IHsgbmFtZTogdy5uYW1lIH1cbiAgICAgICAgSW1wYWNXaWRnZXRzU3ZjLnVwZGF0ZSh3LGRhdGEpLnRoZW4oXG4gICAgICAgICAgKHN1Y2Nlc3MpLT5cbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgKGVycm9yKSAtPlxuICAgICAgICAgICAgdy5uYW1lID0gdy5vcmlnaW5hbE5hbWVcbiAgICAgICAgKVxuKVxuXG5tb2R1bGUuZGlyZWN0aXZlKCdjb21tb25FZGl0YWJsZVRpdGxlJywgKCR0ZW1wbGF0ZUNhY2hlKSAtPlxuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgc2NvcGU6IHtcbiAgICAgIHBhcmVudFdpZGdldDogJz0nXG4gICAgfSxcbiAgICB0ZW1wbGF0ZTogJHRlbXBsYXRlQ2FjaGUuZ2V0KCd3aWRnZXRzLWNvbW1vbi9lZGl0YWJsZS10aXRsZS50bXBsLmh0bWwnKSxcbiAgICBjb250cm9sbGVyOiAnQ29tbW9uRWRpdGFibGVUaXRsZUN0cmwnXG4gIH1cbilcbiJdfQ==

(function() {
  var module;

  module = angular.module('impac.components.widgets-common.top-buttons', []);

  module.controller('CommonTopButtonsCtrl', function($scope, $rootScope, $log, ImpacWidgetsSvc, ImpacAssets, ImpacUtilities) {
    var w;
    w = $scope.parentWidget;
    $scope.showConfirmDelete = false;
    $scope.isDeletePopoverLoading = false;
    w.isEditMode = false;
    $scope.deleteWidget = function() {
      $scope.isDeletePopoverLoading = true;
      return ImpacWidgetsSvc["delete"](w).then(function(success) {
        return true;
      }, function(errors) {
        return w.errors = ImpacUtilities.processRailsError(errors);
      })["finally"](function() {
        return $scope.isDeletePopoverLoading = false;
      });
    };
    return $scope.toggleEditMode = function() {
      if (!w.isLoading) {
        if (w.isEditMode) {
          w.isEditMode = false;
          return ImpacWidgetsSvc.initWidgetSettings(w);
        } else {
          return w.isEditMode = true;
        }
      }
    };
  });

  module.directive('commonTopButtons', function($templateCache) {
    return {
      restrict: 'A',
      scope: {
        parentWidget: '=',
        onRefresh: '='
      },
      template: $templateCache.get('widgets-common/top-buttons.tmpl.html'),
      controller: 'CommonTopButtonsCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy1jb21tb24vdG9wLWJ1dHRvbnMvdG9wLWJ1dHRvbnMuZGlyZWN0aXZlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUE7O0VBQUEsTUFBQSxHQUFTLE9BQU8sQ0FBQyxNQUFSLENBQWUsNkNBQWYsRUFBOEQsRUFBOUQ7O0VBQ1QsTUFBTSxDQUFDLFVBQVAsQ0FBa0Isc0JBQWxCLEVBQTBDLFNBQUMsTUFBRCxFQUFTLFVBQVQsRUFBcUIsSUFBckIsRUFBMkIsZUFBM0IsRUFBNEMsV0FBNUMsRUFBeUQsY0FBekQ7QUFFeEMsUUFBQTtJQUFBLENBQUEsR0FBSSxNQUFNLENBQUM7SUFFWCxNQUFNLENBQUMsaUJBQVAsR0FBMkI7SUFDM0IsTUFBTSxDQUFDLHNCQUFQLEdBQWdDO0lBRWhDLENBQUMsQ0FBQyxVQUFGLEdBQWU7SUFFZixNQUFNLENBQUMsWUFBUCxHQUFzQixTQUFBO01BQ3BCLE1BQU0sQ0FBQyxzQkFBUCxHQUFnQzthQUNoQyxlQUFlLENBQUMsUUFBRCxDQUFmLENBQXVCLENBQXZCLENBQXlCLENBQUMsSUFBMUIsQ0FDRSxTQUFDLE9BQUQ7QUFDRSxlQUFPO01BRFQsQ0FERixFQUdFLFNBQUMsTUFBRDtlQUNFLENBQUMsQ0FBQyxNQUFGLEdBQVcsY0FBYyxDQUFDLGlCQUFmLENBQWlDLE1BQWpDO01BRGIsQ0FIRixDQUtDLENBQUMsU0FBRCxDQUxELENBTUUsU0FBQTtlQUNFLE1BQU0sQ0FBQyxzQkFBUCxHQUFnQztNQURsQyxDQU5GO0lBRm9CO1dBWXRCLE1BQU0sQ0FBQyxjQUFQLEdBQXdCLFNBQUE7TUFDdEIsSUFBRyxDQUFDLENBQUMsQ0FBQyxTQUFOO1FBQ0UsSUFBRyxDQUFDLENBQUMsVUFBTDtVQUVFLENBQUMsQ0FBQyxVQUFGLEdBQWU7aUJBQ2YsZUFBZSxDQUFDLGtCQUFoQixDQUFtQyxDQUFuQyxFQUhGO1NBQUEsTUFBQTtpQkFNRSxDQUFDLENBQUMsVUFBRixHQUFlLEtBTmpCO1NBREY7O0lBRHNCO0VBckJnQixDQUExQzs7RUFnQ0EsTUFBTSxDQUFDLFNBQVAsQ0FBaUIsa0JBQWpCLEVBQXFDLFNBQUMsY0FBRDtBQUNuQyxXQUFPO01BQ0wsUUFBQSxFQUFVLEdBREw7TUFFTCxLQUFBLEVBQU87UUFDTCxZQUFBLEVBQWMsR0FEVDtRQUVMLFNBQUEsRUFBVyxHQUZOO09BRkY7TUFNTCxRQUFBLEVBQVUsY0FBYyxDQUFDLEdBQWYsQ0FBbUIsc0NBQW5CLENBTkw7TUFPTCxVQUFBLEVBQVksc0JBUFA7O0VBRDRCLENBQXJDO0FBakNBIiwiZmlsZSI6ImNvbXBvbmVudHMvd2lkZ2V0cy1jb21tb24vdG9wLWJ1dHRvbnMvdG9wLWJ1dHRvbnMuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2ltcGFjLmNvbXBvbmVudHMud2lkZ2V0cy1jb21tb24udG9wLWJ1dHRvbnMnLCBbXSlcbm1vZHVsZS5jb250cm9sbGVyKCdDb21tb25Ub3BCdXR0b25zQ3RybCcsICgkc2NvcGUsICRyb290U2NvcGUsICRsb2csIEltcGFjV2lkZ2V0c1N2YywgSW1wYWNBc3NldHMsIEltcGFjVXRpbGl0aWVzKSAtPlxuXG4gIHcgPSAkc2NvcGUucGFyZW50V2lkZ2V0XG5cbiAgJHNjb3BlLnNob3dDb25maXJtRGVsZXRlID0gZmFsc2VcbiAgJHNjb3BlLmlzRGVsZXRlUG9wb3ZlckxvYWRpbmcgPSBmYWxzZVxuXG4gIHcuaXNFZGl0TW9kZSA9IGZhbHNlXG5cbiAgJHNjb3BlLmRlbGV0ZVdpZGdldCA9IC0+XG4gICAgJHNjb3BlLmlzRGVsZXRlUG9wb3ZlckxvYWRpbmcgPSB0cnVlXG4gICAgSW1wYWNXaWRnZXRzU3ZjLmRlbGV0ZSh3KS50aGVuKFxuICAgICAgKHN1Y2Nlc3MpIC0+XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICAoZXJyb3JzKSAtPlxuICAgICAgICB3LmVycm9ycyA9IEltcGFjVXRpbGl0aWVzLnByb2Nlc3NSYWlsc0Vycm9yKGVycm9ycylcbiAgICApLmZpbmFsbHkoXG4gICAgICAtPlxuICAgICAgICAkc2NvcGUuaXNEZWxldGVQb3BvdmVyTG9hZGluZyA9IGZhbHNlXG4gICAgKVxuXG4gICRzY29wZS50b2dnbGVFZGl0TW9kZSA9IC0+XG4gICAgaWYgIXcuaXNMb2FkaW5nXG4gICAgICBpZiB3LmlzRWRpdE1vZGVcbiAgICAgICAgIyA9IHByZXNzICdDYW5jZWwnIGJ1dHRvblxuICAgICAgICB3LmlzRWRpdE1vZGUgPSBmYWxzZVxuICAgICAgICBJbXBhY1dpZGdldHNTdmMuaW5pdFdpZGdldFNldHRpbmdzKHcpXG4gICAgICBlbHNlXG4gICAgICAgICMgT3RoZXJ3aXNlLCB3ZSBwYXNzIGluIGVkaXQgbW9kZVxuICAgICAgICB3LmlzRWRpdE1vZGUgPSB0cnVlXG4pXG5cbm1vZHVsZS5kaXJlY3RpdmUoJ2NvbW1vblRvcEJ1dHRvbnMnLCAoJHRlbXBsYXRlQ2FjaGUpIC0+XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBzY29wZToge1xuICAgICAgcGFyZW50V2lkZ2V0OiAnPSdcbiAgICAgIG9uUmVmcmVzaDogJz0nXG4gICAgfSxcbiAgICB0ZW1wbGF0ZTogJHRlbXBsYXRlQ2FjaGUuZ2V0KCd3aWRnZXRzLWNvbW1vbi90b3AtYnV0dG9ucy50bXBsLmh0bWwnKSxcbiAgICBjb250cm9sbGVyOiAnQ29tbW9uVG9wQnV0dG9uc0N0cmwnXG4gIH1cbilcbiJdfQ==

(function() {
  var module;

  module = angular.module('impac.components.widgets-settings.account', []);

  module.controller('SettingAccountCtrl', function($scope, $filter) {
    var formatAmount, setting, w;
    w = $scope.parentWidget;
    setting = {};
    setting.key = "account";
    setting.isInitialized = false;
    setting.initialize = function() {
      w.selectedAccount = w.selectedAccount || null;
      if ((w.content != null) && (w.content.account_list != null) && (w.metadata != null) && (w.metadata.account_uid != null)) {
        w.selectedAccount = _.find(w.content.account_list, function(acc) {
          return acc.uid === w.metadata.account_uid;
        });
        return setting.isInitialized = true;
      }
    };
    setting.toMetadata = function() {
      if (w.selectedAccount != null) {
        return {
          account_uid: w.selectedAccount.uid
        };
      }
    };
    formatAmount = function(anAccount) {
      var balance;
      balance = anAccount.current_balance || anAccount.balance;
      return $filter('mnoCurrency')(balance, anAccount.currency);
    };
    $scope.formatLabel = function(anAccount) {
      if (anAccount.company != null) {
        return anAccount.company + " - " + anAccount.name + " (" + (formatAmount(anAccount)) + ")";
      } else {
        return anAccount.name + " (" + (formatAmount(anAccount)) + ")";
      }
    };
    w.settings.push(setting);
    return $scope.deferred.resolve($scope.parentWidget);
  });

  module.directive('settingAccount', function($templateCache) {
    return {
      restrict: 'A',
      scope: {
        parentWidget: '=',
        deferred: '=',
        label: '@',
        showLabel: '=?',
        onAccountSelected: '&'
      },
      link: function(scope, element) {
        if (!scope.label) {
          return scope.label = "Account to monitor";
        }
      },
      template: $templateCache.get('widgets-settings/account.tmpl.html'),
      controller: 'SettingAccountCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy1zZXR0aW5ncy9hY2NvdW50L2FjY291bnQuZGlyZWN0aXZlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUE7O0VBQUEsTUFBQSxHQUFTLE9BQU8sQ0FBQyxNQUFSLENBQWUsMkNBQWYsRUFBMkQsRUFBM0Q7O0VBRVQsTUFBTSxDQUFDLFVBQVAsQ0FBa0Isb0JBQWxCLEVBQXdDLFNBQUMsTUFBRCxFQUFTLE9BQVQ7QUFFdEMsUUFBQTtJQUFBLENBQUEsR0FBSSxNQUFNLENBQUM7SUFHWCxPQUFBLEdBQVU7SUFDVixPQUFPLENBQUMsR0FBUixHQUFjO0lBQ2QsT0FBTyxDQUFDLGFBQVIsR0FBd0I7SUFHeEIsT0FBTyxDQUFDLFVBQVIsR0FBcUIsU0FBQTtNQUNuQixDQUFDLENBQUMsZUFBRixHQUFvQixDQUFDLENBQUMsZUFBRixJQUFxQjtNQUN6QyxJQUFHLG1CQUFBLElBQWMsZ0NBQWQsSUFBeUMsb0JBQXpDLElBQXdELGdDQUEzRDtRQUNFLENBQUMsQ0FBQyxlQUFGLEdBQW9CLENBQUMsQ0FBQyxJQUFGLENBQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxZQUFqQixFQUErQixTQUFDLEdBQUQ7aUJBQ2pELEdBQUcsQ0FBQyxHQUFKLEtBQVcsQ0FBQyxDQUFDLFFBQVEsQ0FBQztRQUQyQixDQUEvQjtlQUdwQixPQUFPLENBQUMsYUFBUixHQUF3QixLQUoxQjs7SUFGbUI7SUFRckIsT0FBTyxDQUFDLFVBQVIsR0FBcUIsU0FBQTtNQUNuQixJQUFpRCx5QkFBakQ7QUFBQSxlQUFPO1VBQUUsV0FBQSxFQUFhLENBQUMsQ0FBQyxlQUFlLENBQUMsR0FBakM7VUFBUDs7SUFEbUI7SUFHckIsWUFBQSxHQUFlLFNBQUMsU0FBRDtBQUNiLFVBQUE7TUFBQSxPQUFBLEdBQVUsU0FBUyxDQUFDLGVBQVYsSUFBNkIsU0FBUyxDQUFDO0FBQ2pELGFBQU8sT0FBQSxDQUFRLGFBQVIsQ0FBQSxDQUF1QixPQUF2QixFQUErQixTQUFTLENBQUMsUUFBekM7SUFGTTtJQUlmLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLFNBQUMsU0FBRDtNQUNuQixJQUFHLHlCQUFIO2VBQ0ssU0FBUyxDQUFDLE9BQVgsR0FBbUIsS0FBbkIsR0FBd0IsU0FBUyxDQUFDLElBQWxDLEdBQXVDLElBQXZDLEdBQTBDLENBQUMsWUFBQSxDQUFhLFNBQWIsQ0FBRCxDQUExQyxHQUFtRSxJQUR2RTtPQUFBLE1BQUE7ZUFHSyxTQUFTLENBQUMsSUFBWCxHQUFnQixJQUFoQixHQUFtQixDQUFDLFlBQUEsQ0FBYSxTQUFiLENBQUQsQ0FBbkIsR0FBNEMsSUFIaEQ7O0lBRG1CO0lBTXJCLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBWCxDQUFnQixPQUFoQjtXQUlBLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBaEIsQ0FBd0IsTUFBTSxDQUFDLFlBQS9CO0VBbkNzQyxDQUF4Qzs7RUFzQ0EsTUFBTSxDQUFDLFNBQVAsQ0FBaUIsZ0JBQWpCLEVBQW1DLFNBQUMsY0FBRDtBQUNqQyxXQUFPO01BQ0wsUUFBQSxFQUFVLEdBREw7TUFFTCxLQUFBLEVBQU87UUFDTCxZQUFBLEVBQWMsR0FEVDtRQUVMLFFBQUEsRUFBVSxHQUZMO1FBR0wsS0FBQSxFQUFPLEdBSEY7UUFJTCxTQUFBLEVBQVcsSUFKTjtRQUtMLGlCQUFBLEVBQW1CLEdBTGQ7T0FGRjtNQVVMLElBQUEsRUFBTSxTQUFDLEtBQUQsRUFBUSxPQUFSO1FBQ0osSUFBc0MsQ0FBQyxLQUFLLENBQUMsS0FBN0M7aUJBQUEsS0FBSyxDQUFDLEtBQU4sR0FBYyxxQkFBZDs7TUFESSxDQVZEO01BYUosUUFBQSxFQUFVLGNBQWMsQ0FBQyxHQUFmLENBQW1CLG9DQUFuQixDQWJOO01BY0wsVUFBQSxFQUFZLG9CQWRQOztFQUQwQixDQUFuQztBQXhDQSIsImZpbGUiOiJjb21wb25lbnRzL3dpZGdldHMtc2V0dGluZ3MvYWNjb3VudC9hY2NvdW50LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdpbXBhYy5jb21wb25lbnRzLndpZGdldHMtc2V0dGluZ3MuYWNjb3VudCcsW10pXG5cbm1vZHVsZS5jb250cm9sbGVyKCdTZXR0aW5nQWNjb3VudEN0cmwnLCAoJHNjb3BlLCAkZmlsdGVyKSAtPlxuXG4gIHcgPSAkc2NvcGUucGFyZW50V2lkZ2V0XG5cbiAgIyBXaGF0IHdpbGwgYmUgcGFzc2VkIHRvIHBhcmVudFdpZGdldFxuICBzZXR0aW5nID0ge31cbiAgc2V0dGluZy5rZXkgPSBcImFjY291bnRcIlxuICBzZXR0aW5nLmlzSW5pdGlhbGl6ZWQgPSBmYWxzZVxuXG4gICMgaW5pdGlhbGl6YXRpb24gb2YgdGltZSByYW5nZSBwYXJhbWV0ZXJzIGZyb20gd2lkZ2V0LmNvbnRlbnQuaGlzdF9wYXJhbWV0ZXJzXG4gIHNldHRpbmcuaW5pdGlhbGl6ZSA9IC0+XG4gICAgdy5zZWxlY3RlZEFjY291bnQgPSB3LnNlbGVjdGVkQWNjb3VudCB8fCBudWxsXG4gICAgaWYgdy5jb250ZW50PyAmJiB3LmNvbnRlbnQuYWNjb3VudF9saXN0PyAmJiB3Lm1ldGFkYXRhPyAmJiB3Lm1ldGFkYXRhLmFjY291bnRfdWlkP1xuICAgICAgdy5zZWxlY3RlZEFjY291bnQgPSBfLmZpbmQody5jb250ZW50LmFjY291bnRfbGlzdCwgKGFjYykgLT5cbiAgICAgICAgYWNjLnVpZCA9PSB3Lm1ldGFkYXRhLmFjY291bnRfdWlkXG4gICAgICApXG4gICAgICBzZXR0aW5nLmlzSW5pdGlhbGl6ZWQgPSB0cnVlXG5cbiAgc2V0dGluZy50b01ldGFkYXRhID0gLT5cbiAgICByZXR1cm4geyBhY2NvdW50X3VpZDogdy5zZWxlY3RlZEFjY291bnQudWlkIH0gaWYgdy5zZWxlY3RlZEFjY291bnQ/XG5cbiAgZm9ybWF0QW1vdW50ID0gKGFuQWNjb3VudCkgLT5cbiAgICBiYWxhbmNlID0gYW5BY2NvdW50LmN1cnJlbnRfYmFsYW5jZSB8fCBhbkFjY291bnQuYmFsYW5jZVxuICAgIHJldHVybiAkZmlsdGVyKCdtbm9DdXJyZW5jeScpKGJhbGFuY2UsYW5BY2NvdW50LmN1cnJlbmN5KVxuXG4gICRzY29wZS5mb3JtYXRMYWJlbCA9IChhbkFjY291bnQpIC0+XG4gICAgaWYgYW5BY2NvdW50LmNvbXBhbnk/XG4gICAgICBcIiN7YW5BY2NvdW50LmNvbXBhbnl9IC0gI3thbkFjY291bnQubmFtZX0gKCN7Zm9ybWF0QW1vdW50KGFuQWNjb3VudCl9KVwiXG4gICAgZWxzZVxuICAgICAgXCIje2FuQWNjb3VudC5uYW1lfSAoI3tmb3JtYXRBbW91bnQoYW5BY2NvdW50KX0pXCJcblxuICB3LnNldHRpbmdzLnB1c2goc2V0dGluZylcblxuICAjIFNldHRpbmcgaXMgcmVhZHk6IHRyaWdnZXIgbG9hZCBjb250ZW50XG4gICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICRzY29wZS5kZWZlcnJlZC5yZXNvbHZlKCRzY29wZS5wYXJlbnRXaWRnZXQpXG4pXG5cbm1vZHVsZS5kaXJlY3RpdmUoJ3NldHRpbmdBY2NvdW50JywgKCR0ZW1wbGF0ZUNhY2hlKSAtPlxuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgc2NvcGU6IHtcbiAgICAgIHBhcmVudFdpZGdldDogJz0nXG4gICAgICBkZWZlcnJlZDogJz0nXG4gICAgICBsYWJlbDogJ0AnXG4gICAgICBzaG93TGFiZWw6ICc9PydcbiAgICAgIG9uQWNjb3VudFNlbGVjdGVkOiAnJidcbiAgICB9LFxuXG4gICAgbGluazogKHNjb3BlLCBlbGVtZW50KSAtPlxuICAgICAgc2NvcGUubGFiZWwgPSBcIkFjY291bnQgdG8gbW9uaXRvclwiIGlmICFzY29wZS5sYWJlbFxuXG4gICAgLHRlbXBsYXRlOiAkdGVtcGxhdGVDYWNoZS5nZXQoJ3dpZGdldHMtc2V0dGluZ3MvYWNjb3VudC50bXBsLmh0bWwnKSxcbiAgICBjb250cm9sbGVyOiAnU2V0dGluZ0FjY291bnRDdHJsJ1xuICB9XG4pXG4iXX0=

(function() {
  var module;

  module = angular.module('impac.components.widgets-settings.accounts-list', []);

  module.controller('SettingAccountsListCtrl', function($scope, ImpacWidgetsSvc) {
    var setting, w;
    w = $scope.parentWidget;
    w.moveAccountToAnotherList = function(account, src, dst, triggerUpdate) {
      if (triggerUpdate == null) {
        triggerUpdate = true;
      }
      if (_.isEmpty(src) || _.isEmpty(account)) {
        return;
      }
      dst || (dst = []);
      _.remove(src, function(acc) {
        return account.uid === acc.uid;
      });
      dst.push(account);
      if (triggerUpdate) {
        ImpacWidgetsSvc.updateWidgetSettings(w, false);
      }
      return null;
    };
    setting = {};
    setting.key = "accounts-list";
    setting.initialize = function() {
      var stashedAccounts;
      setting.isInitialized = false;
      w.remainingAccounts = [];
      w.selectedAccounts = [];
      if ((w.content != null) && !_.isEmpty(w.content.complete_list)) {
        w.remainingAccounts = angular.copy(w.content.complete_list);
        if (!_.isEmpty(w.metadata.accounts_list)) {
          angular.forEach(w.metadata.accounts_list, function(accUid) {
            var acc;
            acc = _.find(w.content.complete_list, function(acc) {
              return acc.uid === accUid;
            });
            return w.moveAccountToAnotherList(acc, w.remainingAccounts, w.selectedAccounts, false);
          });
        }
        stashedAccounts = angular.copy(w.remainingAccounts);
        return setting.isInitialized = true;
      }
    };
    setting.toMetadata = function() {
      if (setting.isInitialized) {
        return {
          accounts_list: _.map(w.selectedAccounts, (function(acc) {
            return acc.uid;
          }))
        };
      }
    };
    w.settings.push(setting);
    return $scope.deferred.resolve($scope.parentWidget);
  });

  module.directive('settingAccountsList', function() {
    return {
      restrict: 'A',
      scope: {
        parentWidget: '=',
        deferred: '='
      },
      controller: 'SettingAccountsListCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy1zZXR0aW5ncy9hY2NvdW50cy1saXN0L2FjY291bnRzLWxpc3QuZGlyZWN0aXZlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUE7O0VBQUEsTUFBQSxHQUFTLE9BQU8sQ0FBQyxNQUFSLENBQWUsaURBQWYsRUFBa0UsRUFBbEU7O0VBSVQsTUFBTSxDQUFDLFVBQVAsQ0FBa0IseUJBQWxCLEVBQTZDLFNBQUMsTUFBRCxFQUFTLGVBQVQ7QUFNM0MsUUFBQTtJQUFBLENBQUEsR0FBSSxNQUFNLENBQUM7SUFHWCxDQUFDLENBQUMsd0JBQUYsR0FBNkIsU0FBQyxPQUFELEVBQVUsR0FBVixFQUFlLEdBQWYsRUFBb0IsYUFBcEI7O1FBQW9CLGdCQUFjOztNQUM3RCxJQUFVLENBQUMsQ0FBQyxPQUFGLENBQVUsR0FBVixDQUFBLElBQWtCLENBQUMsQ0FBQyxPQUFGLENBQVUsT0FBVixDQUE1QjtBQUFBLGVBQUE7O01BQ0EsUUFBQSxNQUFRO01BQ1IsQ0FBQyxDQUFDLE1BQUYsQ0FBUyxHQUFULEVBQWMsU0FBQyxHQUFEO2VBQVMsT0FBTyxDQUFDLEdBQVIsS0FBZSxHQUFHLENBQUM7TUFBNUIsQ0FBZDtNQUNBLEdBQUcsQ0FBQyxJQUFKLENBQVMsT0FBVDtNQUNBLElBQWtELGFBQWxEO1FBQUEsZUFBZSxDQUFDLG9CQUFoQixDQUFxQyxDQUFyQyxFQUF3QyxLQUF4QyxFQUFBOztBQUNBLGFBQU87SUFOb0I7SUFZN0IsT0FBQSxHQUFVO0lBQ1YsT0FBTyxDQUFDLEdBQVIsR0FBYztJQUVkLE9BQU8sQ0FBQyxVQUFSLEdBQXFCLFNBQUE7QUFDbkIsVUFBQTtNQUFBLE9BQU8sQ0FBQyxhQUFSLEdBQXdCO01BQ3hCLENBQUMsQ0FBQyxpQkFBRixHQUFzQjtNQUN0QixDQUFDLENBQUMsZ0JBQUYsR0FBcUI7TUFFckIsSUFBRyxtQkFBQSxJQUFjLENBQUMsQ0FBQyxDQUFDLE9BQUYsQ0FBVSxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQXBCLENBQWxCO1FBQ0UsQ0FBQyxDQUFDLGlCQUFGLEdBQXNCLE9BQU8sQ0FBQyxJQUFSLENBQWEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUF2QjtRQUd0QixJQUFHLENBQUMsQ0FBQyxDQUFDLE9BQUYsQ0FBVSxDQUFDLENBQUMsUUFBUSxDQUFDLGFBQXJCLENBQUo7VUFDRSxPQUFPLENBQUMsT0FBUixDQUFnQixDQUFDLENBQUMsUUFBUSxDQUFDLGFBQTNCLEVBQTBDLFNBQUMsTUFBRDtBQUN4QyxnQkFBQTtZQUFBLEdBQUEsR0FBTSxDQUFDLENBQUMsSUFBRixDQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBakIsRUFBZ0MsU0FBQyxHQUFEO3FCQUNwQyxHQUFHLENBQUMsR0FBSixLQUFXO1lBRHlCLENBQWhDO21CQUdOLENBQUMsQ0FBQyx3QkFBRixDQUEyQixHQUEzQixFQUErQixDQUFDLENBQUMsaUJBQWpDLEVBQW1ELENBQUMsQ0FBQyxnQkFBckQsRUFBc0UsS0FBdEU7VUFKd0MsQ0FBMUMsRUFERjs7UUFPQSxlQUFBLEdBQWtCLE9BQU8sQ0FBQyxJQUFSLENBQWEsQ0FBQyxDQUFDLGlCQUFmO2VBQ2xCLE9BQU8sQ0FBQyxhQUFSLEdBQXdCLEtBWjFCOztJQUxtQjtJQW1CckIsT0FBTyxDQUFDLFVBQVIsR0FBcUIsU0FBQTtNQUNuQixJQUEyRSxPQUFPLENBQUMsYUFBbkY7QUFBQSxlQUFPO1VBQUUsYUFBQSxFQUFlLENBQUMsQ0FBQyxHQUFGLENBQU0sQ0FBQyxDQUFDLGdCQUFSLEVBQTBCLENBQUMsU0FBQyxHQUFEO21CQUFTLEdBQUcsQ0FBQztVQUFiLENBQUQsQ0FBMUIsQ0FBakI7VUFBUDs7SUFEbUI7SUFHckIsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFYLENBQWdCLE9BQWhCO1dBSUEsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFoQixDQUF3QixNQUFNLENBQUMsWUFBL0I7RUFsRDJDLENBQTdDOztFQXFEQSxNQUFNLENBQUMsU0FBUCxDQUFpQixxQkFBakIsRUFBd0MsU0FBQTtBQUN0QyxXQUFPO01BQ0wsUUFBQSxFQUFVLEdBREw7TUFFTCxLQUFBLEVBQU87UUFDTCxZQUFBLEVBQWMsR0FEVDtRQUVMLFFBQUEsRUFBVSxHQUZMO09BRkY7TUFNTCxVQUFBLEVBQVkseUJBTlA7O0VBRCtCLENBQXhDO0FBekRBIiwiZmlsZSI6ImNvbXBvbmVudHMvd2lkZ2V0cy1zZXR0aW5ncy9hY2NvdW50cy1saXN0L2FjY291bnRzLWxpc3QuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2ltcGFjLmNvbXBvbmVudHMud2lkZ2V0cy1zZXR0aW5ncy5hY2NvdW50cy1saXN0JywgW10pXG5cbiMgVGhlcmUgaXMgbm8gdGVtcGxhdGUgYXNzb2NpYXRlZCB0byB0aGlzIHNldHRpbmcsIGFuZCB0aG91Z2ggaXQgd29uJ3QgYXBwZWFyIGluIHRoZSAnc2V0dGluZ3MnIHBhbmVsXG4jIEhvd2V2ZXIsIGFzIGl0cyBtZXRhZGF0YSBoYXMgdG8gYmUgaW5pdGlhbGl6ZWQgZnJvbSwgYW5kIHNhdmVkIHRvIEltcGFjISwgd2UgYnVpbGQgTGlzdEFjY291bnRzIGFzIGEgc2V0dGluZ1xubW9kdWxlLmNvbnRyb2xsZXIoJ1NldHRpbmdBY2NvdW50c0xpc3RDdHJsJywgKCRzY29wZSwgSW1wYWNXaWRnZXRzU3ZjKSAtPlxuXG4gICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICMgIyMjIFBvcHVsYXRlIHRoZSB3aWRnZXRcbiAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICB3ID0gJHNjb3BlLnBhcmVudFdpZGdldFxuXG4gICMgVXNlZCBieSB0aGUgJ2RlbGV0ZScgYnV0dG9uIGluIHRoZSBhY2NvdW50cyBsaXN0IGFuZCBieSB0aGUgY29tYm9Cb3hcbiAgdy5tb3ZlQWNjb3VudFRvQW5vdGhlckxpc3QgPSAoYWNjb3VudCwgc3JjLCBkc3QsIHRyaWdnZXJVcGRhdGU9dHJ1ZSkgLT5cbiAgICByZXR1cm4gaWYgXy5pc0VtcHR5KHNyYykgfHwgXy5pc0VtcHR5KGFjY291bnQpXG4gICAgZHN0IHx8PSBbXVxuICAgIF8ucmVtb3ZlIHNyYywgKGFjYykgLT4gYWNjb3VudC51aWQgPT0gYWNjLnVpZFxuICAgIGRzdC5wdXNoKGFjY291bnQpXG4gICAgSW1wYWNXaWRnZXRzU3ZjLnVwZGF0ZVdpZGdldFNldHRpbmdzKHcsIGZhbHNlKSBpZiB0cmlnZ2VyVXBkYXRlXG4gICAgcmV0dXJuIG51bGxcblxuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAjICMjIyBTZXR0aW5nIGRlZmluaXRpb25cbiAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICBzZXR0aW5nID0ge31cbiAgc2V0dGluZy5rZXkgPSBcImFjY291bnRzLWxpc3RcIlxuXG4gIHNldHRpbmcuaW5pdGlhbGl6ZSA9IC0+XG4gICAgc2V0dGluZy5pc0luaXRpYWxpemVkID0gZmFsc2VcbiAgICB3LnJlbWFpbmluZ0FjY291bnRzID0gW11cbiAgICB3LnNlbGVjdGVkQWNjb3VudHMgPSBbXVxuXG4gICAgaWYgdy5jb250ZW50PyAmJiAhXy5pc0VtcHR5KHcuY29udGVudC5jb21wbGV0ZV9saXN0KVxuICAgICAgdy5yZW1haW5pbmdBY2NvdW50cyA9IGFuZ3VsYXIuY29weSh3LmNvbnRlbnQuY29tcGxldGVfbGlzdClcbiAgICAgICMgSW1wYWMhIHJldHVybnMgdGhlIGxpc3Qgb2YgYWxsIHRoZSBhY2NvdW50cywgYW5kIHdlIHdhbnQgdGhhdDpcbiAgICAgICMgY29tcGxldGVMaXN0ICsgc2F2ZWRMaXN0ID0gbGlzdCBvZiBhbGwgYWNjb3VudHNcbiAgICAgIGlmICFfLmlzRW1wdHkody5tZXRhZGF0YS5hY2NvdW50c19saXN0KVxuICAgICAgICBhbmd1bGFyLmZvckVhY2gody5tZXRhZGF0YS5hY2NvdW50c19saXN0LCAoYWNjVWlkKSAtPlxuICAgICAgICAgIGFjYyA9IF8uZmluZCh3LmNvbnRlbnQuY29tcGxldGVfbGlzdCwgKGFjYykgLT5cbiAgICAgICAgICAgIGFjYy51aWQgPT0gYWNjVWlkXG4gICAgICAgICAgKVxuICAgICAgICAgIHcubW92ZUFjY291bnRUb0Fub3RoZXJMaXN0KGFjYyx3LnJlbWFpbmluZ0FjY291bnRzLHcuc2VsZWN0ZWRBY2NvdW50cyxmYWxzZSlcbiAgICAgICAgKVxuICAgICAgc3Rhc2hlZEFjY291bnRzID0gYW5ndWxhci5jb3B5KHcucmVtYWluaW5nQWNjb3VudHMpXG4gICAgICBzZXR0aW5nLmlzSW5pdGlhbGl6ZWQgPSB0cnVlXG5cbiAgc2V0dGluZy50b01ldGFkYXRhID0gLT5cbiAgICByZXR1cm4geyBhY2NvdW50c19saXN0OiBfLm1hcCh3LnNlbGVjdGVkQWNjb3VudHMsICgoYWNjKSAtPiBhY2MudWlkKSkgfSBpZiBzZXR0aW5nLmlzSW5pdGlhbGl6ZWRcblxuICB3LnNldHRpbmdzLnB1c2goc2V0dGluZylcblxuICAjIFNldHRpbmcgaXMgcmVhZHk6IHRyaWdnZXIgbG9hZCBjb250ZW50XG4gICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICRzY29wZS5kZWZlcnJlZC5yZXNvbHZlKCRzY29wZS5wYXJlbnRXaWRnZXQpXG4pXG5cbm1vZHVsZS5kaXJlY3RpdmUoJ3NldHRpbmdBY2NvdW50c0xpc3QnLCAoKSAtPlxuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgc2NvcGU6IHtcbiAgICAgIHBhcmVudFdpZGdldDogJz0nXG4gICAgICBkZWZlcnJlZDogJz0nXG4gICAgfSxcbiAgICBjb250cm9sbGVyOiAnU2V0dGluZ0FjY291bnRzTGlzdEN0cmwnXG4gIH1cbilcbiJdfQ==

(function() {
  var module;

  module = angular.module('impac.components.widgets-settings.chart-filters', []);

  module.controller('SettingChartFiltersCtrl', function($scope) {
    var setting, w;
    w = $scope.parentWidget;
    setting = {};
    setting.key = "chart-filters";
    setting.isInitialized = false;
    setting.initialize = function() {
      if ((w.content != null) && (w.content.chart_filter != null) && ($scope.filterCriteria = w.content.chart_filter.criteria)) {
        $scope.maxEntities = w.content.chart_filter.max;
        $scope.entityType = w.content.chart_filter.entity_type;
        $scope.filterLabel = w.content.chart_filter.filter_label.replace(/_/g, " ");
        if ($scope.filterCriteria === "number") {
          $scope.filterValuePercentage = 80;
          $scope.filterValueNumber = w.content.chart_filter.value;
        } else {
          $scope.filterValuePercentage = w.content.chart_filter.value;
          $scope.filterValueNumber = Math.round($scope.maxEntities / 2);
        }
        return setting.isInitialized = true;
      }
    };
    setting.toMetadata = function() {
      var filterValue;
      if ((w.content != null) && (w.content.chart_filter != null)) {
        if ($scope.filterCriteria === "percentage") {
          filterValue = $scope.filterValuePercentage;
        } else {
          filterValue = $scope.filterValueNumber;
        }
        return {
          chart_filter: {
            criteria: $scope.filterCriteria,
            value: filterValue
          }
        };
      } else {
        return {};
      }
    };
    w.settings.push(setting);
    return $scope.deferred.resolve($scope.parentWidget);
  });

  module.directive('settingChartFilters', function($templateCache) {
    return {
      restrict: 'A',
      scope: {
        parentWidget: '=',
        deferred: '='
      },
      template: $templateCache.get('widgets-settings/chart-filters.tmpl.html'),
      controller: 'SettingChartFiltersCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy1zZXR0aW5ncy9jaGFydC1maWx0ZXJzL2NoYXJ0LWZpbHRlcnMuZGlyZWN0aXZlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUE7O0VBQUEsTUFBQSxHQUFTLE9BQU8sQ0FBQyxNQUFSLENBQWUsaURBQWYsRUFBaUUsRUFBakU7O0VBRVQsTUFBTSxDQUFDLFVBQVAsQ0FBa0IseUJBQWxCLEVBQTZDLFNBQUMsTUFBRDtBQUUzQyxRQUFBO0lBQUEsQ0FBQSxHQUFJLE1BQU0sQ0FBQztJQUVYLE9BQUEsR0FBVTtJQUNWLE9BQU8sQ0FBQyxHQUFSLEdBQWM7SUFDZCxPQUFPLENBQUMsYUFBUixHQUF3QjtJQUV4QixPQUFPLENBQUMsVUFBUixHQUFxQixTQUFBO01BQ25CLElBQUcsbUJBQUEsSUFBYyxnQ0FBZCxJQUF5QyxDQUFBLE1BQU0sQ0FBQyxjQUFQLEdBQXdCLENBQUMsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFFBQS9DLENBQTVDO1FBQ0UsTUFBTSxDQUFDLFdBQVAsR0FBcUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUM7UUFDNUMsTUFBTSxDQUFDLFVBQVAsR0FBb0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUM7UUFDM0MsTUFBTSxDQUFDLFdBQVAsR0FBcUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLE9BQXBDLENBQTRDLElBQTVDLEVBQWlELEdBQWpEO1FBRXJCLElBQUcsTUFBTSxDQUFDLGNBQVAsS0FBeUIsUUFBNUI7VUFDRSxNQUFNLENBQUMscUJBQVAsR0FBK0I7VUFDL0IsTUFBTSxDQUFDLGlCQUFQLEdBQTJCLENBQUMsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLE1BRnBEO1NBQUEsTUFBQTtVQUlFLE1BQU0sQ0FBQyxxQkFBUCxHQUErQixDQUFDLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQztVQUN0RCxNQUFNLENBQUMsaUJBQVAsR0FBMkIsSUFBSSxDQUFDLEtBQUwsQ0FBVyxNQUFNLENBQUMsV0FBUCxHQUFtQixDQUE5QixFQUw3Qjs7ZUFNQSxPQUFPLENBQUMsYUFBUixHQUF3QixLQVgxQjs7SUFEbUI7SUFjckIsT0FBTyxDQUFDLFVBQVIsR0FBcUIsU0FBQTtBQUNuQixVQUFBO01BQUEsSUFBRyxtQkFBQSxJQUFjLGdDQUFqQjtRQUNFLElBQUcsTUFBTSxDQUFDLGNBQVAsS0FBeUIsWUFBNUI7VUFDRSxXQUFBLEdBQWMsTUFBTSxDQUFDLHNCQUR2QjtTQUFBLE1BQUE7VUFHRSxXQUFBLEdBQWMsTUFBTSxDQUFDLGtCQUh2Qjs7QUFJQSxlQUFPO1VBQUUsWUFBQSxFQUFjO1lBQUMsUUFBQSxFQUFVLE1BQU0sQ0FBQyxjQUFsQjtZQUFrQyxLQUFBLEVBQU8sV0FBekM7V0FBaEI7VUFMVDtPQUFBLE1BQUE7QUFPRSxlQUFPLEdBUFQ7O0lBRG1CO0lBVXJCLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBWCxDQUFnQixPQUFoQjtXQUlBLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBaEIsQ0FBd0IsTUFBTSxDQUFDLFlBQS9CO0VBcEMyQyxDQUE3Qzs7RUF1Q0EsTUFBTSxDQUFDLFNBQVAsQ0FBaUIscUJBQWpCLEVBQXdDLFNBQUMsY0FBRDtBQUN0QyxXQUFPO01BQ0wsUUFBQSxFQUFVLEdBREw7TUFFTCxLQUFBLEVBQU87UUFDTCxZQUFBLEVBQWMsR0FEVDtRQUVMLFFBQUEsRUFBVSxHQUZMO09BRkY7TUFNTCxRQUFBLEVBQVUsY0FBYyxDQUFDLEdBQWYsQ0FBbUIsMENBQW5CLENBTkw7TUFPTCxVQUFBLEVBQVkseUJBUFA7O0VBRCtCLENBQXhDO0FBekNBIiwiZmlsZSI6ImNvbXBvbmVudHMvd2lkZ2V0cy1zZXR0aW5ncy9jaGFydC1maWx0ZXJzL2NoYXJ0LWZpbHRlcnMuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2ltcGFjLmNvbXBvbmVudHMud2lkZ2V0cy1zZXR0aW5ncy5jaGFydC1maWx0ZXJzJyxbXSlcblxubW9kdWxlLmNvbnRyb2xsZXIoJ1NldHRpbmdDaGFydEZpbHRlcnNDdHJsJywgKCRzY29wZSkgLT5cblxuICB3ID0gJHNjb3BlLnBhcmVudFdpZGdldFxuXG4gIHNldHRpbmcgPSB7fVxuICBzZXR0aW5nLmtleSA9IFwiY2hhcnQtZmlsdGVyc1wiXG4gIHNldHRpbmcuaXNJbml0aWFsaXplZCA9IGZhbHNlXG5cbiAgc2V0dGluZy5pbml0aWFsaXplID0gLT5cbiAgICBpZiB3LmNvbnRlbnQ/ICYmIHcuY29udGVudC5jaGFydF9maWx0ZXI/ICYmICRzY29wZS5maWx0ZXJDcml0ZXJpYSA9IHcuY29udGVudC5jaGFydF9maWx0ZXIuY3JpdGVyaWFcbiAgICAgICRzY29wZS5tYXhFbnRpdGllcyA9IHcuY29udGVudC5jaGFydF9maWx0ZXIubWF4XG4gICAgICAkc2NvcGUuZW50aXR5VHlwZSA9IHcuY29udGVudC5jaGFydF9maWx0ZXIuZW50aXR5X3R5cGVcbiAgICAgICRzY29wZS5maWx0ZXJMYWJlbCA9IHcuY29udGVudC5jaGFydF9maWx0ZXIuZmlsdGVyX2xhYmVsLnJlcGxhY2UoL18vZyxcIiBcIilcblxuICAgICAgaWYgJHNjb3BlLmZpbHRlckNyaXRlcmlhID09IFwibnVtYmVyXCJcbiAgICAgICAgJHNjb3BlLmZpbHRlclZhbHVlUGVyY2VudGFnZSA9IDgwXG4gICAgICAgICRzY29wZS5maWx0ZXJWYWx1ZU51bWJlciA9IHcuY29udGVudC5jaGFydF9maWx0ZXIudmFsdWVcbiAgICAgIGVsc2VcbiAgICAgICAgJHNjb3BlLmZpbHRlclZhbHVlUGVyY2VudGFnZSA9IHcuY29udGVudC5jaGFydF9maWx0ZXIudmFsdWVcbiAgICAgICAgJHNjb3BlLmZpbHRlclZhbHVlTnVtYmVyID0gTWF0aC5yb3VuZCgkc2NvcGUubWF4RW50aXRpZXMvMilcbiAgICAgIHNldHRpbmcuaXNJbml0aWFsaXplZCA9IHRydWVcblxuICBzZXR0aW5nLnRvTWV0YWRhdGEgPSAtPlxuICAgIGlmIHcuY29udGVudD8gJiYgdy5jb250ZW50LmNoYXJ0X2ZpbHRlcj9cbiAgICAgIGlmICRzY29wZS5maWx0ZXJDcml0ZXJpYSA9PSBcInBlcmNlbnRhZ2VcIlxuICAgICAgICBmaWx0ZXJWYWx1ZSA9ICRzY29wZS5maWx0ZXJWYWx1ZVBlcmNlbnRhZ2VcbiAgICAgIGVsc2VcbiAgICAgICAgZmlsdGVyVmFsdWUgPSAkc2NvcGUuZmlsdGVyVmFsdWVOdW1iZXJcbiAgICAgIHJldHVybiB7IGNoYXJ0X2ZpbHRlcjoge2NyaXRlcmlhOiAkc2NvcGUuZmlsdGVyQ3JpdGVyaWEsIHZhbHVlOiBmaWx0ZXJWYWx1ZX0gfVxuICAgIGVsc2VcbiAgICAgIHJldHVybiB7fVxuXG4gIHcuc2V0dGluZ3MucHVzaChzZXR0aW5nKVxuXG4gICMgU2V0dGluZyBpcyByZWFkeTogdHJpZ2dlciBsb2FkIGNvbnRlbnRcbiAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgJHNjb3BlLmRlZmVycmVkLnJlc29sdmUoJHNjb3BlLnBhcmVudFdpZGdldClcbilcblxubW9kdWxlLmRpcmVjdGl2ZSgnc2V0dGluZ0NoYXJ0RmlsdGVycycsICgkdGVtcGxhdGVDYWNoZSkgLT5cbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHNjb3BlOiB7XG4gICAgICBwYXJlbnRXaWRnZXQ6ICc9J1xuICAgICAgZGVmZXJyZWQ6ICc9J1xuICAgIH0sXG4gICAgdGVtcGxhdGU6ICR0ZW1wbGF0ZUNhY2hlLmdldCgnd2lkZ2V0cy1zZXR0aW5ncy9jaGFydC1maWx0ZXJzLnRtcGwuaHRtbCcpLFxuICAgIGNvbnRyb2xsZXI6ICdTZXR0aW5nQ2hhcnRGaWx0ZXJzQ3RybCdcbiAgfVxuKVxuIl19

(function() {
  var module;

  module = angular.module('impac.components.widgets-settings.dates-picker', []);

  module.directive('settingDatesPicker', function($templateCache, $filter, ImpacWidgetsSvc, $timeout) {
    return {
      restrict: 'A',
      scope: {
        parentWidget: '=',
        deferred: '=',
        fromDate: '=from',
        toDate: '=to',
        keepToday: '='
      },
      template: $templateCache.get('widgets-settings/dates-picker.tmpl.html'),
      link: function(scope) {
        var isToToday, setting, w;
        w = scope.parentWidget;
        setting = {};
        setting.key = "dates-picker";
        scope.calendarFrom = {
          opened: false,
          value: new Date(new Date().getFullYear(), 0, 1),
          toggle: function() {
            scope.calendarFrom.opened = !scope.calendarFrom.opened;
            return scope.calendarTo.opened = false;
          }
        };
        scope.calendarTo = {
          opened: false,
          value: new Date(),
          toggle: function() {
            scope.calendarFrom.opened = false;
            return scope.calendarTo.opened = !scope.calendarTo.opened;
          }
        };
        setting.initialize = function() {
          return $timeout(function() {
            var d, m, parsedFrom, parsedTo, y;
            scope.changed = false;
            if (Date.parse(scope.fromDate)) {
              parsedFrom = scope.fromDate.split('-');
              y = parsedFrom[0];
              m = parsedFrom[1] - 1;
              d = parsedFrom[2];
              scope.calendarFrom.value = new Date(y, m, d);
            } else {
              scope.calendarFrom.value = new Date(new Date().getFullYear(), 0, 1);
            }
            if (Date.parse(scope.toDate) && !scope.keepToday) {
              parsedTo = scope.toDate.split('-');
              y = parsedTo[0];
              m = parsedTo[1] - 1;
              d = parsedTo[2];
              return scope.calendarTo.value = new Date(y, m, d);
            } else {
              return scope.calendarTo.value = new Date();
            }
          });
        };
        isToToday = function() {
          return (scope.calendarTo.value.getFullYear() === new Date().getFullYear()) && (scope.calendarTo.value.getMonth() === new Date().getMonth()) && (scope.calendarTo.value.getDate() === new Date().getDate());
        };
        setting.toMetadata = function() {
          return {
            hist_parameters: {
              from: $filter('date')(scope.calendarFrom.value, 'yyyy-MM-dd'),
              to: $filter('date')(scope.calendarTo.value, 'yyyy-MM-dd'),
              period: "RANGE",
              keep_today: isToToday()
            }
          };
        };
        scope.showApplyButton = function() {
          return scope.changed = true;
        };
        scope.applyChanges = function() {
          ImpacWidgetsSvc.updateWidgetSettings(w, true);
          return scope.changed = false;
        };
        w.settings.push(setting);
        return scope.deferred.resolve(setting);
      }
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy1zZXR0aW5ncy9kYXRlcy1waWNrZXIvZGF0ZXMtcGlja2VyLmRpcmVjdGl2ZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBOztFQUFBLE1BQUEsR0FBUyxPQUFPLENBQUMsTUFBUixDQUFlLGdEQUFmLEVBQWdFLEVBQWhFOztFQUVULE1BQU0sQ0FBQyxTQUFQLENBQWlCLG9CQUFqQixFQUF1QyxTQUFDLGNBQUQsRUFBaUIsT0FBakIsRUFBMEIsZUFBMUIsRUFBMkMsUUFBM0M7QUFDckMsV0FBTztNQUNMLFFBQUEsRUFBVSxHQURMO01BRUwsS0FBQSxFQUFPO1FBQ0wsWUFBQSxFQUFjLEdBRFQ7UUFFTCxRQUFBLEVBQVUsR0FGTDtRQUdMLFFBQUEsRUFBVSxPQUhMO1FBSUwsTUFBQSxFQUFRLEtBSkg7UUFLTCxTQUFBLEVBQVcsR0FMTjtPQUZGO01BU0wsUUFBQSxFQUFVLGNBQWMsQ0FBQyxHQUFmLENBQW1CLHlDQUFuQixDQVRMO01BV0wsSUFBQSxFQUFNLFNBQUMsS0FBRDtBQUNKLFlBQUE7UUFBQSxDQUFBLEdBQUksS0FBSyxDQUFDO1FBRVYsT0FBQSxHQUFVO1FBQ1YsT0FBTyxDQUFDLEdBQVIsR0FBYztRQUVkLEtBQUssQ0FBQyxZQUFOLEdBQ0U7VUFBQSxNQUFBLEVBQVEsS0FBUjtVQUNBLEtBQUEsRUFBVyxJQUFBLElBQUEsQ0FBUyxJQUFBLElBQUEsQ0FBQSxDQUFNLENBQUMsV0FBUCxDQUFBLENBQVQsRUFBK0IsQ0FBL0IsRUFBa0MsQ0FBbEMsQ0FEWDtVQUVBLE1BQUEsRUFBUSxTQUFBO1lBQ04sS0FBSyxDQUFDLFlBQVksQ0FBQyxNQUFuQixHQUE0QixDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUM7bUJBQ2hELEtBQUssQ0FBQyxVQUFVLENBQUMsTUFBakIsR0FBMEI7VUFGcEIsQ0FGUjs7UUFNRixLQUFLLENBQUMsVUFBTixHQUNFO1VBQUEsTUFBQSxFQUFRLEtBQVI7VUFDQSxLQUFBLEVBQVcsSUFBQSxJQUFBLENBQUEsQ0FEWDtVQUVBLE1BQUEsRUFBUSxTQUFBO1lBQ04sS0FBSyxDQUFDLFlBQVksQ0FBQyxNQUFuQixHQUE0QjttQkFDNUIsS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFqQixHQUEwQixDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUM7VUFGdEMsQ0FGUjs7UUFNRixPQUFPLENBQUMsVUFBUixHQUFxQixTQUFBO2lCQUVuQixRQUFBLENBQVMsU0FBQTtBQUNQLGdCQUFBO1lBQUEsS0FBSyxDQUFDLE9BQU4sR0FBZ0I7WUFFaEIsSUFBRyxJQUFJLENBQUMsS0FBTCxDQUFXLEtBQUssQ0FBQyxRQUFqQixDQUFIO2NBQ0UsVUFBQSxHQUFhLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBZixDQUFxQixHQUFyQjtjQUNiLENBQUEsR0FBSSxVQUFXLENBQUEsQ0FBQTtjQUNmLENBQUEsR0FBSSxVQUFXLENBQUEsQ0FBQSxDQUFYLEdBQWdCO2NBQ3BCLENBQUEsR0FBSSxVQUFXLENBQUEsQ0FBQTtjQUNmLEtBQUssQ0FBQyxZQUFZLENBQUMsS0FBbkIsR0FBK0IsSUFBQSxJQUFBLENBQUssQ0FBTCxFQUFPLENBQVAsRUFBUyxDQUFULEVBTGpDO2FBQUEsTUFBQTtjQU9FLEtBQUssQ0FBQyxZQUFZLENBQUMsS0FBbkIsR0FBK0IsSUFBQSxJQUFBLENBQVMsSUFBQSxJQUFBLENBQUEsQ0FBTSxDQUFDLFdBQVAsQ0FBQSxDQUFULEVBQStCLENBQS9CLEVBQWtDLENBQWxDLEVBUGpDOztZQVNBLElBQUcsSUFBSSxDQUFDLEtBQUwsQ0FBVyxLQUFLLENBQUMsTUFBakIsQ0FBQSxJQUE0QixDQUFDLEtBQUssQ0FBQyxTQUF0QztjQUNFLFFBQUEsR0FBVyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQWIsQ0FBbUIsR0FBbkI7Y0FDWCxDQUFBLEdBQUksUUFBUyxDQUFBLENBQUE7Y0FDYixDQUFBLEdBQUksUUFBUyxDQUFBLENBQUEsQ0FBVCxHQUFjO2NBQ2xCLENBQUEsR0FBSSxRQUFTLENBQUEsQ0FBQTtxQkFDYixLQUFLLENBQUMsVUFBVSxDQUFDLEtBQWpCLEdBQTZCLElBQUEsSUFBQSxDQUFLLENBQUwsRUFBTyxDQUFQLEVBQVMsQ0FBVCxFQUwvQjthQUFBLE1BQUE7cUJBT0UsS0FBSyxDQUFDLFVBQVUsQ0FBQyxLQUFqQixHQUE2QixJQUFBLElBQUEsQ0FBQSxFQVAvQjs7VUFaTyxDQUFUO1FBRm1CO1FBdUJyQixTQUFBLEdBQVksU0FBQTtpQkFDVixDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLFdBQXZCLENBQUEsQ0FBQSxLQUE0QyxJQUFBLElBQUEsQ0FBQSxDQUFNLENBQUMsV0FBUCxDQUFBLENBQTdDLENBQUEsSUFDQSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLFFBQXZCLENBQUEsQ0FBQSxLQUF5QyxJQUFBLElBQUEsQ0FBQSxDQUFNLENBQUMsUUFBUCxDQUFBLENBQTFDLENBREEsSUFFQSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLE9BQXZCLENBQUEsQ0FBQSxLQUF3QyxJQUFBLElBQUEsQ0FBQSxDQUFNLENBQUMsT0FBUCxDQUFBLENBQXpDO1FBSFU7UUFLWixPQUFPLENBQUMsVUFBUixHQUFxQixTQUFBO0FBQ25CLGlCQUFPO1lBQ0wsZUFBQSxFQUNFO2NBQUEsSUFBQSxFQUFNLE9BQUEsQ0FBUSxNQUFSLENBQUEsQ0FBZ0IsS0FBSyxDQUFDLFlBQVksQ0FBQyxLQUFuQyxFQUEwQyxZQUExQyxDQUFOO2NBQ0EsRUFBQSxFQUFJLE9BQUEsQ0FBUSxNQUFSLENBQUEsQ0FBZ0IsS0FBSyxDQUFDLFVBQVUsQ0FBQyxLQUFqQyxFQUF3QyxZQUF4QyxDQURKO2NBRUEsTUFBQSxFQUFRLE9BRlI7Y0FHQSxVQUFBLEVBQVksU0FBQSxDQUFBLENBSFo7YUFGRzs7UUFEWTtRQVNyQixLQUFLLENBQUMsZUFBTixHQUF3QixTQUFBO2lCQUN0QixLQUFLLENBQUMsT0FBTixHQUFnQjtRQURNO1FBR3hCLEtBQUssQ0FBQyxZQUFOLEdBQXFCLFNBQUE7VUFDbkIsZUFBZSxDQUFDLG9CQUFoQixDQUFxQyxDQUFyQyxFQUF3QyxJQUF4QztpQkFDQSxLQUFLLENBQUMsT0FBTixHQUFnQjtRQUZHO1FBS3JCLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBWCxDQUFnQixPQUFoQjtlQUlBLEtBQUssQ0FBQyxRQUFRLENBQUMsT0FBZixDQUF1QixPQUF2QjtNQXJFSSxDQVhEOztFQUQ4QixDQUF2QztBQUZBIiwiZmlsZSI6ImNvbXBvbmVudHMvd2lkZ2V0cy1zZXR0aW5ncy9kYXRlcy1waWNrZXIvZGF0ZXMtcGlja2VyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdpbXBhYy5jb21wb25lbnRzLndpZGdldHMtc2V0dGluZ3MuZGF0ZXMtcGlja2VyJyxbXSlcblxubW9kdWxlLmRpcmVjdGl2ZSgnc2V0dGluZ0RhdGVzUGlja2VyJywgKCR0ZW1wbGF0ZUNhY2hlLCAkZmlsdGVyLCBJbXBhY1dpZGdldHNTdmMsICR0aW1lb3V0KSAtPlxuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgc2NvcGU6IHtcbiAgICAgIHBhcmVudFdpZGdldDogJz0nXG4gICAgICBkZWZlcnJlZDogJz0nXG4gICAgICBmcm9tRGF0ZTogJz1mcm9tJ1xuICAgICAgdG9EYXRlOiAnPXRvJ1xuICAgICAga2VlcFRvZGF5OiAnPSdcbiAgICB9LFxuICAgIHRlbXBsYXRlOiAkdGVtcGxhdGVDYWNoZS5nZXQoJ3dpZGdldHMtc2V0dGluZ3MvZGF0ZXMtcGlja2VyLnRtcGwuaHRtbCcpLFxuICAgIFxuICAgIGxpbms6IChzY29wZSkgLT5cbiAgICAgIHcgPSBzY29wZS5wYXJlbnRXaWRnZXRcblxuICAgICAgc2V0dGluZyA9IHt9XG4gICAgICBzZXR0aW5nLmtleSA9IFwiZGF0ZXMtcGlja2VyXCJcblxuICAgICAgc2NvcGUuY2FsZW5kYXJGcm9tID1cbiAgICAgICAgb3BlbmVkOiBmYWxzZVxuICAgICAgICB2YWx1ZTogbmV3IERhdGUobmV3IERhdGUoKS5nZXRGdWxsWWVhcigpLCAwLCAxKVxuICAgICAgICB0b2dnbGU6IC0+XG4gICAgICAgICAgc2NvcGUuY2FsZW5kYXJGcm9tLm9wZW5lZCA9ICFzY29wZS5jYWxlbmRhckZyb20ub3BlbmVkXG4gICAgICAgICAgc2NvcGUuY2FsZW5kYXJUby5vcGVuZWQgPSBmYWxzZVxuXG4gICAgICBzY29wZS5jYWxlbmRhclRvID1cbiAgICAgICAgb3BlbmVkOiBmYWxzZVxuICAgICAgICB2YWx1ZTogbmV3IERhdGUoKVxuICAgICAgICB0b2dnbGU6IC0+XG4gICAgICAgICAgc2NvcGUuY2FsZW5kYXJGcm9tLm9wZW5lZCA9IGZhbHNlXG4gICAgICAgICAgc2NvcGUuY2FsZW5kYXJUby5vcGVuZWQgPSAhc2NvcGUuY2FsZW5kYXJUby5vcGVuZWRcblxuICAgICAgc2V0dGluZy5pbml0aWFsaXplID0gLT5cbiAgICAgICAgIyB0aW1lb3V0IHRvIG1ha2Ugc3VyZSB0aGF0IHRoZSBmcm9tRGF0ZSBhbmQgdG9EYXRlIGFyZSBwcm9wYWdhdGVkIHRvIHRoZSBkaXJlY3RpdmUgaWYgdXBkYXRlZCBpbiB3aWRnZXQuaW5pdENvbnRleHQoKVxuICAgICAgICAkdGltZW91dCAtPlxuICAgICAgICAgIHNjb3BlLmNoYW5nZWQgPSBmYWxzZVxuXG4gICAgICAgICAgaWYgRGF0ZS5wYXJzZShzY29wZS5mcm9tRGF0ZSlcbiAgICAgICAgICAgIHBhcnNlZEZyb20gPSBzY29wZS5mcm9tRGF0ZS5zcGxpdCgnLScpXG4gICAgICAgICAgICB5ID0gcGFyc2VkRnJvbVswXVxuICAgICAgICAgICAgbSA9IHBhcnNlZEZyb21bMV0gLSAxXG4gICAgICAgICAgICBkID0gcGFyc2VkRnJvbVsyXVxuICAgICAgICAgICAgc2NvcGUuY2FsZW5kYXJGcm9tLnZhbHVlID0gbmV3IERhdGUoeSxtLGQpXG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgc2NvcGUuY2FsZW5kYXJGcm9tLnZhbHVlID0gbmV3IERhdGUobmV3IERhdGUoKS5nZXRGdWxsWWVhcigpLCAwLCAxKVxuXG4gICAgICAgICAgaWYgRGF0ZS5wYXJzZShzY29wZS50b0RhdGUpICYmICFzY29wZS5rZWVwVG9kYXlcbiAgICAgICAgICAgIHBhcnNlZFRvID0gc2NvcGUudG9EYXRlLnNwbGl0KCctJylcbiAgICAgICAgICAgIHkgPSBwYXJzZWRUb1swXVxuICAgICAgICAgICAgbSA9IHBhcnNlZFRvWzFdIC0gMVxuICAgICAgICAgICAgZCA9IHBhcnNlZFRvWzJdXG4gICAgICAgICAgICBzY29wZS5jYWxlbmRhclRvLnZhbHVlID0gbmV3IERhdGUoeSxtLGQpXG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgc2NvcGUuY2FsZW5kYXJUby52YWx1ZSA9IG5ldyBEYXRlKClcblxuICAgICAgaXNUb1RvZGF5ID0gLT5cbiAgICAgICAgKHNjb3BlLmNhbGVuZGFyVG8udmFsdWUuZ2V0RnVsbFllYXIoKSA9PSBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCkpICYmXG4gICAgICAgIChzY29wZS5jYWxlbmRhclRvLnZhbHVlLmdldE1vbnRoKCkgPT0gbmV3IERhdGUoKS5nZXRNb250aCgpKSAmJlxuICAgICAgICAoc2NvcGUuY2FsZW5kYXJUby52YWx1ZS5nZXREYXRlKCkgPT0gbmV3IERhdGUoKS5nZXREYXRlKCkpXG5cbiAgICAgIHNldHRpbmcudG9NZXRhZGF0YSA9IC0+XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaGlzdF9wYXJhbWV0ZXJzOiBcbiAgICAgICAgICAgIGZyb206ICRmaWx0ZXIoJ2RhdGUnKShzY29wZS5jYWxlbmRhckZyb20udmFsdWUsICd5eXl5LU1NLWRkJylcbiAgICAgICAgICAgIHRvOiAkZmlsdGVyKCdkYXRlJykoc2NvcGUuY2FsZW5kYXJUby52YWx1ZSwgJ3l5eXktTU0tZGQnKVxuICAgICAgICAgICAgcGVyaW9kOiBcIlJBTkdFXCJcbiAgICAgICAgICAgIGtlZXBfdG9kYXk6IGlzVG9Ub2RheSgpXG4gICAgICAgIH1cblxuICAgICAgc2NvcGUuc2hvd0FwcGx5QnV0dG9uID0gLT5cbiAgICAgICAgc2NvcGUuY2hhbmdlZCA9IHRydWVcblxuICAgICAgc2NvcGUuYXBwbHlDaGFuZ2VzID0gLT5cbiAgICAgICAgSW1wYWNXaWRnZXRzU3ZjLnVwZGF0ZVdpZGdldFNldHRpbmdzKHcsIHRydWUpXG4gICAgICAgIHNjb3BlLmNoYW5nZWQgPSBmYWxzZVxuXG5cbiAgICAgIHcuc2V0dGluZ3MucHVzaChzZXR0aW5nKVxuXG4gICAgICAjIFNldHRpbmcgaXMgcmVhZHk6IHRyaWdnZXIgbG9hZCBjb250ZW50XG4gICAgICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgc2NvcGUuZGVmZXJyZWQucmVzb2x2ZShzZXR0aW5nKVxuICB9XG4pXG4iXX0=

(function() {
  var module;

  module = angular.module('impac.components.widgets-settings.formula', []);

  module.controller('SettingFormulaCtrl', function($scope, $filter) {
    var authorized_regex, evaluateFormula, formatFormula, getFormula, setting, w;
    w = $scope.parentWidget;
    w.formula = "";
    authorized_regex = new RegExp("^(\\{|\\d|\\}|\\/|\\+|-|\\*|\\(|\\)|\\s|\\.)*$");
    setting = {};
    setting.key = "formula";
    setting.isInitialized = false;
    setting.initialize = function() {
      if ((w.metadata != null) && (w.metadata.formula != null)) {
        w.formula = w.metadata.formula;
        evaluateFormula();
        return setting.isInitialized = true;
      } else {
        return w.formula = "";
      }
    };
    setting.toMetadata = function() {
      evaluateFormula();
      if (w.isFormulaCorrect) {
        return {
          formula: w.formula
        };
      } else {
        return {
          formula: ""
        };
      }
    };
    getFormula = function() {
      return w.formula;
    };
    w.formatAmount = function(anAccount) {
      return $filter('mnoCurrency')(anAccount.current_balance, anAccount.currency);
    };
    $scope.$watch(getFormula, function(e) {
      return evaluateFormula();
    });
    evaluateFormula = function() {
      var e, error, i, legend, str;
      str = angular.copy(w.formula);
      legend = angular.copy(w.formula);
      i = 1;
      angular.forEach(w.selectedAccounts, function(account) {
        var balancePattern;
        balancePattern = "\\{" + i + "\\}";
        str = str.replace(new RegExp(balancePattern, 'g'), " " + account.current_balance_no_format + " ");
        legend = legend.replace(new RegExp(balancePattern, 'g'), account.name);
        return i++;
      });
      if (!str.match(authorized_regex)) {
        w.isFormulaCorrect = false;
        w.evaluatedFormula = "invalid expression";
      }
      try {
        w.evaluatedFormula = eval(str).toFixed(2);
      } catch (error) {
        e = error;
        w.evaluatedFormula = "invalid expression";
      }
      if ((w.evaluatedFormula == null) || w.evaluatedFormula === "invalid expression" || w.evaluatedFormula === "Infinity" || w.evaluatedFormula === "-Infinity") {
        return w.isFormulaCorrect = false;
      } else {
        formatFormula();
        w.legend = legend;
        return w.isFormulaCorrect = true;
      }
    };
    formatFormula = function() {
      var currency, firstAcc;
      if (!w.formula.match(/\//g) && (w.selectedAccounts != null)) {
        if (firstAcc = w.selectedAccounts[0]) {
          if (currency = firstAcc.currency) {
            return w.evaluatedFormula = $filter('mnoCurrency')(w.evaluatedFormula, currency);
          }
        }
      }
    };
    w.settings.push(setting);
    return $scope.deferred.resolve($scope.parentWidget);
  });

  module.directive('settingFormula', function() {
    return {
      restrict: 'A',
      scope: {
        parentWidget: '=',
        deferred: '='
      },
      controller: 'SettingFormulaCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy1zZXR0aW5ncy9mb3JtdWxhL2Zvcm11bGEuZGlyZWN0aXZlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUE7O0VBQUEsTUFBQSxHQUFTLE9BQU8sQ0FBQyxNQUFSLENBQWUsMkNBQWYsRUFBMkQsRUFBM0Q7O0VBRVQsTUFBTSxDQUFDLFVBQVAsQ0FBa0Isb0JBQWxCLEVBQXdDLFNBQUMsTUFBRCxFQUFTLE9BQVQ7QUFFdEMsUUFBQTtJQUFBLENBQUEsR0FBSSxNQUFNLENBQUM7SUFDWCxDQUFDLENBQUMsT0FBRixHQUFZO0lBR1osZ0JBQUEsR0FBdUIsSUFBQSxNQUFBLENBQU8sZ0RBQVA7SUFFdkIsT0FBQSxHQUFVO0lBQ1YsT0FBTyxDQUFDLEdBQVIsR0FBYztJQUNkLE9BQU8sQ0FBQyxhQUFSLEdBQXdCO0lBRXhCLE9BQU8sQ0FBQyxVQUFSLEdBQXFCLFNBQUE7TUFDbkIsSUFBRyxvQkFBQSxJQUFlLDRCQUFsQjtRQUNFLENBQUMsQ0FBQyxPQUFGLEdBQVksQ0FBQyxDQUFDLFFBQVEsQ0FBQztRQUN2QixlQUFBLENBQUE7ZUFDQSxPQUFPLENBQUMsYUFBUixHQUF3QixLQUgxQjtPQUFBLE1BQUE7ZUFLRSxDQUFDLENBQUMsT0FBRixHQUFZLEdBTGQ7O0lBRG1CO0lBUXJCLE9BQU8sQ0FBQyxVQUFSLEdBQXFCLFNBQUE7TUFDbkIsZUFBQSxDQUFBO01BQ0EsSUFBRyxDQUFDLENBQUMsZ0JBQUw7QUFDRSxlQUFPO1VBQUUsT0FBQSxFQUFTLENBQUMsQ0FBQyxPQUFiO1VBRFQ7T0FBQSxNQUFBO0FBR0UsZUFBTztVQUFFLE9BQUEsRUFBUyxFQUFYO1VBSFQ7O0lBRm1CO0lBT3JCLFVBQUEsR0FBYSxTQUFBO0FBQ1gsYUFBTyxDQUFDLENBQUM7SUFERTtJQUdiLENBQUMsQ0FBQyxZQUFGLEdBQWlCLFNBQUMsU0FBRDtBQUNmLGFBQU8sT0FBQSxDQUFRLGFBQVIsQ0FBQSxDQUF1QixTQUFTLENBQUMsZUFBakMsRUFBaUQsU0FBUyxDQUFDLFFBQTNEO0lBRFE7SUFHakIsTUFBTSxDQUFDLE1BQVAsQ0FBYyxVQUFkLEVBQTBCLFNBQUMsQ0FBRDthQUN4QixlQUFBLENBQUE7SUFEd0IsQ0FBMUI7SUFHQSxlQUFBLEdBQWtCLFNBQUE7QUFDaEIsVUFBQTtNQUFBLEdBQUEsR0FBTSxPQUFPLENBQUMsSUFBUixDQUFhLENBQUMsQ0FBQyxPQUFmO01BQ04sTUFBQSxHQUFTLE9BQU8sQ0FBQyxJQUFSLENBQWEsQ0FBQyxDQUFDLE9BQWY7TUFDVCxDQUFBLEdBQUU7TUFDRixPQUFPLENBQUMsT0FBUixDQUFnQixDQUFDLENBQUMsZ0JBQWxCLEVBQW9DLFNBQUMsT0FBRDtBQUNsQyxZQUFBO1FBQUEsY0FBQSxHQUFpQixLQUFBLEdBQU0sQ0FBTixHQUFRO1FBQ3pCLEdBQUEsR0FBTSxHQUFHLENBQUMsT0FBSixDQUFnQixJQUFBLE1BQUEsQ0FBTyxjQUFQLEVBQXVCLEdBQXZCLENBQWhCLEVBQTZDLEdBQUEsR0FBSSxPQUFPLENBQUMseUJBQVosR0FBc0MsR0FBbkY7UUFDTixNQUFBLEdBQVMsTUFBTSxDQUFDLE9BQVAsQ0FBbUIsSUFBQSxNQUFBLENBQU8sY0FBUCxFQUF1QixHQUF2QixDQUFuQixFQUFnRCxPQUFPLENBQUMsSUFBeEQ7ZUFDVCxDQUFBO01BSmtDLENBQXBDO01BUUEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFKLENBQVUsZ0JBQVYsQ0FBTDtRQUNFLENBQUMsQ0FBQyxnQkFBRixHQUFxQjtRQUNyQixDQUFDLENBQUMsZ0JBQUYsR0FBcUIscUJBRnZCOztBQUlBO1FBQ0UsQ0FBQyxDQUFDLGdCQUFGLEdBQXFCLElBQUEsQ0FBSyxHQUFMLENBQVMsQ0FBQyxPQUFWLENBQWtCLENBQWxCLEVBRHZCO09BQUEsYUFBQTtRQUVNO1FBQ0osQ0FBQyxDQUFDLGdCQUFGLEdBQXFCLHFCQUh2Qjs7TUFLQSxJQUFJLDRCQUFELElBQXdCLENBQUMsQ0FBQyxnQkFBRixLQUFzQixvQkFBOUMsSUFBc0UsQ0FBQyxDQUFDLGdCQUFGLEtBQXNCLFVBQTVGLElBQTBHLENBQUMsQ0FBQyxnQkFBRixLQUFzQixXQUFuSTtlQUNFLENBQUMsQ0FBQyxnQkFBRixHQUFxQixNQUR2QjtPQUFBLE1BQUE7UUFHRSxhQUFBLENBQUE7UUFDQSxDQUFDLENBQUMsTUFBRixHQUFXO2VBQ1gsQ0FBQyxDQUFDLGdCQUFGLEdBQXFCLEtBTHZCOztJQXJCZ0I7SUE0QmxCLGFBQUEsR0FBZ0IsU0FBQTtBQUNkLFVBQUE7TUFBQSxJQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFWLENBQWdCLEtBQWhCLENBQUQsSUFBMkIsNEJBQTlCO1FBQ0UsSUFBRyxRQUFBLEdBQVcsQ0FBQyxDQUFDLGdCQUFpQixDQUFBLENBQUEsQ0FBakM7VUFDRSxJQUFHLFFBQUEsR0FBVyxRQUFRLENBQUMsUUFBdkI7bUJBQ0UsQ0FBQyxDQUFDLGdCQUFGLEdBQXFCLE9BQUEsQ0FBUSxhQUFSLENBQUEsQ0FBdUIsQ0FBQyxDQUFDLGdCQUF6QixFQUEyQyxRQUEzQyxFQUR2QjtXQURGO1NBREY7O0lBRGM7SUFNaEIsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFYLENBQWdCLE9BQWhCO1dBSUEsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFoQixDQUF3QixNQUFNLENBQUMsWUFBL0I7RUExRXNDLENBQXhDOztFQTZFQSxNQUFNLENBQUMsU0FBUCxDQUFpQixnQkFBakIsRUFBbUMsU0FBQTtBQUNqQyxXQUFPO01BQ0wsUUFBQSxFQUFVLEdBREw7TUFFTCxLQUFBLEVBQU87UUFDTCxZQUFBLEVBQWMsR0FEVDtRQUVMLFFBQUEsRUFBVSxHQUZMO09BRkY7TUFNTCxVQUFBLEVBQVksb0JBTlA7O0VBRDBCLENBQW5DO0FBL0VBIiwiZmlsZSI6ImNvbXBvbmVudHMvd2lkZ2V0cy1zZXR0aW5ncy9mb3JtdWxhL2Zvcm11bGEuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2ltcGFjLmNvbXBvbmVudHMud2lkZ2V0cy1zZXR0aW5ncy5mb3JtdWxhJyxbXSlcblxubW9kdWxlLmNvbnRyb2xsZXIoJ1NldHRpbmdGb3JtdWxhQ3RybCcsICgkc2NvcGUsICRmaWx0ZXIpIC0+XG5cbiAgdyA9ICRzY29wZS5wYXJlbnRXaWRnZXRcbiAgdy5mb3JtdWxhID0gXCJcIlxuXG4gICMgIyBPbmx5IGF1dGhvcml6ZSBtYXRoZW1hdGljYWwgZXhwcmVzc2lvbnNcbiAgYXV0aG9yaXplZF9yZWdleCA9IG5ldyBSZWdFeHAoXCJeKFxcXFx7fFxcXFxkfFxcXFx9fFxcXFwvfFxcXFwrfC18XFxcXCp8XFxcXCh8XFxcXCl8XFxcXHN8XFxcXC4pKiRcIilcblxuICBzZXR0aW5nID0ge31cbiAgc2V0dGluZy5rZXkgPSBcImZvcm11bGFcIlxuICBzZXR0aW5nLmlzSW5pdGlhbGl6ZWQgPSBmYWxzZVxuXG4gIHNldHRpbmcuaW5pdGlhbGl6ZSA9IC0+XG4gICAgaWYgdy5tZXRhZGF0YT8gJiYgdy5tZXRhZGF0YS5mb3JtdWxhP1xuICAgICAgdy5mb3JtdWxhID0gdy5tZXRhZGF0YS5mb3JtdWxhXG4gICAgICBldmFsdWF0ZUZvcm11bGEoKVxuICAgICAgc2V0dGluZy5pc0luaXRpYWxpemVkID0gdHJ1ZVxuICAgIGVsc2VcbiAgICAgIHcuZm9ybXVsYSA9IFwiXCJcblxuICBzZXR0aW5nLnRvTWV0YWRhdGEgPSAtPlxuICAgIGV2YWx1YXRlRm9ybXVsYSgpXG4gICAgaWYgdy5pc0Zvcm11bGFDb3JyZWN0XG4gICAgICByZXR1cm4geyBmb3JtdWxhOiB3LmZvcm11bGEgfVxuICAgIGVsc2VcbiAgICAgIHJldHVybiB7IGZvcm11bGE6IFwiXCIgfVxuXG4gIGdldEZvcm11bGEgPSAtPlxuICAgIHJldHVybiB3LmZvcm11bGFcblxuICB3LmZvcm1hdEFtb3VudCA9IChhbkFjY291bnQpIC0+XG4gICAgcmV0dXJuICRmaWx0ZXIoJ21ub0N1cnJlbmN5JykoYW5BY2NvdW50LmN1cnJlbnRfYmFsYW5jZSxhbkFjY291bnQuY3VycmVuY3kpXG5cbiAgJHNjb3BlLiR3YXRjaCBnZXRGb3JtdWxhLCAoZSkgLT5cbiAgICBldmFsdWF0ZUZvcm11bGEoKVxuXG4gIGV2YWx1YXRlRm9ybXVsYSA9IC0+XG4gICAgc3RyID0gYW5ndWxhci5jb3B5KHcuZm9ybXVsYSlcbiAgICBsZWdlbmQgPSBhbmd1bGFyLmNvcHkody5mb3JtdWxhKVxuICAgIGk9MVxuICAgIGFuZ3VsYXIuZm9yRWFjaCh3LnNlbGVjdGVkQWNjb3VudHMsIChhY2NvdW50KSAtPlxuICAgICAgYmFsYW5jZVBhdHRlcm4gPSBcIlxcXFx7I3tpfVxcXFx9XCJcbiAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKG5ldyBSZWdFeHAoYmFsYW5jZVBhdHRlcm4sICdnJyksIFwiICN7YWNjb3VudC5jdXJyZW50X2JhbGFuY2Vfbm9fZm9ybWF0fSBcIilcbiAgICAgIGxlZ2VuZCA9IGxlZ2VuZC5yZXBsYWNlKG5ldyBSZWdFeHAoYmFsYW5jZVBhdHRlcm4sICdnJyksIGFjY291bnQubmFtZSlcbiAgICAgIGkrK1xuICAgIClcblxuICAgICMgR3VhcmQgYWdhaW5zdCBpbmplY3Rpb25cbiAgICBpZiAoIXN0ci5tYXRjaChhdXRob3JpemVkX3JlZ2V4KSlcbiAgICAgIHcuaXNGb3JtdWxhQ29ycmVjdCA9IGZhbHNlXG4gICAgICB3LmV2YWx1YXRlZEZvcm11bGEgPSBcImludmFsaWQgZXhwcmVzc2lvblwiXG5cbiAgICB0cnlcbiAgICAgIHcuZXZhbHVhdGVkRm9ybXVsYSA9IGV2YWwoc3RyKS50b0ZpeGVkKDIpXG4gICAgY2F0Y2ggZVxuICAgICAgdy5ldmFsdWF0ZWRGb3JtdWxhID0gXCJpbnZhbGlkIGV4cHJlc3Npb25cIlxuXG4gICAgaWYgIXcuZXZhbHVhdGVkRm9ybXVsYT8gfHwgdy5ldmFsdWF0ZWRGb3JtdWxhID09IFwiaW52YWxpZCBleHByZXNzaW9uXCIgfHwgdy5ldmFsdWF0ZWRGb3JtdWxhID09IFwiSW5maW5pdHlcIiB8fCB3LmV2YWx1YXRlZEZvcm11bGEgPT0gXCItSW5maW5pdHlcIlxuICAgICAgdy5pc0Zvcm11bGFDb3JyZWN0ID0gZmFsc2VcbiAgICBlbHNlXG4gICAgICBmb3JtYXRGb3JtdWxhKClcbiAgICAgIHcubGVnZW5kID0gbGVnZW5kXG4gICAgICB3LmlzRm9ybXVsYUNvcnJlY3QgPSB0cnVlXG5cbiAgZm9ybWF0Rm9ybXVsYSA9IC0+XG4gICAgaWYgIXcuZm9ybXVsYS5tYXRjaCgvXFwvL2cpICYmIHcuc2VsZWN0ZWRBY2NvdW50cz9cbiAgICAgIGlmIGZpcnN0QWNjID0gdy5zZWxlY3RlZEFjY291bnRzWzBdXG4gICAgICAgIGlmIGN1cnJlbmN5ID0gZmlyc3RBY2MuY3VycmVuY3lcbiAgICAgICAgICB3LmV2YWx1YXRlZEZvcm11bGEgPSAkZmlsdGVyKCdtbm9DdXJyZW5jeScpKHcuZXZhbHVhdGVkRm9ybXVsYSwgY3VycmVuY3kpXG5cbiAgdy5zZXR0aW5ncy5wdXNoKHNldHRpbmcpXG5cbiAgIyBTZXR0aW5nIGlzIHJlYWR5OiB0cmlnZ2VyIGxvYWQgY29udGVudFxuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAkc2NvcGUuZGVmZXJyZWQucmVzb2x2ZSgkc2NvcGUucGFyZW50V2lkZ2V0KVxuKVxuXG5tb2R1bGUuZGlyZWN0aXZlKCdzZXR0aW5nRm9ybXVsYScsICgpIC0+XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBzY29wZToge1xuICAgICAgcGFyZW50V2lkZ2V0OiAnPSdcbiAgICAgIGRlZmVycmVkOiAnPSdcbiAgICB9LFxuICAgIGNvbnRyb2xsZXI6ICdTZXR0aW5nRm9ybXVsYUN0cmwnXG4gIH1cbikiXX0=

(function() {
  var module,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  module = angular.module('impac.components.widgets-settings.hist-mode', []);

  module.controller('SettingHistModeCtrl', function($scope, ImpacWidgetsSvc) {
    var setting, w;
    w = $scope.parentWidget;
    w.isHistoryMode = false;
    $scope.toggleHistMode = function(mode) {
      var ref;
      if ((w.isHistoryMode && mode === 'history') || (!w.isHistoryMode && mode === 'current')) {
        return;
      }
      w.isHistoryMode = !w.isHistoryMode;
      ImpacWidgetsSvc.updateWidgetSettings(w, false);
      return ref = $scope.onToggle(), indexOf.call(angular.isDefined($scope.onToggle), ref) >= 0;
    };
    setting = {};
    setting.key = "hist-mode";
    setting.isInitialized = false;
    setting.initialize = function() {
      var mode;
      if ((w.content != null) && (w.content.hist_parameters != null) && (mode = w.content.hist_parameters.mode)) {
        if (mode === 'history') {
          w.isHistoryMode = true;
        } else {
          w.isHistoryMode = false;
        }
        return setting.isInitialized = true;
      }
    };
    setting.toMetadata = function() {
      var mode;
      if (w.isHistoryMode) {
        mode = 'history';
      } else {
        mode = 'current';
      }
      return {
        hist_parameters: {
          mode: mode
        }
      };
    };
    w.settings.push(setting);
    return $scope.deferred.resolve($scope.parentWidget);
  });

  module.directive('settingHistMode', function($templateCache) {
    return {
      restrict: 'A',
      scope: {
        parentWidget: '=',
        deferred: '=',
        onToggle: '&'
      },
      template: $templateCache.get('widgets-settings/hist-mode.tmpl.html'),
      controller: 'SettingHistModeCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy1zZXR0aW5ncy9oaXN0LW1vZGUvaGlzdC1tb2RlLmRpcmVjdGl2ZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBLE1BQUE7SUFBQTs7RUFBQSxNQUFBLEdBQVMsT0FBTyxDQUFDLE1BQVIsQ0FBZSw2Q0FBZixFQUE2RCxFQUE3RDs7RUFFVCxNQUFNLENBQUMsVUFBUCxDQUFrQixxQkFBbEIsRUFBeUMsU0FBQyxNQUFELEVBQVMsZUFBVDtBQUV2QyxRQUFBO0lBQUEsQ0FBQSxHQUFJLE1BQU0sQ0FBQztJQUNYLENBQUMsQ0FBQyxhQUFGLEdBQWtCO0lBRWxCLE1BQU0sQ0FBQyxjQUFQLEdBQXdCLFNBQUMsSUFBRDtBQUN0QixVQUFBO01BQUEsSUFBVSxDQUFDLENBQUMsQ0FBQyxhQUFGLElBQW1CLElBQUEsS0FBUSxTQUE1QixDQUFBLElBQTBDLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBSCxJQUFvQixJQUFBLEtBQU8sU0FBNUIsQ0FBcEQ7QUFBQSxlQUFBOztNQUNBLENBQUMsQ0FBQyxhQUFGLEdBQWtCLENBQUMsQ0FBQyxDQUFDO01BQ3JCLGVBQWUsQ0FBQyxvQkFBaEIsQ0FBcUMsQ0FBckMsRUFBdUMsS0FBdkM7bUJBQ0EsTUFBTSxDQUFDLFFBQVAsQ0FBQSxDQUFBLEVBQUEsYUFBcUIsT0FBTyxDQUFDLFNBQVIsQ0FBa0IsTUFBTSxDQUFDLFFBQXpCLENBQXJCLEVBQUEsR0FBQTtJQUpzQjtJQVF4QixPQUFBLEdBQVU7SUFDVixPQUFPLENBQUMsR0FBUixHQUFjO0lBQ2QsT0FBTyxDQUFDLGFBQVIsR0FBd0I7SUFHeEIsT0FBTyxDQUFDLFVBQVIsR0FBcUIsU0FBQTtBQUNuQixVQUFBO01BQUEsSUFBRyxtQkFBQSxJQUFjLG1DQUFkLElBQTRDLENBQUEsSUFBQSxHQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLElBQWpDLENBQS9DO1FBQ0UsSUFBRyxJQUFBLEtBQVEsU0FBWDtVQUNFLENBQUMsQ0FBQyxhQUFGLEdBQWtCLEtBRHBCO1NBQUEsTUFBQTtVQUdFLENBQUMsQ0FBQyxhQUFGLEdBQWtCLE1BSHBCOztlQUlBLE9BQU8sQ0FBQyxhQUFSLEdBQXdCLEtBTDFCOztJQURtQjtJQVFyQixPQUFPLENBQUMsVUFBUixHQUFxQixTQUFBO0FBQ25CLFVBQUE7TUFBQSxJQUFHLENBQUMsQ0FBQyxhQUFMO1FBQ0UsSUFBQSxHQUFPLFVBRFQ7T0FBQSxNQUFBO1FBR0UsSUFBQSxHQUFPLFVBSFQ7O0FBSUEsYUFBTztRQUFDLGVBQUEsRUFBaUI7VUFBQyxJQUFBLEVBQU0sSUFBUDtTQUFsQjs7SUFMWTtJQU9yQixDQUFDLENBQUMsUUFBUSxDQUFDLElBQVgsQ0FBZ0IsT0FBaEI7V0FJQSxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQWhCLENBQXdCLE1BQU0sQ0FBQyxZQUEvQjtFQXJDdUMsQ0FBekM7O0VBd0NBLE1BQU0sQ0FBQyxTQUFQLENBQWlCLGlCQUFqQixFQUFvQyxTQUFDLGNBQUQ7QUFDbEMsV0FBTztNQUNMLFFBQUEsRUFBVSxHQURMO01BRUwsS0FBQSxFQUFPO1FBQ0wsWUFBQSxFQUFjLEdBRFQ7UUFFTCxRQUFBLEVBQVUsR0FGTDtRQUdMLFFBQUEsRUFBVSxHQUhMO09BRkY7TUFPTCxRQUFBLEVBQVUsY0FBYyxDQUFDLEdBQWYsQ0FBbUIsc0NBQW5CLENBUEw7TUFRTCxVQUFBLEVBQVkscUJBUlA7O0VBRDJCLENBQXBDO0FBMUNBIiwiZmlsZSI6ImNvbXBvbmVudHMvd2lkZ2V0cy1zZXR0aW5ncy9oaXN0LW1vZGUvaGlzdC1tb2RlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdpbXBhYy5jb21wb25lbnRzLndpZGdldHMtc2V0dGluZ3MuaGlzdC1tb2RlJyxbXSlcblxubW9kdWxlLmNvbnRyb2xsZXIoJ1NldHRpbmdIaXN0TW9kZUN0cmwnLCAoJHNjb3BlLCBJbXBhY1dpZGdldHNTdmMpIC0+XG5cbiAgdyA9ICRzY29wZS5wYXJlbnRXaWRnZXRcbiAgdy5pc0hpc3RvcnlNb2RlID0gZmFsc2VcblxuICAkc2NvcGUudG9nZ2xlSGlzdE1vZGUgPSAobW9kZSkgLT5cbiAgICByZXR1cm4gaWYgKHcuaXNIaXN0b3J5TW9kZSAmJiBtb2RlID09ICdoaXN0b3J5JykgfHwgKCF3LmlzSGlzdG9yeU1vZGUgJiYgbW9kZSA9PSdjdXJyZW50JylcbiAgICB3LmlzSGlzdG9yeU1vZGUgPSAhdy5pc0hpc3RvcnlNb2RlXG4gICAgSW1wYWNXaWRnZXRzU3ZjLnVwZGF0ZVdpZGdldFNldHRpbmdzKHcsZmFsc2UpXG4gICAgJHNjb3BlLm9uVG9nZ2xlKCkgaW4gYW5ndWxhci5pc0RlZmluZWQgJHNjb3BlLm9uVG9nZ2xlXG5cblxuICAjIFdoYXQgd2lsbCBiZSBwYXNzZWQgdG8gcGFyZW50V2lkZ2V0XG4gIHNldHRpbmcgPSB7fVxuICBzZXR0aW5nLmtleSA9IFwiaGlzdC1tb2RlXCJcbiAgc2V0dGluZy5pc0luaXRpYWxpemVkID0gZmFsc2VcblxuICAjIGluaXRpYWxpemF0aW9uIG9mIHRpbWUgcmFuZ2UgcGFyYW1ldGVycyBmcm9tIHdpZGdldC5jb250ZW50Lmhpc3RfcGFyYW1ldGVyc1xuICBzZXR0aW5nLmluaXRpYWxpemUgPSAtPlxuICAgIGlmIHcuY29udGVudD8gJiYgdy5jb250ZW50Lmhpc3RfcGFyYW1ldGVycz8gJiYgbW9kZSA9IHcuY29udGVudC5oaXN0X3BhcmFtZXRlcnMubW9kZVxuICAgICAgaWYgbW9kZSA9PSAnaGlzdG9yeSdcbiAgICAgICAgdy5pc0hpc3RvcnlNb2RlID0gdHJ1ZVxuICAgICAgZWxzZVxuICAgICAgICB3LmlzSGlzdG9yeU1vZGUgPSBmYWxzZVxuICAgICAgc2V0dGluZy5pc0luaXRpYWxpemVkID0gdHJ1ZVxuXG4gIHNldHRpbmcudG9NZXRhZGF0YSA9IC0+XG4gICAgaWYgdy5pc0hpc3RvcnlNb2RlXG4gICAgICBtb2RlID0gJ2hpc3RvcnknXG4gICAgZWxzZVxuICAgICAgbW9kZSA9ICdjdXJyZW50J1xuICAgIHJldHVybiB7aGlzdF9wYXJhbWV0ZXJzOiB7bW9kZTogbW9kZX19XG5cbiAgdy5zZXR0aW5ncy5wdXNoKHNldHRpbmcpXG5cbiAgIyBTZXR0aW5nIGlzIHJlYWR5OiB0cmlnZ2VyIGxvYWQgY29udGVudFxuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAkc2NvcGUuZGVmZXJyZWQucmVzb2x2ZSgkc2NvcGUucGFyZW50V2lkZ2V0KVxuKVxuXG5tb2R1bGUuZGlyZWN0aXZlKCdzZXR0aW5nSGlzdE1vZGUnLCAoJHRlbXBsYXRlQ2FjaGUpIC0+XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBzY29wZToge1xuICAgICAgcGFyZW50V2lkZ2V0OiAnPSdcbiAgICAgIGRlZmVycmVkOiAnPSdcbiAgICAgIG9uVG9nZ2xlOiAnJidcbiAgICB9LFxuICAgIHRlbXBsYXRlOiAkdGVtcGxhdGVDYWNoZS5nZXQoJ3dpZGdldHMtc2V0dGluZ3MvaGlzdC1tb2RlLnRtcGwuaHRtbCcpLFxuICAgIGNvbnRyb2xsZXI6ICdTZXR0aW5nSGlzdE1vZGVDdHJsJ1xuICB9XG4pXG4iXX0=

(function() {
  var module;

  module = angular.module('impac.components.widgets-settings.limit-entries', []);

  module.controller('SettingLimitEntriesCtrl', function($scope) {
    var setting;
    setting = {};
    setting.key = 'limit-entries';
    setting.initialize = function() {
      return true;
    };
    setting.toMetadata = function() {
      return {
        limit_entries: $scope.selected
      };
    };
    $scope.parentWidget.settings.push(setting);
    return $scope.deferred.resolve(setting);
  });

  module.directive('settingLimitEntries', function($templateCache, ImpacWidgetsSvc) {
    return {
      restrict: 'A',
      scope: {
        parentWidget: '=',
        deferred: '=',
        selected: '=',
        max: '=?',
        options: '=?',
        entriesLabel: '=?'
      },
      link: function(scope, elements, attrs) {
        if (!((scope.options != null) && scope.options.length > 0)) {
          scope.options = [5, 15, 50];
        }
        scope.selectOption = function(anOption) {
          scope.selected = anOption;
          return ImpacWidgetsSvc.updateWidgetSettings(scope.parentWidget, false);
        };
        return scope.isOptionValid = function(anOption) {
          return (scope.max == null) || anOption < scope.max;
        };
      },
      controller: 'SettingLimitEntriesCtrl',
      template: $templateCache.get('widgets-settings/limit-entries.tmpl.html')
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy1zZXR0aW5ncy9saW1pdC1lbnRyaWVzL2xpbWl0LWVudHJpZXMuZGlyZWN0aXZlLmpzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUE7O0VBQUEsTUFBQSxHQUFTLE9BQU8sQ0FBQyxNQUFSLENBQWUsaURBQWYsRUFBaUUsRUFBakU7O0VBRVQsTUFBTSxDQUFDLFVBQVAsQ0FBa0IseUJBQWxCLEVBQTZDLFNBQUMsTUFBRDtBQUMzQyxRQUFBO0lBQUEsT0FBQSxHQUFVO0lBQ1YsT0FBTyxDQUFDLEdBQVIsR0FBYztJQUVkLE9BQU8sQ0FBQyxVQUFSLEdBQXFCLFNBQUE7QUFDbkIsYUFBTztJQURZO0lBR3JCLE9BQU8sQ0FBQyxVQUFSLEdBQXFCLFNBQUE7QUFDbkIsYUFBTztRQUFDLGFBQUEsRUFBZSxNQUFNLENBQUMsUUFBdkI7O0lBRFk7SUFHckIsTUFBTSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsSUFBN0IsQ0FBa0MsT0FBbEM7V0FDQSxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQWhCLENBQXdCLE9BQXhCO0VBWDJDLENBQTdDOztFQWNBLE1BQU0sQ0FBQyxTQUFQLENBQWlCLHFCQUFqQixFQUF3QyxTQUFDLGNBQUQsRUFBaUIsZUFBakI7QUFDdEMsV0FBTztNQUNMLFFBQUEsRUFBVSxHQURMO01BRUwsS0FBQSxFQUFPO1FBQ0wsWUFBQSxFQUFjLEdBRFQ7UUFFTCxRQUFBLEVBQVUsR0FGTDtRQUdMLFFBQUEsRUFBVSxHQUhMO1FBSUwsR0FBQSxFQUFLLElBSkE7UUFLTCxPQUFBLEVBQVMsSUFMSjtRQU1MLFlBQUEsRUFBYyxJQU5UO09BRkY7TUFXTCxJQUFBLEVBQU0sU0FBQyxLQUFELEVBQVEsUUFBUixFQUFrQixLQUFsQjtRQUNKLElBQUEsQ0FBbUMsQ0FBQyx1QkFBQSxJQUFrQixLQUFLLENBQUMsT0FBTyxDQUFDLE1BQWQsR0FBdUIsQ0FBMUMsQ0FBbkM7VUFBQSxLQUFLLENBQUMsT0FBTixHQUFnQixDQUFDLENBQUQsRUFBSSxFQUFKLEVBQVEsRUFBUixFQUFoQjs7UUFFQSxLQUFLLENBQUMsWUFBTixHQUFxQixTQUFDLFFBQUQ7VUFDbkIsS0FBSyxDQUFDLFFBQU4sR0FBaUI7aUJBQ2pCLGVBQWUsQ0FBQyxvQkFBaEIsQ0FBcUMsS0FBSyxDQUFDLFlBQTNDLEVBQXdELEtBQXhEO1FBRm1CO2VBSXJCLEtBQUssQ0FBQyxhQUFOLEdBQXNCLFNBQUMsUUFBRDtpQkFDbkIsbUJBQUQsSUFBZSxRQUFBLEdBQVcsS0FBSyxDQUFDO1FBRFo7TUFQbEIsQ0FYRDtNQXNCTCxVQUFBLEVBQVkseUJBdEJQO01BdUJMLFFBQUEsRUFBVSxjQUFjLENBQUMsR0FBZixDQUFtQiwwQ0FBbkIsQ0F2Qkw7O0VBRCtCLENBQXhDO0FBaEJBIiwiZmlsZSI6ImNvbXBvbmVudHMvd2lkZ2V0cy1zZXR0aW5ncy9saW1pdC1lbnRyaWVzL2xpbWl0LWVudHJpZXMuZGlyZWN0aXZlLmpzLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2ltcGFjLmNvbXBvbmVudHMud2lkZ2V0cy1zZXR0aW5ncy5saW1pdC1lbnRyaWVzJyxbXSlcblxubW9kdWxlLmNvbnRyb2xsZXIoJ1NldHRpbmdMaW1pdEVudHJpZXNDdHJsJywgKCRzY29wZSkgLT5cbiAgc2V0dGluZyA9IHt9XG4gIHNldHRpbmcua2V5ID0gJ2xpbWl0LWVudHJpZXMnXG5cbiAgc2V0dGluZy5pbml0aWFsaXplID0gLT5cbiAgICByZXR1cm4gdHJ1ZVxuXG4gIHNldHRpbmcudG9NZXRhZGF0YSA9IC0+XG4gICAgcmV0dXJuIHtsaW1pdF9lbnRyaWVzOiAkc2NvcGUuc2VsZWN0ZWR9XG5cbiAgJHNjb3BlLnBhcmVudFdpZGdldC5zZXR0aW5ncy5wdXNoKHNldHRpbmcpXG4gICRzY29wZS5kZWZlcnJlZC5yZXNvbHZlKHNldHRpbmcpXG4pXG5cbm1vZHVsZS5kaXJlY3RpdmUoJ3NldHRpbmdMaW1pdEVudHJpZXMnLCAoJHRlbXBsYXRlQ2FjaGUsIEltcGFjV2lkZ2V0c1N2YykgLT5cbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnXG4gICAgc2NvcGU6IHtcbiAgICAgIHBhcmVudFdpZGdldDogJz0nXG4gICAgICBkZWZlcnJlZDogJz0nXG4gICAgICBzZWxlY3RlZDogJz0nXG4gICAgICBtYXg6ICc9PydcbiAgICAgIG9wdGlvbnM6ICc9PydcbiAgICAgIGVudHJpZXNMYWJlbDogJz0/J1xuICAgIH1cblxuICAgIGxpbms6IChzY29wZSwgZWxlbWVudHMsIGF0dHJzKSAtPlxuICAgICAgc2NvcGUub3B0aW9ucyA9IFs1LCAxNSwgNTBdIHVubGVzcyAoc2NvcGUub3B0aW9ucz8gJiYgc2NvcGUub3B0aW9ucy5sZW5ndGggPiAwKVxuXG4gICAgICBzY29wZS5zZWxlY3RPcHRpb24gPSAoYW5PcHRpb24pIC0+XG4gICAgICAgIHNjb3BlLnNlbGVjdGVkID0gYW5PcHRpb25cbiAgICAgICAgSW1wYWNXaWRnZXRzU3ZjLnVwZGF0ZVdpZGdldFNldHRpbmdzKHNjb3BlLnBhcmVudFdpZGdldCxmYWxzZSlcblxuICAgICAgc2NvcGUuaXNPcHRpb25WYWxpZCA9IChhbk9wdGlvbikgLT5cbiAgICAgICAgIXNjb3BlLm1heD8gfHwgYW5PcHRpb24gPCBzY29wZS5tYXhcblxuXG4gICAgY29udHJvbGxlcjogJ1NldHRpbmdMaW1pdEVudHJpZXNDdHJsJ1xuICAgIHRlbXBsYXRlOiAkdGVtcGxhdGVDYWNoZS5nZXQoJ3dpZGdldHMtc2V0dGluZ3MvbGltaXQtZW50cmllcy50bXBsLmh0bWwnKSxcbiAgfVxuKVxuIl19

(function() {
  var module;

  module = angular.module('impac.components.widgets-settings.organizations', []);

  module.controller('SettingOrganizationsCtrl', function($scope, $log, ImpacDashboardsSvc) {
    var setting, w;
    w = $scope.parentWidget;
    w.selectedOrganizations = {};
    $scope.isOrganizationSelected = function(orgUid) {
      return !!w.selectedOrganizations[orgUid];
    };
    $scope.toggleSelectOrganization = function(orgUid) {
      return w.selectedOrganizations[orgUid] = !w.selectedOrganizations[orgUid];
    };
    setting = {};
    setting.key = "organizations";
    setting.isInitialized = false;
    setting.initialize = function() {
      return ImpacDashboardsSvc.load().then(function(config) {
        var i, len, org, ref;
        $scope.dashboardOrganizations = config.currentDashboard.data_sources;
        if ((w.metadata != null) && (w.metadata.organization_ids != null)) {
          ref = $scope.dashboardOrganizations;
          for (i = 0, len = ref.length; i < len; i++) {
            org = ref[i];
            w.selectedOrganizations[org.uid] = _.contains(w.metadata.organization_ids, org.uid);
          }
          return setting.isInitialized = true;
        }
      });
    };
    setting.toMetadata = function() {
      var newOrganizations;
      newOrganizations = _.compact(_.map(w.selectedOrganizations, function(checked, uid) {
        if (checked) {
          return uid;
        }
      }));
      if (_.isEmpty(newOrganizations)) {
        newOrganizations = [_.first($scope.dashboardOrganizations).uid];
      }
      return {
        organization_ids: newOrganizations
      };
    };
    w.settings.push(setting);
    return $scope.deferred.resolve($scope.parentWidget);
  });

  module.directive('settingOrganizations', function($templateCache) {
    return {
      restrict: 'A',
      scope: {
        parentWidget: '=',
        deferred: '='
      },
      template: $templateCache.get('widgets-settings/organizations.tmpl.html'),
      controller: 'SettingOrganizationsCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy1zZXR0aW5ncy9vcmdhbml6YXRpb25zL29yZ2FuaXphdGlvbnMuZGlyZWN0aXZlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUE7O0VBQUEsTUFBQSxHQUFTLE9BQU8sQ0FBQyxNQUFSLENBQWUsaURBQWYsRUFBaUUsRUFBakU7O0VBQ1QsTUFBTSxDQUFDLFVBQVAsQ0FBa0IsMEJBQWxCLEVBQThDLFNBQUMsTUFBRCxFQUFTLElBQVQsRUFBZSxrQkFBZjtBQUU1QyxRQUFBO0lBQUEsQ0FBQSxHQUFJLE1BQU0sQ0FBQztJQUNYLENBQUMsQ0FBQyxxQkFBRixHQUEwQjtJQUUxQixNQUFNLENBQUMsc0JBQVAsR0FBZ0MsU0FBQyxNQUFEO2FBQzlCLENBQUMsQ0FBQyxDQUFDLENBQUMscUJBQXNCLENBQUEsTUFBQTtJQURJO0lBR2hDLE1BQU0sQ0FBQyx3QkFBUCxHQUFrQyxTQUFDLE1BQUQ7YUFDaEMsQ0FBQyxDQUFDLHFCQUFzQixDQUFBLE1BQUEsQ0FBeEIsR0FBa0MsQ0FBQyxDQUFDLENBQUMscUJBQXNCLENBQUEsTUFBQTtJQUQzQjtJQUlsQyxPQUFBLEdBQVU7SUFDVixPQUFPLENBQUMsR0FBUixHQUFjO0lBQ2QsT0FBTyxDQUFDLGFBQVIsR0FBd0I7SUFHeEIsT0FBTyxDQUFDLFVBQVIsR0FBcUIsU0FBQTthQUNuQixrQkFBa0IsQ0FBQyxJQUFuQixDQUFBLENBQXlCLENBQUMsSUFBMUIsQ0FDRSxTQUFDLE1BQUQ7QUFDRSxZQUFBO1FBQUEsTUFBTSxDQUFDLHNCQUFQLEdBQWdDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztRQUN4RCxJQUFHLG9CQUFBLElBQWUscUNBQWxCO0FBQ0U7QUFBQSxlQUFBLHFDQUFBOztZQUNFLENBQUMsQ0FBQyxxQkFBc0IsQ0FBQSxHQUFHLENBQUMsR0FBSixDQUF4QixHQUFtQyxDQUFDLENBQUMsUUFBRixDQUFXLENBQUMsQ0FBQyxRQUFRLENBQUMsZ0JBQXRCLEVBQXdDLEdBQUcsQ0FBQyxHQUE1QztBQURyQztpQkFFQSxPQUFPLENBQUMsYUFBUixHQUF3QixLQUgxQjs7TUFGRixDQURGO0lBRG1CO0lBVXJCLE9BQU8sQ0FBQyxVQUFSLEdBQXFCLFNBQUE7QUFDbkIsVUFBQTtNQUFBLGdCQUFBLEdBQW1CLENBQUMsQ0FBQyxPQUFGLENBQVUsQ0FBQyxDQUFDLEdBQUYsQ0FBTSxDQUFDLENBQUMscUJBQVIsRUFBK0IsU0FBQyxPQUFELEVBQVMsR0FBVDtRQUMxRCxJQUFPLE9BQVA7aUJBQUEsSUFBQTs7TUFEMEQsQ0FBL0IsQ0FBVjtNQUduQixJQUFtRSxDQUFDLENBQUMsT0FBRixDQUFVLGdCQUFWLENBQW5FO1FBQUEsZ0JBQUEsR0FBbUIsQ0FBQyxDQUFDLENBQUMsS0FBRixDQUFRLE1BQU0sQ0FBQyxzQkFBZixDQUFzQyxDQUFDLEdBQXhDLEVBQW5COztBQUNBLGFBQU87UUFBRSxnQkFBQSxFQUFrQixnQkFBcEI7O0lBTFk7SUFPckIsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFYLENBQWdCLE9BQWhCO1dBSUEsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFoQixDQUF3QixNQUFNLENBQUMsWUFBL0I7RUF0QzRDLENBQTlDOztFQXlDQSxNQUFNLENBQUMsU0FBUCxDQUFpQixzQkFBakIsRUFBeUMsU0FBQyxjQUFEO0FBQ3ZDLFdBQU87TUFDTCxRQUFBLEVBQVUsR0FETDtNQUVMLEtBQUEsRUFBTztRQUNMLFlBQUEsRUFBYyxHQURUO1FBRUwsUUFBQSxFQUFVLEdBRkw7T0FGRjtNQU1MLFFBQUEsRUFBVSxjQUFjLENBQUMsR0FBZixDQUFtQiwwQ0FBbkIsQ0FOTDtNQU9MLFVBQUEsRUFBWSwwQkFQUDs7RUFEZ0MsQ0FBekM7QUExQ0EiLCJmaWxlIjoiY29tcG9uZW50cy93aWRnZXRzLXNldHRpbmdzL29yZ2FuaXphdGlvbnMvb3JnYW5pemF0aW9ucy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnaW1wYWMuY29tcG9uZW50cy53aWRnZXRzLXNldHRpbmdzLm9yZ2FuaXphdGlvbnMnLFtdKVxubW9kdWxlLmNvbnRyb2xsZXIoJ1NldHRpbmdPcmdhbml6YXRpb25zQ3RybCcsICgkc2NvcGUsICRsb2csIEltcGFjRGFzaGJvYXJkc1N2YykgLT5cblxuICB3ID0gJHNjb3BlLnBhcmVudFdpZGdldFxuICB3LnNlbGVjdGVkT3JnYW5pemF0aW9ucyA9IHt9XG5cbiAgJHNjb3BlLmlzT3JnYW5pemF0aW9uU2VsZWN0ZWQgPSAob3JnVWlkKSAtPlxuICAgICEhdy5zZWxlY3RlZE9yZ2FuaXphdGlvbnNbb3JnVWlkXVxuXG4gICRzY29wZS50b2dnbGVTZWxlY3RPcmdhbml6YXRpb24gPSAob3JnVWlkKSAtPlxuICAgIHcuc2VsZWN0ZWRPcmdhbml6YXRpb25zW29yZ1VpZF0gPSAhdy5zZWxlY3RlZE9yZ2FuaXphdGlvbnNbb3JnVWlkXVxuXG4gICMgV2hhdCB3aWxsIGJlIHBhc3NlZCB0byBwYXJlbnRXaWRnZXRcbiAgc2V0dGluZyA9IHt9XG4gIHNldHRpbmcua2V5ID0gXCJvcmdhbml6YXRpb25zXCJcbiAgc2V0dGluZy5pc0luaXRpYWxpemVkID0gZmFsc2VcblxuICAjIGluaXRpYWxpemF0aW9uIG9mIHNlbGVjdGVkIG9yZ2FuaXphdGlvbnNcbiAgc2V0dGluZy5pbml0aWFsaXplID0gLT5cbiAgICBJbXBhY0Rhc2hib2FyZHNTdmMubG9hZCgpLnRoZW4oXG4gICAgICAoY29uZmlnKSAtPlxuICAgICAgICAkc2NvcGUuZGFzaGJvYXJkT3JnYW5pemF0aW9ucyA9IGNvbmZpZy5jdXJyZW50RGFzaGJvYXJkLmRhdGFfc291cmNlc1xuICAgICAgICBpZiB3Lm1ldGFkYXRhPyAmJiB3Lm1ldGFkYXRhLm9yZ2FuaXphdGlvbl9pZHM/XG4gICAgICAgICAgZm9yIG9yZyBpbiAkc2NvcGUuZGFzaGJvYXJkT3JnYW5pemF0aW9uc1xuICAgICAgICAgICAgdy5zZWxlY3RlZE9yZ2FuaXphdGlvbnNbb3JnLnVpZF0gPSBfLmNvbnRhaW5zKHcubWV0YWRhdGEub3JnYW5pemF0aW9uX2lkcywgb3JnLnVpZClcbiAgICAgICAgICBzZXR0aW5nLmlzSW5pdGlhbGl6ZWQgPSB0cnVlXG4gICAgKVxuXG4gIHNldHRpbmcudG9NZXRhZGF0YSA9IC0+XG4gICAgbmV3T3JnYW5pemF0aW9ucyA9IF8uY29tcGFjdChfLm1hcCh3LnNlbGVjdGVkT3JnYW5pemF0aW9ucywgKGNoZWNrZWQsdWlkKSAtPlxuICAgICAgdWlkIGlmIGNoZWNrZWRcbiAgICApKVxuICAgIG5ld09yZ2FuaXphdGlvbnMgPSBbXy5maXJzdCgkc2NvcGUuZGFzaGJvYXJkT3JnYW5pemF0aW9ucykudWlkXSBpZiBfLmlzRW1wdHkobmV3T3JnYW5pemF0aW9ucylcbiAgICByZXR1cm4geyBvcmdhbml6YXRpb25faWRzOiBuZXdPcmdhbml6YXRpb25zIH1cblxuICB3LnNldHRpbmdzLnB1c2goc2V0dGluZylcblxuICAjIFNldHRpbmcgaXMgcmVhZHk6IHRyaWdnZXIgbG9hZCBjb250ZW50XG4gICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICRzY29wZS5kZWZlcnJlZC5yZXNvbHZlKCRzY29wZS5wYXJlbnRXaWRnZXQpXG4pXG5cbm1vZHVsZS5kaXJlY3RpdmUoJ3NldHRpbmdPcmdhbml6YXRpb25zJywgKCR0ZW1wbGF0ZUNhY2hlKSAtPlxuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgc2NvcGU6IHtcbiAgICAgIHBhcmVudFdpZGdldDogJz0nXG4gICAgICBkZWZlcnJlZDogJz0nXG4gICAgfSxcbiAgICB0ZW1wbGF0ZTogJHRlbXBsYXRlQ2FjaGUuZ2V0KCd3aWRnZXRzLXNldHRpbmdzL29yZ2FuaXphdGlvbnMudG1wbC5odG1sJyksXG4gICAgY29udHJvbGxlcjogJ1NldHRpbmdPcmdhbml6YXRpb25zQ3RybCdcbiAgfVxuKVxuIl19

(function() {
  var module;

  module = angular.module('impac.components.widgets-settings.param-selector', []);

  module.controller('SettingParamSelectorCtrl', function($scope, ImpacWidgetsSvc) {
    var setting, w;
    $scope.showOptions = false;
    $scope.toggleShowOptions = function() {
      return $scope.showOptions = !$scope.showOptions;
    };
    $scope.selectOption = function(anOption) {
      if (anOption.value !== $scope.selected.value) {
        angular.extend($scope.selected, anOption);
        if (!$scope.noReload) {
          $scope.parentWidget.isLoading = true;
        }
        ImpacWidgetsSvc.updateWidgetSettings($scope.parentWidget, !$scope.noReload);
        if (angular.isDefined($scope.onSelect)) {
          $scope.onSelect();
        }
      }
      return $scope.toggleShowOptions();
    };
    $scope.getTruncateValue = function() {
      return parseInt($scope.truncateNo) || 20;
    };
    w = $scope.parentWidget;
    setting = {};
    setting.key = "param-selector";
    setting.isInitialized = false;
    setting.initialize = function() {
      if (w.content != null) {
        return setting.isInitialized = true;
      }
    };
    setting.toMetadata = function() {
      var param;
      param = {};
      if (!_.isEmpty($scope.selected)) {
        param[$scope.param] = $scope.selected.value;
      }
      return param;
    };
    w.settings.push(setting);
    return $scope.deferred.resolve($scope.parentWidget);
  });

  module.directive('settingParamSelector', function($templateCache) {
    return {
      restrict: 'A',
      scope: {
        parentWidget: '=',
        deferred: '=',
        param: '@',
        options: '=',
        selected: '=',
        truncateNo: '@',
        onSelect: '&'
      },
      link: function(scope, elements, attrs) {
        scope.noReload = typeof attrs.noReload !== 'undefined';
        return scope.truncateNo = attrs.truncateNo || 20;
      },
      template: $templateCache.get('widgets-settings/param-selector.tmpl.html'),
      controller: 'SettingParamSelectorCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy1zZXR0aW5ncy9wYXJhbS1zZWxlY3Rvci9wYXJhbS1zZWxlY3Rvci5kaXJlY3RpdmUuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQTs7RUFBQSxNQUFBLEdBQVMsT0FBTyxDQUFDLE1BQVIsQ0FBZSxrREFBZixFQUFrRSxFQUFsRTs7RUFFVCxNQUFNLENBQUMsVUFBUCxDQUFrQiwwQkFBbEIsRUFBOEMsU0FBQyxNQUFELEVBQVMsZUFBVDtBQUU1QyxRQUFBO0lBQUEsTUFBTSxDQUFDLFdBQVAsR0FBcUI7SUFFckIsTUFBTSxDQUFDLGlCQUFQLEdBQTJCLFNBQUE7YUFDekIsTUFBTSxDQUFDLFdBQVAsR0FBcUIsQ0FBQyxNQUFNLENBQUM7SUFESjtJQUczQixNQUFNLENBQUMsWUFBUCxHQUFzQixTQUFDLFFBQUQ7TUFDcEIsSUFBRyxRQUFRLENBQUMsS0FBVCxLQUFrQixNQUFNLENBQUMsUUFBUSxDQUFDLEtBQXJDO1FBQ0UsT0FBTyxDQUFDLE1BQVIsQ0FBZSxNQUFNLENBQUMsUUFBdEIsRUFBZ0MsUUFBaEM7UUFDQSxJQUFBLENBQTRDLE1BQU0sQ0FBQyxRQUFuRDtVQUFBLE1BQU0sQ0FBQyxZQUFZLENBQUMsU0FBcEIsR0FBZ0MsS0FBaEM7O1FBQ0EsZUFBZSxDQUFDLG9CQUFoQixDQUFxQyxNQUFNLENBQUMsWUFBNUMsRUFBeUQsQ0FBQyxNQUFNLENBQUMsUUFBakU7UUFDQSxJQUFxQixPQUFPLENBQUMsU0FBUixDQUFrQixNQUFNLENBQUMsUUFBekIsQ0FBckI7VUFBQSxNQUFNLENBQUMsUUFBUCxDQUFBLEVBQUE7U0FKRjs7YUFLQSxNQUFNLENBQUMsaUJBQVAsQ0FBQTtJQU5vQjtJQVF0QixNQUFNLENBQUMsZ0JBQVAsR0FBMEIsU0FBQTtBQUN4QixhQUFPLFFBQUEsQ0FBUyxNQUFNLENBQUMsVUFBaEIsQ0FBQSxJQUErQjtJQURkO0lBRzFCLENBQUEsR0FBSSxNQUFNLENBQUM7SUFHWCxPQUFBLEdBQVU7SUFDVixPQUFPLENBQUMsR0FBUixHQUFjO0lBQ2QsT0FBTyxDQUFDLGFBQVIsR0FBd0I7SUFHeEIsT0FBTyxDQUFDLFVBQVIsR0FBcUIsU0FBQTtNQUNuQixJQUFnQyxpQkFBaEM7ZUFBQSxPQUFPLENBQUMsYUFBUixHQUF3QixLQUF4Qjs7SUFEbUI7SUFHckIsT0FBTyxDQUFDLFVBQVIsR0FBcUIsU0FBQTtBQUNuQixVQUFBO01BQUEsS0FBQSxHQUFRO01BQ1IsSUFBK0MsQ0FBQyxDQUFDLENBQUMsT0FBRixDQUFVLE1BQU0sQ0FBQyxRQUFqQixDQUFoRDtRQUFBLEtBQU0sQ0FBQSxNQUFNLENBQUMsS0FBUCxDQUFOLEdBQXNCLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBdEM7O0FBQ0EsYUFBTztJQUhZO0lBS3JCLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBWCxDQUFnQixPQUFoQjtXQUlBLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBaEIsQ0FBd0IsTUFBTSxDQUFDLFlBQS9CO0VBdEM0QyxDQUE5Qzs7RUF5Q0EsTUFBTSxDQUFDLFNBQVAsQ0FBaUIsc0JBQWpCLEVBQXlDLFNBQUMsY0FBRDtBQUN2QyxXQUFPO01BQ0wsUUFBQSxFQUFVLEdBREw7TUFFTCxLQUFBLEVBQU87UUFDTCxZQUFBLEVBQWMsR0FEVDtRQUVMLFFBQUEsRUFBVSxHQUZMO1FBR0wsS0FBQSxFQUFPLEdBSEY7UUFJTCxPQUFBLEVBQVMsR0FKSjtRQUtMLFFBQUEsRUFBVSxHQUxMO1FBTUwsVUFBQSxFQUFZLEdBTlA7UUFPTCxRQUFBLEVBQVUsR0FQTDtPQUZGO01BV0wsSUFBQSxFQUFNLFNBQUMsS0FBRCxFQUFRLFFBQVIsRUFBa0IsS0FBbEI7UUFDSixLQUFLLENBQUMsUUFBTixHQUFpQixPQUFPLEtBQUssQ0FBQyxRQUFiLEtBQXlCO2VBQzFDLEtBQUssQ0FBQyxVQUFOLEdBQW1CLEtBQUssQ0FBQyxVQUFOLElBQW9CO01BRm5DLENBWEQ7TUFjTCxRQUFBLEVBQVUsY0FBYyxDQUFDLEdBQWYsQ0FBbUIsMkNBQW5CLENBZEw7TUFlTCxVQUFBLEVBQVksMEJBZlA7O0VBRGdDLENBQXpDO0FBM0NBIiwiZmlsZSI6ImNvbXBvbmVudHMvd2lkZ2V0cy1zZXR0aW5ncy9wYXJhbS1zZWxlY3Rvci9wYXJhbS1zZWxlY3Rvci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnaW1wYWMuY29tcG9uZW50cy53aWRnZXRzLXNldHRpbmdzLnBhcmFtLXNlbGVjdG9yJyxbXSlcblxubW9kdWxlLmNvbnRyb2xsZXIoJ1NldHRpbmdQYXJhbVNlbGVjdG9yQ3RybCcsICgkc2NvcGUsIEltcGFjV2lkZ2V0c1N2YykgLT5cblxuICAkc2NvcGUuc2hvd09wdGlvbnMgPSBmYWxzZVxuXG4gICRzY29wZS50b2dnbGVTaG93T3B0aW9ucyA9IC0+XG4gICAgJHNjb3BlLnNob3dPcHRpb25zID0gISRzY29wZS5zaG93T3B0aW9uc1xuXG4gICRzY29wZS5zZWxlY3RPcHRpb24gPSAoYW5PcHRpb24pIC0+XG4gICAgaWYgYW5PcHRpb24udmFsdWUgIT0gJHNjb3BlLnNlbGVjdGVkLnZhbHVlXG4gICAgICBhbmd1bGFyLmV4dGVuZCAkc2NvcGUuc2VsZWN0ZWQsIGFuT3B0aW9uXG4gICAgICAkc2NvcGUucGFyZW50V2lkZ2V0LmlzTG9hZGluZyA9IHRydWUgdW5sZXNzICRzY29wZS5ub1JlbG9hZFxuICAgICAgSW1wYWNXaWRnZXRzU3ZjLnVwZGF0ZVdpZGdldFNldHRpbmdzKCRzY29wZS5wYXJlbnRXaWRnZXQsISRzY29wZS5ub1JlbG9hZClcbiAgICAgICRzY29wZS5vblNlbGVjdCgpIGlmIGFuZ3VsYXIuaXNEZWZpbmVkICRzY29wZS5vblNlbGVjdFxuICAgICRzY29wZS50b2dnbGVTaG93T3B0aW9ucygpXG5cbiAgJHNjb3BlLmdldFRydW5jYXRlVmFsdWUgPSAtPlxuICAgIHJldHVybiBwYXJzZUludCgkc2NvcGUudHJ1bmNhdGVObykgfHwgMjBcblxuICB3ID0gJHNjb3BlLnBhcmVudFdpZGdldFxuXG4gICMgV2hhdCB3aWxsIGJlIHBhc3NlZCB0byBwYXJlbnRXaWRnZXRcbiAgc2V0dGluZyA9IHt9XG4gIHNldHRpbmcua2V5ID0gXCJwYXJhbS1zZWxlY3RvclwiXG4gIHNldHRpbmcuaXNJbml0aWFsaXplZCA9IGZhbHNlXG5cbiAgIyBpbml0aWFsaXphdGlvbiBvZiB0aW1lIHJhbmdlIHBhcmFtZXRlcnMgZnJvbSB3aWRnZXQuY29udGVudC5oaXN0X3BhcmFtZXRlcnNcbiAgc2V0dGluZy5pbml0aWFsaXplID0gLT5cbiAgICBzZXR0aW5nLmlzSW5pdGlhbGl6ZWQgPSB0cnVlIGlmIHcuY29udGVudD9cblxuICBzZXR0aW5nLnRvTWV0YWRhdGEgPSAtPlxuICAgIHBhcmFtID0ge31cbiAgICBwYXJhbVskc2NvcGUucGFyYW1dID0gJHNjb3BlLnNlbGVjdGVkLnZhbHVlIGlmICFfLmlzRW1wdHkoJHNjb3BlLnNlbGVjdGVkKVxuICAgIHJldHVybiBwYXJhbVxuXG4gIHcuc2V0dGluZ3MucHVzaChzZXR0aW5nKVxuXG4gICMgU2V0dGluZyBpcyByZWFkeTogdHJpZ2dlciBsb2FkIGNvbnRlbnRcbiAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgJHNjb3BlLmRlZmVycmVkLnJlc29sdmUoJHNjb3BlLnBhcmVudFdpZGdldClcbilcblxubW9kdWxlLmRpcmVjdGl2ZSgnc2V0dGluZ1BhcmFtU2VsZWN0b3InLCAoJHRlbXBsYXRlQ2FjaGUpIC0+XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBzY29wZToge1xuICAgICAgcGFyZW50V2lkZ2V0OiAnPSdcbiAgICAgIGRlZmVycmVkOiAnPSdcbiAgICAgIHBhcmFtOiAnQCdcbiAgICAgIG9wdGlvbnM6ICc9J1xuICAgICAgc2VsZWN0ZWQ6ICc9J1xuICAgICAgdHJ1bmNhdGVObzogJ0AnXG4gICAgICBvblNlbGVjdDogJyYnXG4gICAgfSxcbiAgICBsaW5rOiAoc2NvcGUsIGVsZW1lbnRzLCBhdHRycykgLT5cbiAgICAgIHNjb3BlLm5vUmVsb2FkID0gdHlwZW9mIGF0dHJzLm5vUmVsb2FkICE9ICd1bmRlZmluZWQnXG4gICAgICBzY29wZS50cnVuY2F0ZU5vID0gYXR0cnMudHJ1bmNhdGVObyB8fCAyMFxuICAgIHRlbXBsYXRlOiAkdGVtcGxhdGVDYWNoZS5nZXQoJ3dpZGdldHMtc2V0dGluZ3MvcGFyYW0tc2VsZWN0b3IudG1wbC5odG1sJyksXG4gICAgY29udHJvbGxlcjogJ1NldHRpbmdQYXJhbVNlbGVjdG9yQ3RybCdcbiAgfVxuKVxuIl19

(function() {
  var module;

  module = angular.module('impac.components.widgets-settings.params-checkboxes', []);

  module.controller('SettingParamsCheckboxesCtrl', function($scope) {
    var setting, w;
    w = $scope.parentWidget;
    setting = {};
    setting.key = "params-checkboxes";
    setting.initialize = function() {};
    setting.toMetadata = function() {
      var param;
      param = {};
      param[$scope.param] = _.map($scope.options, function(opt) {
        return {
          id: opt.id,
          value: opt.value
        };
      });
      return param;
    };
    w.settings.push(setting);
    return $scope.deferred.resolve($scope.parentWidget);
  });

  module.directive('settingParamsCheckboxes', function($templateCache) {
    return {
      restrict: 'A',
      scope: {
        parentWidget: '=',
        deferred: '=',
        param: '@',
        options: '='
      },
      template: $templateCache.get('widgets-settings/params-checkboxes.tmpl.html'),
      controller: 'SettingParamsCheckboxesCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy1zZXR0aW5ncy9wYXJhbXMtY2hlY2tib3hlcy9wYXJhbXMtY2hlY2tib3hlcy5kaXJlY3RpdmUuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQTs7RUFBQSxNQUFBLEdBQVMsT0FBTyxDQUFDLE1BQVIsQ0FBZSxxREFBZixFQUFxRSxFQUFyRTs7RUFFVCxNQUFNLENBQUMsVUFBUCxDQUFrQiw2QkFBbEIsRUFBaUQsU0FBQyxNQUFEO0FBRS9DLFFBQUE7SUFBQSxDQUFBLEdBQUksTUFBTSxDQUFDO0lBR1gsT0FBQSxHQUFVO0lBQ1YsT0FBTyxDQUFDLEdBQVIsR0FBYztJQUVkLE9BQU8sQ0FBQyxVQUFSLEdBQXFCLFNBQUEsR0FBQTtJQUVyQixPQUFPLENBQUMsVUFBUixHQUFxQixTQUFBO0FBQ25CLFVBQUE7TUFBQSxLQUFBLEdBQVE7TUFDUixLQUFNLENBQUEsTUFBTSxDQUFDLEtBQVAsQ0FBTixHQUFzQixDQUFDLENBQUMsR0FBRixDQUFNLE1BQU0sQ0FBQyxPQUFiLEVBQXNCLFNBQUMsR0FBRDtlQUFTO1VBQUUsRUFBQSxFQUFJLEdBQUcsQ0FBQyxFQUFWO1VBQWMsS0FBQSxFQUFPLEdBQUcsQ0FBQyxLQUF6Qjs7TUFBVCxDQUF0QjtBQUN0QixhQUFPO0lBSFk7SUFLckIsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFYLENBQWdCLE9BQWhCO1dBSUEsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFoQixDQUF3QixNQUFNLENBQUMsWUFBL0I7RUFuQitDLENBQWpEOztFQXNCQSxNQUFNLENBQUMsU0FBUCxDQUFpQix5QkFBakIsRUFBNEMsU0FBQyxjQUFEO0FBQzFDLFdBQU87TUFDTCxRQUFBLEVBQVUsR0FETDtNQUVMLEtBQUEsRUFBTztRQUNMLFlBQUEsRUFBYyxHQURUO1FBRUwsUUFBQSxFQUFVLEdBRkw7UUFHTCxLQUFBLEVBQU8sR0FIRjtRQUlMLE9BQUEsRUFBUyxHQUpKO09BRkY7TUFRTCxRQUFBLEVBQVUsY0FBYyxDQUFDLEdBQWYsQ0FBbUIsOENBQW5CLENBUkw7TUFTTCxVQUFBLEVBQVksNkJBVFA7O0VBRG1DLENBQTVDO0FBeEJBIiwiZmlsZSI6ImNvbXBvbmVudHMvd2lkZ2V0cy1zZXR0aW5ncy9wYXJhbXMtY2hlY2tib3hlcy9wYXJhbXMtY2hlY2tib3hlcy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnaW1wYWMuY29tcG9uZW50cy53aWRnZXRzLXNldHRpbmdzLnBhcmFtcy1jaGVja2JveGVzJyxbXSlcblxubW9kdWxlLmNvbnRyb2xsZXIoJ1NldHRpbmdQYXJhbXNDaGVja2JveGVzQ3RybCcsICgkc2NvcGUpIC0+XG5cbiAgdyA9ICRzY29wZS5wYXJlbnRXaWRnZXRcblxuICAjIFdoYXQgd2lsbCBiZSBwYXNzZWQgdG8gcGFyZW50V2lkZ2V0XG4gIHNldHRpbmcgPSB7fVxuICBzZXR0aW5nLmtleSA9IFwicGFyYW1zLWNoZWNrYm94ZXNcIlxuXG4gIHNldHRpbmcuaW5pdGlhbGl6ZSA9IC0+XG5cbiAgc2V0dGluZy50b01ldGFkYXRhID0gLT5cbiAgICBwYXJhbSA9IHt9XG4gICAgcGFyYW1bJHNjb3BlLnBhcmFtXSA9IF8ubWFwICRzY29wZS5vcHRpb25zLCAob3B0KSAtPiB7IGlkOiBvcHQuaWQsIHZhbHVlOiBvcHQudmFsdWUgfVxuICAgIHJldHVybiBwYXJhbVxuXG4gIHcuc2V0dGluZ3MucHVzaChzZXR0aW5nKVxuXG4gICMgU2V0dGluZyBpcyByZWFkeTogdHJpZ2dlciBsb2FkIGNvbnRlbnRcbiAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgJHNjb3BlLmRlZmVycmVkLnJlc29sdmUoJHNjb3BlLnBhcmVudFdpZGdldClcbilcblxubW9kdWxlLmRpcmVjdGl2ZSgnc2V0dGluZ1BhcmFtc0NoZWNrYm94ZXMnLCAoJHRlbXBsYXRlQ2FjaGUpIC0+XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBzY29wZToge1xuICAgICAgcGFyZW50V2lkZ2V0OiAnPScsXG4gICAgICBkZWZlcnJlZDogJz0nXG4gICAgICBwYXJhbTogJ0AnLFxuICAgICAgb3B0aW9uczogJz0nLFxuICAgIH0sXG4gICAgdGVtcGxhdGU6ICR0ZW1wbGF0ZUNhY2hlLmdldCgnd2lkZ2V0cy1zZXR0aW5ncy9wYXJhbXMtY2hlY2tib3hlcy50bXBsLmh0bWwnKSxcbiAgICBjb250cm9sbGVyOiAnU2V0dGluZ1BhcmFtc0NoZWNrYm94ZXNDdHJsJ1xuICB9XG4pXG4iXX0=

(function() {
  var module;

  module = angular.module('impac.components.widgets-settings.params-picker', []);

  module.controller('SettingParamsPickerCtrl', function($scope) {
    var setting, w;
    w = $scope.parentWidget;
    setting = {};
    setting.key = "params-picker";
    setting.isInitialized = false;
    setting.initialize = function() {
      $scope.sortableOptions = {
        'ui-floating': true,
        tolerance: 'pointer'
      };
      if (_.isEmpty($scope.options)) {
        return setting.isInitialized = true;
      }
    };
    setting.toMetadata = function() {
      var param;
      param = {};
      param[$scope.param] = _.compact(_.map($scope.options, function(statusOption) {
        if (statusOption.selected) {
          return statusOption.label;
        }
      }));
      return param;
    };
    w.settings.push(setting);
    return $scope.deferred.resolve($scope.parentWidget);
  });

  module.directive('settingParamsPicker', function($templateCache) {
    return {
      restrict: 'A',
      scope: {
        parentWidget: '=',
        deferred: '=',
        param: '@',
        options: '='
      },
      link: function(scope, elements, attrs) {
        return scope.formattedParam = scope.param.replace('_', ' ');
      },
      template: $templateCache.get('widgets-settings/params-picker.tmpl.html'),
      controller: 'SettingParamsPickerCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy1zZXR0aW5ncy9wYXJhbXMtcGlja2VyL3BhcmFtcy1waWNrZXIuZGlyZWN0aXZlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUE7O0VBQUEsTUFBQSxHQUFTLE9BQU8sQ0FBQyxNQUFSLENBQWUsaURBQWYsRUFBaUUsRUFBakU7O0VBRVQsTUFBTSxDQUFDLFVBQVAsQ0FBa0IseUJBQWxCLEVBQTZDLFNBQUMsTUFBRDtBQUUzQyxRQUFBO0lBQUEsQ0FBQSxHQUFJLE1BQU0sQ0FBQztJQUdYLE9BQUEsR0FBVTtJQUNWLE9BQU8sQ0FBQyxHQUFSLEdBQWM7SUFDZCxPQUFPLENBQUMsYUFBUixHQUF3QjtJQUV4QixPQUFPLENBQUMsVUFBUixHQUFxQixTQUFBO01BQ25CLE1BQU0sQ0FBQyxlQUFQLEdBQXlCO1FBQ3ZCLGFBQUEsRUFBZSxJQURRO1FBRXZCLFNBQUEsRUFBVyxTQUZZOztNQUl6QixJQUFnQyxDQUFDLENBQUMsT0FBRixDQUFVLE1BQU0sQ0FBQyxPQUFqQixDQUFoQztlQUFBLE9BQU8sQ0FBQyxhQUFSLEdBQXdCLEtBQXhCOztJQUxtQjtJQVFyQixPQUFPLENBQUMsVUFBUixHQUFxQixTQUFBO0FBQ25CLFVBQUE7TUFBQSxLQUFBLEdBQVE7TUFDUixLQUFNLENBQUEsTUFBTSxDQUFDLEtBQVAsQ0FBTixHQUFzQixDQUFDLENBQUMsT0FBRixDQUFVLENBQUMsQ0FBQyxHQUFGLENBQU0sTUFBTSxDQUFDLE9BQWIsRUFBc0IsU0FBQyxZQUFEO1FBQ3BELElBQXNCLFlBQVksQ0FBQyxRQUFuQztpQkFBQSxZQUFZLENBQUMsTUFBYjs7TUFEb0QsQ0FBdEIsQ0FBVjtBQUd0QixhQUFPO0lBTFk7SUFPckIsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFYLENBQWdCLE9BQWhCO1dBSUEsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFoQixDQUF3QixNQUFNLENBQUMsWUFBL0I7RUE1QjJDLENBQTdDOztFQStCQSxNQUFNLENBQUMsU0FBUCxDQUFpQixxQkFBakIsRUFBd0MsU0FBQyxjQUFEO0FBQ3RDLFdBQU87TUFDTCxRQUFBLEVBQVUsR0FETDtNQUVMLEtBQUEsRUFBTztRQUNMLFlBQUEsRUFBYyxHQURUO1FBRUwsUUFBQSxFQUFVLEdBRkw7UUFHTCxLQUFBLEVBQU8sR0FIRjtRQUlMLE9BQUEsRUFBUyxHQUpKO09BRkY7TUFRTCxJQUFBLEVBQU0sU0FBQyxLQUFELEVBQVEsUUFBUixFQUFrQixLQUFsQjtlQUNKLEtBQUssQ0FBQyxjQUFOLEdBQXVCLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBWixDQUFvQixHQUFwQixFQUF3QixHQUF4QjtNQURuQixDQVJEO01BVUwsUUFBQSxFQUFVLGNBQWMsQ0FBQyxHQUFmLENBQW1CLDBDQUFuQixDQVZMO01BV0wsVUFBQSxFQUFZLHlCQVhQOztFQUQrQixDQUF4QztBQWpDQSIsImZpbGUiOiJjb21wb25lbnRzL3dpZGdldHMtc2V0dGluZ3MvcGFyYW1zLXBpY2tlci9wYXJhbXMtcGlja2VyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdpbXBhYy5jb21wb25lbnRzLndpZGdldHMtc2V0dGluZ3MucGFyYW1zLXBpY2tlcicsW10pXG5cbm1vZHVsZS5jb250cm9sbGVyKCdTZXR0aW5nUGFyYW1zUGlja2VyQ3RybCcsICgkc2NvcGUpIC0+XG5cbiAgdyA9ICRzY29wZS5wYXJlbnRXaWRnZXRcblxuICAjIFdoYXQgd2lsbCBiZSBwYXNzZWQgdG8gcGFyZW50V2lkZ2V0XG4gIHNldHRpbmcgPSB7fVxuICBzZXR0aW5nLmtleSA9IFwicGFyYW1zLXBpY2tlclwiXG4gIHNldHRpbmcuaXNJbml0aWFsaXplZCA9IGZhbHNlXG5cbiAgc2V0dGluZy5pbml0aWFsaXplID0gLT5cbiAgICAkc2NvcGUuc29ydGFibGVPcHRpb25zID0ge1xuICAgICAgJ3VpLWZsb2F0aW5nJzogdHJ1ZSxcbiAgICAgIHRvbGVyYW5jZTogJ3BvaW50ZXInXG4gICAgfVxuICAgIHNldHRpbmcuaXNJbml0aWFsaXplZCA9IHRydWUgaWYgXy5pc0VtcHR5KCRzY29wZS5vcHRpb25zKVxuXG5cbiAgc2V0dGluZy50b01ldGFkYXRhID0gLT5cbiAgICBwYXJhbSA9IHt9XG4gICAgcGFyYW1bJHNjb3BlLnBhcmFtXSA9IF8uY29tcGFjdChfLm1hcCAkc2NvcGUub3B0aW9ucywgKHN0YXR1c09wdGlvbikgLT5cbiAgICAgIHN0YXR1c09wdGlvbi5sYWJlbCBpZiBzdGF0dXNPcHRpb24uc2VsZWN0ZWRcbiAgICApXG4gICAgcmV0dXJuIHBhcmFtXG5cbiAgdy5zZXR0aW5ncy5wdXNoKHNldHRpbmcpXG5cbiAgIyBTZXR0aW5nIGlzIHJlYWR5OiB0cmlnZ2VyIGxvYWQgY29udGVudFxuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAkc2NvcGUuZGVmZXJyZWQucmVzb2x2ZSgkc2NvcGUucGFyZW50V2lkZ2V0KVxuKVxuXG5tb2R1bGUuZGlyZWN0aXZlKCdzZXR0aW5nUGFyYW1zUGlja2VyJywgKCR0ZW1wbGF0ZUNhY2hlKSAtPlxuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgc2NvcGU6IHtcbiAgICAgIHBhcmVudFdpZGdldDogJz0nLFxuICAgICAgZGVmZXJyZWQ6ICc9J1xuICAgICAgcGFyYW06ICdAJyxcbiAgICAgIG9wdGlvbnM6ICc9JyxcbiAgICB9LFxuICAgIGxpbms6IChzY29wZSwgZWxlbWVudHMsIGF0dHJzKSAtPlxuICAgICAgc2NvcGUuZm9ybWF0dGVkUGFyYW0gPSBzY29wZS5wYXJhbS5yZXBsYWNlKCdfJywnICcpXG4gICAgdGVtcGxhdGU6ICR0ZW1wbGF0ZUNhY2hlLmdldCgnd2lkZ2V0cy1zZXR0aW5ncy9wYXJhbXMtcGlja2VyLnRtcGwuaHRtbCcpLFxuICAgIGNvbnRyb2xsZXI6ICdTZXR0aW5nUGFyYW1zUGlja2VyQ3RybCdcbiAgfVxuKVxuIl19

(function() {
  var module;

  module = angular.module('impac.components.widgets-settings.time-range', []);

  module.controller('SettingTimeRangeCtrl', function($scope, $log) {
    var setting, w;
    w = $scope.parentWidget;
    $scope.numberOfPeriods = (new Date()).getMonth() + 1;
    $scope.selectedPeriod = "MONTHLY";
    $scope.PERIODS = ['DAILY', 'WEEKLY', 'MONTHLY', 'QUARTERLY', 'YEARLY'];
    $scope.periodToUnit = function() {
      var nb, period, unit;
      nb = $scope.numberOfPeriods;
      period = $scope.selectedPeriod;
      if (period !== "DAILY") {
        unit = period.substring(0, period.length - 2).toLowerCase();
      } else {
        unit = "day";
      }
      if (nb > 1) {
        unit = unit.concat("s");
      }
      return unit;
    };
    setting = {};
    setting.key = "time-range";
    setting.isInitialized = false;
    setting.initialize = function() {
      var hist;
      if ((w.metadata != null) && (hist = w.metadata.hist_parameters)) {
        if (hist.period != null) {
          $scope.selectedPeriod = hist.period;
        }
        if (hist.number_of_periods != null) {
          $scope.numberOfPeriods = hist.number_of_periods;
        }
        return setting.isInitialized = true;
      }
    };
    setting.toMetadata = function() {
      return {
        hist_parameters: {
          period: $scope.selectedPeriod,
          number_of_periods: $scope.numberOfPeriods
        }
      };
    };
    w.settings || (w.settings = []);
    w.settings.push(setting);
    return $scope.deferred.resolve($scope.parentWidget);
  });

  module.directive('settingTimeRange', function($templateCache) {
    return {
      restrict: 'A',
      scope: {
        parentWidget: '=',
        deferred: '='
      },
      template: $templateCache.get('widgets-settings/time-range.tmpl.html'),
      controller: 'SettingTimeRangeCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy1zZXR0aW5ncy90aW1lLXJhbmdlL3RpbWUtcmFuZ2UuZGlyZWN0aXZlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUE7O0VBQUEsTUFBQSxHQUFTLE9BQU8sQ0FBQyxNQUFSLENBQWUsOENBQWYsRUFBOEQsRUFBOUQ7O0VBRVQsTUFBTSxDQUFDLFVBQVAsQ0FBa0Isc0JBQWxCLEVBQTBDLFNBQUMsTUFBRCxFQUFTLElBQVQ7QUFFeEMsUUFBQTtJQUFBLENBQUEsR0FBSSxNQUFNLENBQUM7SUFFWCxNQUFNLENBQUMsZUFBUCxHQUF5QixDQUFLLElBQUEsSUFBQSxDQUFBLENBQUwsQ0FBWSxDQUFDLFFBQWIsQ0FBQSxDQUFBLEdBQTBCO0lBQ25ELE1BQU0sQ0FBQyxjQUFQLEdBQXdCO0lBQ3hCLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLENBQUMsT0FBRCxFQUFTLFFBQVQsRUFBa0IsU0FBbEIsRUFBNEIsV0FBNUIsRUFBd0MsUUFBeEM7SUFFakIsTUFBTSxDQUFDLFlBQVAsR0FBc0IsU0FBQTtBQUNwQixVQUFBO01BQUEsRUFBQSxHQUFLLE1BQU0sQ0FBQztNQUNaLE1BQUEsR0FBUyxNQUFNLENBQUM7TUFDaEIsSUFBRyxNQUFBLEtBQVUsT0FBYjtRQUNFLElBQUEsR0FBTyxNQUFNLENBQUMsU0FBUCxDQUFpQixDQUFqQixFQUFtQixNQUFNLENBQUMsTUFBUCxHQUFjLENBQWpDLENBQW1DLENBQUMsV0FBcEMsQ0FBQSxFQURUO09BQUEsTUFBQTtRQUdFLElBQUEsR0FBTyxNQUhUOztNQUlBLElBQUcsRUFBQSxHQUFLLENBQVI7UUFDRSxJQUFBLEdBQU8sSUFBSSxDQUFDLE1BQUwsQ0FBWSxHQUFaLEVBRFQ7O0FBRUEsYUFBTztJQVRhO0lBWXRCLE9BQUEsR0FBVTtJQUNWLE9BQU8sQ0FBQyxHQUFSLEdBQWM7SUFDZCxPQUFPLENBQUMsYUFBUixHQUF3QjtJQUd4QixPQUFPLENBQUMsVUFBUixHQUFxQixTQUFBO0FBRW5CLFVBQUE7TUFBQSxJQUFHLG9CQUFBLElBQWUsQ0FBQSxJQUFBLEdBQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxlQUFsQixDQUFsQjtRQUNFLElBQXVDLG1CQUF2QztVQUFBLE1BQU0sQ0FBQyxjQUFQLEdBQXdCLElBQUksQ0FBQyxPQUE3Qjs7UUFDQSxJQUFtRCw4QkFBbkQ7VUFBQSxNQUFNLENBQUMsZUFBUCxHQUF5QixJQUFJLENBQUMsa0JBQTlCOztlQUNBLE9BQU8sQ0FBQyxhQUFSLEdBQXdCLEtBSDFCOztJQUZtQjtJQU9yQixPQUFPLENBQUMsVUFBUixHQUFxQixTQUFBO0FBQ25CLGFBQU87UUFBRSxlQUFBLEVBQWlCO1VBQUMsTUFBQSxFQUFRLE1BQU0sQ0FBQyxjQUFoQjtVQUFnQyxpQkFBQSxFQUFtQixNQUFNLENBQUMsZUFBMUQ7U0FBbkI7O0lBRFk7SUFHckIsQ0FBQyxDQUFDLGFBQUYsQ0FBQyxDQUFDLFdBQWE7SUFDZixDQUFDLENBQUMsUUFBUSxDQUFDLElBQVgsQ0FBZ0IsT0FBaEI7V0FJQSxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQWhCLENBQXdCLE1BQU0sQ0FBQyxZQUEvQjtFQXhDd0MsQ0FBMUM7O0VBMkNBLE1BQU0sQ0FBQyxTQUFQLENBQWlCLGtCQUFqQixFQUFxQyxTQUFDLGNBQUQ7QUFDbkMsV0FBTztNQUNMLFFBQUEsRUFBVSxHQURMO01BRUwsS0FBQSxFQUFPO1FBQ0wsWUFBQSxFQUFjLEdBRFQ7UUFFTCxRQUFBLEVBQVUsR0FGTDtPQUZGO01BTUwsUUFBQSxFQUFVLGNBQWMsQ0FBQyxHQUFmLENBQW1CLHVDQUFuQixDQU5MO01BT0wsVUFBQSxFQUFZLHNCQVBQOztFQUQ0QixDQUFyQztBQTdDQSIsImZpbGUiOiJjb21wb25lbnRzL3dpZGdldHMtc2V0dGluZ3MvdGltZS1yYW5nZS90aW1lLXJhbmdlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdpbXBhYy5jb21wb25lbnRzLndpZGdldHMtc2V0dGluZ3MudGltZS1yYW5nZScsW10pXG5cbm1vZHVsZS5jb250cm9sbGVyKCdTZXR0aW5nVGltZVJhbmdlQ3RybCcsICgkc2NvcGUsICRsb2cpIC0+XG5cbiAgdyA9ICRzY29wZS5wYXJlbnRXaWRnZXRcblxuICAkc2NvcGUubnVtYmVyT2ZQZXJpb2RzID0gKG5ldyBEYXRlKCkpLmdldE1vbnRoKCkgKyAxXG4gICRzY29wZS5zZWxlY3RlZFBlcmlvZCA9IFwiTU9OVEhMWVwiXG4gICRzY29wZS5QRVJJT0RTID0gWydEQUlMWScsJ1dFRUtMWScsJ01PTlRITFknLCdRVUFSVEVSTFknLCdZRUFSTFknXVxuXG4gICRzY29wZS5wZXJpb2RUb1VuaXQgPSAtPlxuICAgIG5iID0gJHNjb3BlLm51bWJlck9mUGVyaW9kc1xuICAgIHBlcmlvZCA9ICRzY29wZS5zZWxlY3RlZFBlcmlvZFxuICAgIGlmIHBlcmlvZCAhPSBcIkRBSUxZXCJcbiAgICAgIHVuaXQgPSBwZXJpb2Quc3Vic3RyaW5nKDAscGVyaW9kLmxlbmd0aC0yKS50b0xvd2VyQ2FzZSgpXG4gICAgZWxzZVxuICAgICAgdW5pdCA9IFwiZGF5XCJcbiAgICBpZiBuYiA+IDFcbiAgICAgIHVuaXQgPSB1bml0LmNvbmNhdChcInNcIilcbiAgICByZXR1cm4gdW5pdFxuXG4gICMgV2hhdCB3aWxsIGJlIHBhc3NlZCB0byBwYXJlbnRXaWRnZXRcbiAgc2V0dGluZyA9IHt9XG4gIHNldHRpbmcua2V5ID0gXCJ0aW1lLXJhbmdlXCJcbiAgc2V0dGluZy5pc0luaXRpYWxpemVkID0gZmFsc2VcblxuICAjIGluaXRpYWxpemF0aW9uIG9mIHRpbWUgcmFuZ2UgcGFyYW1ldGVycyBmcm9tIHdpZGdldC5jb250ZW50Lmhpc3RfcGFyYW1ldGVyc1xuICBzZXR0aW5nLmluaXRpYWxpemUgPSAtPlxuICAgICMgaWYgdy5jb250ZW50PyAmJiBoaXN0ID0gdy5jb250ZW50Lmhpc3RfcGFyYW1ldGVyc1xuICAgIGlmIHcubWV0YWRhdGE/ICYmIGhpc3QgPSB3Lm1ldGFkYXRhLmhpc3RfcGFyYW1ldGVyc1xuICAgICAgJHNjb3BlLnNlbGVjdGVkUGVyaW9kID0gaGlzdC5wZXJpb2QgaWYgaGlzdC5wZXJpb2Q/XG4gICAgICAkc2NvcGUubnVtYmVyT2ZQZXJpb2RzID0gaGlzdC5udW1iZXJfb2ZfcGVyaW9kcyBpZiBoaXN0Lm51bWJlcl9vZl9wZXJpb2RzP1xuICAgICAgc2V0dGluZy5pc0luaXRpYWxpemVkID0gdHJ1ZVxuXG4gIHNldHRpbmcudG9NZXRhZGF0YSA9IC0+XG4gICAgcmV0dXJuIHsgaGlzdF9wYXJhbWV0ZXJzOiB7cGVyaW9kOiAkc2NvcGUuc2VsZWN0ZWRQZXJpb2QsIG51bWJlcl9vZl9wZXJpb2RzOiAkc2NvcGUubnVtYmVyT2ZQZXJpb2RzfSB9XG5cbiAgdy5zZXR0aW5ncyB8fD0gW11cbiAgdy5zZXR0aW5ncy5wdXNoKHNldHRpbmcpXG5cbiAgIyBTZXR0aW5nIGlzIHJlYWR5OiB0cmlnZ2VyIGxvYWQgY29udGVudFxuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAkc2NvcGUuZGVmZXJyZWQucmVzb2x2ZSgkc2NvcGUucGFyZW50V2lkZ2V0KVxuKVxuXG5tb2R1bGUuZGlyZWN0aXZlKCdzZXR0aW5nVGltZVJhbmdlJywgKCR0ZW1wbGF0ZUNhY2hlKSAtPlxuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgc2NvcGU6IHtcbiAgICAgIHBhcmVudFdpZGdldDogJz0nXG4gICAgICBkZWZlcnJlZDogJz0nXG4gICAgfSxcbiAgICB0ZW1wbGF0ZTogJHRlbXBsYXRlQ2FjaGUuZ2V0KCd3aWRnZXRzLXNldHRpbmdzL3RpbWUtcmFuZ2UudG1wbC5odG1sJyksXG4gICAgY29udHJvbGxlcjogJ1NldHRpbmdUaW1lUmFuZ2VDdHJsJ1xuICB9XG4pXG4iXX0=

(function() {
  var module;

  module = angular.module('impac.components.widgets-settings.width', []);

  module.controller('SettingWidthCtrl', function($scope, $element, $timeout, $log, ImpacWidgetsSvc) {
    var elem, hideOnResize, i, len, ref, setting, w;
    w = $scope.parentWidget;
    setting = {};
    setting.key = "width";
    setting.isInitialized = false;
    ref = $element.parents();
    for (i = 0, len = ref.length; i < len; i++) {
      elem = ref[i];
      if (angular.element(elem).hasClass('content')) {
        $scope.contentElements = angular.element(elem).children();
        break;
      }
    }
    hideOnResize = function(elements) {
      var j, len1;
      if (!(elements && elements.length > 0)) {
        return;
      }
      for (j = 0, len1 = elements.length; j < len1; j++) {
        elem = elements[j];
        angular.element(elem).animate({
          opacity: 0
        }, 0);
      }
      return $timeout(function() {
        var k, len2, results;
        results = [];
        for (k = 0, len2 = elements.length; k < len2; k++) {
          elem = elements[k];
          results.push(angular.element(elem).animate({
            opacity: 1
          }, 200));
        }
        return results;
      }, 300);
    };
    w.toggleExpanded = function() {
      $scope.expanded = !$scope.expanded;
      ImpacWidgetsSvc.updateWidgetSettings(w, false);
      hideOnResize($scope.contentElements);
      if ($scope.expanded) {
        return w.width = parseInt($scope.max);
      } else {
        return w.width = parseInt($scope.min);
      }
    };
    w.isExpanded = function() {
      return $scope.expanded;
    };
    setting.initialize = function() {
      if (w.width != null) {
        $scope.expanded = w.width === parseInt($scope.max);
        return setting.isInitialized = true;
      }
    };
    setting.toMetadata = function() {
      var newWidth;
      if ($scope.expanded) {
        newWidth = $scope.max;
      } else {
        newWidth = $scope.min;
      }
      return {
        width: parseInt(newWidth)
      };
    };
    w.settings.push(setting);
    return $scope.deferred.resolve($scope.parentWidget);
  });

  module.directive('settingWidth', function($templateCache) {
    return {
      restrict: 'A',
      scope: {
        parentWidget: '=',
        deferred: '=',
        min: '@',
        max: '@'
      },
      template: $templateCache.get('widgets-settings/width.tmpl.html'),
      controller: 'SettingWidthCtrl'
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy1zZXR0aW5ncy93aWR0aC93aWR0aC5kaXJlY3RpdmUuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQTs7RUFBQSxNQUFBLEdBQVMsT0FBTyxDQUFDLE1BQVIsQ0FBZSx5Q0FBZixFQUF5RCxFQUF6RDs7RUFFVCxNQUFNLENBQUMsVUFBUCxDQUFrQixrQkFBbEIsRUFBc0MsU0FBQyxNQUFELEVBQVMsUUFBVCxFQUFtQixRQUFuQixFQUE2QixJQUE3QixFQUFtQyxlQUFuQztBQUVwQyxRQUFBO0lBQUEsQ0FBQSxHQUFJLE1BQU0sQ0FBQztJQUdYLE9BQUEsR0FBVTtJQUNWLE9BQU8sQ0FBQyxHQUFSLEdBQWM7SUFDZCxPQUFPLENBQUMsYUFBUixHQUF3QjtBQUd4QjtBQUFBLFNBQUEscUNBQUE7O01BQ0UsSUFBRyxPQUFPLENBQUMsT0FBUixDQUFnQixJQUFoQixDQUFxQixDQUFDLFFBQXRCLENBQStCLFNBQS9CLENBQUg7UUFDRSxNQUFNLENBQUMsZUFBUCxHQUF5QixPQUFPLENBQUMsT0FBUixDQUFnQixJQUFoQixDQUFxQixDQUFDLFFBQXRCLENBQUE7QUFDekIsY0FGRjs7QUFERjtJQU9BLFlBQUEsR0FBZSxTQUFDLFFBQUQ7QUFDYixVQUFBO01BQUEsSUFBQSxDQUFjLENBQUMsUUFBQSxJQUFZLFFBQVEsQ0FBQyxNQUFULEdBQWtCLENBQS9CLENBQWQ7QUFBQSxlQUFBOztBQUVBLFdBQUEsNENBQUE7O1FBQ0UsT0FBTyxDQUFDLE9BQVIsQ0FBZ0IsSUFBaEIsQ0FBcUIsQ0FBQyxPQUF0QixDQUE4QjtVQUFDLE9BQUEsRUFBUyxDQUFWO1NBQTlCLEVBQTRDLENBQTVDO0FBREY7YUFHQSxRQUFBLENBQVMsU0FBQTtBQUNQLFlBQUE7QUFBQTthQUFBLDRDQUFBOzt1QkFDRSxPQUFPLENBQUMsT0FBUixDQUFnQixJQUFoQixDQUFxQixDQUFDLE9BQXRCLENBQThCO1lBQUMsT0FBQSxFQUFTLENBQVY7V0FBOUIsRUFBNEMsR0FBNUM7QUFERjs7TUFETyxDQUFULEVBR0UsR0FIRjtJQU5hO0lBV2YsQ0FBQyxDQUFDLGNBQUYsR0FBbUIsU0FBQTtNQUNqQixNQUFNLENBQUMsUUFBUCxHQUFrQixDQUFDLE1BQU0sQ0FBQztNQUUxQixlQUFlLENBQUMsb0JBQWhCLENBQXFDLENBQXJDLEVBQXVDLEtBQXZDO01BRUEsWUFBQSxDQUFhLE1BQU0sQ0FBQyxlQUFwQjtNQUVBLElBQUcsTUFBTSxDQUFDLFFBQVY7ZUFDRSxDQUFDLENBQUMsS0FBRixHQUFVLFFBQUEsQ0FBUyxNQUFNLENBQUMsR0FBaEIsRUFEWjtPQUFBLE1BQUE7ZUFHRSxDQUFDLENBQUMsS0FBRixHQUFVLFFBQUEsQ0FBUyxNQUFNLENBQUMsR0FBaEIsRUFIWjs7SUFQaUI7SUFZbkIsQ0FBQyxDQUFDLFVBQUYsR0FBZSxTQUFBO2FBQ2IsTUFBTSxDQUFDO0lBRE07SUFJZixPQUFPLENBQUMsVUFBUixHQUFxQixTQUFBO01BQ25CLElBQUcsZUFBSDtRQUNFLE1BQU0sQ0FBQyxRQUFQLEdBQW1CLENBQUMsQ0FBQyxLQUFGLEtBQVcsUUFBQSxDQUFTLE1BQU0sQ0FBQyxHQUFoQjtlQUM5QixPQUFPLENBQUMsYUFBUixHQUF3QixLQUYxQjs7SUFEbUI7SUFLckIsT0FBTyxDQUFDLFVBQVIsR0FBcUIsU0FBQTtBQUNuQixVQUFBO01BQUEsSUFBRyxNQUFNLENBQUMsUUFBVjtRQUNFLFFBQUEsR0FBVyxNQUFNLENBQUMsSUFEcEI7T0FBQSxNQUFBO1FBR0UsUUFBQSxHQUFXLE1BQU0sQ0FBQyxJQUhwQjs7QUFJQSxhQUFPO1FBQUUsS0FBQSxFQUFPLFFBQUEsQ0FBUyxRQUFULENBQVQ7O0lBTFk7SUFPckIsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFYLENBQWdCLE9BQWhCO1dBSUEsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFoQixDQUF3QixNQUFNLENBQUMsWUFBL0I7RUE1RG9DLENBQXRDOztFQStEQSxNQUFNLENBQUMsU0FBUCxDQUFpQixjQUFqQixFQUFpQyxTQUFDLGNBQUQ7QUFDL0IsV0FBTztNQUNMLFFBQUEsRUFBVSxHQURMO01BRUwsS0FBQSxFQUFPO1FBQ0wsWUFBQSxFQUFjLEdBRFQ7UUFFTCxRQUFBLEVBQVUsR0FGTDtRQUdMLEdBQUEsRUFBSyxHQUhBO1FBSUwsR0FBQSxFQUFLLEdBSkE7T0FGRjtNQVFMLFFBQUEsRUFBVSxjQUFjLENBQUMsR0FBZixDQUFtQixrQ0FBbkIsQ0FSTDtNQVNMLFVBQUEsRUFBWSxrQkFUUDs7RUFEd0IsQ0FBakM7QUFqRUEiLCJmaWxlIjoiY29tcG9uZW50cy93aWRnZXRzLXNldHRpbmdzL3dpZHRoL3dpZHRoLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdpbXBhYy5jb21wb25lbnRzLndpZGdldHMtc2V0dGluZ3Mud2lkdGgnLFtdKVxuXG5tb2R1bGUuY29udHJvbGxlcignU2V0dGluZ1dpZHRoQ3RybCcsICgkc2NvcGUsICRlbGVtZW50LCAkdGltZW91dCwgJGxvZywgSW1wYWNXaWRnZXRzU3ZjKSAtPlxuXG4gIHcgPSAkc2NvcGUucGFyZW50V2lkZ2V0XG5cbiAgIyBXaGF0IHdpbGwgYmUgcGFzc2VkIHRvIHBhcmVudFdpZGdldFxuICBzZXR0aW5nID0ge31cbiAgc2V0dGluZy5rZXkgPSBcIndpZHRoXCJcbiAgc2V0dGluZy5pc0luaXRpYWxpemVkID0gZmFsc2VcblxuICAjIEVsZW1lbnRzIHRvIGJlIGhpZGRlbiBkdXJpbmcgcmVzaXppbmdcbiAgZm9yIGVsZW0gaW4gJGVsZW1lbnQucGFyZW50cygpXG4gICAgaWYgYW5ndWxhci5lbGVtZW50KGVsZW0pLmhhc0NsYXNzKCdjb250ZW50JylcbiAgICAgICRzY29wZS5jb250ZW50RWxlbWVudHMgPSBhbmd1bGFyLmVsZW1lbnQoZWxlbSkuY2hpbGRyZW4oKVxuICAgICAgYnJlYWtcblxuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIGhpZGVPblJlc2l6ZSA9IChlbGVtZW50cykgLT5cbiAgICByZXR1cm4gdW5sZXNzIChlbGVtZW50cyAmJiBlbGVtZW50cy5sZW5ndGggPiAwKVxuICAgICMgSGlkZXMgZWxlbXMgaW4gY29udGVudFxuICAgIGZvciBlbGVtIGluIGVsZW1lbnRzXG4gICAgICBhbmd1bGFyLmVsZW1lbnQoZWxlbSkuYW5pbWF0ZSh7b3BhY2l0eTogMH0sIDApXG4gICAgIyBNYWtlcyB0aGVtIHJlYXBwZWFyIGFmdGVyIHJlc2l6aW5nXG4gICAgJHRpbWVvdXQgLT5cbiAgICAgIGZvciBlbGVtIGluIGVsZW1lbnRzXG4gICAgICAgIGFuZ3VsYXIuZWxlbWVudChlbGVtKS5hbmltYXRlKHtvcGFjaXR5OiAxfSwgMjAwKVxuICAgICwgMzAwXG5cbiAgdy50b2dnbGVFeHBhbmRlZCA9IC0+XG4gICAgJHNjb3BlLmV4cGFuZGVkID0gISRzY29wZS5leHBhbmRlZFxuICAgICMgZmFsc2UgYmVjYXVzZSB3ZSB3YW50IHRvIHJlc2l6ZSB0aGUgd2lkZ2V0IHdpdGhvdXQgd2FpdGluZyBmb3IgdGhlIHJlc3BvbnNlIGZyb20gdGhlIGRhc2hib2FyZGluZyBBUElcbiAgICBJbXBhY1dpZGdldHNTdmMudXBkYXRlV2lkZ2V0U2V0dGluZ3ModyxmYWxzZSlcbiAgICBcbiAgICBoaWRlT25SZXNpemUoJHNjb3BlLmNvbnRlbnRFbGVtZW50cylcblxuICAgIGlmICRzY29wZS5leHBhbmRlZFxuICAgICAgdy53aWR0aCA9IHBhcnNlSW50KCRzY29wZS5tYXgpXG4gICAgZWxzZVxuICAgICAgdy53aWR0aCA9IHBhcnNlSW50KCRzY29wZS5taW4pXG5cbiAgdy5pc0V4cGFuZGVkID0gLT5cbiAgICAkc2NvcGUuZXhwYW5kZWRcblxuICAjIGluaXRpYWxpemF0aW9uIG9mIHRpbWUgcmFuZ2UgcGFyYW1ldGVycyBmcm9tIHdpZGdldC5jb250ZW50Lmhpc3RfcGFyYW1ldGVyc1xuICBzZXR0aW5nLmluaXRpYWxpemUgPSAtPlxuICAgIGlmIHcud2lkdGg/XG4gICAgICAkc2NvcGUuZXhwYW5kZWQgPSAody53aWR0aCA9PSBwYXJzZUludCgkc2NvcGUubWF4KSlcbiAgICAgIHNldHRpbmcuaXNJbml0aWFsaXplZCA9IHRydWVcblxuICBzZXR0aW5nLnRvTWV0YWRhdGEgPSAtPlxuICAgIGlmICRzY29wZS5leHBhbmRlZFxuICAgICAgbmV3V2lkdGggPSAkc2NvcGUubWF4XG4gICAgZWxzZVxuICAgICAgbmV3V2lkdGggPSAkc2NvcGUubWluXG4gICAgcmV0dXJuIHsgd2lkdGg6IHBhcnNlSW50KG5ld1dpZHRoKSB9XG5cbiAgdy5zZXR0aW5ncy5wdXNoKHNldHRpbmcpXG5cbiAgIyBTZXR0aW5nIGlzIHJlYWR5OiB0cmlnZ2VyIGxvYWQgY29udGVudFxuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAkc2NvcGUuZGVmZXJyZWQucmVzb2x2ZSgkc2NvcGUucGFyZW50V2lkZ2V0KVxuKVxuXG5tb2R1bGUuZGlyZWN0aXZlKCdzZXR0aW5nV2lkdGgnLCAoJHRlbXBsYXRlQ2FjaGUpIC0+XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBzY29wZToge1xuICAgICAgcGFyZW50V2lkZ2V0OiAnPScsXG4gICAgICBkZWZlcnJlZDogJz0nXG4gICAgICBtaW46ICdAJyxcbiAgICAgIG1heDogJ0AnLFxuICAgIH0sXG4gICAgdGVtcGxhdGU6ICR0ZW1wbGF0ZUNhY2hlLmdldCgnd2lkZ2V0cy1zZXR0aW5ncy93aWR0aC50bXBsLmh0bWwnKSxcbiAgICBjb250cm9sbGVyOiAnU2V0dGluZ1dpZHRoQ3RybCdcbiAgfVxuKVxuIl19

!function t(e,i,a){function s(n,r){if(!i[n]){if(!e[n]){var h="function"==typeof require&&require;if(!r&&h)return h(n,!0);if(o)return o(n,!0);var l=new Error("Cannot find module '"+n+"'");throw l.code="MODULE_NOT_FOUND",l}var c=i[n]={exports:{}};e[n][0].call(c.exports,function(t){var i=e[n][1][t];return s(i?i:t)},c,c.exports,t,e,i,a)}return i[n].exports}for(var o="function"==typeof require&&require,n=0;n<a.length;n++)s(a[n]);return s}({1:[function(t,e,i){!function(){var i=t("color-convert"),a=t("color-string"),s=function(t){if(t instanceof s)return t;if(!(this instanceof s))return new s(t);if(this.values={rgb:[0,0,0],hsl:[0,0,0],hsv:[0,0,0],hwb:[0,0,0],cmyk:[0,0,0,0],alpha:1},"string"==typeof t){var e=a.getRgba(t);if(e)this.setValues("rgb",e);else if(e=a.getHsla(t))this.setValues("hsl",e);else{if(!(e=a.getHwb(t)))throw new Error('Unable to parse color from string "'+t+'"');this.setValues("hwb",e)}}else if("object"==typeof t){var e=t;if(void 0!==e.r||void 0!==e.red)this.setValues("rgb",e);else if(void 0!==e.l||void 0!==e.lightness)this.setValues("hsl",e);else if(void 0!==e.v||void 0!==e.value)this.setValues("hsv",e);else if(void 0!==e.w||void 0!==e.whiteness)this.setValues("hwb",e);else{if(void 0===e.c&&void 0===e.cyan)throw new Error("Unable to parse color from object "+JSON.stringify(t));this.setValues("cmyk",e)}}};s.prototype={rgb:function(t){return this.setSpace("rgb",arguments)},hsl:function(t){return this.setSpace("hsl",arguments)},hsv:function(t){return this.setSpace("hsv",arguments)},hwb:function(t){return this.setSpace("hwb",arguments)},cmyk:function(t){return this.setSpace("cmyk",arguments)},rgbArray:function(){return this.values.rgb},hslArray:function(){return this.values.hsl},hsvArray:function(){return this.values.hsv},hwbArray:function(){return 1!==this.values.alpha?this.values.hwb.concat([this.values.alpha]):this.values.hwb},cmykArray:function(){return this.values.cmyk},rgbaArray:function(){var t=this.values.rgb;return t.concat([this.values.alpha])},hslaArray:function(){var t=this.values.hsl;return t.concat([this.values.alpha])},alpha:function(t){return void 0===t?this.values.alpha:(this.setValues("alpha",t),this)},red:function(t){return this.setChannel("rgb",0,t)},green:function(t){return this.setChannel("rgb",1,t)},blue:function(t){return this.setChannel("rgb",2,t)},hue:function(t){return this.setChannel("hsl",0,t)},saturation:function(t){return this.setChannel("hsl",1,t)},lightness:function(t){return this.setChannel("hsl",2,t)},saturationv:function(t){return this.setChannel("hsv",1,t)},whiteness:function(t){return this.setChannel("hwb",1,t)},blackness:function(t){return this.setChannel("hwb",2,t)},value:function(t){return this.setChannel("hsv",2,t)},cyan:function(t){return this.setChannel("cmyk",0,t)},magenta:function(t){return this.setChannel("cmyk",1,t)},yellow:function(t){return this.setChannel("cmyk",2,t)},black:function(t){return this.setChannel("cmyk",3,t)},hexString:function(){return a.hexString(this.values.rgb)},rgbString:function(){return a.rgbString(this.values.rgb,this.values.alpha)},rgbaString:function(){return a.rgbaString(this.values.rgb,this.values.alpha)},percentString:function(){return a.percentString(this.values.rgb,this.values.alpha)},hslString:function(){return a.hslString(this.values.hsl,this.values.alpha)},hslaString:function(){return a.hslaString(this.values.hsl,this.values.alpha)},hwbString:function(){return a.hwbString(this.values.hwb,this.values.alpha)},keyword:function(){return a.keyword(this.values.rgb,this.values.alpha)},rgbNumber:function(){return this.values.rgb[0]<<16|this.values.rgb[1]<<8|this.values.rgb[2]},luminosity:function(){for(var t=this.values.rgb,e=[],i=0;i<t.length;i++){var a=t[i]/255;e[i]=.03928>=a?a/12.92:Math.pow((a+.055)/1.055,2.4)}return.2126*e[0]+.7152*e[1]+.0722*e[2]},contrast:function(t){var e=this.luminosity(),i=t.luminosity();return e>i?(e+.05)/(i+.05):(i+.05)/(e+.05)},level:function(t){var e=this.contrast(t);return e>=7.1?"AAA":e>=4.5?"AA":""},dark:function(){var t=this.values.rgb,e=(299*t[0]+587*t[1]+114*t[2])/1e3;return 128>e},light:function(){return!this.dark()},negate:function(){for(var t=[],e=0;3>e;e++)t[e]=255-this.values.rgb[e];return this.setValues("rgb",t),this},lighten:function(t){return this.values.hsl[2]+=this.values.hsl[2]*t,this.setValues("hsl",this.values.hsl),this},darken:function(t){return this.values.hsl[2]-=this.values.hsl[2]*t,this.setValues("hsl",this.values.hsl),this},saturate:function(t){return this.values.hsl[1]+=this.values.hsl[1]*t,this.setValues("hsl",this.values.hsl),this},desaturate:function(t){return this.values.hsl[1]-=this.values.hsl[1]*t,this.setValues("hsl",this.values.hsl),this},whiten:function(t){return this.values.hwb[1]+=this.values.hwb[1]*t,this.setValues("hwb",this.values.hwb),this},blacken:function(t){return this.values.hwb[2]+=this.values.hwb[2]*t,this.setValues("hwb",this.values.hwb),this},greyscale:function(){var t=this.values.rgb,e=.3*t[0]+.59*t[1]+.11*t[2];return this.setValues("rgb",[e,e,e]),this},clearer:function(t){return this.setValues("alpha",this.values.alpha-this.values.alpha*t),this},opaquer:function(t){return this.setValues("alpha",this.values.alpha+this.values.alpha*t),this},rotate:function(t){var e=this.values.hsl[0];return e=(e+t)%360,e=0>e?360+e:e,this.values.hsl[0]=e,this.setValues("hsl",this.values.hsl),this},mix:function(t,e){e=1-(null==e?.5:e);for(var i=2*e-1,a=this.alpha()-t.alpha(),s=((i*a==-1?i:(i+a)/(1+i*a))+1)/2,o=1-s,n=this.rgbArray(),r=t.rgbArray(),h=0;h<n.length;h++)n[h]=n[h]*s+r[h]*o;this.setValues("rgb",n);var l=this.alpha()*e+t.alpha()*(1-e);return this.setValues("alpha",l),this},toJSON:function(){return this.rgb()},clone:function(){return new s(this.rgb())}},s.prototype.getValues=function(t){for(var e={},i=0;i<t.length;i++)e[t.charAt(i)]=this.values[t][i];return 1!=this.values.alpha&&(e.a=this.values.alpha),e},s.prototype.setValues=function(t,e){var a={rgb:["red","green","blue"],hsl:["hue","saturation","lightness"],hsv:["hue","saturation","value"],hwb:["hue","whiteness","blackness"],cmyk:["cyan","magenta","yellow","black"]},s={rgb:[255,255,255],hsl:[360,100,100],hsv:[360,100,100],hwb:[360,100,100],cmyk:[100,100,100,100]},o=1;if("alpha"==t)o=e;else if(e.length)this.values[t]=e.slice(0,t.length),o=e[t.length];else if(void 0!==e[t.charAt(0)]){for(var n=0;n<t.length;n++)this.values[t][n]=e[t.charAt(n)];o=e.a}else if(void 0!==e[a[t][0]]){for(var r=a[t],n=0;n<t.length;n++)this.values[t][n]=e[r[n]];o=e.alpha}if(this.values.alpha=Math.max(0,Math.min(1,void 0!==o?o:this.values.alpha)),"alpha"!=t){for(var n=0;n<t.length;n++){var h=Math.max(0,Math.min(s[t][n],this.values[t][n]));this.values[t][n]=Math.round(h)}for(var l in a){l!=t&&(this.values[l]=i[t][l](this.values[t]));for(var n=0;n<l.length;n++){var h=Math.max(0,Math.min(s[l][n],this.values[l][n]));this.values[l][n]=Math.round(h)}}return!0}},s.prototype.setSpace=function(t,e){var i=e[0];return void 0===i?this.getValues(t):("number"==typeof i&&(i=Array.prototype.slice.call(e)),this.setValues(t,i),this)},s.prototype.setChannel=function(t,e,i){return void 0===i?this.values[t][e]:(this.values[t][e]=i,this.setValues(t,this.values[t]),this)},window.Color=e.exports=s}()},{"color-convert":3,"color-string":4}],2:[function(t,e,i){function a(t){var e,i,a,s=t[0]/255,o=t[1]/255,n=t[2]/255,r=Math.min(s,o,n),h=Math.max(s,o,n),l=h-r;return h==r?e=0:s==h?e=(o-n)/l:o==h?e=2+(n-s)/l:n==h&&(e=4+(s-o)/l),e=Math.min(60*e,360),0>e&&(e+=360),a=(r+h)/2,i=h==r?0:.5>=a?l/(h+r):l/(2-h-r),[e,100*i,100*a]}function s(t){var e,i,a,s=t[0],o=t[1],n=t[2],r=Math.min(s,o,n),h=Math.max(s,o,n),l=h-r;return i=0==h?0:l/h*1e3/10,h==r?e=0:s==h?e=(o-n)/l:o==h?e=2+(n-s)/l:n==h&&(e=4+(s-o)/l),e=Math.min(60*e,360),0>e&&(e+=360),a=h/255*1e3/10,[e,i,a]}function o(t){var e=t[0],i=t[1],s=t[2],o=a(t)[0],n=1/255*Math.min(e,Math.min(i,s)),s=1-1/255*Math.max(e,Math.max(i,s));return[o,100*n,100*s]}function n(t){var e,i,a,s,o=t[0]/255,n=t[1]/255,r=t[2]/255;return s=Math.min(1-o,1-n,1-r),e=(1-o-s)/(1-s)||0,i=(1-n-s)/(1-s)||0,a=(1-r-s)/(1-s)||0,[100*e,100*i,100*a,100*s]}function h(t){return G[JSON.stringify(t)]}function l(t){var e=t[0]/255,i=t[1]/255,a=t[2]/255;e=e>.04045?Math.pow((e+.055)/1.055,2.4):e/12.92,i=i>.04045?Math.pow((i+.055)/1.055,2.4):i/12.92,a=a>.04045?Math.pow((a+.055)/1.055,2.4):a/12.92;var s=.4124*e+.3576*i+.1805*a,o=.2126*e+.7152*i+.0722*a,n=.0193*e+.1192*i+.9505*a;return[100*s,100*o,100*n]}function c(t){var e,i,a,s=l(t),o=s[0],n=s[1],r=s[2];return o/=95.047,n/=100,r/=108.883,o=o>.008856?Math.pow(o,1/3):7.787*o+16/116,n=n>.008856?Math.pow(n,1/3):7.787*n+16/116,r=r>.008856?Math.pow(r,1/3):7.787*r+16/116,e=116*n-16,i=500*(o-n),a=200*(n-r),[e,i,a]}function d(t){return B(c(t))}function u(t){var e,i,a,s,o,n=t[0]/360,r=t[1]/100,h=t[2]/100;if(0==r)return o=255*h,[o,o,o];i=.5>h?h*(1+r):h+r-h*r,e=2*h-i,s=[0,0,0];for(var l=0;3>l;l++)a=n+1/3*-(l-1),0>a&&a++,a>1&&a--,o=1>6*a?e+6*(i-e)*a:1>2*a?i:2>3*a?e+(i-e)*(2/3-a)*6:e,s[l]=255*o;return s}function m(t){var e,i,a=t[0],s=t[1]/100,o=t[2]/100;return o*=2,s*=1>=o?o:2-o,i=(o+s)/2,e=2*s/(o+s),[a,100*e,100*i]}function p(t){return o(u(t))}function f(t){return n(u(t))}function v(t){return h(u(t))}function x(t){var e=t[0]/60,i=t[1]/100,a=t[2]/100,s=Math.floor(e)%6,o=e-Math.floor(e),n=255*a*(1-i),r=255*a*(1-i*o),h=255*a*(1-i*(1-o)),a=255*a;switch(s){case 0:return[a,h,n];case 1:return[r,a,n];case 2:return[n,a,h];case 3:return[n,r,a];case 4:return[h,n,a];case 5:return[a,n,r]}}function y(t){var e,i,a=t[0],s=t[1]/100,o=t[2]/100;return i=(2-s)*o,e=s*o,e/=1>=i?i:2-i,e=e||0,i/=2,[a,100*e,100*i]}function k(t){return o(x(t))}function D(t){return n(x(t))}function w(t){return h(x(t))}function C(t){var e,i,a,s,o=t[0]/360,n=t[1]/100,h=t[2]/100,l=n+h;switch(l>1&&(n/=l,h/=l),e=Math.floor(6*o),i=1-h,a=6*o-e,0!=(1&e)&&(a=1-a),s=n+a*(i-n),e){default:case 6:case 0:r=i,g=s,b=n;break;case 1:r=s,g=i,b=n;break;case 2:r=n,g=i,b=s;break;case 3:r=n,g=s,b=i;break;case 4:r=s,g=n,b=i;break;case 5:r=i,g=n,b=s}return[255*r,255*g,255*b]}function S(t){return a(C(t))}function _(t){return s(C(t))}function A(t){return n(C(t))}function I(t){return h(C(t))}function M(t){var e,i,a,s=t[0]/100,o=t[1]/100,n=t[2]/100,r=t[3]/100;return e=1-Math.min(1,s*(1-r)+r),i=1-Math.min(1,o*(1-r)+r),a=1-Math.min(1,n*(1-r)+r),[255*e,255*i,255*a]}function P(t){return a(M(t))}function F(t){return s(M(t))}function R(t){return o(M(t))}function V(t){return h(M(t))}function T(t){var e,i,a,s=t[0]/100,o=t[1]/100,n=t[2]/100;return e=3.2406*s+-1.5372*o+n*-.4986,i=s*-.9689+1.8758*o+.0415*n,a=.0557*s+o*-.204+1.057*n,e=e>.0031308?1.055*Math.pow(e,1/2.4)-.055:e=12.92*e,i=i>.0031308?1.055*Math.pow(i,1/2.4)-.055:i=12.92*i,a=a>.0031308?1.055*Math.pow(a,1/2.4)-.055:a=12.92*a,e=Math.min(Math.max(0,e),1),i=Math.min(Math.max(0,i),1),a=Math.min(Math.max(0,a),1),[255*e,255*i,255*a]}function L(t){var e,i,a,s=t[0],o=t[1],n=t[2];return s/=95.047,o/=100,n/=108.883,s=s>.008856?Math.pow(s,1/3):7.787*s+16/116,o=o>.008856?Math.pow(o,1/3):7.787*o+16/116,n=n>.008856?Math.pow(n,1/3):7.787*n+16/116,e=116*o-16,i=500*(s-o),a=200*(o-n),[e,i,a]}function z(t){return B(L(t))}function W(t){var e,i,a,s,o=t[0],n=t[1],r=t[2];return 8>=o?(i=100*o/903.3,s=7.787*(i/100)+16/116):(i=100*Math.pow((o+16)/116,3),s=Math.pow(i/100,1/3)),e=.008856>=e/95.047?e=95.047*(n/500+s-16/116)/7.787:95.047*Math.pow(n/500+s,3),a=.008859>=a/108.883?a=108.883*(s-r/200-16/116)/7.787:108.883*Math.pow(s-r/200,3),[e,i,a]}function B(t){var e,i,a,s=t[0],o=t[1],n=t[2];return e=Math.atan2(n,o),i=360*e/2/Math.PI,0>i&&(i+=360),a=Math.sqrt(o*o+n*n),[s,a,i]}function O(t){return T(W(t))}function E(t){var e,i,a,s=t[0],o=t[1],n=t[2];return a=n/360*2*Math.PI,e=o*Math.cos(a),i=o*Math.sin(a),[s,e,i]}function N(t){return W(E(t))}function H(t){return O(E(t))}function Y(t){return Q[t]}function q(t){return a(Y(t))}function j(t){return s(Y(t))}function U(t){return o(Y(t))}function X(t){return n(Y(t))}function J(t){return c(Y(t))}function Z(t){return l(Y(t))}e.exports={rgb2hsl:a,rgb2hsv:s,rgb2hwb:o,rgb2cmyk:n,rgb2keyword:h,rgb2xyz:l,rgb2lab:c,rgb2lch:d,hsl2rgb:u,hsl2hsv:m,hsl2hwb:p,hsl2cmyk:f,hsl2keyword:v,hsv2rgb:x,hsv2hsl:y,hsv2hwb:k,hsv2cmyk:D,hsv2keyword:w,hwb2rgb:C,hwb2hsl:S,hwb2hsv:_,hwb2cmyk:A,hwb2keyword:I,cmyk2rgb:M,cmyk2hsl:P,cmyk2hsv:F,cmyk2hwb:R,cmyk2keyword:V,keyword2rgb:Y,keyword2hsl:q,keyword2hsv:j,keyword2hwb:U,keyword2cmyk:X,keyword2lab:J,keyword2xyz:Z,xyz2rgb:T,xyz2lab:L,xyz2lch:z,lab2xyz:W,lab2rgb:O,lab2lch:B,lch2lab:E,lch2xyz:N,lch2rgb:H};var Q={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},G={};for(var $ in Q)G[JSON.stringify(Q[$])]=$},{}],3:[function(t,e,i){var a=t("./conversions"),s=function(){return new l};for(var o in a){s[o+"Raw"]=function(t){return function(e){return"number"==typeof e&&(e=Array.prototype.slice.call(arguments)),a[t](e)}}(o);var n=/(\w+)2(\w+)/.exec(o),r=n[1],h=n[2];s[r]=s[r]||{},s[r][h]=s[o]=function(t){return function(e){"number"==typeof e&&(e=Array.prototype.slice.call(arguments));var i=a[t](e);if("string"==typeof i||void 0===i)return i;for(var s=0;s<i.length;s++)i[s]=Math.round(i[s]);return i}}(o)}var l=function(){this.convs={}};l.prototype.routeSpace=function(t,e){var i=e[0];return void 0===i?this.getValues(t):("number"==typeof i&&(i=Array.prototype.slice.call(e)),this.setValues(t,i))},l.prototype.setValues=function(t,e){return this.space=t,this.convs={},this.convs[t]=e,this},l.prototype.getValues=function(t){var e=this.convs[t];if(!e){var i=this.space,a=this.convs[i];e=s[i][t](a),this.convs[t]=e}return e},["rgb","hsl","hsv","cmyk","keyword"].forEach(function(t){l.prototype[t]=function(e){return this.routeSpace(t,arguments)}}),e.exports=s},{"./conversions":2}],4:[function(t,e,i){function a(t){if(t){var e=/^#([a-fA-F0-9]{3})$/,i=/^#([a-fA-F0-9]{6})$/,a=/^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/,s=/^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/,o=/(\w+)/,n=[0,0,0],r=1,h=t.match(e);if(h){h=h[1];for(var l=0;l<n.length;l++)n[l]=parseInt(h[l]+h[l],16)}else if(h=t.match(i)){h=h[1];for(var l=0;l<n.length;l++)n[l]=parseInt(h.slice(2*l,2*l+2),16)}else if(h=t.match(a)){for(var l=0;l<n.length;l++)n[l]=parseInt(h[l+1]);r=parseFloat(h[4])}else if(h=t.match(s)){for(var l=0;l<n.length;l++)n[l]=Math.round(2.55*parseFloat(h[l+1]));r=parseFloat(h[4])}else if(h=t.match(o)){if("transparent"==h[1])return[0,0,0,0];if(n=y[h[1]],!n)return}for(var l=0;l<n.length;l++)n[l]=v(n[l],0,255);return r=r||0==r?v(r,0,1):1,n[3]=r,n}}function s(t){if(t){var e=/^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/,i=t.match(e);if(i){var a=parseFloat(i[4]),s=v(parseInt(i[1]),0,360),o=v(parseFloat(i[2]),0,100),n=v(parseFloat(i[3]),0,100),r=v(isNaN(a)?1:a,0,1);return[s,o,n,r]}}}function o(t){if(t){var e=/^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/,i=t.match(e);if(i){var a=parseFloat(i[4]),s=v(parseInt(i[1]),0,360),o=v(parseFloat(i[2]),0,100),n=v(parseFloat(i[3]),0,100),r=v(isNaN(a)?1:a,0,1);return[s,o,n,r]}}}function n(t){var e=a(t);return e&&e.slice(0,3)}function r(t){var e=s(t);return e&&e.slice(0,3)}function h(t){var e=a(t);return e?e[3]:(e=s(t))?e[3]:(e=o(t))?e[3]:void 0}function l(t){return"#"+x(t[0])+x(t[1])+x(t[2])}function c(t,e){return 1>e||t[3]&&t[3]<1?d(t,e):"rgb("+t[0]+", "+t[1]+", "+t[2]+")"}function d(t,e){return void 0===e&&(e=void 0!==t[3]?t[3]:1),"rgba("+t[0]+", "+t[1]+", "+t[2]+", "+e+")"}function u(t,e){if(1>e||t[3]&&t[3]<1)return g(t,e);var i=Math.round(t[0]/255*100),a=Math.round(t[1]/255*100),s=Math.round(t[2]/255*100);return"rgb("+i+"%, "+a+"%, "+s+"%)"}function g(t,e){var i=Math.round(t[0]/255*100),a=Math.round(t[1]/255*100),s=Math.round(t[2]/255*100);return"rgba("+i+"%, "+a+"%, "+s+"%, "+(e||t[3]||1)+")"}function m(t,e){return 1>e||t[3]&&t[3]<1?p(t,e):"hsl("+t[0]+", "+t[1]+"%, "+t[2]+"%)"}function p(t,e){return void 0===e&&(e=void 0!==t[3]?t[3]:1),"hsla("+t[0]+", "+t[1]+"%, "+t[2]+"%, "+e+")"}function f(t,e){return void 0===e&&(e=void 0!==t[3]?t[3]:1),"hwb("+t[0]+", "+t[1]+"%, "+t[2]+"%"+(void 0!==e&&1!==e?", "+e:"")+")"}function b(t){return k[t.slice(0,3)]}function v(t,e,i){return Math.min(Math.max(e,t),i)}function x(t){var e=t.toString(16).toUpperCase();return e.length<2?"0"+e:e}var y=t("color-name");e.exports={getRgba:a,getHsla:s,getRgb:n,getHsl:r,getHwb:o,getAlpha:h,hexString:l,rgbString:c,rgbaString:d,percentString:u,percentaString:g,hslString:m,hslaString:p,hwbString:f,keyword:b};var k={};for(var D in y)k[y[D]]=D},{"color-name":5}],5:[function(t,e,i){e.exports={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]}},{}]},{},[1]),/*!
 * Chart.js
 * http://chartjs.org/
 * Version: 2.0.0-beta
 *
 * Copyright 2015 Nick Downie
 * Released under the MIT license
 * https://github.com/nnnick/Chart.js/blob/master/LICENSE.md
 */
function(){"use strict";var t=this,e=t.Chart,i=function(t,e){this.config=e,t.length&&t[0].getContext&&(t=t[0]),t.getContext&&(t=t.getContext("2d")),this.ctx=t,this.canvas=t.canvas,this.width=t.canvas.width||parseInt(i.helpers.getStyle(t.canvas,"width"))||i.helpers.getMaximumWidth(t.canvas),this.height=t.canvas.height||parseInt(i.helpers.getStyle(t.canvas,"height"))||i.helpers.getMaximumHeight(t.canvas),this.aspectRatio=this.width/this.height,(isNaN(this.aspectRatio)||isFinite(this.aspectRatio)===!1)&&(this.aspectRatio=void 0!==e.aspectRatio?e.aspectRatio:2),this.originalCanvasStyleWidth=t.canvas.style.width,this.originalCanvasStyleHeight=t.canvas.style.height,i.helpers.retinaScale(this),e&&(this.controller=new i.Controller(this));var a=this;return i.helpers.addResizeListener(t.canvas.parentNode,function(){a.controller&&a.controller.config.options.responsive&&a.controller.resize()}),this.controller?this.controller:this};i.defaults={global:{responsive:!0,responsiveAnimationDuration:0,maintainAspectRatio:!0,events:["mousemove","mouseout","click","touchstart","touchmove","touchend"],hover:{onHover:null,mode:"single",animationDuration:400},onClick:null,defaultColor:"rgba(0,0,0,0.1)",elements:{},legendCallback:function(t){var e=[];e.push('<ul class="'+t.id+'-legend">');for(var i=0;i<t.data.datasets.length;i++)e.push('<li><span style="background-color:'+t.data.datasets[i].backgroundColor+'">'),t.data.datasets[i].label&&e.push(t.data.datasets[i].label),e.push("</span></li>");return e.push("</ul>"),e.join("")}}},"undefined"!=typeof amd?define(function(){return i}):"object"==typeof module&&module.exports&&(module.exports=i),t.Chart=i,i.noConflict=function(){return t.Chart=e,i}}.call(this),function(){"use strict";var t=this,e=t.Chart,i=e.helpers={},a=i.each=function(t,e,i,a){var s=Array.prototype.slice.call(arguments,3);if(t)if(t.length===+t.length){var o;if(a)for(o=t.length-1;o>=0;o--)e.apply(i,[t[o],o].concat(s));else for(o=0;o<t.length;o++)e.apply(i,[t[o],o].concat(s))}else for(var n in t)e.apply(i,[t[n],n].concat(s))},s=i.clone=function(t){var e={};return a(t,function(a,o){t.hasOwnProperty(o)&&(i.isArray(a)?e[o]=a.slice(0):"object"==typeof a&&null!==a?e[o]=s(a):e[o]=a)}),e},o=i.extend=function(t){return a(Array.prototype.slice.call(arguments,1),function(e){a(e,function(i,a){e.hasOwnProperty(a)&&(t[a]=i)})}),t},n=(i.configMerge=function(t){var a=s(t);return i.each(Array.prototype.slice.call(arguments,1),function(t){i.each(t,function(s,o){if(t.hasOwnProperty(o))if("scales"===o)a[o]=i.scaleMerge(a.hasOwnProperty(o)?a[o]:{},s);else if("scale"===o)a[o]=i.configMerge(a.hasOwnProperty(o)?a[o]:{},e.scaleService.getScaleDefaults(s.type),s);else if(a.hasOwnProperty(o)&&i.isArray(a[o])&&i.isArray(s)){var n=a[o];i.each(s,function(t,e){e<n.length?"object"==typeof n[e]&&null!==n[e]&&"object"==typeof t&&null!==t?n[e]=i.configMerge(n[e],t):n[e]=t:n.push(t)})}else a.hasOwnProperty(o)&&"object"==typeof a[o]&&null!==a[o]&&"object"==typeof s?a[o]=i.configMerge(a[o],s):a[o]=s})}),a},i.extendDeep=function(t){function e(t){return i.each(arguments,function(a){a!==t&&i.each(a,function(i,a){t[a]&&t[a].constructor&&t[a].constructor===Object?e(t[a],i):t[a]=i})}),t}return e.apply(this,arguments)},i.scaleMerge=function(t,a){var o=s(t);return i.each(a,function(t,s){a.hasOwnProperty(s)&&("xAxes"===s||"yAxes"===s?o.hasOwnProperty(s)?i.each(t,function(t,a){a>=o[s].length||!o[s][a].type?o[s].push(i.configMerge(t.type?e.scaleService.getScaleDefaults(t.type):{},t)):t.type!==o[s][a].type?o[s][a]=i.configMerge(o[s][a],t.type?e.scaleService.getScaleDefaults(t.type):{},t):o[s][a]=i.configMerge(o[s][a],t)}):(o[s]=[],i.each(t,function(t){o[s].push(i.configMerge(t.type?e.scaleService.getScaleDefaults(t.type):{},t))})):o.hasOwnProperty(s)&&"object"==typeof o[s]&&null!==o[s]&&"object"==typeof t?o[s]=i.configMerge(o[s],t):o[s]=t)}),o},i.getValueAtIndexOrDefault=function(t,e,a){return void 0===t||null===t?a:i.isArray(t)?e<t.length?t[e]:a:t},i.indexOf=function(t,e){if(Array.prototype.indexOf)return t.indexOf(e);for(var i=0;i<t.length;i++)if(t[i]===e)return i;return-1},i.where=function(t,e){var a=[];return i.each(t,function(t){e(t)&&a.push(t)}),a},i.findNextWhere=function(t,e,i){(void 0===i||null===i)&&(i=-1);for(var a=i+1;a<t.length;a++){var s=t[a];if(e(s))return s}},i.findPreviousWhere=function(t,e,i){(void 0===i||null===i)&&(i=t.length);for(var a=i-1;a>=0;a--){var s=t[a];if(e(s))return s}},i.inherits=function(t){var e=this,i=t&&t.hasOwnProperty("constructor")?t.constructor:function(){return e.apply(this,arguments)},a=function(){this.constructor=i};return a.prototype=e.prototype,i.prototype=new a,i.extend=n,t&&o(i.prototype,t),i.__super__=e.prototype,i}),r=i.noop=function(){},h=(i.uid=function(){var t=0;return function(){return"chart-"+t++}}(),i.warn=function(t){window.console&&"function"==typeof window.console.warn&&console.warn(t)},i.amd="function"==typeof define&&define.amd,i.isNumber=function(t){return!isNaN(parseFloat(t))&&isFinite(t)}),l=(i.max=function(t){return Math.max.apply(Math,t)},i.min=function(t){return Math.min.apply(Math,t)},i.sign=function(t){return Math.sign?Math.sign(t):(t=+t,0===t||isNaN(t)?t:t>0?1:-1)},i.log10=function(t){return Math.log10?Math.log10(t):Math.log(t)/Math.LN10},i.getDecimalPlaces=function(t){if(t%1!==0&&h(t)){var e=t.toString();if(e.indexOf("e-")<0)return e.split(".")[1].length;if(e.indexOf(".")<0)return parseInt(e.split("e-")[1]);var i=e.split(".")[1].split("e-");return i[0].length+parseInt(i[1])}return 0},i.toRadians=function(t){return t*(Math.PI/180)},i.toDegrees=function(t){return t*(180/Math.PI)},i.getAngleFromPoint=function(t,e){var i=e.x-t.x,a=e.y-t.y,s=Math.sqrt(i*i+a*a),o=Math.atan2(a,i);return o<-.5*Math.PI&&(o+=2*Math.PI),{angle:o,distance:s}},i.aliasPixel=function(t){return t%2===0?0:.5},i.splineCurve=function(t,e,i,a){var s=t,o=e,n=i;s.skip&&(s=o),n.skip&&(n=o);var r=Math.sqrt(Math.pow(o.x-s.x,2)+Math.pow(o.y-s.y,2)),h=Math.sqrt(Math.pow(n.x-o.x,2)+Math.pow(n.y-o.y,2)),l=a*r/(r+h),c=a*h/(r+h);return{previous:{x:o.x-l*(n.x-s.x),y:o.y-l*(n.y-s.y)},next:{x:o.x+c*(n.x-s.x),y:o.y+c*(n.y-s.y)}}},i.nextItem=function(t,e,i){return i?e>=t.length-1?t[0]:t[e+1]:e>=t.length-1?t[t.length-1]:t[e+1]},i.previousItem=function(t,e,i){return i?0>=e?t[t.length-1]:t[e-1]:0>=e?t[0]:t[e-1]},i.niceNum=function(t,e){var a,s=Math.floor(i.log10(t)),o=t/Math.pow(10,s);return a=e?1.5>o?1:3>o?2:7>o?5:10:1>=o?1:2>=o?2:5>=o?5:10,a*Math.pow(10,s)},i.easingEffects={linear:function(t){return t},easeInQuad:function(t){return t*t},easeOutQuad:function(t){return-1*t*(t-2)},easeInOutQuad:function(t){return(t/=.5)<1?.5*t*t:-0.5*(--t*(t-2)-1)},easeInCubic:function(t){return t*t*t},easeOutCubic:function(t){return 1*((t=t/1-1)*t*t+1)},easeInOutCubic:function(t){return(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2)},easeInQuart:function(t){return t*t*t*t},easeOutQuart:function(t){return-1*((t=t/1-1)*t*t*t-1)},easeInOutQuart:function(t){return(t/=.5)<1?.5*t*t*t*t:-0.5*((t-=2)*t*t*t-2)},easeInQuint:function(t){return 1*(t/=1)*t*t*t*t},easeOutQuint:function(t){return 1*((t=t/1-1)*t*t*t*t+1)},easeInOutQuint:function(t){return(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2)},easeInSine:function(t){return-1*Math.cos(t/1*(Math.PI/2))+1},easeOutSine:function(t){return 1*Math.sin(t/1*(Math.PI/2))},easeInOutSine:function(t){return-0.5*(Math.cos(Math.PI*t/1)-1)},easeInExpo:function(t){return 0===t?1:1*Math.pow(2,10*(t/1-1))},easeOutExpo:function(t){return 1===t?1:1*(-Math.pow(2,-10*t/1)+1)},easeInOutExpo:function(t){return 0===t?0:1===t?1:(t/=.5)<1?.5*Math.pow(2,10*(t-1)):.5*(-Math.pow(2,-10*--t)+2)},easeInCirc:function(t){return t>=1?t:-1*(Math.sqrt(1-(t/=1)*t)-1)},easeOutCirc:function(t){return 1*Math.sqrt(1-(t=t/1-1)*t)},easeInOutCirc:function(t){return(t/=.5)<1?-0.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)},easeInElastic:function(t){var e=1.70158,i=0,a=1;return 0===t?0:1==(t/=1)?1:(i||(i=.3),a<Math.abs(1)?(a=1,e=i/4):e=i/(2*Math.PI)*Math.asin(1/a),-(a*Math.pow(2,10*(t-=1))*Math.sin((1*t-e)*(2*Math.PI)/i)))},easeOutElastic:function(t){var e=1.70158,i=0,a=1;return 0===t?0:1==(t/=1)?1:(i||(i=.3),a<Math.abs(1)?(a=1,e=i/4):e=i/(2*Math.PI)*Math.asin(1/a),a*Math.pow(2,-10*t)*Math.sin((1*t-e)*(2*Math.PI)/i)+1)},easeInOutElastic:function(t){var e=1.70158,i=0,a=1;return 0===t?0:2==(t/=.5)?1:(i||(i=1*(.3*1.5)),a<Math.abs(1)?(a=1,e=i/4):e=i/(2*Math.PI)*Math.asin(1/a),1>t?-.5*(a*Math.pow(2,10*(t-=1))*Math.sin((1*t-e)*(2*Math.PI)/i)):a*Math.pow(2,-10*(t-=1))*Math.sin((1*t-e)*(2*Math.PI)/i)*.5+1)},easeInBack:function(t){var e=1.70158;return 1*(t/=1)*t*((e+1)*t-e)},easeOutBack:function(t){var e=1.70158;return 1*((t=t/1-1)*t*((e+1)*t+e)+1)},easeInOutBack:function(t){var e=1.70158;return(t/=.5)<1?.5*(t*t*(((e*=1.525)+1)*t-e)):.5*((t-=2)*t*(((e*=1.525)+1)*t+e)+2)},easeInBounce:function(t){return 1-l.easeOutBounce(1-t)},easeOutBounce:function(t){return(t/=1)<1/2.75?1*(7.5625*t*t):2/2.75>t?1*(7.5625*(t-=1.5/2.75)*t+.75):2.5/2.75>t?1*(7.5625*(t-=2.25/2.75)*t+.9375):1*(7.5625*(t-=2.625/2.75)*t+.984375)},easeInOutBounce:function(t){return.5>t?.5*l.easeInBounce(2*t):.5*l.easeOutBounce(2*t-1)+.5}}),c=(i.requestAnimFrame=function(){return window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(t){return window.setTimeout(t,1e3/60)}}(),i.cancelAnimFrame=function(){return window.cancelAnimationFrame||window.webkitCancelAnimationFrame||window.mozCancelAnimationFrame||window.oCancelAnimationFrame||window.msCancelAnimationFrame||function(t){return window.clearTimeout(t,1e3/60)}}(),i.getRelativePosition=function(t,e){var i,a,s=t.originalEvent||t,o=t.currentTarget||t.srcElement,n=o.getBoundingClientRect();return s.touches?(i=s.touches[0].clientX,a=s.touches[0].clientY):(i=s.clientX,a=s.clientY),i=Math.round((i-n.left)/(n.right-n.left)*o.width/e.currentDevicePixelRatio),a=Math.round((a-n.top)/(n.bottom-n.top)*o.height/e.currentDevicePixelRatio),{x:i,y:a}},i.addEvent=function(t,e,i){t.addEventListener?t.addEventListener(e,i):t.attachEvent?t.attachEvent("on"+e,i):t["on"+e]=i}),d=i.removeEvent=function(t,e,i){t.removeEventListener?t.removeEventListener(e,i,!1):t.detachEvent?t.detachEvent("on"+e,i):t["on"+e]=r},u=(i.bindEvents=function(t,e,i){t.events||(t.events={}),a(e,function(e){t.events[e]=function(){i.apply(t,arguments)},c(t.chart.canvas,e,t.events[e])})},i.unbindEvents=function(t,e){a(e,function(e,i){d(t.chart.canvas,i,e)})},i.getConstraintWidth=function(t){var e,i=document.defaultView.getComputedStyle(t)["max-width"],a=document.defaultView.getComputedStyle(t.parentNode)["max-width"],s=null!==i&&"none"!==i,o=null!==a&&"none"!==a;return(s||o)&&(e=Math.min(s?parseInt(i,10):Number.POSITIVE_INFINITY,o?parseInt(a,10):Number.POSITIVE_INFINITY)),e}),g=i.getConstraintHeight=function(t){var e,i=document.defaultView.getComputedStyle(t)["max-height"],a=document.defaultView.getComputedStyle(t.parentNode)["max-height"],s=null!==i&&"none"!==i,o=null!==a&&"none"!==a;return(i||a)&&(e=Math.min(s?parseInt(i,10):Number.POSITIVE_INFINITY,o?parseInt(a,10):Number.POSITIVE_INFINITY)),e},m=(i.getMaximumWidth=function(t){var e=t.parentNode,i=parseInt(m(e,"padding-left"))+parseInt(m(e,"padding-right")),a=e.clientWidth-i,s=u(t);return void 0!==s&&(a=Math.min(a,s)),a},i.getMaximumHeight=function(t){var e=t.parentNode,i=parseInt(m(e,"padding-top"))+parseInt(m(e,"padding-bottom")),a=e.clientHeight-i,s=g(t);return void 0!==s&&(a=Math.min(a,s)),a},i.getStyle=function(t,e){return t.currentStyle?t.currentStyle[e]:document.defaultView.getComputedStyle(t,null).getPropertyValue(e)});i.getMaximumSize=i.getMaximumWidth,i.retinaScale=function(t){var e=t.ctx,i=t.canvas.width,a=t.canvas.height;t.currentDevicePixelRatio=window.devicePixelRatio||1,1!==window.devicePixelRatio&&(e.canvas.height=a*window.devicePixelRatio,e.canvas.width=i*window.devicePixelRatio,e.scale(window.devicePixelRatio,window.devicePixelRatio),e.canvas.style.width=i+"px",e.canvas.style.height=a+"px",t.originalDevicePixelRatio=t.originalDevicePixelRatio||window.devicePixelRatio)},i.clear=function(t){t.ctx.clearRect(0,0,t.width,t.height)},i.fontString=function(t,e,i){return e+" "+t+"px "+i},i.longestText=function(t,e,i){t.font=e;var s=0;return a(i,function(e){var i=t.measureText(e).width;s=i>s?i:s}),s},i.drawRoundedRectangle=function(t,e,i,a,s,o){t.beginPath(),t.moveTo(e+o,i),t.lineTo(e+a-o,i),t.quadraticCurveTo(e+a,i,e+a,i+o),t.lineTo(e+a,i+s-o),t.quadraticCurveTo(e+a,i+s,e+a-o,i+s),t.lineTo(e+o,i+s),t.quadraticCurveTo(e,i+s,e,i+s-o),t.lineTo(e,i+o),t.quadraticCurveTo(e,i,e+o,i),t.closePath()},i.color=function(t){return window.Color?window.Color(t):(console.log("Color.js not found!"),t)},i.addResizeListener=function(t,e){var i=document.createElement("iframe"),a="chartjs-hidden-iframe";i.classlist?i.classlist.add(a):i.setAttribute("class",a),i.style.width="100%",i.style.display="block",i.style.border=0,i.style.height=0,i.style.margin=0,i.style.position="absolute",i.style.left=0,i.style.right=0,i.style.top=0,i.style.bottom=0,t.insertBefore(i,t.firstChild);(i.contentWindow||i).onresize=function(){e&&e()}},i.removeResizeListener=function(t){var e=t.querySelector(".chartjs-hidden-iframe");e&&e.parentNode.removeChild(e)},i.isArray=function(t){return Array.isArray?Array.isArray(t):"[object Array]"===Object.prototype.toString.call(arg)},i.isDatasetVisible=function(t){return!t.hidden}}.call(this),function(){"use strict";var t=this,e=t.Chart,i=e.helpers;e.elements={},e.Element=function(t){i.extend(this,t),this.initialize.apply(this,arguments)},i.extend(e.Element.prototype,{initialize:function(){},pivot:function(){return this._view||(this._view=i.clone(this._model)),this._start=i.clone(this._view),this},transition:function(t){return this._view||(this._view=i.clone(this._model)),this._start||this.pivot(),i.each(this._model,function(e,a){if("_"!==a[0]&&this._model.hasOwnProperty(a))if(this._view[a])if(this._model[a]===this._view[a]);else if("string"==typeof e)try{var s=i.color(this._start[a]).mix(i.color(this._model[a]),t);this._view[a]=s.rgbString()}catch(o){this._view[a]=e}else if("number"==typeof e){var n=void 0!==this._start[a]?this._start[a]:0;this._view[a]=(this._model[a]-n)*t+n}else this._view[a]=e;else"number"==typeof e?this._view[a]=e*t:this._view[a]=e||null;else;},this),1===t&&delete this._start,this},tooltipPosition:function(){return{x:this._model.x,y:this._model.y}},hasValue:function(){return i.isNumber(this._model.x)&&i.isNumber(this._model.y)}}),e.Element.extend=i.inherits}.call(this),function(){"use strict";var t=this,e=t.Chart,i=e.helpers;e.defaults.global.animation={duration:1e3,easing:"easeOutQuart",onProgress:function(){},onComplete:function(){}},e.Animation=e.Element.extend({currentStep:null,numSteps:60,easing:"",render:null,onAnimationProgress:null,onAnimationComplete:null}),e.animationService={frameDuration:17,animations:[],dropFrames:0,addAnimation:function(t,e,a,s){s||(t.animating=!0);for(var o=0;o<this.animations.length;++o)if(this.animations[o].chartInstance===t)return void(this.animations[o].animationObject=e);this.animations.push({chartInstance:t,animationObject:e}),1==this.animations.length&&i.requestAnimFrame.call(window,this.digestWrapper)},cancelAnimation:function(t){var e=i.findNextWhere(this.animations,function(e){return e.chartInstance===t});e&&(this.animations.splice(e,1),t.animating=!1)},digestWrapper:function(){e.animationService.startDigest.call(e.animationService)},startDigest:function(){var t=Date.now(),e=0;this.dropFrames>1&&(e=Math.floor(this.dropFrames),this.dropFrames=this.dropFrames%1);for(var a=0;a<this.animations.length;a++)null===this.animations[a].animationObject.currentStep&&(this.animations[a].animationObject.currentStep=0),this.animations[a].animationObject.currentStep+=1+e,this.animations[a].animationObject.currentStep>this.animations[a].animationObject.numSteps&&(this.animations[a].animationObject.currentStep=this.animations[a].animationObject.numSteps),this.animations[a].animationObject.render(this.animations[a].chartInstance,this.animations[a].animationObject),this.animations[a].animationObject.currentStep==this.animations[a].animationObject.numSteps&&(this.animations[a].chartInstance.animating=!1,this.animations.splice(a,1),a--);var s=Date.now(),o=(s-t)/this.frameDuration;this.dropFrames+=o,this.animations.length>0&&i.requestAnimFrame.call(window,this.digestWrapper)}}}.call(this),function(){"use strict";var t=this,e=t.Chart,i=e.helpers;e.types={},e.instances={},e.controllers={},e.Controller=function(t){return this.chart=t,this.config=t.config,this.data=this.config.data,this.options=this.config.options=i.configMerge(e.defaults.global,e.defaults[this.config.type],this.config.options||{}),this.id=i.uid(),e.instances[this.id]=this,this.options.responsive&&this.resize(!0),this.initialize.call(this),this},i.extend(e.Controller.prototype,{initialize:function(){return this.bindEvents(),this.ensureScalesHaveIDs(),this.buildOrUpdateControllers(),this.buildScales(),this.resetElements(),this.initToolTip(),this.update(),this},clear:function(){return i.clear(this.chart),this},stop:function(){return e.animationService.cancelAnimation(this),this},resize:function(t){this.stop();var e=this.chart.canvas,a=i.getMaximumWidth(this.chart.canvas),s=this.options.maintainAspectRatio&&isNaN(this.chart.aspectRatio)===!1&&isFinite(this.chart.aspectRatio)&&0!==this.chart.aspectRatio?a/this.chart.aspectRatio:i.getMaximumHeight(this.chart.canvas);return e.width=this.chart.width=a,e.height=this.chart.height=s,i.retinaScale(this.chart),t||this.update(this.options.responsiveAnimationDuration),this},ensureScalesHaveIDs:function(){var t="x-axis-",e="y-axis-";this.options.scales&&(this.options.scales.xAxes&&this.options.scales.xAxes.length&&i.each(this.options.scales.xAxes,function(e,i){e.id=e.id||t+i},this),this.options.scales.yAxes&&this.options.scales.yAxes.length&&i.each(this.options.scales.yAxes,function(t,i){t.id=t.id||e+i},this))},buildScales:function(){if(this.scales={},this.options.scales&&(this.options.scales.xAxes&&this.options.scales.xAxes.length&&i.each(this.options.scales.xAxes,function(t,i){var a=e.scaleService.getScaleConstructor(t.type),s=new a({ctx:this.chart.ctx,options:t,data:this.data,id:t.id});this.scales[s.id]=s},this),this.options.scales.yAxes&&this.options.scales.yAxes.length&&i.each(this.options.scales.yAxes,function(t,i){var a=e.scaleService.getScaleConstructor(t.type),s=new a({ctx:this.chart.ctx,options:t,data:this.data,id:t.id});this.scales[s.id]=s},this)),this.options.scale){var t=e.scaleService.getScaleConstructor(this.options.scale.type),a=new t({ctx:this.chart.ctx,options:this.options.scale,data:this.data,chart:this.chart});this.scale=a,this.scales.radialScale=a}e.scaleService.update(this,this.chart.width,this.chart.height)},buildOrUpdateControllers:function(t){var a=[];if(i.each(this.data.datasets,function(i,s){i.type||(i.type=this.config.type);var o=i.type;return a.push(o),i.controller?void i.controller.updateIndex(s):(i.controller=new e.controllers[o](this,s),void(t&&i.controller.reset()))},this),a.length>1)for(var s=1;s<a.length;s++)if(a[s]!=a[s-1]){this.isCombo=!0;break}},resetElements:function(){i.each(this.data.datasets,function(t,e){t.controller.reset()},this)},update:function(t,a){e.scaleService.update(this,this.chart.width,this.chart.height),this.buildOrUpdateControllers(!0),i.each(this.data.datasets,function(t,e){t.controller.buildOrUpdateElements()},this),i.each(this.data.datasets,function(t,e){t.controller.update()},this),this.render(t,a)},render:function(t,a){if("undefined"!=typeof t&&0!==t||"undefined"==typeof t&&0!==this.options.animation.duration){var s=new e.Animation;s.numSteps=(t||this.options.animation.duration)/16.66,s.easing=this.options.animation.easing,s.render=function(t,e){var a=i.easingEffects[e.easing],s=e.currentStep/e.numSteps,o=a(s);t.draw(o,s,e.currentStep)},s.onAnimationProgress=this.options.onAnimationProgress,s.onAnimationComplete=this.options.onAnimationComplete,e.animationService.addAnimation(this,s,t,a)}else this.draw(),this.options.onAnimationComplete&&this.options.onAnimationComplete.call&&this.options.onAnimationComplete.call(this);return this},draw:function(t){var e=t||1;this.clear(),i.each(this.scales,function(t){t.draw(this.chartArea)},this),this.scale&&this.scale.draw(),i.each(this.data.datasets,function(e,a){i.isDatasetVisible(e)&&e.controller.draw(t)},this),this.tooltip.transition(e).draw()},getElementAtEvent:function(t){var e=i.getRelativePosition(t,this.chart),a=[];return i.each(this.data.datasets,function(t,s){i.isDatasetVisible(t)&&i.each(t.metaData,function(t,i){return t.inRange(e.x,e.y)?(a.push(t),a):void 0},this)},this),a},getElementsAtEvent:function(t){var e=i.getRelativePosition(t,this.chart),a=[],s=function(){for(var t=0;t<this.data.datasets.length;t++)if(i.isDatasetVisible(this.data.datasets[t]))for(var a=0;a<this.data.datasets[t].metaData.length;a++)if(this.data.datasets[t].metaData[a].inRange(e.x,e.y))return this.data.datasets[t].metaData[a]}.call(this);return s?(i.each(this.data.datasets,function(t,e){i.isDatasetVisible(t)&&a.push(t.metaData[s._index])},this),a):a},getDatasetAtEvent:function(t){var e=i.getRelativePosition(t,this.chart),a=[];return i.each(this.data.datasets,function(t,s){i.isDatasetVisible(t)&&i.each(t.metaData,function(s,o){s.inLabelRange(e.x,e.y)&&i.each(t.metaData,function(t,e){a.push(t)},this)},this)},this),a.length?a:[]},generateLegend:function(){return this.options.legendCallback(this)},destroy:function(){this.clear(),i.unbindEvents(this,this.events),i.removeResizeListener(this.chart.canvas.parentNode);var t=this.chart.canvas;t.width=this.chart.width,t.height=this.chart.height,void 0!==this.chart.originalDevicePixelRatio&&this.chart.ctx.scale(1/this.chart.originalDevicePixelRatio,1/this.chart.originalDevicePixelRatio),t.style.width=this.chart.originalCanvasStyleWidth,t.style.height=this.chart.originalCanvasStyleHeight,delete e.instances[this.id]},toBase64Image:function(){return this.chart.canvas.toDataURL.apply(this.chart.canvas,arguments)},initToolTip:function(){this.tooltip=new e.Tooltip({_chart:this.chart,_data:this.data,_options:this.options},this)},bindEvents:function(){i.bindEvents(this,this.options.events,function(t){this.eventHandler(t)})},eventHandler:function(t){this.lastActive=this.lastActive||[],this.lastTooltipActive=this.lastTooltipActive||[],"mouseout"==t.type?(this.active=[],this.tooltipActive=[]):(this.active=function(){switch(this.options.hover.mode){case"single":return this.getElementAtEvent(t);case"label":return this.getElementsAtEvent(t);case"dataset":return this.getDatasetAtEvent(t);default:return t}}.call(this),this.tooltipActive=function(){switch(this.options.tooltips.mode){case"single":return this.getElementAtEvent(t);case"label":return this.getElementsAtEvent(t);case"dataset":return this.getDatasetAtEvent(t);default:return t}}.call(this)),this.options.hover.onHover&&this.options.hover.onHover.call(this,this.active),("mouseup"==t.type||"click"==t.type)&&this.options.onClick&&this.options.onClick.call(this,t,this.active);if(this.lastActive.length)switch(this.options.hover.mode){case"single":this.data.datasets[this.lastActive[0]._datasetIndex].controller.removeHoverStyle(this.lastActive[0],this.lastActive[0]._datasetIndex,this.lastActive[0]._index);break;case"label":case"dataset":for(var e=0;e<this.lastActive.length;e++)this.data.datasets[this.lastActive[e]._datasetIndex].controller.removeHoverStyle(this.lastActive[e],this.lastActive[e]._datasetIndex,this.lastActive[e]._index)}if(this.active.length&&this.options.hover.mode)switch(this.options.hover.mode){case"single":this.data.datasets[this.active[0]._datasetIndex].controller.setHoverStyle(this.active[0]);break;case"label":case"dataset":for(var a=0;a<this.active.length;a++)this.data.datasets[this.active[a]._datasetIndex].controller.setHoverStyle(this.active[a])}if((this.options.tooltips.enabled||this.options.tooltips.custom)&&(this.tooltip.initialize(),this.tooltip._active=this.tooltipActive,this.tooltip.update()),this.tooltip.pivot(),!this.animating){var s;i.each(this.active,function(t,e){t!==this.lastActive[e]&&(s=!0)},this),i.each(this.tooltipActive,function(t,e){t!==this.lastTooltipActive[e]&&(s=!0)},this),(this.lastActive.length!==this.active.length||this.lastTooltipActive.length!==this.tooltipActive.length||s)&&(this.stop(),(this.options.tooltips.enabled||this.options.tooltips.custom)&&this.tooltip.update(!0),this.render(this.options.hover.animationDuration,!0))}return this.lastActive=this.active,this.lastTooltipActive=this.tooltipActive,this}})}.call(this),function(){"use strict";var t=this,e=t.Chart,i=e.helpers;e.defaults.scale={display:!0,gridLines:{show:!0,color:"rgba(0, 0, 0, 0.1)",lineWidth:1,drawOnChartArea:!0,drawTicks:!0,zeroLineWidth:1,zeroLineColor:"rgba(0,0,0,0.25)",offsetGridLines:!1},scaleLabel:{fontColor:"#666",fontFamily:"Helvetica Neue",fontSize:12,fontStyle:"normal",labelString:"",show:!1},ticks:{beginAtZero:!1,fontSize:12,fontStyle:"normal",fontColor:"#666",fontFamily:"Helvetica Neue",maxRotation:90,minRotation:20,mirror:!1,padding:10,reverse:!1,show:!0,callback:function(t){return""+t}}},e.Scale=e.Element.extend({beforeUpdate:i.noop,update:function(t,e,i){return this.beforeUpdate(),this.maxWidth=t,this.maxHeight=e,this.margins=i,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this.beforeBuildTicks(),this.buildTicks(),this.afterBuildTicks(),this.beforeTickToLabelConversion(),this.convertTicksToLabels(),this.afterTickToLabelConversion(),this.beforeCalculateTickRotation(),this.calculateTickRotation(),this.afterCalculateTickRotation(),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate(),this.minSize},afterUpdate:i.noop,beforeSetDimensions:i.noop,setDimensions:function(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0},afterSetDimensions:i.noop,beforeBuildTicks:i.noop,buildTicks:i.noop,afterBuildTicks:i.noop,beforeTickToLabelConversion:i.noop,convertTicksToLabels:function(){this.ticks=this.ticks.map(function(t,e,i){return this.options.ticks.userCallback?this.options.ticks.userCallback(t,e,i):this.options.ticks.callback(t,e,i)},this)},afterTickToLabelConversion:i.noop,beforeCalculateTickRotation:i.noop,calculateTickRotation:function(){var t=i.fontString(this.options.ticks.fontSize,this.options.ticks.fontStyle,this.options.ticks.fontFamily);this.ctx.font=t;var e,a,s=this.ctx.measureText(this.ticks[0]).width,o=this.ctx.measureText(this.ticks[this.ticks.length-1]).width;if(this.paddingRight=o/2+3,this.paddingLeft=s/2+3,this.labelRotation=0,this.options.display&&this.isHorizontal()){var n,r,h=i.longestText(this.ctx,t,this.ticks);this.labelWidth=h;for(var l=this.getPixelForTick(1)-this.getPixelForTick(0)-6;this.labelWidth>l&&this.labelRotation<=this.options.ticks.maxRotation;){if(n=Math.cos(i.toRadians(this.labelRotation)),r=Math.sin(i.toRadians(this.labelRotation)),e=n*s,a=n*o,e+this.options.ticks.fontSize/2>this.yLabelWidth&&(this.paddingLeft=e+this.options.ticks.fontSize/2),this.paddingRight=this.options.ticks.fontSize/2,r*h>this.maxHeight){this.labelRotation--;break}this.labelRotation++,this.labelWidth=n*h}}else this.labelWidth=0,this.paddingRight=0,this.paddingLeft=0;this.margins&&(this.paddingLeft-=this.margins.left,this.paddingRight-=this.margins.right,this.paddingLeft=Math.max(this.paddingLeft,0),this.paddingRight=Math.max(this.paddingRight,0))},afterCalculateTickRotation:i.noop,beforeFit:i.noop,fit:function(){if(this.minSize={width:0,height:0},this.isHorizontal()?this.minSize.width=this.maxWidth:this.minSize.width=this.options.gridLines.show&&this.options.display?10:0,this.isHorizontal()?this.minSize.height=this.options.gridLines.show&&this.options.display?10:0:this.minSize.height=this.maxHeight,this.options.scaleLabel.show&&(this.isHorizontal()?this.minSize.height+=1.5*this.options.scaleLabel.fontSize:this.minSize.width+=1.5*this.options.scaleLabel.fontSize),this.options.ticks.show&&this.options.display){var t=i.fontString(this.options.ticks.fontSize,this.options.ticks.fontStyle,this.options.ticks.fontFamily);if(this.isHorizontal()){var e=(this.maxHeight-this.minSize.height,i.longestText(this.ctx,t,this.ticks)),a=Math.sin(i.toRadians(this.labelRotation))*e+1.5*this.options.ticks.fontSize;this.minSize.height=Math.min(this.maxHeight,this.minSize.height+a),t=i.fontString(this.options.ticks.fontSize,this.options.ticks.fontStyle,this.options.ticks.fontFamily),this.ctx.font=t;var s=this.ctx.measureText(this.ticks[0]).width,o=this.ctx.measureText(this.ticks[this.ticks.length-1]).width,n=Math.cos(i.toRadians(this.labelRotation)),r=Math.sin(i.toRadians(this.labelRotation));this.paddingLeft=0!==this.labelRotation?n*s+3:s/2+3,this.paddingRight=0!==this.labelRotation?r*(this.options.ticks.fontSize/2)+3:o/2+3}else{var h=this.maxWidth-this.minSize.width,l=i.longestText(this.ctx,t,this.ticks);h>l?this.minSize.width+=l:this.minSize.width=this.maxWidth,this.paddingTop=this.options.ticks.fontSize/2,this.paddingBottom=this.options.ticks.fontSize/2}}this.margins&&(this.paddingLeft-=this.margins.left,this.paddingTop-=this.margins.top,this.paddingRight-=this.margins.right,this.paddingBottom-=this.margins.bottom,this.paddingLeft=Math.max(this.paddingLeft,0),this.paddingTop=Math.max(this.paddingTop,0),this.paddingRight=Math.max(this.paddingRight,0),this.paddingBottom=Math.max(this.paddingBottom,0)),this.width=this.minSize.width,this.height=this.minSize.height},afterFit:i.noop,isHorizontal:function(){return"top"==this.options.position||"bottom"==this.options.position},getRightValue:function a(t){return null===t||"undefined"==typeof t?NaN:"number"==typeof t&&isNaN(t)?NaN:"object"==typeof t?a(this.isHorizontal()?t.x:t.y):t},getLabelForIndex:i.noop,getPixelForValue:i.noop,getPixelForTick:function(t,e){if(this.isHorizontal()){var i=this.width-(this.paddingLeft+this.paddingRight),a=i/Math.max(this.ticks.length-(this.options.gridLines.offsetGridLines?0:1),1),s=a*t+this.paddingLeft;return e&&(s+=a/2),this.left+Math.round(s)}var o=this.height-(this.paddingTop+this.paddingBottom);return this.top+t*(o/(this.ticks.length-1))},getPixelForDecimal:function(t,e){if(this.isHorizontal()){var i=this.width-(this.paddingLeft+this.paddingRight),a=i*t+this.paddingLeft;return this.left+Math.round(a)}return this.top+t*this.height},draw:function(t){if(this.options.display){var e,a,s,o,n=0!==this.labelRotation;this.ctx.fillStyle=this.options.ticks.fontColor;var r=i.fontString(this.options.ticks.fontSize,this.options.ticks.fontStyle,this.options.ticks.fontFamily);if(this.isHorizontal()){e=!0;var h="bottom"==this.options.position?this.top:this.bottom-10,l="bottom"==this.options.position?this.top+10:this.bottom;a=!1,(this.options.ticks.fontSize+4)*this.ticks.length>this.width-(this.paddingLeft+this.paddingRight)&&(a=1+Math.floor((this.options.ticks.fontSize+4)*this.ticks.length/(this.width-(this.paddingLeft+this.paddingRight)))),i.each(this.ticks,function(s,o){if(!(a>1&&o%a>0||void 0===s||null===s)){var c=this.getPixelForTick(o),d=this.getPixelForTick(o,this.options.gridLines.offsetGridLines);this.options.gridLines.show&&(o===("undefined"!=typeof this.zeroLineIndex?this.zeroLineIndex:0)?(this.ctx.lineWidth=this.options.gridLines.zeroLineWidth,this.ctx.strokeStyle=this.options.gridLines.zeroLineColor,e=!0):e&&(this.ctx.lineWidth=this.options.gridLines.lineWidth,this.ctx.strokeStyle=this.options.gridLines.color,e=!1),c+=i.aliasPixel(this.ctx.lineWidth),this.ctx.beginPath(),this.options.gridLines.drawTicks&&(this.ctx.moveTo(c,h),this.ctx.lineTo(c,l)),this.options.gridLines.drawOnChartArea&&(this.ctx.moveTo(c,t.top),this.ctx.lineTo(c,t.bottom)),this.ctx.stroke()),this.options.ticks.show&&(this.ctx.save(),this.ctx.translate(d,n?this.top+12:"top"===this.options.position?this.bottom-10:this.top+10),this.ctx.rotate(-1*i.toRadians(this.labelRotation)),this.ctx.font=r,this.ctx.textAlign=n?"right":"center",
this.ctx.textBaseline=n?"middle":"top"===this.options.position?"bottom":"top",this.ctx.fillText(s,0,0),this.ctx.restore())}},this),this.options.scaleLabel.show&&(this.ctx.textAlign="center",this.ctx.textBaseline="middle",this.ctx.fillStyle=this.options.scaleLabel.fontColor,this.ctx.font=i.fontString(this.options.scaleLabel.fontSize,this.options.scaleLabel.fontStyle,this.options.scaleLabel.fontFamily),s=this.left+(this.right-this.left)/2,o="bottom"==this.options.position?this.bottom-this.options.scaleLabel.fontSize/2:this.top+this.options.scaleLabel.fontSize/2,this.ctx.fillText(this.options.scaleLabel.labelString,s,o))}else{e=!0;var c="right"==this.options.position?this.left:this.right-5,d="right"==this.options.position?this.left+5:this.right;if(i.each(this.ticks,function(a,s){var o=this.getPixelForTick(s);if(this.options.gridLines.show&&(s===("undefined"!=typeof this.zeroLineIndex?this.zeroLineIndex:0)?(this.ctx.lineWidth=this.options.gridLines.zeroLineWidth,this.ctx.strokeStyle=this.options.gridLines.zeroLineColor,e=!0):e&&(this.ctx.lineWidth=this.options.gridLines.lineWidth,this.ctx.strokeStyle=this.options.gridLines.color,e=!1),o+=i.aliasPixel(this.ctx.lineWidth),this.ctx.beginPath(),this.options.gridLines.drawTicks&&(this.ctx.moveTo(c,o),this.ctx.lineTo(d,o)),this.options.gridLines.drawOnChartArea&&(this.ctx.moveTo(t.left,o),this.ctx.lineTo(t.right,o)),this.ctx.stroke()),this.options.ticks.show){var n,h=this.getPixelForTick(s,this.options.gridLines.offsetGridLines);this.ctx.save(),"left"==this.options.position?this.options.ticks.mirror?(n=this.right+this.options.ticks.padding,this.ctx.textAlign="left"):(n=this.right-this.options.ticks.padding,this.ctx.textAlign="right"):this.options.ticks.mirror?(n=this.left-this.options.ticks.padding,this.ctx.textAlign="right"):(n=this.left+this.options.ticks.padding,this.ctx.textAlign="left"),this.ctx.translate(n,h),this.ctx.rotate(-1*i.toRadians(this.labelRotation)),this.ctx.font=r,this.ctx.textBaseline="middle",this.ctx.fillText(a,0,0),this.ctx.restore()}},this),this.options.scaleLabel.show){s="left"==this.options.position?this.left+this.options.scaleLabel.fontSize/2:this.right-this.options.scaleLabel.fontSize/2,o=this.top+(this.bottom-this.top)/2;var u="left"==this.options.position?-.5*Math.PI:.5*Math.PI;this.ctx.save(),this.ctx.translate(s,o),this.ctx.rotate(u),this.ctx.textAlign="center",this.ctx.fillStyle=this.options.scaleLabel.fontColor,this.ctx.font=i.fontString(this.options.scaleLabel.fontSize,this.options.scaleLabel.fontStyle,this.options.scaleLabel.fontFamily),this.ctx.textBaseline="middle",this.ctx.fillText(this.options.scaleLabel.labelString,0,0),this.ctx.restore()}}}}})}.call(this),function(){"use strict";var t=this,e=t.Chart,i=e.helpers;e.scaleService={constructors:{},defaults:{},registerScaleType:function(t,e,a){this.constructors[t]=e,this.defaults[t]=i.clone(a)},getScaleConstructor:function(t){return this.constructors.hasOwnProperty(t)?this.constructors[t]:void 0},getScaleDefaults:function(t){return this.defaults.hasOwnProperty(t)?i.scaleMerge(e.defaults.scale,this.defaults[t]):{}},update:function(t,e,a){var s=e>30?5:2,o=a>30?5:2;if(t){var n=i.where(t.scales,function(t){return"left"==t.options.position}),r=i.where(t.scales,function(t){return"right"==t.options.position}),h=i.where(t.scales,function(t){return"top"==t.options.position}),l=i.where(t.scales,function(t){return"bottom"==t.options.position}),c=i.where(t.scales,function(t){return"chartArea"==t.options.position}),d=e/2,u=a/2;d-=2*s,u-=2*o;var g=(e-d)/(n.length+r.length),m=(a-u)/(h.length+l.length),p=[],f=function(t){var e=t.update(g,u);p.push({horizontal:!1,minSize:e,scale:t})},b=function(t){var e=t.update(d,m);p.push({horizontal:!0,minSize:e,scale:t})};i.each(n,f),i.each(r,f),i.each(h,b),i.each(l,b);var v=a-2*o,x=e-2*s;i.each(p,function(t){t.horizontal?v-=t.minSize.height:x-=t.minSize.width});var y=function(t){var e=i.findNextWhere(p,function(e){return e.scale===t});e&&t.update(e.minSize.width,v)},k=function(t){var e=i.findNextWhere(p,function(e){return e.scale===t}),a={left:D,right:w,top:0,bottom:0};e&&t.update(x,e.minSize.height,a)},D=s,w=s,C=o,S=o;i.each(n,y),i.each(r,y),i.each(n,function(t){D+=t.width}),i.each(r,function(t){w+=t.width}),i.each(h,k),i.each(l,k),i.each(h,function(t){C+=t.height}),i.each(l,function(t){S+=t.height}),i.each(n,function(t){var e=i.findNextWhere(p,function(e){return e.scale===t}),a={left:0,right:0,top:C,bottom:S};e&&t.update(e.minSize.width,v,a)}),i.each(r,function(t){var e=i.findNextWhere(p,function(e){return e.scale===t}),a={left:0,right:0,top:C,bottom:S};e&&t.update(e.minSize.width,v,a)}),D=s,w=s,C=o,S=o,i.each(n,function(t){D+=t.width}),i.each(r,function(t){w+=t.width}),i.each(h,function(t){C+=t.height}),i.each(l,function(t){S+=t.height});var _=a-C-S,A=e-D-w;(A!==x||_!==v)&&(i.each(n,function(t){t.height=_}),i.each(r,function(t){t.height=_}),i.each(h,function(t){t.width=A}),i.each(l,function(t){t.width=A}),v=_,x=A);var I=s,M=o,P=function(t){t.left=I,t.right=I+t.width,t.top=C,t.bottom=C+v,I=t.right},F=function(t){t.left=D,t.right=D+x,t.top=M,t.bottom=M+t.height,M=t.bottom};i.each(n,P),i.each(h,F),I+=x,M+=v,i.each(r,P),i.each(l,F),t.chartArea={left:D,top:C,right:D+x,bottom:C+v},i.each(c,function(e){e.left=t.chartArea.left,e.top=t.chartArea.top,e.right=t.chartArea.right,e.bottom=t.chartArea.bottom,e.update(x,v)})}}}}.call(this),function(){"use strict";function t(t,e){return e&&(a.isArray(e)?t=t.concat(e):t.push(e)),t}var e=this,i=e.Chart,a=i.helpers;i.defaults.global.tooltips={enabled:!0,custom:null,mode:"single",backgroundColor:"rgba(0,0,0,0.8)",titleFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",titleFontSize:12,titleFontStyle:"bold",titleSpacing:2,titleMarginBottom:6,titleColor:"#fff",titleAlign:"left",bodyFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",bodyFontSize:12,bodyFontStyle:"normal",bodySpacing:2,bodyColor:"#fff",bodyAlign:"left",footerFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",footerFontSize:12,footerFontStyle:"bold",footerSpacing:2,footerMarginTop:6,footerColor:"#fff",footerAlign:"left",yPadding:6,xPadding:6,caretSize:5,cornerRadius:6,xOffset:10,multiKeyBackground:"#fff",callbacks:{beforeTitle:a.noop,title:function(t,e){var i="";return t.length>0&&(t[0].xLabel?i=t[0].xLabel:e.labels.length>0&&t[0].index<e.labels.length&&(i=e.labels[t[0].index])),i},afterTitle:a.noop,beforeBody:a.noop,beforeLabel:a.noop,label:function(t,e){var i=e.datasets[t.datasetIndex].label||"";return i+": "+t.yLabel},afterLabel:a.noop,afterBody:a.noop,beforeFooter:a.noop,footer:a.noop,afterFooter:a.noop}},i.Tooltip=i.Element.extend({initialize:function(){var t=this._options;a.extend(this,{_model:{xPadding:t.tooltips.xPadding,yPadding:t.tooltips.yPadding,xOffset:t.tooltips.xOffset,bodyColor:t.tooltips.bodyColor,_bodyFontFamily:t.tooltips.bodyFontFamily,_bodyFontStyle:t.tooltips.bodyFontStyle,_bodyAlign:t.tooltips.bodyAlign,bodyFontSize:t.tooltips.bodyFontSize,bodySpacing:t.tooltips.bodySpacing,titleColor:t.tooltips.titleColor,_titleFontFamily:t.tooltips.titleFontFamily,_titleFontStyle:t.tooltips.titleFontStyle,titleFontSize:t.tooltips.titleFontSize,_titleAlign:t.tooltips.titleAlign,titleSpacing:t.tooltips.titleSpacing,titleMarginBottom:t.tooltips.titleMarginBottom,footerColor:t.tooltips.footerColor,_footerFontFamily:t.tooltips.footerFontFamily,_footerFontStyle:t.tooltips.footerFontStyle,footerFontSize:t.tooltips.footerFontSize,_footerAlign:t.tooltips.footerAlign,footerSpacing:t.tooltips.footerSpacing,footerMarginTop:t.tooltips.footerMarginTop,caretSize:t.tooltips.caretSize,cornerRadius:t.tooltips.cornerRadius,backgroundColor:t.tooltips.backgroundColor,opacity:0,legendColorBackground:t.tooltips.multiKeyBackground}})},getTitle:function(){var e=this._options.tooltips.callbacks.beforeTitle.apply(this,arguments),i=this._options.tooltips.callbacks.title.apply(this,arguments),a=this._options.tooltips.callbacks.afterTitle.apply(this,arguments),s=[];return s=t(s,e),s=t(s,i),s=t(s,a)},getBeforeBody:function(){var t=this._options.tooltips.callbacks.beforeBody.call(this,arguments);return a.isArray(t)?t:[t]},getBody:function(t,e){var i=[];return a.each(t,function(t){var a=this._options.tooltips.callbacks.beforeLabel.call(this,t,e)||"",s=this._options.tooltips.callbacks.label.call(this,t,e)||"",o=this._options.tooltips.callbacks.afterLabel.call(this,t,e)||"";i.push(a+s+o)},this),i},getAfterBody:function(){var t=this._options.tooltips.callbacks.afterBody.call(this,arguments);return a.isArray(t)?t:[t]},getFooter:function(){var e=this._options.tooltips.callbacks.beforeFooter.apply(this,arguments),i=this._options.tooltips.callbacks.footer.apply(this,arguments),a=this._options.tooltips.callbacks.afterFooter.apply(this,arguments),s=[];return s=t(s,e),s=t(s,i),s=t(s,a)},getAveragePosition:function(t){if(!t.length)return!1;var e=[],i=[];a.each(t,function(t){var a=t.tooltipPosition();e.push(a.x),i.push(a.y)});for(var s=0,o=0,n=0;n<e.length;n++)s+=e[n],o+=i[n];return{x:Math.round(s/e.length),y:Math.round(o/e.length)}},update:function(t){this._chart.ctx;if(this._active.length){this._model.opacity=1;var e,i=this._active[0],s=[],o=[];if("single"==this._options.tooltips.mode){var n=i._yScale||i._scale;o.push({xLabel:i._xScale?i._xScale.getLabelForIndex(i._index,i._datasetIndex):"",yLabel:n?n.getLabelForIndex(i._index,i._datasetIndex):"",index:i._index,datasetIndex:i._datasetIndex}),e=this.getAveragePosition(this._active)}else a.each(this._data.datasets,function(t,e){if(a.isDatasetVisible(t)){var s=t.metaData[i._index],n=i._yScale||i._scale;o.push({xLabel:s._xScale?s._xScale.getLabelForIndex(s._index,s._datasetIndex):"",yLabel:n?n.getLabelForIndex(s._index,s._datasetIndex):"",index:i._index,datasetIndex:e})}}),a.each(this._active,function(t,e){s.push({borderColor:t._view.borderColor,backgroundColor:t._view.backgroundColor})},this),e=this.getAveragePosition(this._active),e.y=this._active[0]._yScale.getPixelForDecimal(.5);a.extend(this._model,{title:this.getTitle(o,this._data),beforeBody:this.getBeforeBody(o,this._data),body:this.getBody(o,this._data),afterBody:this.getAfterBody(o,this._data),footer:this.getFooter(o,this._data)}),a.extend(this._model,{x:Math.round(e.x),y:Math.round(e.y),caretPadding:e.padding,labelColors:s})}else this._model.opacity=0;return t&&this._options.tooltips.custom&&this._options.tooltips.custom.call(this,this._model),this},draw:function(){var t=this._chart.ctx,e=this._view;if(0!==this._view.opacity){e.position="top";var i=e.caretPadding||2,s=e.body.length+e.beforeBody.length+e.afterBody.length,o=2*e.yPadding;o+=e.title.length*e.titleFontSize,o+=(e.title.length-1)*e.titleSpacing,o+=e.title.length?e.titleMarginBottom:0,o+=s*e.bodyFontSize,o+=(s-1)*e.bodySpacing,o+=e.footer.length?e.footerMarginTop:0,o+=e.footer.length*e.footerFontSize,o+=(e.footer.length-1)*e.footerSpacing;var n=0;a.each(e.title,function(i,s){t.font=a.fontString(e.titleFontSize,e._titleFontStyle,e._titleFontFamily),n=Math.max(n,t.measureText(i).width)}),a.each(e.body,function(i,s){t.font=a.fontString(e.bodyFontSize,e._bodyFontStyle,e._bodyFontFamily),n=Math.max(n,t.measureText(i).width+("single"!=this._options.tooltips.mode?e.bodyFontSize+2:0))},this),a.each(e.footer,function(i,s){t.font=a.fontString(e.footerFontSize,e._footerFontStyle,e._footerFontFamily),n=Math.max(n,t.measureText(i).width)}),n+=2*e.xPadding;var r=n+e.caretSize+i;e.yAlign="center",e.y-o/2<0?e.yAlign="top":e.y+o/2>this._chart.height&&(e.yAlign="bottom"),e.xAlign="right",e.x+r>this._chart.width&&(e.xAlign="left");var h=e.x,l=e.y;if(l="top"==e.yAlign?e.y-e.caretSize-e.cornerRadius:"bottom"==e.yAlign?e.y-o+e.caretSize+e.cornerRadius:e.y-o/2,h="left"==e.xAlign?e.x-r:"right"==e.xAlign?e.x+i+e.caretSize:e.x+r/2,this._options.tooltips.enabled&&(t.fillStyle=a.color(e.backgroundColor).alpha(e.opacity).rgbString(),a.drawRoundedRectangle(t,h,l,n,o,e.cornerRadius),t.fill()),this._options.tooltips.enabled&&(t.fillStyle=a.color(e.backgroundColor).alpha(e.opacity).rgbString(),"left"==e.xAlign?(t.beginPath(),t.moveTo(e.x-i,e.y),t.lineTo(e.x-i-e.caretSize,e.y-e.caretSize),t.lineTo(e.x-i-e.caretSize,e.y+e.caretSize),t.closePath(),t.fill()):(t.beginPath(),t.moveTo(e.x+i,e.y),t.lineTo(e.x+i+e.caretSize,e.y-e.caretSize),t.lineTo(e.x+i+e.caretSize,e.y+e.caretSize),t.closePath(),t.fill())),this._options.tooltips.enabled){var c=l+e.yPadding,d=h+e.xPadding;e.title.length&&(t.textAlign=e._titleAlign,t.textBaseline="top",t.fillStyle=a.color(e.titleColor).alpha(e.opacity).rgbString(),t.font=a.fontString(e.titleFontSize,e._titleFontStyle,e._titleFontFamily),a.each(e.title,function(i,a){t.fillText(i,d,c),c+=e.titleFontSize+e.titleSpacing,a+1==e.title.length&&(c+=e.titleMarginBottom-e.titleSpacing)},this)),t.textAlign=e._bodyAlign,t.textBaseline="top",t.fillStyle=a.color(e.bodyColor).alpha(e.opacity).rgbString(),t.font=a.fontString(e.bodyFontSize,e._bodyFontStyle,e._bodyFontFamily),a.each(e.beforeBody,function(i,a){t.fillText(e.beforeBody,d,c),c+=e.bodyFontSize+e.bodySpacing}),a.each(e.body,function(i,s){"single"!=this._options.tooltips.mode&&(t.fillStyle=a.color(e.labelColors[s].borderColor).alpha(e.opacity).rgbString(),t.fillRect(d,c,e.bodyFontSize,e.bodyFontSize),t.fillStyle=a.color(e.labelColors[s].backgroundColor).alpha(e.opacity).rgbString(),t.fillRect(d+1,c+1,e.bodyFontSize-2,e.bodyFontSize-2),t.fillStyle=a.color(e.bodyColor).alpha(e.opacity).rgbString()),t.fillText(i,d+("single"!=this._options.tooltips.mode?e.bodyFontSize+2:0),c),c+=e.bodyFontSize+e.bodySpacing},this),a.each(e.afterBody,function(i,a){t.fillText(e.afterBody,d,c),c+=e.bodyFontSize}),c-=e.bodySpacing,e.footer.length&&(c+=e.footerMarginTop,t.textAlign=e._footerAlign,t.textBaseline="top",t.fillStyle=a.color(e.footerColor).alpha(e.opacity).rgbString(),t.font=a.fontString(e.footerFontSize,e._footerFontStyle,e._footerFontFamily),a.each(e.footer,function(i,a){t.fillText(i,d,c),c+=e.footerFontSize+e.footerSpacing},this))}}}})}.call(this),function(){"use strict";var t=this,e=t.Chart,i=e.helpers;e.defaults.bar={hover:{mode:"label"},scales:{xAxes:[{type:"category",categoryPercentage:.8,barPercentage:.9,gridLines:{offsetGridLines:!0}}],yAxes:[{type:"linear"}]}},e.controllers.bar=function(t,e){this.initialize.call(this,t,e)},i.extend(e.controllers.bar.prototype,{initialize:function(t,e){this.chart=t,this.index=e,this.linkScales(),this.addElements()},updateIndex:function(t){this.index=t},linkScales:function(){this.getDataset().xAxisID||(this.getDataset().xAxisID=this.chart.options.scales.xAxes[0].id),this.getDataset().yAxisID||(this.getDataset().yAxisID=this.chart.options.scales.yAxes[0].id)},getDataset:function(){return this.chart.data.datasets[this.index]},getScaleForID:function(t){return this.chart.scales[t]},getBarCount:function(){var t=0;return i.each(this.chart.data.datasets,function(e){i.isDatasetVisible(e)&&("bar"===e.type?++t:void 0===e.type&&"bar"===this.chart.config.type&&++t)},this),t},addElements:function(){this.getDataset().metaData=this.getDataset().metaData||[],i.each(this.getDataset().data,function(t,i){this.getDataset().metaData[i]=this.getDataset().metaData[i]||new e.elements.Rectangle({_chart:this.chart.chart,_datasetIndex:this.index,_index:i})},this)},addElementAndReset:function(t){this.getDataset().metaData=this.getDataset().metaData||[];var i=new e.elements.Rectangle({_chart:this.chart.chart,_datasetIndex:this.index,_index:t}),a=this.getBarCount();this.updateElement(i,t,!0,a),this.getDataset().metaData.splice(t,0,i)},removeElement:function(t){this.getDataset().metaData.splice(t,1)},reset:function(){this.update(!0)},buildOrUpdateElements:function(){var t=this.getDataset().data.length,e=this.getDataset().metaData.length;if(e>t)this.getDataset().metaData.splice(t,e-t);else if(t>e)for(var i=e;t>i;++i)this.addElementAndReset(i)},update:function(t){var e=this.getBarCount();i.each(this.getDataset().metaData,function(i,a){this.updateElement(i,a,t,e)},this)},updateElement:function(t,e,a,s){var o,n=this.getScaleForID(this.getDataset().xAxisID),r=this.getScaleForID(this.getDataset().yAxisID);o=r.min<0&&r.max<0?r.getPixelForValue(r.max):r.min>0&&r.max>0?r.getPixelForValue(r.min):r.getPixelForValue(0),i.extend(t,{_chart:this.chart.chart,_xScale:n,_yScale:r,_datasetIndex:this.index,_index:e,_model:{x:this.calculateBarX(e,this.index),y:a?o:this.calculateBarY(e,this.index),label:this.chart.data.labels[e],datasetLabel:this.getDataset().label,base:this.calculateBarBase(this.index,e),width:this.calculateBarWidth(s),backgroundColor:t.custom&&t.custom.backgroundColor?t.custom.backgroundColor:i.getValueAtIndexOrDefault(this.getDataset().backgroundColor,e,this.chart.options.elements.rectangle.backgroundColor),borderColor:t.custom&&t.custom.borderColor?t.custom.borderColor:i.getValueAtIndexOrDefault(this.getDataset().borderColor,e,this.chart.options.elements.rectangle.borderColor),borderWidth:t.custom&&t.custom.borderWidth?t.custom.borderWidth:i.getValueAtIndexOrDefault(this.getDataset().borderWidth,e,this.chart.options.elements.rectangle.borderWidth)}}),t.pivot()},calculateBarBase:function(t,e){var a=(this.getScaleForID(this.getDataset().xAxisID),this.getScaleForID(this.getDataset().yAxisID)),s=0;if(a.options.stacked){var o=this.chart.data.datasets[t].data[e];if(0>o)for(var n=0;t>n;n++){var r=this.chart.data.datasets[n];i.isDatasetVisible(r)&&r.yAxisID===a.id&&(s+=r.data[e]<0?r.data[e]:0)}else for(var h=0;t>h;h++){var l=this.chart.data.datasets[h];i.isDatasetVisible(l)&&l.yAxisID===a.id&&(s+=l.data[e]>0?l.data[e]:0)}return a.getPixelForValue(s)}return s=a.getPixelForValue(a.min),a.beginAtZero||a.min<=0&&a.max>=0||a.min>=0&&a.max<=0?s=a.getPixelForValue(0,0):a.min<0&&a.max<0&&(s=a.getPixelForValue(a.max)),s},getRuler:function(){var t=this.getScaleForID(this.getDataset().xAxisID),e=(this.getScaleForID(this.getDataset().yAxisID),this.getBarCount()),i=function(){for(var e=t.getPixelForValue(null,1)-t.getPixelForValue(null,0),i=2;i<this.getDataset().data.length;i++)e=Math.min(t.getPixelForValue(null,i)-t.getPixelForValue(null,i-1),e);return e}.call(this),a=i*t.options.categoryPercentage,s=(i-i*t.options.categoryPercentage)/2,o=a/e,n=o*t.options.barPercentage,r=o-o*t.options.barPercentage;return{datasetCount:e,tickWidth:i,categoryWidth:a,categorySpacing:s,fullBarWidth:o,barWidth:n,barSpacing:r}},calculateBarWidth:function(){var t=this.getScaleForID(this.getDataset().xAxisID),e=this.getRuler();return t.options.stacked?e.categoryWidth:e.barWidth},getBarIndex:function(t){for(var e=0,a=0;t>a;++a)i.isDatasetVisible(this.chart.data.datasets[a])&&("bar"===this.chart.data.datasets[a].type||void 0===this.chart.data.datasets[a].type&&"bar"===this.chart.config.type)&&++e;return e},calculateBarX:function(t,e){var i=(this.getScaleForID(this.getDataset().yAxisID),this.getScaleForID(this.getDataset().xAxisID)),a=this.getBarIndex(e),s=this.getRuler(),o=i.getPixelForValue(null,t,a,this.chart.isCombo);return o-=this.chart.isCombo?s.tickWidth/2:0,i.options.stacked?o+s.categoryWidth/2+s.categorySpacing:o+s.barWidth/2+s.categorySpacing+s.barWidth*a+s.barSpacing/2+s.barSpacing*a},calculateBarY:function(t,e){var a=(this.getScaleForID(this.getDataset().xAxisID),this.getScaleForID(this.getDataset().yAxisID)),s=this.getDataset().data[t];if(a.options.stacked){for(var o=0,n=0,r=0;e>r;r++){var h=this.chart.data.datasets[r];i.isDatasetVisible(h)&&(h.data[t]<0?n+=h.data[t]||0:o+=h.data[t]||0)}return 0>s?a.getPixelForValue(n+s):a.getPixelForValue(o+s)}return a.getPixelForValue(s)},draw:function(t){var e=t||1;i.each(this.getDataset().metaData,function(t,i){t.transition(e).draw()},this)},setHoverStyle:function(t){var e=this.chart.data.datasets[t._datasetIndex],a=t._index;t._model.backgroundColor=t.custom&&t.custom.hoverBackgroundColor?t.custom.hoverBackgroundColor:i.getValueAtIndexOrDefault(e.hoverBackgroundColor,a,i.color(t._model.backgroundColor).saturate(.5).darken(.1).rgbString()),t._model.borderColor=t.custom&&t.custom.hoverBorderColor?t.custom.hoverBorderColor:i.getValueAtIndexOrDefault(e.hoverBorderColor,a,i.color(t._model.borderColor).saturate(.5).darken(.1).rgbString()),t._model.borderWidth=t.custom&&t.custom.hoverBorderWidth?t.custom.hoverBorderWidth:i.getValueAtIndexOrDefault(e.hoverBorderWidth,a,t._model.borderWidth)},removeHoverStyle:function(t){var e=(this.chart.data.datasets[t._datasetIndex],t._index);t._model.backgroundColor=t.custom&&t.custom.backgroundColor?t.custom.backgroundColor:i.getValueAtIndexOrDefault(this.getDataset().backgroundColor,e,this.chart.options.elements.rectangle.backgroundColor),t._model.borderColor=t.custom&&t.custom.borderColor?t.custom.borderColor:i.getValueAtIndexOrDefault(this.getDataset().borderColor,e,this.chart.options.elements.rectangle.borderColor),t._model.borderWidth=t.custom&&t.custom.borderWidth?t.custom.borderWidth:i.getValueAtIndexOrDefault(this.getDataset().borderWidth,e,this.chart.options.elements.rectangle.borderWidth)}})}.call(this),function(){"use strict";var t=this,e=t.Chart,i=e.helpers;e.defaults.bubble={hover:{mode:"single"},scales:{xAxes:[{type:"linear",position:"bottom",id:"x-axis-0"}],yAxes:[{type:"linear",position:"left",id:"y-axis-0"}]},tooltips:{template:"(<%= value.x %>, <%= value.y %>, <%= value.r %>)",multiTemplate:"<%if (datasetLabel){%><%=datasetLabel%>: <%}%>(<%= value.x %>, <%= value.y %>, <%= value.r %>)"}},e.controllers.bubble=function(t,e){this.initialize.call(this,t,e)},i.extend(e.controllers.bubble.prototype,{initialize:function(t,e){this.chart=t,this.index=e,this.linkScales(),this.addElements()},updateIndex:function(t){this.index=t},linkScales:function(){this.getDataset().xAxisID||(this.getDataset().xAxisID=this.chart.options.scales.xAxes[0].id),this.getDataset().yAxisID||(this.getDataset().yAxisID=this.chart.options.scales.yAxes[0].id)},getDataset:function(){return this.chart.data.datasets[this.index]},getScaleForId:function(t){return this.chart.scales[t]},addElements:function(){this.getDataset().metaData=this.getDataset().metaData||[],i.each(this.getDataset().data,function(t,i){this.getDataset().metaData[i]=this.getDataset().metaData[i]||new e.elements.Point({_chart:this.chart.chart,_datasetIndex:this.index,_index:i})},this)},addElementAndReset:function(t){this.getDataset().metaData=this.getDataset().metaData||[];var i=new e.elements.Point({_chart:this.chart.chart,_datasetIndex:this.index,_index:t});this.updateElement(i,t,!0),this.getDataset().metaData.splice(t,0,i)},removeElement:function(t){this.getDataset().metaData.splice(t,1)},reset:function(){this.update(!0)},buildOrUpdateElements:function(){var t=this.getDataset().data.length,e=this.getDataset().metaData.length;if(e>t)this.getDataset().metaData.splice(t,e-t);else if(t>e)for(var i=e;t>i;++i)this.addElementAndReset(i)},update:function(t){var e,a=this.getDataset().metaData,s=this.getScaleForId(this.getDataset().yAxisID);this.getScaleForId(this.getDataset().xAxisID);e=s.min<0&&s.max<0?s.getPixelForValue(s.max):s.min>0&&s.max>0?s.getPixelForValue(s.min):s.getPixelForValue(0),i.each(a,function(e,i){this.updateElement(e,i,t)},this)},updateElement:function(t,e,a){var s,o=this.getScaleForId(this.getDataset().yAxisID),n=this.getScaleForId(this.getDataset().xAxisID);s=o.min<0&&o.max<0?o.getPixelForValue(o.max):o.min>0&&o.max>0?o.getPixelForValue(o.min):o.getPixelForValue(0),i.extend(t,{_chart:this.chart.chart,_xScale:n,_yScale:o,_datasetIndex:this.index,_index:e,_model:{x:a?n.getPixelForDecimal(.5):n.getPixelForValue(this.getDataset().data[e],e,this.index,this.chart.isCombo),y:a?s:o.getPixelForValue(this.getDataset().data[e],e,this.index),radius:a?0:t.custom&&t.custom.radius?t.custom.radius:this.getRadius(this.getDataset().data[e]),backgroundColor:t.custom&&t.custom.backgroundColor?t.custom.backgroundColor:i.getValueAtIndexOrDefault(this.getDataset().backgroundColor,e,this.chart.options.elements.point.backgroundColor),borderColor:t.custom&&t.custom.borderColor?t.custom.borderColor:i.getValueAtIndexOrDefault(this.getDataset().borderColor,e,this.chart.options.elements.point.borderColor),borderWidth:t.custom&&t.custom.borderWidth?t.custom.borderWidth:i.getValueAtIndexOrDefault(this.getDataset().borderWidth,e,this.chart.options.elements.point.borderWidth),hitRadius:t.custom&&t.custom.hitRadius?t.custom.hitRadius:i.getValueAtIndexOrDefault(this.getDataset().hitRadius,e,this.chart.options.elements.point.hitRadius)}}),t._model.skip=t.custom&&t.custom.skip?t.custom.skip:isNaN(t._model.x)||isNaN(t._model.y),t.pivot()},getRadius:function(t){return t.r||this.chart.options.elements.point.radius},draw:function(t){var e=t||1;i.each(this.getDataset().metaData,function(t,i){t.transition(e),t.draw()},this)},setHoverStyle:function(t){var e=this.chart.data.datasets[t._datasetIndex],a=t._index;t._model.radius=t.custom&&t.custom.hoverRadius?t.custom.hoverRadius:i.getValueAtIndexOrDefault(e.hoverRadius,a,this.chart.options.elements.point.hoverRadius)+this.getRadius(this.getDataset().data[t._index]),t._model.backgroundColor=t.custom&&t.custom.hoverBackgroundColor?t.custom.hoverBackgroundColor:i.getValueAtIndexOrDefault(e.hoverBackgroundColor,a,i.color(t._model.backgroundColor).saturate(.5).darken(.1).rgbString()),t._model.borderColor=t.custom&&t.custom.hoverBorderColor?t.custom.hoverBorderColor:i.getValueAtIndexOrDefault(e.hoverBorderColor,a,i.color(t._model.borderColor).saturate(.5).darken(.1).rgbString()),t._model.borderWidth=t.custom&&t.custom.hoverBorderWidth?t.custom.hoverBorderWidth:i.getValueAtIndexOrDefault(e.hoverBorderWidth,a,t._model.borderWidth)},removeHoverStyle:function(t){var e=(this.chart.data.datasets[t._datasetIndex],t._index);t._model.radius=t.custom&&t.custom.radius?t.custom.radius:this.getRadius(this.getDataset().data[t._index]),t._model.backgroundColor=t.custom&&t.custom.backgroundColor?t.custom.backgroundColor:i.getValueAtIndexOrDefault(this.getDataset().backgroundColor,e,this.chart.options.elements.point.backgroundColor),t._model.borderColor=t.custom&&t.custom.borderColor?t.custom.borderColor:i.getValueAtIndexOrDefault(this.getDataset().borderColor,e,this.chart.options.elements.point.borderColor),t._model.borderWidth=t.custom&&t.custom.borderWidth?t.custom.borderWidth:i.getValueAtIndexOrDefault(this.getDataset().borderWidth,e,this.chart.options.elements.point.borderWidth)}})}.call(this),function(){"use strict";var t=this,e=t.Chart,i=e.helpers;e.defaults.doughnut={animation:{animateRotate:!0,animateScale:!1},hover:{mode:"single"},cutoutPercentage:50,tooltips:{callbacks:{title:function(){return""},label:function(t,e){return e.labels[t.index]+": "+e.datasets[t.datasetIndex].data[t.index]}}}},e.defaults.pie=i.clone(e.defaults.doughnut),i.extend(e.defaults.pie,{cutoutPercentage:0}),e.controllers.doughnut=e.controllers.pie=function(t,e){this.initialize.call(this,t,e)},i.extend(e.controllers.doughnut.prototype,{initialize:function(t,e){this.chart=t,this.index=e,this.linkScales(),this.addElements()},updateIndex:function(t){this.index=t},linkScales:function(){},getDataset:function(){return this.chart.data.datasets[this.index]},addElements:function(){this.getDataset().metaData=this.getDataset().metaData||[],i.each(this.getDataset().data,function(t,i){this.getDataset().metaData[i]=this.getDataset().metaData[i]||new e.elements.Arc({_chart:this.chart.chart,_datasetIndex:this.index,_index:i})},this)},addElementAndReset:function(t,a){this.getDataset().metaData=this.getDataset().metaData||[];var s=new e.elements.Arc({_chart:this.chart.chart,_datasetIndex:this.index,_index:t});a&&i.isArray(this.getDataset().backgroundColor)&&this.getDataset().backgroundColor.splice(t,0,a),this.updateElement(s,t,!0),this.getDataset().metaData.splice(t,0,s)},removeElement:function(t){this.getDataset().metaData.splice(t,1)},reset:function(){this.update(!0)},buildOrUpdateElements:function(){var t=this.getDataset().data.length,e=this.getDataset().metaData.length;if(e>t)this.getDataset().metaData.splice(t,e-t);else if(t>e)for(var i=e;t>i;++i)this.addElementAndReset(i)},getVisibleDatasetCount:function(){return i.where(this.chart.data.datasets,function(t){return i.isDatasetVisible(t)}).length},getRingIndex:function(t){for(var e=0,a=0;t>a;++a)i.isDatasetVisible(this.chart.data.datasets[a])&&++e;return e},update:function(t){this.chart.outerRadius=Math.max(i.min([this.chart.chart.width,this.chart.chart.height])/2-this.chart.options.elements.arc.borderWidth/2,0),this.chart.innerRadius=Math.max(this.chart.options.cutoutPercentage?this.chart.outerRadius/100*this.chart.options.cutoutPercentage:1,0),this.chart.radiusLength=(this.chart.outerRadius-this.chart.innerRadius)/this.getVisibleDatasetCount(),this.getDataset().total=0,i.each(this.getDataset().data,function(t){this.getDataset().total+=Math.abs(t)},this),this.outerRadius=this.chart.outerRadius-this.chart.radiusLength*this.getRingIndex(this.index),this.innerRadius=this.outerRadius-this.chart.radiusLength,i.each(this.getDataset().metaData,function(e,i){this.updateElement(e,i,t)},this)},updateElement:function(t,e,a){var s={x:this.chart.chart.width/2,y:this.chart.chart.height/2,startAngle:Math.PI*-.5,circumference:this.chart.options.animation.animateRotate?0:this.calculateCircumference(this.getDataset().data[e]),outerRadius:this.chart.options.animation.animateScale?0:this.outerRadius,innerRadius:this.chart.options.animation.animateScale?0:this.innerRadius};i.extend(t,{_chart:this.chart.chart,_datasetIndex:this.index,_index:e,_model:a?s:{x:this.chart.chart.width/2,y:this.chart.chart.height/2,circumference:this.calculateCircumference(this.getDataset().data[e]),outerRadius:this.outerRadius,innerRadius:this.innerRadius,backgroundColor:t.custom&&t.custom.backgroundColor?t.custom.backgroundColor:i.getValueAtIndexOrDefault(this.getDataset().backgroundColor,e,this.chart.options.elements.arc.backgroundColor),hoverBackgroundColor:t.custom&&t.custom.hoverBackgroundColor?t.custom.hoverBackgroundColor:i.getValueAtIndexOrDefault(this.getDataset().hoverBackgroundColor,e,this.chart.options.elements.arc.hoverBackgroundColor),borderWidth:t.custom&&t.custom.borderWidth?t.custom.borderWidth:i.getValueAtIndexOrDefault(this.getDataset().borderWidth,e,this.chart.options.elements.arc.borderWidth),borderColor:t.custom&&t.custom.borderColor?t.custom.borderColor:i.getValueAtIndexOrDefault(this.getDataset().borderColor,e,this.chart.options.elements.arc.borderColor),label:i.getValueAtIndexOrDefault(this.getDataset().label,e,this.chart.data.labels[e])}}),a||(0===e?t._model.startAngle=Math.PI*-.5:t._model.startAngle=this.getDataset().metaData[e-1]._model.endAngle,t._model.endAngle=t._model.startAngle+t._model.circumference,e<this.getDataset().data.length-1&&(this.getDataset().metaData[e+1]._model.startAngle=t._model.endAngle)),t.pivot()},draw:function(t){var e=t||1;i.each(this.getDataset().metaData,function(t,i){t.transition(e).draw()},this)},setHoverStyle:function(t){var e=this.chart.data.datasets[t._datasetIndex],a=t._index;t._model.backgroundColor=t.custom&&t.custom.hoverBackgroundColor?t.custom.hoverBackgroundColor:i.getValueAtIndexOrDefault(e.hoverBackgroundColor,a,i.color(t._model.backgroundColor).saturate(.5).darken(.1).rgbString()),t._model.borderColor=t.custom&&t.custom.hoverBorderColor?t.custom.hoverBorderColor:i.getValueAtIndexOrDefault(e.hoverBorderColor,a,i.color(t._model.borderColor).saturate(.5).darken(.1).rgbString()),t._model.borderWidth=t.custom&&t.custom.hoverBorderWidth?t.custom.hoverBorderWidth:i.getValueAtIndexOrDefault(e.hoverBorderWidth,a,t._model.borderWidth)},removeHoverStyle:function(t){var e=(this.chart.data.datasets[t._datasetIndex],t._index);t._model.backgroundColor=t.custom&&t.custom.backgroundColor?t.custom.backgroundColor:i.getValueAtIndexOrDefault(this.getDataset().backgroundColor,e,this.chart.options.elements.arc.backgroundColor),t._model.borderColor=t.custom&&t.custom.borderColor?t.custom.borderColor:i.getValueAtIndexOrDefault(this.getDataset().borderColor,e,this.chart.options.elements.arc.borderColor),t._model.borderWidth=t.custom&&t.custom.borderWidth?t.custom.borderWidth:i.getValueAtIndexOrDefault(this.getDataset().borderWidth,e,this.chart.options.elements.arc.borderWidth);
},calculateCircumference:function(t){return this.getDataset().total>0?1.999999*Math.PI*(t/this.getDataset().total):0}})}.call(this),function(){"use strict";var t=this,e=t.Chart,i=e.helpers;e.defaults.line={hover:{mode:"label"},scales:{xAxes:[{type:"category",id:"x-axis-0"}],yAxes:[{type:"linear",id:"y-axis-0"}]}},e.controllers.line=function(t,e){this.initialize.call(this,t,e)},i.extend(e.controllers.line.prototype,{initialize:function(t,e){this.chart=t,this.index=e,this.linkScales(),this.addElements()},updateIndex:function(t){this.index=t},linkScales:function(){this.getDataset().xAxisID||(this.getDataset().xAxisID=this.chart.options.scales.xAxes[0].id),this.getDataset().yAxisID||(this.getDataset().yAxisID=this.chart.options.scales.yAxes[0].id)},getDataset:function(){return this.chart.data.datasets[this.index]},getScaleForId:function(t){return this.chart.scales[t]},addElements:function(){this.getDataset().metaData=this.getDataset().metaData||[],this.getDataset().metaDataset=this.getDataset().metaDataset||new e.elements.Line({_chart:this.chart.chart,_datasetIndex:this.index,_points:this.getDataset().metaData}),i.each(this.getDataset().data,function(t,i){this.getDataset().metaData[i]=this.getDataset().metaData[i]||new e.elements.Point({_chart:this.chart.chart,_datasetIndex:this.index,_index:i})},this)},addElementAndReset:function(t){this.getDataset().metaData=this.getDataset().metaData||[];var i=new e.elements.Point({_chart:this.chart.chart,_datasetIndex:this.index,_index:t});this.updateElement(i,t,!0),this.getDataset().metaData.splice(t,0,i),this.updateBezierControlPoints()},removeElement:function(t){this.getDataset().metaData.splice(t,1)},reset:function(){this.update(!0)},buildOrUpdateElements:function(){var t=this.getDataset().data.length,e=this.getDataset().metaData.length;if(e>t)this.getDataset().metaData.splice(t,e-t);else if(t>e)for(var i=e;t>i;++i)this.addElementAndReset(i)},update:function(t){var e,a=this.getDataset().metaDataset,s=this.getDataset().metaData,o=this.getScaleForId(this.getDataset().yAxisID);this.getScaleForId(this.getDataset().xAxisID);e=o.min<0&&o.max<0?o.getPixelForValue(o.max):o.min>0&&o.max>0?o.getPixelForValue(o.min):o.getPixelForValue(0),i.extend(a,{_scale:o,_datasetIndex:this.index,_children:s,_model:{tension:a.custom&&a.custom.tension?a.custom.tension:this.getDataset().tension||this.chart.options.elements.line.tension,backgroundColor:a.custom&&a.custom.backgroundColor?a.custom.backgroundColor:this.getDataset().backgroundColor||this.chart.options.elements.line.backgroundColor,borderWidth:a.custom&&a.custom.borderWidth?a.custom.borderWidth:this.getDataset().borderWidth||this.chart.options.elements.line.borderWidth,borderColor:a.custom&&a.custom.borderColor?a.custom.borderColor:this.getDataset().borderColor||this.chart.options.elements.line.borderColor,borderCapStyle:a.custom&&a.custom.borderCapStyle?a.custom.borderCapStyle:this.getDataset().borderCapStyle||this.chart.options.elements.line.borderCapStyle,borderDash:a.custom&&a.custom.borderDash?a.custom.borderDash:this.getDataset().borderDash||this.chart.options.elements.line.borderDash,borderDashOffset:a.custom&&a.custom.borderDashOffset?a.custom.borderDashOffset:this.getDataset().borderDashOffset||this.chart.options.elements.line.borderDashOffset,borderJoinStyle:a.custom&&a.custom.borderJoinStyle?a.custom.borderJoinStyle:this.getDataset().borderJoinStyle||this.chart.options.elements.line.borderJoinStyle,fill:a.custom&&a.custom.fill?a.custom.fill:void 0!==this.getDataset().fill?this.getDataset().fill:this.chart.options.elements.line.fill,scaleTop:o.top,scaleBottom:o.bottom,scaleZero:e}}),a.pivot(),i.each(s,function(e,i){this.updateElement(e,i,t)},this),this.updateBezierControlPoints()},updateElement:function(t,e,a){var s,o=this.getScaleForId(this.getDataset().yAxisID),n=this.getScaleForId(this.getDataset().xAxisID);s=o.min<0&&o.max<0?o.getPixelForValue(o.max):o.min>0&&o.max>0?o.getPixelForValue(o.min):o.getPixelForValue(0),i.extend(t,{_chart:this.chart.chart,_xScale:n,_yScale:o,_datasetIndex:this.index,_index:e,_model:{x:n.getPixelForValue(this.getDataset().data[e],e,this.index,this.chart.isCombo),y:a?s:this.calculatePointY(this.getDataset().data[e],e,this.index,this.chart.isCombo),tension:t.custom&&t.custom.tension?t.custom.tension:this.getDataset().tension||this.chart.options.elements.line.tension,radius:t.custom&&t.custom.radius?t.custom.radius:i.getValueAtIndexOrDefault(this.getDataset().radius,e,this.chart.options.elements.point.radius),backgroundColor:t.custom&&t.custom.backgroundColor?t.custom.backgroundColor:i.getValueAtIndexOrDefault(this.getDataset().pointBackgroundColor,e,this.chart.options.elements.point.backgroundColor),borderColor:t.custom&&t.custom.borderColor?t.custom.borderColor:i.getValueAtIndexOrDefault(this.getDataset().pointBorderColor,e,this.chart.options.elements.point.borderColor),borderWidth:t.custom&&t.custom.borderWidth?t.custom.borderWidth:i.getValueAtIndexOrDefault(this.getDataset().pointBorderWidth,e,this.chart.options.elements.point.borderWidth),hitRadius:t.custom&&t.custom.hitRadius?t.custom.hitRadius:i.getValueAtIndexOrDefault(this.getDataset().hitRadius,e,this.chart.options.elements.point.hitRadius)}}),t._model.skip=t.custom&&t.custom.skip?t.custom.skip:isNaN(t._model.x)||isNaN(t._model.y)},calculatePointY:function(t,e,a,s){var o=(this.getScaleForId(this.getDataset().xAxisID),this.getScaleForId(this.getDataset().yAxisID));if(o.options.stacked){for(var n=0,r=0,h=this.chart.data.datasets.length-1;h>a;h--){var l=this.chart.data.datasets[h];i.isDatasetVisible(l)&&(l.data[e]<0?r+=l.data[e]||0:n+=l.data[e]||0)}return 0>t?o.getPixelForValue(r+t):o.getPixelForValue(n+t)}return o.getPixelForValue(t)},updateBezierControlPoints:function(){i.each(this.getDataset().metaData,function(t,e){var a=i.splineCurve(i.previousItem(this.getDataset().metaData,e)._model,t._model,i.nextItem(this.getDataset().metaData,e)._model,t._model.tension);t._model.controlPointPreviousX=a.previous.x,t._model.controlPointNextX=a.next.x,a.next.y>this.chart.chartArea.bottom?t._model.controlPointNextY=this.chart.chartArea.bottom:a.next.y<this.chart.chartArea.top?t._model.controlPointNextY=this.chart.chartArea.top:t._model.controlPointNextY=a.next.y,a.previous.y>this.chart.chartArea.bottom?t._model.controlPointPreviousY=this.chart.chartArea.bottom:a.previous.y<this.chart.chartArea.top?t._model.controlPointPreviousY=this.chart.chartArea.top:t._model.controlPointPreviousY=a.previous.y,t.pivot()},this)},draw:function(t){var e=t||1;i.each(this.getDataset().metaData,function(t,i){t.transition(e)},this),this.getDataset().metaDataset.transition(e).draw(),i.each(this.getDataset().metaData,function(t){t.draw()})},setHoverStyle:function(t){var e=this.chart.data.datasets[t._datasetIndex],a=t._index;t._model.radius=t.custom&&t.custom.hoverRadius?t.custom.hoverRadius:i.getValueAtIndexOrDefault(e.pointHoverRadius,a,this.chart.options.elements.point.hoverRadius),t._model.backgroundColor=t.custom&&t.custom.hoverBackgroundColor?t.custom.hoverBackgroundColor:i.getValueAtIndexOrDefault(e.pointHoverBackgroundColor,a,i.color(t._model.backgroundColor).saturate(.5).darken(.1).rgbString()),t._model.borderColor=t.custom&&t.custom.hoverBorderColor?t.custom.hoverBorderColor:i.getValueAtIndexOrDefault(e.pointHoverBorderColor,a,i.color(t._model.borderColor).saturate(.5).darken(.1).rgbString()),t._model.borderWidth=t.custom&&t.custom.hoverBorderWidth?t.custom.hoverBorderWidth:i.getValueAtIndexOrDefault(e.pointHoverBorderWidth,a,t._model.borderWidth)},removeHoverStyle:function(t){var e=(this.chart.data.datasets[t._datasetIndex],t._index);t._model.radius=t.custom&&t.custom.radius?t.custom.radius:i.getValueAtIndexOrDefault(this.getDataset().radius,e,this.chart.options.elements.point.radius),t._model.backgroundColor=t.custom&&t.custom.backgroundColor?t.custom.backgroundColor:i.getValueAtIndexOrDefault(this.getDataset().pointBackgroundColor,e,this.chart.options.elements.point.backgroundColor),t._model.borderColor=t.custom&&t.custom.borderColor?t.custom.borderColor:i.getValueAtIndexOrDefault(this.getDataset().pointBorderColor,e,this.chart.options.elements.point.borderColor),t._model.borderWidth=t.custom&&t.custom.borderWidth?t.custom.borderWidth:i.getValueAtIndexOrDefault(this.getDataset().pointBorderWidth,e,this.chart.options.elements.point.borderWidth)}})}.call(this),function(){"use strict";var t=this,e=t.Chart,i=e.helpers;e.defaults.polarArea={scale:{type:"radialLinear",lineArc:!0},animateRotate:!0,animateScale:!0,tooltips:{callbacks:{title:function(){return""},label:function(t,e){return e.labels[t.index]+": "+t.yLabel}}}},e.controllers.polarArea=function(t,e){this.initialize.call(this,t,e)},i.extend(e.controllers.polarArea.prototype,{initialize:function(t,e){this.chart=t,this.index=e,this.linkScales(),this.addElements()},updateIndex:function(t){this.index=t},linkScales:function(){},getDataset:function(){return this.chart.data.datasets[this.index]},getScaleForId:function(t){return this.chart.scales[t]},addElements:function(){this.getDataset().metaData=this.getDataset().metaData||[],i.each(this.getDataset().data,function(t,i){this.getDataset().metaData[i]=this.getDataset().metaData[i]||new e.elements.Arc({_chart:this.chart.chart,_datasetIndex:this.index,_index:i})},this)},addElementAndReset:function(t){this.getDataset().metaData=this.getDataset().metaData||[];var i=new e.elements.Arc({_chart:this.chart.chart,_datasetIndex:this.index,_index:t});this.updateElement(i,t,!0),this.getDataset().metaData.splice(t,0,i)},removeElement:function(t){this.getDataset().metaData.splice(t,1)},reset:function(){this.update(!0)},buildOrUpdateElements:function(){var t=this.getDataset().data.length,e=this.getDataset().metaData.length;if(e>t)this.getDataset().metaData.splice(t,e-t);else if(t>e)for(var i=e;t>i;++i)this.addElementAndReset(i)},getVisibleDatasetCount:function(){return i.where(this.chart.data.datasets,function(t){return i.isDatasetVisible(t)}).length},update:function(t){this.chart.outerRadius=Math.max((i.min([this.chart.chart.width,this.chart.chart.height])-this.chart.options.elements.arc.borderWidth/2)/2,0),this.chart.innerRadius=Math.max(this.chart.options.cutoutPercentage?this.chart.outerRadius/100*this.chart.options.cutoutPercentage:1,0),this.chart.radiusLength=(this.chart.outerRadius-this.chart.innerRadius)/this.getVisibleDatasetCount(),this.getDataset().total=0,i.each(this.getDataset().data,function(t){this.getDataset().total+=Math.abs(t)},this),this.outerRadius=this.chart.outerRadius-this.chart.radiusLength*this.index,this.innerRadius=this.outerRadius-this.chart.radiusLength,i.each(this.getDataset().metaData,function(e,i){this.updateElement(e,i,t)},this)},updateElement:function(t,e,a){var s=1/this.getDataset().data.length*2,o=-.5*Math.PI+Math.PI*s*e,n=o+s*Math.PI,r={x:this.chart.chart.width/2,y:this.chart.chart.height/2,innerRadius:0,outerRadius:this.chart.options.animateScale?0:this.chart.scale.getDistanceFromCenterForValue(this.getDataset().data[e]),startAngle:this.chart.options.animateRotate?Math.PI*-.5:o,endAngle:this.chart.options.animateRotate?Math.PI*-.5:n,backgroundColor:t.custom&&t.custom.backgroundColor?t.custom.backgroundColor:i.getValueAtIndexOrDefault(this.getDataset().backgroundColor,e,this.chart.options.elements.arc.backgroundColor),hoverBackgroundColor:t.custom&&t.custom.hoverBackgroundColor?t.custom.hoverBackgroundColor:i.getValueAtIndexOrDefault(this.getDataset().hoverBackgroundColor,e,this.chart.options.elements.arc.hoverBackgroundColor),borderWidth:t.custom&&t.custom.borderWidth?t.custom.borderWidth:i.getValueAtIndexOrDefault(this.getDataset().borderWidth,e,this.chart.options.elements.arc.borderWidth),borderColor:t.custom&&t.custom.borderColor?t.custom.borderColor:i.getValueAtIndexOrDefault(this.getDataset().borderColor,e,this.chart.options.elements.arc.borderColor),label:i.getValueAtIndexOrDefault(this.chart.data.labels,e,this.chart.data.labels[e])};i.extend(t,{_chart:this.chart.chart,_datasetIndex:this.index,_index:e,_scale:this.chart.scale,_model:a?r:{x:this.chart.chart.width/2,y:this.chart.chart.height/2,innerRadius:0,outerRadius:this.chart.scale.getDistanceFromCenterForValue(this.getDataset().data[e]),startAngle:o,endAngle:n,backgroundColor:t.custom&&t.custom.backgroundColor?t.custom.backgroundColor:i.getValueAtIndexOrDefault(this.getDataset().backgroundColor,e,this.chart.options.elements.arc.backgroundColor),hoverBackgroundColor:t.custom&&t.custom.hoverBackgroundColor?t.custom.hoverBackgroundColor:i.getValueAtIndexOrDefault(this.getDataset().hoverBackgroundColor,e,this.chart.options.elements.arc.hoverBackgroundColor),borderWidth:t.custom&&t.custom.borderWidth?t.custom.borderWidth:i.getValueAtIndexOrDefault(this.getDataset().borderWidth,e,this.chart.options.elements.arc.borderWidth),borderColor:t.custom&&t.custom.borderColor?t.custom.borderColor:i.getValueAtIndexOrDefault(this.getDataset().borderColor,e,this.chart.options.elements.arc.borderColor),label:i.getValueAtIndexOrDefault(this.chart.data.labels,e,this.chart.data.labels[e])}}),t.pivot()},draw:function(t){var e=t||1;i.each(this.getDataset().metaData,function(t,i){t.transition(e).draw()},this)},setHoverStyle:function(t){var e=this.chart.data.datasets[t._datasetIndex],a=t._index;t._model.backgroundColor=t.custom&&t.custom.hoverBackgroundColor?t.custom.hoverBackgroundColor:i.getValueAtIndexOrDefault(e.hoverBackgroundColor,a,i.color(t._model.backgroundColor).saturate(.5).darken(.1).rgbString()),t._model.borderColor=t.custom&&t.custom.hoverBorderColor?t.custom.hoverBorderColor:i.getValueAtIndexOrDefault(e.hoverBorderColor,a,i.color(t._model.borderColor).saturate(.5).darken(.1).rgbString()),t._model.borderWidth=t.custom&&t.custom.hoverBorderWidth?t.custom.hoverBorderWidth:i.getValueAtIndexOrDefault(e.borderWidth,a,t._model.borderWidth)},removeHoverStyle:function(t){var e=(this.chart.data.datasets[t._datasetIndex],t._index);t._model.backgroundColor=t.custom&&t.custom.backgroundColor?t.custom.backgroundColor:i.getValueAtIndexOrDefault(this.getDataset().backgroundColor,e,this.chart.options.elements.arc.backgroundColor),t._model.borderColor=t.custom&&t.custom.borderColor?t.custom.borderColor:i.getValueAtIndexOrDefault(this.getDataset().borderColor,e,this.chart.options.elements.arc.borderColor),t._model.borderWidth=t.custom&&t.custom.borderWidth?t.custom.borderWidth:i.getValueAtIndexOrDefault(this.getDataset().borderWidth,e,this.chart.options.elements.arc.borderWidth)},calculateCircumference:function(t){return this.getDataset().total>0?2*Math.PI*(t/this.getDataset().total):0},updateScaleRange:function(){i.extend(this.chart.scale,{size:i.min([this.chart.width,this.chart.height]),xCenter:this.chart.width/2,yCenter:this.chart.height/2})}})}.call(this),function(){"use strict";var t=this,e=t.Chart,i=e.helpers;e.defaults.radar={scale:{type:"radialLinear"},elements:{line:{tension:0}}},e.controllers.radar=function(t,e){this.initialize.call(this,t,e)},i.extend(e.controllers.radar.prototype,{initialize:function(t,e){this.chart=t,this.index=e,this.linkScales(),this.addElements()},updateIndex:function(t){this.index=t},linkScales:function(){},getDataset:function(){return this.chart.data.datasets[this.index]},getScaleForId:function(t){return this.chart.scales[t]},addElements:function(){this.getDataset().metaData=this.getDataset().metaData||[],this.getDataset().metaDataset=this.getDataset().metaDataset||new e.elements.Line({_chart:this.chart.chart,_datasetIndex:this.index,_points:this.getDataset().metaData,_loop:!0}),i.each(this.getDataset().data,function(t,i){this.getDataset().metaData[i]=this.getDataset().metaData[i]||new e.elements.Point({_chart:this.chart.chart,_datasetIndex:this.index,_index:i,_model:{x:0,y:0}})},this)},addElementAndReset:function(t){this.getDataset().metaData=this.getDataset().metaData||[];var i=new e.elements.Point({_chart:this.chart.chart,_datasetIndex:this.index,_index:t});this.updateElement(i,t,!0),this.getDataset().metaData.splice(t,0,i),this.updateBezierControlPoints()},removeElement:function(t){this.getDataset().metaData.splice(t,1)},reset:function(){this.update(!0)},buildOrUpdateElements:function(){var t=this.getDataset().data.length,e=this.getDataset().metaData.length;if(e>t)this.getDataset().metaData.splice(t,e-t);else if(t>e)for(var i=e;t>i;++i)this.addElementAndReset(i)},update:function(t){var e,a=(this.getDataset().metaDataset,this.getDataset().metaData),s=this.chart.scale;e=s.min<0&&s.max<0?s.getPointPositionForValue(0,s.max):s.min>0&&s.max>0?s.getPointPositionForValue(0,s.min):s.getPointPositionForValue(0,0),i.extend(this.getDataset().metaDataset,{_datasetIndex:this.index,_children:this.getDataset().metaData,_model:{tension:this.getDataset().tension||this.chart.options.elements.line.tension,backgroundColor:this.getDataset().backgroundColor||this.chart.options.elements.line.backgroundColor,borderWidth:this.getDataset().borderWidth||this.chart.options.elements.line.borderWidth,borderColor:this.getDataset().borderColor||this.chart.options.elements.line.borderColor,fill:void 0!==this.getDataset().fill?this.getDataset().fill:this.chart.options.elements.line.fill,scaleTop:s.top,scaleBottom:s.bottom,scaleZero:e}}),this.getDataset().metaDataset.pivot(),i.each(a,function(e,i){this.updateElement(e,i,t)},this),this.updateBezierControlPoints()},updateElement:function(t,e,a){var s=this.chart.scale.getPointPositionForValue(e,this.getDataset().data[e]);i.extend(t,{_datasetIndex:this.index,_index:e,_scale:this.chart.scale,_model:{x:a?this.chart.scale.xCenter:s.x,y:a?this.chart.scale.yCenter:s.y,tension:t.custom&&t.custom.tension?t.custom.tension:this.chart.options.elements.line.tension,radius:t.custom&&t.custom.radius?t.custom.pointRadius:i.getValueAtIndexOrDefault(this.getDataset().pointRadius,e,this.chart.options.elements.point.radius),backgroundColor:t.custom&&t.custom.backgroundColor?t.custom.backgroundColor:i.getValueAtIndexOrDefault(this.getDataset().pointBackgroundColor,e,this.chart.options.elements.point.backgroundColor),borderColor:t.custom&&t.custom.borderColor?t.custom.borderColor:i.getValueAtIndexOrDefault(this.getDataset().pointBorderColor,e,this.chart.options.elements.point.borderColor),borderWidth:t.custom&&t.custom.borderWidth?t.custom.borderWidth:i.getValueAtIndexOrDefault(this.getDataset().pointBorderWidth,e,this.chart.options.elements.point.borderWidth),hitRadius:t.custom&&t.custom.hitRadius?t.custom.hitRadius:i.getValueAtIndexOrDefault(this.getDataset().hitRadius,e,this.chart.options.elements.point.hitRadius)}}),t._model.skip=t.custom&&t.custom.skip?t.custom.skip:isNaN(t._model.x)||isNaN(t._model.y)},updateBezierControlPoints:function(){i.each(this.getDataset().metaData,function(t,e){var a=i.splineCurve(i.previousItem(this.getDataset().metaData,e,!0)._model,t._model,i.nextItem(this.getDataset().metaData,e,!0)._model,t._model.tension);t._model.controlPointPreviousX=a.previous.x,t._model.controlPointNextX=a.next.x,a.next.y>this.chart.chartArea.bottom?t._model.controlPointNextY=this.chart.chartArea.bottom:a.next.y<this.chart.chartArea.top?t._model.controlPointNextY=this.chart.chartArea.top:t._model.controlPointNextY=a.next.y,a.previous.y>this.chart.chartArea.bottom?t._model.controlPointPreviousY=this.chart.chartArea.bottom:a.previous.y<this.chart.chartArea.top?t._model.controlPointPreviousY=this.chart.chartArea.top:t._model.controlPointPreviousY=a.previous.y,t.pivot()},this)},draw:function(t){var e=t||1;i.each(this.getDataset().metaData,function(t,i){t.transition(e)},this),this.getDataset().metaDataset.transition(e).draw(),i.each(this.getDataset().metaData,function(t){t.draw()})},setHoverStyle:function(t){var e=this.chart.data.datasets[t._datasetIndex],a=t._index;t._model.radius=t.custom&&t.custom.radius?t.custom.radius:i.getValueAtIndexOrDefault(e.pointHoverRadius,a,this.chart.options.elements.point.hoverRadius),t._model.backgroundColor=t.custom&&t.custom.hoverBackgroundColor?t.custom.hoverBackgroundColor:i.getValueAtIndexOrDefault(e.pointHoverBackgroundColor,a,i.color(t._model.backgroundColor).saturate(.5).darken(.1).rgbString()),t._model.borderColor=t.custom&&t.custom.hoverBorderColor?t.custom.hoverBorderColor:i.getValueAtIndexOrDefault(e.pointHoverBorderColor,a,i.color(t._model.borderColor).saturate(.5).darken(.1).rgbString()),t._model.borderWidth=t.custom&&t.custom.hoverBorderWidth?t.custom.hoverBorderWidth:i.getValueAtIndexOrDefault(e.pointBorderWidth,a,t._model.borderWidth)},removeHoverStyle:function(t){var e=(this.chart.data.datasets[t._datasetIndex],t._index);t._model.radius=t.custom&&t.custom.radius?t.custom.radius:i.getValueAtIndexOrDefault(this.getDataset().radius,e,this.chart.options.elements.point.radius),t._model.backgroundColor=t.custom&&t.custom.backgroundColor?t.custom.backgroundColor:i.getValueAtIndexOrDefault(this.getDataset().pointBackgroundColor,e,this.chart.options.elements.point.backgroundColor),t._model.borderColor=t.custom&&t.custom.borderColor?t.custom.borderColor:i.getValueAtIndexOrDefault(this.getDataset().pointBorderColor,e,this.chart.options.elements.point.borderColor),t._model.borderWidth=t.custom&&t.custom.borderWidth?t.custom.borderWidth:i.getValueAtIndexOrDefault(this.getDataset().pointBorderWidth,e,this.chart.options.elements.point.borderWidth)}})}.call(this),function(){"use strict";var t=this,e=t.Chart,i=(e.helpers,{position:"bottom"}),a=e.Scale.extend({buildTicks:function(t){this.ticks=this.data.labels},getLabelForIndex:function(t,e){return this.ticks[t]},getPixelForValue:function(t,e,i,a){if(this.isHorizontal()){var s=this.width-(this.paddingLeft+this.paddingRight),o=s/Math.max(this.data.labels.length-(this.options.gridLines.offsetGridLines?0:1),1),n=o*e+this.paddingLeft;return this.options.gridLines.offsetGridLines&&a&&(n+=o/2),this.left+Math.round(n)}var r=this.height-(this.paddingTop+this.paddingBottom),h=r/Math.max(this.data.labels.length-(this.options.gridLines.offsetGridLines?0:1),1),l=h*e+this.paddingTop;return this.options.gridLines.offsetGridLines&&a&&(l+=h/2),this.top+Math.round(l)}});e.scaleService.registerScaleType("category",a,i)}.call(this),function(){"use strict";var t=this,e=t.Chart,i=e.helpers,a={position:"left",ticks:{callback:function(t,e,a){var s=a[1]-a[0];Math.abs(s)>1&&t!==Math.floor(t)&&(s=t-Math.floor(t));var o=i.log10(Math.abs(s)),n="";if(0!==t){var r=-1*Math.floor(o);r=Math.max(Math.min(r,20),0),n=t.toFixed(r)}else n="0";return n}}},s=e.Scale.extend({buildTicks:function(){if(this.min=null,this.max=null,this.options.stacked){var t={};i.each(this.data.datasets,function(e){void 0===t[e.type]&&(t[e.type]={positiveValues:[],negativeValues:[]});var a=t[e.type].positiveValues,s=t[e.type].negativeValues;i.isDatasetVisible(e)&&(this.isHorizontal()?e.xAxisID===this.id:e.yAxisID===this.id)&&i.each(e.data,function(t,e){var i=this.getRightValue(t);isNaN(i)||(a[e]=a[e]||0,s[e]=s[e]||0,this.options.relativePoints?a[e]=100:0>i?s[e]+=i:a[e]+=i)},this)},this),i.each(t,function(t){var e=t.positiveValues.concat(t.negativeValues),a=i.min(e),s=i.max(e);this.min=null===this.min?a:Math.min(this.min,a),this.max=null===this.max?s:Math.max(this.max,s)},this)}else i.each(this.data.datasets,function(t){i.isDatasetVisible(t)&&(this.isHorizontal()?t.xAxisID===this.id:t.yAxisID===this.id)&&i.each(t.data,function(t,e){var i=this.getRightValue(t);isNaN(i)||(null===this.min?this.min=i:i<this.min&&(this.min=i),null===this.max?this.max=i:i>this.max&&(this.max=i))},this)},this);this.ticks=[];var e;if(e=this.isHorizontal()?Math.min(this.options.ticks.maxTicksLimit?this.options.ticks.maxTicksLimit:11,Math.ceil(this.width/50)):Math.min(this.options.ticks.maxTicksLimit?this.options.ticks.maxTicksLimit:11,Math.ceil(this.height/(2*this.options.ticks.fontSize))),e=Math.max(2,e),this.options.ticks.beginAtZero){var a=i.sign(this.min),s=i.sign(this.max);0>a&&0>s?this.max=0:a>0&&s>0&&(this.min=0)}this.options.ticks.suggestedMin&&(this.min=Math.min(this.min,this.options.ticks.suggestedMin)),this.options.ticks.suggestedMax&&(this.max=Math.max(this.max,this.options.ticks.suggestedMax)),this.min===this.max&&(this.min--,this.max++);for(var o=i.niceNum(this.max-this.min,!1),n=i.niceNum(o/(e-1),!0),r=Math.floor(this.min/n)*n,h=Math.ceil(this.max/n)*n,l=Math.ceil((h-r)/n),c=0;l>=c;++c)this.ticks.push(r+c*n);("left"==this.options.position||"right"==this.options.position)&&this.ticks.reverse(),this.max=i.max(this.ticks),this.min=i.min(this.ticks),this.options.ticks.reverse?(this.ticks.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),this.zeroLineIndex=this.ticks.indexOf(0)},getLabelForIndex:function(t,e){return this.getRightValue(this.data.datasets[e].data[t])},getPixelForValue:function(t,e,i,a){var s,o=this.getRightValue(t),n=this.end-this.start;if(this.isHorizontal()){var r=this.width-(this.paddingLeft+this.paddingRight);return s=this.left+r/n*(o-this.start),Math.round(s+this.paddingLeft)}var h=this.height-(this.paddingTop+this.paddingBottom);return s=this.bottom-this.paddingBottom-h/n*(o-this.start),Math.round(s)}});e.scaleService.registerScaleType("linear",s,a)}.call(this),function(){"use strict";var t=this,e=t.Chart,i=e.helpers,a={position:"left",ticks:{callback:function(t){var i=t/Math.pow(10,Math.floor(e.helpers.log10(t)));return 1===i||2===i||5===i?t.toExponential():""}}},s=e.Scale.extend({buildTicks:function(){if(this.min=null,this.max=null,this.options.stacked){var t={};i.each(this.data.datasets,function(e){i.isDatasetVisible(e)&&(this.isHorizontal()?e.xAxisID===this.id:e.yAxisID===this.id)&&(void 0===t[e.type]&&(t[e.type]=[]),i.each(e.data,function(i,a){var s=t[e.type],o=this.getRightValue(i);isNaN(o)||(s[a]=s[a]||0,this.options.relativePoints?s[a]=100:s[a]+=o)},this))},this),i.each(t,function(t){var e=i.min(t),a=i.max(t);this.min=null===this.min?e:Math.min(this.min,e),this.max=null===this.max?a:Math.max(this.max,a)},this)}else i.each(this.data.datasets,function(t){i.isDatasetVisible(t)&&(this.isHorizontal()?t.xAxisID===this.id:t.yAxisID===this.id)&&i.each(t.data,function(t,e){var i=this.getRightValue(t);isNaN(i)||(null===this.min?this.min=i:i<this.min&&(this.min=i),null===this.max?this.max=i:i>this.max&&(this.max=i))},this)},this);this.min===this.max&&(0!==this.min&&null!==this.min?(this.min=Math.pow(10,Math.floor(i.log10(this.min))-1),this.max=Math.pow(10,Math.floor(i.log10(this.max))+1)):(this.min=1,this.max=10)),this.tickValues=[];for(var e=Math.floor(i.log10(this.min)),a=Math.ceil(i.log10(this.max)),s=e;a>s;++s)for(var o=1;10>o;++o)this.tickValues.push(o*Math.pow(10,s));this.tickValues.push(1*Math.pow(10,a)),("left"==this.options.position||"right"==this.options.position)&&this.tickValues.reverse(),this.max=i.max(this.tickValues),this.min=i.min(this.tickValues),this.options.ticks.reverse?(this.tickValues.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),this.ticks=this.tickValues.slice()},getLabelForIndex:function(t,e){return this.getRightValue(this.data.datasets[e].data[t])},getPixelForTick:function(t,e){return this.getPixelForValue(this.tickValues[t],null,null,e)},getPixelForValue:function(t,e,a,s){var o,n=this.getRightValue(t),r=i.log10(this.end)-i.log10(this.start);if(this.isHorizontal()){if(0!==n){var h=this.width-(this.paddingLeft+this.paddingRight);return o=this.left+h/r*(i.log10(n)-i.log10(this.start)),o+this.paddingLeft}o=this.left+this.paddingLeft}else{if(0!==n){var l=this.height-(this.paddingTop+this.paddingBottom);return this.bottom-this.paddingBottom-l/r*(i.log10(n)-i.log10(this.start))}o=this.top+this.paddingTop}}});e.scaleService.registerScaleType("logarithmic",s,a)}.call(this),function(){"use strict";var t=this,e=t.Chart,i=e.helpers,a={display:!0,animate:!0,lineArc:!1,position:"chartArea",angleLines:{show:!0,color:"rgba(0, 0, 0, 0.1)",lineWidth:1},ticks:{showLabelBackdrop:!0,backdropColor:"rgba(255,255,255,0.75)",backdropPaddingY:2,backdropPaddingX:2},pointLabels:{fontFamily:"'Arial'",fontStyle:"normal",fontSize:10,fontColor:"#666"}},s=e.Scale.extend({getValueCount:function(){return this.data.labels.length},setDimensions:function(){this.width=this.maxWidth,this.height=this.maxHeight,this.xCenter=Math.round(this.width/2),this.yCenter=Math.round(this.height/2);var t=i.min([this.height,this.width]);this.drawingArea=this.options.display?t/2-(this.options.ticks.fontSize/2+this.options.ticks.backdropPaddingY):t/2},buildTicks:function(){this.min=null,this.max=null,i.each(this.data.datasets,function(t){i.isDatasetVisible(t)&&i.each(t.data,function(t,e){var i=this.getRightValue(t);isNaN(i)||(null===this.min?this.min=i:i<this.min&&(this.min=i),null===this.max?this.max=i:i>this.max&&(this.max=i))},this)},this),this.min===this.max&&(this.min--,this.max++),this.ticks=[];var t=Math.min(this.options.ticks.maxTicksLimit?this.options.ticks.maxTicksLimit:11,Math.ceil(this.drawingArea/(1.5*this.options.ticks.fontSize)));if(t=Math.max(2,t),this.options.ticks.beginAtZero){var e=i.sign(this.min),a=i.sign(this.max);0>e&&0>a?this.max=0:e>0&&a>0&&(this.min=0)}for(var s=i.niceNum(this.max-this.min,!1),o=i.niceNum(s/(t-1),!0),n=Math.floor(this.min/o)*o,r=Math.ceil(this.max/o)*o,h=n;r>=h;h+=o)this.ticks.push(h);this.max=i.max(this.ticks),this.min=i.min(this.ticks),this.options.ticks.reverse?(this.ticks.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),this.zeroLineIndex=this.ticks.indexOf(0)},getLabelForIndex:function(t,e){return this.getRightValue(this.data.datasets[e].data[t])},getCircumference:function(){return 2*Math.PI/this.getValueCount()},fit:function(){var t,e,a,s,o,n,r,h,l,c,d,u,g=i.min([this.height/2-this.options.pointLabels.fontSize-5,this.width/2]),m=this.width,p=0;for(this.ctx.font=i.fontString(this.options.pointLabels.fontSize,this.options.pointLabels.fontStyle,this.options.pointLabels.fontFamily),e=0;e<this.getValueCount();e++)t=this.getPointPosition(e,g),a=this.ctx.measureText(this.options.ticks.callback(this.data.labels[e])).width+5,0===e||e===this.getValueCount()/2?(s=a/2,t.x+s>m&&(m=t.x+s,o=e),t.x-s<p&&(p=t.x-s,r=e)):e<this.getValueCount()/2?t.x+a>m&&(m=t.x+a,o=e):e>this.getValueCount()/2&&t.x-a<p&&(p=t.x-a,r=e);l=p,c=Math.ceil(m-this.width),n=this.getIndexAngle(o),h=this.getIndexAngle(r),d=c/Math.sin(n+Math.PI/2),u=l/Math.sin(h+Math.PI/2),d=i.isNumber(d)?d:0,u=i.isNumber(u)?u:0,this.drawingArea=Math.round(g-(u+d)/2),this.setCenterPoint(u,d)},setCenterPoint:function(t,e){var i=this.width-e-this.drawingArea,a=t+this.drawingArea;this.xCenter=Math.round((a+i)/2+this.left),this.yCenter=Math.round(this.height/2+this.top)},getIndexAngle:function(t){var e=2*Math.PI/this.getValueCount();return t*e-Math.PI/2},getDistanceFromCenterForValue:function(t){if(null===t)return 0;var e=this.drawingArea/(this.max-this.min);return this.options.reverse?(this.max-t)*e:(t-this.min)*e},getPointPosition:function(t,e){var i=this.getIndexAngle(t);return{x:Math.round(Math.cos(i)*e)+this.xCenter,y:Math.round(Math.sin(i)*e)+this.yCenter}},getPointPositionForValue:function(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))},draw:function(){if(this.options.display){var t=this.ctx;if(i.each(this.ticks,function(e,a){if(a>0||this.options.reverse){var s=this.getDistanceFromCenterForValue(this.ticks[a]),o=this.yCenter-s;if(this.options.gridLines.show)if(t.strokeStyle=this.options.gridLines.color,t.lineWidth=this.options.gridLines.lineWidth,this.options.lineArc)t.beginPath(),t.arc(this.xCenter,this.yCenter,s,0,2*Math.PI),t.closePath(),t.stroke();else{t.beginPath();for(var n=0;n<this.getValueCount();n++){var r=this.getPointPosition(n,this.getDistanceFromCenterForValue(this.ticks[a]));0===n?t.moveTo(r.x,r.y):t.lineTo(r.x,r.y)}t.closePath(),t.stroke()}if(this.options.ticks.show){if(t.font=i.fontString(this.options.ticks.fontSize,this.options.ticks.fontStyle,this.options.ticks.fontFamily),this.options.ticks.showLabelBackdrop){var h=t.measureText(e).width;t.fillStyle=this.options.ticks.backdropColor,t.fillRect(this.xCenter-h/2-this.options.ticks.backdropPaddingX,o-this.options.ticks.fontSize/2-this.options.ticks.backdropPaddingY,h+2*this.options.ticks.backdropPaddingX,this.options.ticks.fontSize+2*this.options.ticks.backdropPaddingY);
}t.textAlign="center",t.textBaseline="middle",t.fillStyle=this.options.ticks.fontColor,t.fillText(e,this.xCenter,o)}}},this),!this.options.lineArc){t.lineWidth=this.options.angleLines.lineWidth,t.strokeStyle=this.options.angleLines.color;for(var e=this.getValueCount()-1;e>=0;e--){if(this.options.angleLines.show){var a=this.getPointPosition(e,this.getDistanceFromCenterForValue(this.options.reverse?this.min:this.max));t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(a.x,a.y),t.stroke(),t.closePath()}var s=this.getPointPosition(e,this.getDistanceFromCenterForValue(this.options.reverse?this.min:this.max)+5);t.font=i.fontString(this.options.pointLabels.fontSize,this.options.pointLabels.fontStyle,this.options.pointLabels.fontFamily),t.fillStyle=this.options.pointLabels.fontColor;var o=this.data.labels.length,n=this.data.labels.length/2,r=n/2,h=r>e||e>o-r,l=e===r||e===o-r;0===e?t.textAlign="center":e===n?t.textAlign="center":n>e?t.textAlign="left":t.textAlign="right",l?t.textBaseline="middle":h?t.textBaseline="bottom":t.textBaseline="top",t.fillText(this.data.labels[e],s.x,s.y)}}}}});e.scaleService.registerScaleType("radialLinear",s,a)}.call(this),function(){"use strict";if(!window.moment)return void console.warn("Chart.js - Moment.js could not be found! You must include it before Chart.js to use the time scale. Download at http://momentjs.com/");var t=this,e=t.Chart,i=e.helpers,a={units:["millisecond","second","minute","hour","day","week","month","quarter","year"],unit:{millisecond:{display:"SSS [ms]",maxStep:1e3},second:{display:"h:mm:ss a",maxStep:60},minute:{display:"h:mm:ss a",maxStep:60},hour:{display:"MMM D, hA",maxStep:24},day:{display:"ll",maxStep:7},week:{display:"ll",maxStep:4.3333},month:{display:"MMM YYYY",maxStep:12},quarter:{display:"[Q]Q - YYYY",maxStep:4},year:{display:"YYYY",maxStep:!1}}},s={position:"bottom",time:{format:!1,unit:!1,round:!1,displayFormat:!1}},o=e.Scale.extend({getLabelMoment:function(t,e){return this.labelMoments[t][e]},buildLabelMoments:function(){var t=[];this.data.labels&&this.data.labels.length>0?(i.each(this.data.labels,function(e,i){var a=this.parseTime(e);this.options.time.round&&a.startOf(this.options.time.round),t.push(a)},this),this.options.time.min?this.firstTick=this.parseTime(this.options.time.min):this.firstTick=moment.min.call(this,t),this.options.time.max?this.lastTick=this.parseTime(this.options.time.max):this.lastTick=moment.max.call(this,t)):(this.firstTick=null,this.lastTick=null),i.each(this.data.datasets,function(e,a){var s=[];"object"==typeof e.data[0]?i.each(e.data,function(t,e){var i=this.parseTime(this.getRightValue(t));this.options.time.round&&i.startOf(this.options.time.round),s.push(i),this.firstTick=null!==this.firstTick?moment.min(this.firstTick,i):i,this.lastTick=null!==this.lastTick?moment.max(this.lastTick,i):i},this):s=t,this.labelMoments.push(s)},this),this.firstTick=this.firstTick.clone(),this.lastTick=this.lastTick.clone()},buildTicks:function(t){if(this.ticks=[],this.labelMoments=[],this.buildLabelMoments(),this.options.time.unit)this.tickUnit=this.options.time.unit||"day",this.displayFormat=a.unit[this.tickUnit].display,this.tickRange=Math.ceil(this.lastTick.diff(this.firstTick,this.tickUnit,!0));else{var e=this.width-(this.paddingLeft+this.paddingRight),s=e/this.options.ticks.fontSize+4,o=this.options.time.round?0:2;this.tickUnit="millisecond",this.tickRange=Math.ceil(this.lastTick.diff(this.firstTick,this.tickUnit,!0)+o),this.displayFormat=a.unit[this.tickUnit].display,i.each(a.units,function(t){this.tickRange<=s||(this.tickUnit=t,this.tickRange=Math.ceil(this.lastTick.diff(this.firstTick,this.tickUnit)+o),this.displayFormat=a.unit[t].display)},this)}this.firstTick.startOf(this.tickUnit),this.lastTick.endOf(this.tickUnit),this.smallestLabelSeparation=this.width,i.each(this.data.datasets,function(t,e){for(var i=1;i<this.labelMoments[e].length;i++)this.smallestLabelSeparation=Math.min(this.smallestLabelSeparation,this.labelMoments[e][i].diff(this.labelMoments[e][i-1],this.tickUnit,!0))},this),this.options.time.displayFormat&&(this.displayFormat=this.options.time.displayFormat);for(var n=0;n<=this.tickRange;++n)this.ticks.push(this.firstTick.clone().add(n,this.tickUnit))},getLabelForIndex:function(t,e){var i=this.data.labels&&t<this.data.labels.length?this.data.labels[t]:"";return"object"==typeof this.data.datasets[e].data[0]&&(i=this.getRightValue(this.data.datasets[e].data[t])),i},convertTicksToLabels:function(){this.ticks=this.ticks.map(function(t,e,i){var s=t.format(this.options.time.displayFormat?this.options.time.displayFormat:a.unit[this.tickUnit].display);return this.options.ticks.userCallback?this.options.ticks.userCallback(s,e,i):s},this)},getPixelForValue:function(t,e,i,a){var s=this.getLabelMoment(i,e),o=s.diff(this.firstTick,this.tickUnit,!0),n=o/this.tickRange;if(this.isHorizontal()){var r=this.width-(this.paddingLeft+this.paddingRight),h=(r/Math.max(this.ticks.length-1,1),r*n+this.paddingLeft);return this.left+Math.round(h)}var l=this.height-(this.paddingTop+this.paddingBottom),c=(l/Math.max(this.ticks.length-1,1),l*n+this.paddingTop);return this.top+Math.round(c)},parseTime:function(t){return"function"==typeof t.getMonth||"number"==typeof t?moment(t):t.isValid&&t.isValid()?t:"string"!=typeof this.options.time.format&&this.options.time.format.call?this.options.time.format(t):moment(t,this.options.time.format)}});e.scaleService.registerScaleType("time",o,s)}.call(this),/*!
 * Chart.js
 * http://chartjs.org/
 * Version: 2.0.0-beta
 *
 * Copyright 2015 Nick Downie
 * Released under the MIT license
 * https://github.com/nnnick/Chart.js/blob/master/LICENSE.md
 */
function(){"use strict";var t=this,e=t.Chart,i=e.helpers;e.defaults.global.elements.arc={backgroundColor:e.defaults.global.defaultColor,borderColor:"#fff",borderWidth:2},e.elements.Arc=e.Element.extend({inLabelRange:function(t){var e=this._view;return e?Math.pow(t-e.x,2)<Math.pow(e.radius+e.hoverRadius,2):!1},inRange:function(t,e){var a=this._view;if(a){var s=i.getAngleFromPoint(a,{x:t,y:e}),o=a.startAngle<-.5*Math.PI?a.startAngle+2*Math.PI:a.startAngle>1.5*Math.PI?a.startAngle-2*Math.PI:a.startAngle,n=a.endAngle<-.5*Math.PI?a.endAngle+2*Math.PI:a.endAngle>1.5*Math.PI?a.endAngle-2*Math.PI:a.endAngle,r=s.angle>=o&&s.angle<=n,h=s.distance>=a.innerRadius&&s.distance<=a.outerRadius;return r&&h}return!1},tooltipPosition:function(){var t=this._view,e=t.startAngle+(t.endAngle-t.startAngle)/2,i=(t.outerRadius-t.innerRadius)/2+t.innerRadius;return{x:t.x+Math.cos(e)*i,y:t.y+Math.sin(e)*i}},draw:function(){var t=this._chart.ctx,e=this._view;t.beginPath(),t.arc(e.x,e.y,e.outerRadius,e.startAngle,e.endAngle),t.arc(e.x,e.y,e.innerRadius,e.endAngle,e.startAngle,!0),t.closePath(),t.strokeStyle=e.borderColor,t.lineWidth=e.borderWidth,t.fillStyle=e.backgroundColor,t.fill(),t.lineJoin="bevel",e.borderWidth&&t.stroke()}})}.call(this),/*!
 * Chart.js
 * http://chartjs.org/
 * Version: 2.0.0-beta
 *
 * Copyright 2015 Nick Downie
 * Released under the MIT license
 * https://github.com/nnnick/Chart.js/blob/master/LICENSE.md
 */
function(){"use strict";var t=this,e=t.Chart,i=e.helpers;e.defaults.global.elements.line={tension:.4,backgroundColor:e.defaults.global.defaultColor,borderWidth:3,borderColor:e.defaults.global.defaultColor,borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",fill:!0},e.elements.Line=e.Element.extend({draw:function(){var t=this._view,a=this._chart.ctx,s=this._children[0],o=this._children[this._children.length-1];if(a.save(),i.each(this._children,function(e,s){var o=i.previousItem(this._children,s),n=i.nextItem(this._children,s);return s||a.moveTo(e._view.x,t.scaleZero),e._view.skip&&!this.loop?(a.lineTo(o._view.x,t.scaleZero),void a.moveTo(n._view.x,t.scaleZero)):o._view.skip?void a.lineTo(e._view.x,e._view.y):t.tension>0&&s?void a.bezierCurveTo(o._view.controlPointNextX,o._view.controlPointNextY,e._view.controlPointPreviousX,e._view.controlPointPreviousY,e._view.x,e._view.y):void a.lineTo(e._view.x,e._view.y)},this),this._loop){if(t.tension>0&&!s._view.skip)return void a.bezierCurveTo(o._view.controlPointNextX,o._view.controlPointNextY,s._view.controlPointPreviousX,s._view.controlPointPreviousY,s._view.x,s._view.y);a.lineTo(s._view.x,s._view.y)}if(this._children.length>0&&t.fill&&(a.lineTo(this._children[this._children.length-1]._view.x,t.scaleZero),a.lineTo(this._children[0]._view.x,t.scaleZero),a.fillStyle=t.backgroundColor||e.defaults.global.defaultColor,a.closePath(),a.fill()),a.lineCap=t.borderCapStyle||e.defaults.global.elements.line.borderCapStyle,a.setLineDash&&a.setLineDash(t.borderDash||e.defaults.global.elements.line.borderDash),a.lineDashOffset=t.borderDashOffset||e.defaults.global.elements.line.borderDashOffset,a.lineJoin=t.borderJoinStyle||e.defaults.global.elements.line.borderJoinStyle,a.lineWidth=t.borderWidth||e.defaults.global.elements.line.borderWidth,a.strokeStyle=t.borderColor||e.defaults.global.defaultColor,a.beginPath(),i.each(this._children,function(e,s){var o=i.previousItem(this._children,s),n=i.nextItem(this._children,s);return s||a.moveTo(e._view.x,t.scaleZero),e._view.skip&&!this.loop?void a.moveTo(n._view.x,t.scaleZero):o._view.skip?void a.moveTo(e._view.x,e._view.y):(s||a.moveTo(e._view.x,e._view.y),t.tension>0&&s?void a.bezierCurveTo(o._view.controlPointNextX,o._view.controlPointNextY,e._view.controlPointPreviousX,e._view.controlPointPreviousY,e._view.x,e._view.y):void a.lineTo(e._view.x,e._view.y))},this),this._loop&&!s._view.skip){if(t.tension>0)return void a.bezierCurveTo(o._view.controlPointNextX,o._view.controlPointNextY,s._view.controlPointPreviousX,s._view.controlPointPreviousY,s._view.x,s._view.y);a.lineTo(s._view.x,s._view.y)}a.stroke(),a.restore()}})}.call(this),/*!
 * Chart.js
 * http://chartjs.org/
 * Version: 2.0.0-beta
 *
 * Copyright 2015 Nick Downie
 * Released under the MIT license
 * https://github.com/nnnick/Chart.js/blob/master/LICENSE.md
 */
function(){"use strict";var t=this,e=t.Chart;e.helpers;e.defaults.global.elements.point={radius:3,backgroundColor:e.defaults.global.defaultColor,borderWidth:1,borderColor:e.defaults.global.defaultColor,hitRadius:1,hoverRadius:4,hoverBorderWidth:1},e.elements.Point=e.Element.extend({inRange:function(t,e){var i=this._view;if(i){var a=i.hitRadius+i.radius;return Math.pow(t-i.x,2)+Math.pow(e-i.y,2)<Math.pow(a,2)}return!1},inLabelRange:function(t){var e=this._view;return e?Math.pow(t-e.x,2)<Math.pow(e.radius+e.hitRadius,2):!1},tooltipPosition:function(){var t=this._view;return{x:t.x,y:t.y,padding:t.radius+t.borderWidth}},draw:function(){var t=this._view,i=this._chart.ctx;t.skip||(t.radius>0||t.borderWidth>0)&&(i.beginPath(),i.arc(t.x,t.y,t.radius||e.defaults.global.elements.point.radius,0,2*Math.PI),i.closePath(),i.strokeStyle=t.borderColor||e.defaults.global.defaultColor,i.lineWidth=t.borderWidth||e.defaults.global.elements.point.borderWidth,i.fillStyle=t.backgroundColor||e.defaults.global.defaultColor,i.fill(),i.stroke())}})}.call(this),function(){"use strict";var t=this,e=t.Chart;e.helpers;e.defaults.global.elements.rectangle={backgroundColor:e.defaults.global.defaultColor,borderWidth:0,borderColor:e.defaults.global.defaultColor},e.elements.Rectangle=e.Element.extend({draw:function(){var t=this._chart.ctx,e=this._view,i=e.width/2,a=e.x-i,s=e.x+i,o=e.base-(e.base-e.y),n=e.borderWidth/2;e.borderWidth&&(a+=n,s-=n,o+=n),t.beginPath(),t.fillStyle=e.backgroundColor,t.strokeStyle=e.borderColor,t.lineWidth=e.borderWidth,t.moveTo(a,e.base),t.lineTo(a,o),t.lineTo(s,o),t.lineTo(s,e.base),t.fill(),e.borderWidth&&t.stroke()},height:function(){var t=this._view;return t.base-t.y},inRange:function(t,e){var i=this._view,a=!1;return i&&(a=i.y<i.base?t>=i.x-i.width/2&&t<=i.x+i.width/2&&e>=i.y&&e<=i.base:t>=i.x-i.width/2&&t<=i.x+i.width/2&&e>=i.base&&e<=i.y),a},inLabelRange:function(t){var e=this._view;return e?t>=e.x-e.width/2&&t<=e.x+e.width/2:!1},tooltipPosition:function(){var t=this._view;return t.y<t.base?{x:t.x,y:t.y}:{x:t.x,y:t.base}}})}.call(this),function(){"use strict";var t=this,e=t.Chart;e.helpers;e.Bar=function(t,i){return i.type="bar",new e(t,i)}}.call(this),function(){"use strict";var t=this,e=t.Chart,i=e.helpers,a={hover:{mode:"single"},scales:{xAxes:[{type:"linear",position:"bottom",id:"x-axis-0"}],yAxes:[{type:"linear",position:"left",id:"y-axis-0"}]},tooltips:{template:"(<%= value.x %>, <%= value.y %>)",multiTemplate:"<%if (datasetLabel){%><%=datasetLabel%>: <%}%>(<%= value.x %>, <%= value.y %>)"}};e.Bubble=function(t,s){return s.options=i.configMerge(a,s.options),s.type="bubble",new e(t,s)}}.call(this),function(){"use strict";var t=this,e=t.Chart,i=e.helpers,a={aspectRatio:1,legendTemplate:'<ul class="<%=name.toLowerCase()%>-legend"><% for (var i = 0; i < data.datasets[0].data.length; i++){%><li><span style="background-color:<%=data.datasets[0].backgroundColor[i]%>"><%if(data.labels && i < data.labels.length){%><%=data.labels[i]%><%}%></span></li><%}%></ul>'};e.Doughnut=function(t,s){return s.options=i.configMerge(a,s.options),s.type="doughnut",new e(t,s)}}.call(this),function(){"use strict";var t=this,e=t.Chart;e.helpers;e.Line=function(t,i){return i.type="line",new e(t,i)}}.call(this),function(){"use strict";var t=this,e=t.Chart,i=e.helpers,a={aspectRatio:1,legendTemplate:'<ul class="<%=name.toLowerCase()%>-legend"><% for (var i = 0; i < data.datasets[0].data.length; i++){%><li><span style="background-color:<%=data.datasets[0].backgroundColor[i]%>"><%if(data.labels && i < data.labels.length){%><%=data.labels[i]%><%}%></span></li><%}%></ul>'};e.PolarArea=function(t,s){return s.options=i.configMerge(a,s.options),s.type="polarArea",new e(t,s)}}.call(this),function(){"use strict";var t=this,e=t.Chart,i=e.helpers,a={aspectRatio:1};e.Radar=function(t,s){return s.options=i.configMerge(a,s.options),s.type="radar",new e(t,s)}}.call(this),function(){"use strict";var t=this,e=t.Chart,i=e.helpers,a={hover:{mode:"single"},scales:{xAxes:[{type:"linear",position:"bottom",id:"x-axis-1"}],yAxes:[{type:"linear",position:"left",id:"y-axis-1"}]},tooltips:{template:"(<%= value.x %>, <%= value.y %>)",multiTemplate:"<%if (datasetLabel){%><%=datasetLabel%>: <%}%>(<%= value.x %>, <%= value.y %>)"}};e.Scatter=function(t,s){return s.options=i.configMerge(a,s.options),s.type="line",new e(t,s)}}.call(this);
//# sourceMappingURL=data:application/json;base64,
