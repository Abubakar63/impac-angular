#
# Component generated by Impac! Widget Generator!
#
module = angular.module('impac.components.widgets.legal-billable-per-customer', [])
module.controller('WidgetLegalBillablePerCustomerCtrl', ($scope, $q) ->

  w = $scope.widget

  # Define settings
  # --------------------------------------
  $scope.orgDeferred = $q.defer()

  settingsPromises = [
    $scope.orgDeferred.promise,
  ]

  BILLED_MIN = 1000
  BILLED_MAX = 5000

  EMPLOYEES_MIN = 1
  EMPLOYEES_MAX = 4
  EMPLOYEES = [
    { firstname: 'Rosalie', lastname: 'Morel', title: 'Partner' },
    { firstname: 'Pierrick', lastname: 'Lapointe', title: 'Associate' },
    { firstname: 'Georges', lastname: 'Renaud', title: 'Associate' },
    { firstname: 'Roger', lastname: 'Monette', title: 'Executive' },
    { firstname: 'Melisande', lastname: 'Fosse', title: 'Executive' },
    { firstname: 'Killian', lastname: 'Masson', title: 'Executive' },
    { firstname: 'Ruben', lastname: 'Girard', title: 'Clerc' },
    { firstname: 'Marcelle', lastname: 'Paget', title: 'Clerc' },
    { firstname: 'Rodolphe', lastname: 'Hebert', title: 'Clerc' },
    { firstname: 'Philomene', lastname: 'Abraham', title: 'Clerc' }
  ]

  SUPPLIERS_MIN = 0
  SUPPLIERS_MAX = 2
  SUPPLIERS = [
    { name: 'Mark & Johnson' },
    { name: 'Roberts Associates' },
    { name: 'CPG Private Consulting' },
    { name: 'Euro Lawyers - Intl. Right' },
    { name: 'Craig Daniels Corporate' }
  ]

  $scope.customers =
    list: [
      { id: 1, name: 'Sébastien Gabriel', display: false },
      { id: 2, name: 'Catherine Ethan', display: false },
      { id: 3, name: 'Justine Marie', display: false },
      { id: 4, name: 'Mathias Louis', display: false },
      { id: 5, name: 'Gautier Michaud', display: false },
      { id: 6, name: 'Joël Descoteaux', display: false },
      { id: 7, name: 'Judith Blaise', display: false },
      { id: 8, name: 'Gilberte Cousineau', display: false },
      { id: 9, name: 'Arlette Gagne', display: false },
      { id: 10, name: 'Daphné Plourde', display: false },
      { id: 11, name: 'Pénélope Salomon', display: false },
      { id: 12, name: 'Amédée Paul', display: false },
      { id: 13, name: 'Édouard Jordan', display: false },
      { id: 14, name: 'Geoffroy Richard', display: false }
    ]
  
  $scope.periods =
    list: [
      { value: 'MONTHLY', label: 'Month' },
      { value: 'QUARTERLY', label: 'Quarter' },
      { value: 'YEARLY', label: 'Year' }
    ]
    selected: 'MONTHLY'

  titleWeight = (title) ->
    switch title
      when 'Clerc'
        1
      when 'Executive'
        2
      when 'Associate'
        3
      when 'Partner'
        5

  periodWeight = (period) ->
    switch period
      when 'MONTHLY'
        1
      when 'QUARTERLY'
        # Random between 2 and 4 to avoid having always quarterly = 3 * monthly
        Math.random() * 2 + 2
      when 'YEARLY'
        # Random between 10 and 14 to avoid having always yearly = 12 * monthly
        Math.random() * 4 + 10

  # Weight the base depending on title and period
  weightedBilled = (base, title, period) ->
    weight1 = titleWeight(title)
    weight2 = periodWeight(period)
    base * weight1 * weight2

  generateEmployees = ->
    nbEmployees = Math.round(Math.random() * (EMPLOYEES_MAX - EMPLOYEES_MIN) + EMPLOYEES_MIN)
    employeesBase = _.slice(_.shuffle(EMPLOYEES), 0, nbEmployees)
    _.map(employeesBase, (e) ->
      employee = angular.copy(e)
      baseBilled = Math.random() * (BILLED_MAX - BILLED_MIN) + BILLED_MIN
      angular.merge(employee, {
        billed:
          MONTHLY: weightedBilled(baseBilled, employee.title, 'MONTHLY')
          QUARTERLY: weightedBilled(baseBilled, employee.title, 'QUARTERLY')
          YEARLY: weightedBilled(baseBilled, employee.title, 'YEARLY')
      })
    )

  generateSuppliers = ->
    nbSuppliers = Math.round(Math.random() * (SUPPLIERS_MAX - SUPPLIERS_MIN) + SUPPLIERS_MIN)
    suppliersBase = _.slice(_.shuffle(SUPPLIERS), 0, nbSuppliers)
    _.map(suppliersBase, (s) ->
      supplier = angular.copy(s)
      baseBilled = Math.random() * (BILLED_MAX - BILLED_MIN) + BILLED_MIN
      angular.merge(supplier, {
        billed:
          MONTHLY: weightedBilled(baseBilled, 'Clerc', 'MONTHLY')
          QUARTERLY: weightedBilled(baseBilled, 'Clerc', 'QUARTERLY')
          YEARLY: weightedBilled(baseBilled, 'Clerc', 'YEARLY')
      })
    )

  calculateTotals = (employees, suppliers) ->
    {
      MONTHLY: _.sum(employees, (e) -> e.billed['MONTHLY']) + _.sum(suppliers, (s) -> s.billed['MONTHLY'])
      QUARTERLY: _.sum(employees, (e) -> e.billed['QUARTERLY']) + _.sum(suppliers, (s) -> s.billed['QUARTERLY'])
      YEARLY: _.sum(employees, (e) -> e.billed['YEARLY']) + _.sum(suppliers, (s) -> s.billed['YEARLY'])
    }

  # Generate list of employees for each customer
  prepareEmployees = (customers) ->
    for customer in customers
      customer.employees = generateEmployees()
      customer.suppliers = generateSuppliers()
      customer.billed = calculateTotals(customer.employees, customer.suppliers)

  $scope.toggleCustomer = (customer) ->
    for c in $scope.customers.list
      if c.id == customer.id
        c.display = !c.display
        $scope.customers.selected = (if c.display then customer else null)
      else
        c.display = false

  # Widget specific methods
  # --------------------------------------
  w.initContext = ->
    prepareEmployees($scope.customers.list)
    $scope.isDataFound = true

  # Widget is ready: can trigger the "wait for settings to be ready"
  # --------------------------------------
  $scope.widgetDeferred.resolve(settingsPromises)
)
module.directive('widgetLegalBillablePerCustomer', ->
  return {
    restrict: 'A',
    controller: 'WidgetLegalBillablePerCustomerCtrl'
  }
)
