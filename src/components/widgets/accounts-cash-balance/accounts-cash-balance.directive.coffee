#
# Component generated by Impac! Widget Generator!
# TODO:
# - today and beyond marker, indicating cash projection
# - colour shades by account sub-type (don't spend too much time on this one / not that important)
# - check if a different chart can be used for better time period selection
#
module = angular.module('impac.components.widgets.accounts-cash-balance', [])
module.controller('WidgetAccountsCashBalanceCtrl', ($scope, $q, $timeout, $filter, ImpacTheming) ->

  w = $scope.widget

  # Define settings
  # --------------------------------------
  $scope.orgDeferred = $q.defer()
  $scope.timePeriodDeferred = $q.defer()

  settingsPromises = [
    $scope.orgDeferred.promise,
    $scope.timePeriodDeferred.promise
  ]

  # Widget specific methods
  # --------------------------------------
  w.initContext = ->
    if $scope.isDataFound = w.content?

      $scope.groupedTable = w.content.grouped_table

      chartColors = ImpacTheming.get().chartColors.array

      # Set account colors by group sub-type
      setSeriesColors(chartColors)

      # Custom settings for the 'totals' serie.
      totals_serie = _.find(w.content.chart.series, (serie)-> serie.type == 'area')
      # TODO: add configurable in theming svc
      totals_serie.color = '#7badfc'

      # Wait for the next digest cycle to ensure the chart parent (.data-container) is shown.
      $timeout(->
        $scope.chart = buildChart(w.content.chart)
      )

  $scope.legendItemOnClick = (account)->
    serie = $scope.chart && getSerieByAccount($scope.chart.series, account)
    return unless serie
    visibility = if serie.visible then false else true
    serie.setVisible(visibility)

  $scope.getLegendItemIcon = (account)->
    serie = $scope.chart && getSerieByAccount($scope.chart.series, account)
    return 'fa-check-square-o' unless serie
    if serie.visible then 'fa-check-square-o' else 'fa-square-o'

  $scope.getLegendItemColor = (account)->
    serie = $scope.chart && getSerieByAccount($scope.chart.series, account)
    return '#000' unless serie
    serie.color

  # Private
  # ----

  getPeriod = ->
    w.metadata? && w.metadata.hist_parameters? && w.metadata.hist_parameters.period

  getSerieByAccount = (series, account)->
    _.find(series, (serie)-> (serie.uid || serie.options && serie.options.uid) == account.uid)

  # TODO: Test with more accounts & add color shade variations for group accounts.
  setSeriesColors = (chartColors) ->
    counter = 0
    for group in $scope.groupedTable.groups
      counter = 0 if counter >= (chartColors.length - 1)
      groupColor = chartColors[counter++]
      for account in group
        serie = getSerieByAccount(w.content.chart.series, account)
        serie.color = groupColor

  buildChart = (data, onRender)->
    options =
      chart:
        type: 'line'
        zoomType: 'x'
      title: null
      credits:
        enabled: false
      legend:
        enabled: false
      scrollbar:
        enabled: true
      plotOptions:
        series:
          fillOpacity: '0.3'
      xAxis:
        startOnTick: false
        minPadding: 0
        tickInterval: 1
        labels:
          style: textOverflow: 'none'
          formatter: ()->
            $filter('mnoDate')(data.labels[this.value], getPeriod())
      yAxis:
        startOnTick: true
        minPadding: 0
        title: null
        labels:
          formatter: ()->
            $filter('mnoCurrency')(this.value, w.metadata.currency, false, 0)
      series: data.series

    Highcharts.chart('cashBalanceChart', options, onRender)


  # Widget is ready: can trigger the "wait for settings to be ready"
  # --------------------------------------
  $scope.widgetDeferred.resolve(settingsPromises)
)
module.directive('widgetAccountsCashBalance', ->
  return {
    restrict: 'A',
    controller: 'WidgetAccountsCashBalanceCtrl'
  }
)
